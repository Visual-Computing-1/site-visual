{"version":3,"file":"component---src-templates-solution-template-tsx-3cb08d23bb810fb4a170.js","mappings":"yPAUe,SAASA,EAASC,GAC/B,MAA6CA,EAAMC,KAA3CC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,eAAgBC,EAA7B,EAA6BA,YACrBC,EAASH,EAATG,KAEFC,EACJH,EAAeI,MACZC,QAAO,SAAAC,GAAC,QAAMA,EAAEC,KAAKC,UACrBC,KAAI,SAAAH,GAAC,OAAIA,EAAEC,KAAKC,OAAOE,eAGtBC,EAAeC,EAAAA,SAAc,WACjC,OAAO,IAAIC,EAAAA,EACTd,EAAIW,YAAYI,GAChBf,EAAIW,YAAYK,OACbhB,EAAIW,YAAYK,OAHd,MAG0BhB,EAAIW,YAAYM,MAC/CjB,EAAIW,YAAYO,OAChBlB,EAAImB,IACJnB,EAAIoB,OAAOC,gBAEZrB,GAEGsB,EAAU,CACdC,IAAKrB,EAAYqB,IACjBC,SAAUtB,EAAYsB,UAGxB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEP,MAAK,cAAgBjB,EAAIW,YAAYM,MAAhC,KAA0CjB,EAAIW,YAAYK,OAA1D,MAGP,gBAAC,IAAD,KACE,gBAAC,aAAD,CACES,MAAO,CAAErB,uBAAAA,EAAwBkB,QAAAA,IAEjC,gBAAC,IAAD,CAAgBV,aAAcA,GAC5B,uBAAKc,UAAU,QACb,gBAAC,IAAD,CAAUvB,KAAMA","sources":["webpack://usaco-guide/./src/templates/solutionTemplate.tsx"],"sourcesContent":["import { graphql } from 'gatsby';\r\nimport * as React from 'react';\r\nimport Layout from '../components/layout';\r\nimport Markdown from '../components/markdown/Markdown';\r\nimport MarkdownLayout from '../components/MarkdownLayout/MarkdownLayout';\r\nimport SEO from '../components/seo';\r\nimport { ConfettiProvider } from '../context/ConfettiContext';\r\nimport { ProblemSolutionContext } from '../context/ProblemSolutionContext';\r\nimport { SolutionInfo } from '../models/solution';\r\n\r\nexport default function Template(props) {\r\n  const { xdm, allProblemInfo, problemInfo } = props.data;\r\n  const { body } = xdm;\r\n\r\n  const modulesThatHaveProblem: [{ id: string; title: string }] =\r\n    allProblemInfo.edges\r\n      .filter(x => !!x.node.module)\r\n      .map(x => x.node.module.frontmatter);\r\n  // Above: We need to filter to make sure x.node.module is defined because problems listed under extraProblems.json don't have a corresponding module\r\n\r\n  const markdownData = React.useMemo(() => {\r\n    return new SolutionInfo(\r\n      xdm.frontmatter.id,\r\n      xdm.frontmatter.source,\r\n      `${xdm.frontmatter.source} - ${xdm.frontmatter.title}`,\r\n      xdm.frontmatter.author,\r\n      xdm.toc,\r\n      xdm.parent.relativePath\r\n    );\r\n  }, xdm);\r\n\r\n  const problem = {\r\n    url: problemInfo.url,\r\n    uniqueId: problemInfo.uniqueId,\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title={`Solution - ${xdm.frontmatter.title} (${xdm.frontmatter.source})`}\r\n      />\r\n\r\n      <ConfettiProvider>\r\n        <ProblemSolutionContext.Provider\r\n          value={{ modulesThatHaveProblem, problem }}\r\n        >\r\n          <MarkdownLayout markdownData={markdownData}>\r\n            <div className=\"py-4\">\r\n              <Markdown body={body} />\r\n            </div>\r\n          </MarkdownLayout>\r\n        </ProblemSolutionContext.Provider>\r\n      </ConfettiProvider>\r\n      {/*<p className=\"text-base text-center leading-6 text-blue-600 font-semibold tracking-wide uppercase\">*/}\r\n      {/*  Problem Solution*/}\r\n      {/*</p>*/}\r\n      {/*<div className=\"mt-2 mb-6\">*/}\r\n      {/*  <h1 className=\"mb-2 text-3xl text-center leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl sm:leading-10\">*/}\r\n      {/*    {xdm.frontmatter.title}*/}\r\n      {/*  </h1>*/}\r\n      {/*  {xdm.frontmatter.author ? (*/}\r\n      {/*    <p className=\"text-gray-500 text-center mb-2\">*/}\r\n      {/*      Author{xdm.frontmatter.author.indexOf(',') !== -1 ? 's' : ''}:{' '}*/}\r\n      {/*      {xdm.frontmatter.author}*/}\r\n      {/*    </p>*/}\r\n      {/*  ) : null}*/}\r\n      {/*</div>*/}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query ($id: String!) {\r\n    xdm(frontmatter: { id: { eq: $id } }) {\r\n      body\r\n      frontmatter {\r\n        id\r\n        source\r\n        title\r\n        author\r\n      }\r\n      parent {\r\n        ... on File {\r\n          name\r\n          relativePath\r\n        }\r\n      }\r\n      toc {\r\n        cpp {\r\n          depth\r\n          value\r\n          slug\r\n        }\r\n        java {\r\n          depth\r\n          value\r\n          slug\r\n        }\r\n        py {\r\n          depth\r\n          value\r\n          slug\r\n        }\r\n      }\r\n    }\r\n    allProblemInfo: allProblemInfo(filter: { uniqueId: { eq: $id } }) {\r\n      edges {\r\n        node {\r\n          module {\r\n            frontmatter {\r\n              id\r\n              title\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    problemInfo: problemInfo(uniqueId: { eq: $id }) {\r\n      uniqueId\r\n      url\r\n    }\r\n  }\r\n`;\r\n"],"names":["Template","props","data","xdm","allProblemInfo","problemInfo","body","modulesThatHaveProblem","edges","filter","x","node","module","map","frontmatter","markdownData","React","SolutionInfo","id","source","title","author","toc","parent","relativePath","problem","url","uniqueId","value","className"],"sourceRoot":""}