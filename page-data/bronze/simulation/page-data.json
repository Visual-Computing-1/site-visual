{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/bronze/simulation",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"simulation\", title = \"Simulation\", author = \"Darren Yao\", contributors = \"Allen Li, Siyong Huang\", description = \"Directly simulating the problem statement, which many Bronze problems allow you to do.\", frequency = 4;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Asterisk: _missingComponent(\"Asterisk\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {Resources, Resource, Asterisk, HeaderLink, FocusProblem, Spoiler, LanguageSection, CPPSection, JavaSection, PySection, MATHSPAN, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"IUSACO\",\n        title: \"5 - Simulation\",\n        children: _jsx(_components.p, {\n          children: \"This module is based on Chapter 5 of Darren Yao's book\"\n        })\n      })\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since there's no formal algorithm involved, the intent of the problem is to\\r\\nassess competence with one's programming language of choice and knowledge of\\r\\nbuilt-in data structures. At least in USACO Bronze, when a problem statement\\r\\nsays to find the end result of some process, or to find when something occurs,\\r\\nit's usually sufficient to simulate the process naively\", _jsx(Asterisk, {\n        children: \"In competitive\\r\\nprogramming, \\\"naive\\\" refers to solutions that are most intuitive or direct, and\\r\\nthe word doesn't carry its normal negative connotation. In fact, a naive\\r\\nsolution may not be the easiest to implement!\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"example-1\",\n      children: [_jsx(_components.a, {\n        href: \"#example-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example 1\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"example\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsx(_components.p, {\n        children: \"We can simulate the process. Store an array that keeps track of which shell is\\r\\nat which location, and Bessie's swapping can be simulated by swapping elements\\r\\nin the array. Then, we can count how many times Elsie guesses each shell, and\\r\\nthe maximum points she can earn is the maximum amount of times a shell is\\r\\nguessed.\"\n      }), _jsxs(LanguageSection, {\n        children: [_jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <cstdio>\\r\\n#include <algorithm>\\r\\n\\r\\nint N, shell_at_position[3], counter[3];\\r\\n/*\\r\\nN stores the number of operations (as described in the problem statement)\\r\\nshell_at_position[i] stores the label of the shell located at position i\\r\\ncounter[i] stores the number of times the shell with label i was picked\\r\\n*/\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tfreopen(\\\"shell.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"shell.out\\\", \\\"w\\\", stdout);\\r\\n\\tscanf(\\\"%d\\\", &N);\\r\\n\\tfor(int i=0;i<3;++i)\\r\\n\\t\\tshell_at_position[i]=i; // We arbitrarily place the shells down (In this case, I happen to be putting the shell with label i at position i)\\r\\n\\tfor(int i=0;i<N;++i)\\r\\n\\t{\\r\\n\\t\\tint a,b,g;\\r\\n\\t\\tscanf(\\\"%d%d%d\\\", &a, &b, &g);\\r\\n\\t\\t--a, --b, --g; // Zero indexing: offset all positions by 1\\r\\n\\t\\tstd::swap(shell_at_position[a], shell_at_position[b]); // Perform Bessie's swapping operation\\r\\n\\t\\t++counter[shell_at_position[g]]; // Count the number of times Elsie guesses each particular shell\\r\\n\\t}\\r\\n\\tprintf(\\\"%d\\\\n\\\", std::max({counter[0], counter[1], counter[2]}));\\r\\n\\treturn 0;\\r\\n}\\r\\n\\n\"\n            })\n          })\n        }), _jsx(JavaSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Shell {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"shell\\\");\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * N stores the number of operations (as described in problem)\\r\\n\\t\\t * shellAtPosition[i] stores the label of the shell at position i\\r\\n\\t\\t * counter[i] stores the number of times the shell i was picked\\r\\n\\t\\t */\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tint[] shellAtPosition = new int[3];\\r\\n\\t\\tint[] counter = new int[3];\\r\\n\\r\\n\\t\\t// Arbitrarily place the shells down\\r\\n\\t\\t// Here, we happen to be putting the shell with label i at position i\\r\\n\\t\\tfor (int i = 0; i < 3; i++) {\\r\\n\\t\\t\\tshellAtPosition[i] = i;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\t// Zero indexing: offset all positions by 1\\r\\n\\t\\t\\tint a = io.nextInt() - 1;\\r\\n\\t\\t\\tint b = io.nextInt() - 1;\\r\\n\\t\\t\\tint g = io.nextInt() - 1;\\r\\n\\r\\n\\t\\t\\t// Perform Bessie's swapping operation\\r\\n\\t\\t\\tint t = shellAtPosition[b];\\r\\n\\t\\t\\tshellAtPosition[b] = shellAtPosition[a];\\r\\n\\t\\t\\tshellAtPosition[a] = t;\\r\\n\\r\\n\\t\\t\\t// Count the number of times Elsie guesses each particular shell\\r\\n\\t\\t\\tcounter[shellAtPosition[g]]++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(Math.max(counter[0], Math.max(counter[1], counter[2])));\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n            })\n          })\n        }), _jsx(PySection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-py\",\n              children: \"import sys\\r\\n\\r\\nsys.stdin = open(\\\"shell.in\\\", \\\"r\\\")\\r\\nsys.stdout = open(\\\"shell.out\\\", \\\"w\\\")\\r\\n\\r\\nN = int(input())\\r\\nshell_at_position=[0, 1, 2]\\r\\ncounter=[0, 0, 0]\\r\\n\\r\\n\\\"\\\"\\\"\\r\\nN stores the number of operations (as described in the problem statement)\\r\\nshell_at_position[i] stores the label of the shell located at position i\\r\\ncounter[i] stores the number of times the shell with label i was picked\\r\\n\\\"\\\"\\\"\\r\\n\\r\\nfor i in range(N):\\r\\n\\ta, b, g = map(int, input().split())\\r\\n\\t# -1 because we are zero-indexing\\r\\n\\tshell_at_position[a - 1], shell_at_position[b - 1] = shell_at_position[b - 1], shell_at_position[a - 1] # Perform Bessie's swapping operation\\r\\n\\tcounter[shell_at_position[g - 1]] += 1 # Count the number of times Elsie guesses each particular shell\\r\\nprint(max(counter))\\n\"\n            })\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"example-2\",\n      children: [_jsx(_components.a, {\n        href: \"#example-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example 2\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"example2\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution-1\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsxs(_components.p, {\n        children: [\"We can simulate the process of pouring buckets. The amount of milk poured from\\r\\nbucket \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" to bucket \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n        }), \" is the smaller of the amount of milk in bucket \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \"\\r\\n(which is \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"m_i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>m</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">m_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \") and the remaining space in bucket \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n        }), \" (which is \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c_j - m_j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>j</mi></msub><mo>−</mo><msub><mi>m</mi><mi>j</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_j - m_j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8694em;vertical-align:-0.2861em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7167em;vertical-align:-0.2861em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \").\\r\\nWe can just handle all of these operations in order, using an array \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n        }), \" to store\\r\\nthe maximum capacities of each bucket, and an array \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"m\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\\\"application/x-tex\\\">m</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span></span></span></span>\"\n        }), \" to store the current\\r\\nmilk level in each bucket, which we update during the process. Example code is\\r\\nbelow.\"]\n      }), _jsxs(LanguageSection, {\n        children: [_jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <cstdio>\\r\\n#include <algorithm>\\r\\n\\r\\nconst int N = 3;\\r\\nint capacity[N], milk[N];\\r\\n/*\\r\\nN is the number of buckets (which happens to be a constant value of 3)\\r\\ncapacity[i] is the maximum capacity of bucket i\\r\\nmilk[i] is the current amount of milk in bucket i\\r\\n*/\\r\\n\\r\\nvoid pour(int i, int j)\\r\\n{\\r\\n\\tint amt=std::min(milk[i], capacity[j]-milk[j]);\\r\\n\\t// Amount of milk to pour is the minimum of the remaining milk in bucket i \\r\\n\\t// and the available capacity in bucket j\\r\\n\\tmilk[i] -= amt;\\r\\n\\tmilk[j] += amt;\\r\\n}\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tfreopen(\\\"mixmilk.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"mixmilk.out\\\", \\\"w\\\", stdout);\\r\\n\\tfor(int i=0;i<N;++i)\\r\\n\\t\\tscanf(\\\"%d%d\\\", capacity+i, milk+i);\\r\\n\\tfor(int i=0;i<100;++i)\\r\\n\\t\\tpour(i%N, (i+1)%N); // Pour milk from one bucket to the next\\r\\n\\tfor(int i=0;i<N;++i)\\r\\n\\t\\tprintf(\\\"%d\\\\n\\\", milk[i]);\\r\\n\\treturn 0;\\r\\n}\\n\"\n            })\n          })\n        }), _jsx(JavaSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class MixMilk {\\r\\n\\t/*\\r\\n\\t * N is the number of buckets (which is 3)\\r\\n\\t * capacity[i] is the maximum capacity of bucket i\\r\\n\\t * milk[i] is the current amount of milk in bucket i\\r\\n\\t */\\r\\n\\tstatic int N = 3;\\r\\n\\tstatic int[] capacity = new int[N];\\r\\n\\tstatic int[] milk = new int[N];\\r\\n\\r\\n\\tpublic static void pour(int i, int j) {\\r\\n\\t\\t// Amount of milk to pour is the minimum of remaining milk in bucket i\\r\\n\\t\\t// and the available capacity in bucket j\\r\\n\\t\\tint amount = Math.min(milk[i], capacity[j] - milk[j]);\\r\\n\\t\\tmilk[i] -= amount;\\r\\n\\t\\tmilk[j] += amount;\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"mixmilk\\\");\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tcapacity[i] = io.nextInt();\\r\\n\\t\\t\\tmilk[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Simulate all 100 pour operations, where we pour milk from one bucket\\r\\n\\t\\t// to the next\\r\\n\\t\\tfor (int i = 0; i < 100; i++) {\\r\\n\\t\\t\\tpour(i % N, (i + 1) % N);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tio.println(milk[i]);\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n            })\n          })\n        }), _jsx(PySection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-py\",\n              children: \"import sys\\r\\nsys.stdin = open(\\\"mixmilk.in\\\", \\\"r\\\")\\r\\nsys.stdout = open(\\\"mixmilk.out\\\", \\\"w\\\")\\r\\n\\r\\nN=3\\r\\ncapacity=[0]*N\\r\\nmilk=[0]*N\\r\\n\\\"\\\"\\\"\\r\\nN is the number of buckets (which happens to be a constant value of 3)\\r\\ncapacity[i] is the maximum capacity of bucket i\\r\\nmilk[i] is the current amount of milk in bucket i\\r\\n\\\"\\\"\\\"\\r\\n\\r\\ndef pour(i, j):\\r\\n\\tamt = min(milk[i], capacity[j]-milk[j])\\r\\n\\t# Amount of milk to pour is the minimum of the remaining milk in bucket i\\r\\n\\t# and the available capacity in bucket j\\r\\n\\tmilk[i] -= amt\\r\\n\\tmilk[j] += amt\\r\\nfor i in range(N):\\r\\n\\tcapacity[i],milk[i]=map(int, input().split())\\r\\nfor i in range(100):\\r\\n\\tpour(i%N, (i+1)%N) # Pour milk from one bucket to the next\\r\\nfor i in range(N):\\r\\n\\tprint(milk[i])\\n\"\n            })\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"easier\",\n      children: [_jsx(_components.a, {\n        href: \"#easier\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Easier\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"easier\",\n      hideSuggestProblemButton: true\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"harder\",\n      children: [_jsx(_components.a, {\n        href: \"#harder\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Harder\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"harder\",\n      hideSuggestProblemButton: true\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Simulation","author":"Darren Yao","contributors":"Allen Li, Siyong Huang","id":"simulation","prerequisites":null,"description":"Directly simulating the problem statement, which many Bronze problems allow you to do.","frequency":4},"parent":{"name":"Simulation","relativePath":"2_Bronze/Simulation.mdx"},"fields":{"division":"bronze"},"toc":{"cpp":[{"depth":2,"value":"Example 1","slug":"example-1"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Example 2","slug":"example-2"},{"depth":3,"value":"Solution","slug":"solution-1"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"Easier","slug":"easier"},{"depth":3,"value":"Harder","slug":"harder"}],"java":[{"depth":2,"value":"Example 1","slug":"example-1"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Example 2","slug":"example-2"},{"depth":3,"value":"Solution","slug":"solution-1"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"Easier","slug":"easier"},{"depth":3,"value":"Harder","slug":"harder"}],"py":[{"depth":2,"value":"Example 1","slug":"example-1"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Example 2","slug":"example-2"},{"depth":3,"value":"Solution","slug":"solution-1"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"Easier","slug":"easier"},{"depth":3,"value":"Harder","slug":"harder"}]}},"moduleProblemLists":{"problemLists":[{"listId":"example","problems":[{"uniqueId":"usaco-891","name":"Shell Game","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=891","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Simulation"],"solution":{"kind":"link","label":"In Module","labelTooltip":null,"url":"https://usaco.guide/bronze/simulation#problem-usaco-891","sketch":null}}]},{"listId":"example2","problems":[{"uniqueId":"usaco-855","name":"Mixing Milk","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=855","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Simulation"],"solution":{"kind":"link","label":"In Module","labelTooltip":null,"url":"https://usaco.guide/bronze/simulation#problem-usaco-855","sketch":null}}]},{"listId":"easier","problems":[{"uniqueId":"usaco-665","name":"The Cow-Signal","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=665","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-568","name":"Speeding","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=568","source":"Bronze","difficulty":"Easy","isStarred":true,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-735","name":"The Lost Cow","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=735","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-760","name":"The Bovine Shuffle","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=760","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-856","name":"The Bucket List","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=856","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"harder","problems":[{"uniqueId":"usaco-917","name":"Measuring Traffic","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=917","source":"Bronze","difficulty":"Normal","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-616","name":"Circular Barn","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=616","source":"Bronze","difficulty":"Normal","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-664","name":"Block Game","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=664","source":"Bronze","difficulty":"Normal","isStarred":true,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-831","name":"Team Tic Tac Toe","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=831","source":"Bronze","difficulty":"Normal","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-593","name":"Mowing the Field","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=593","source":"Bronze","difficulty":"Normal","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-526","name":"Censoring","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=526","source":"Old Bronze","difficulty":"Hard","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-761","name":"Milk Measurement","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=761","source":"Bronze","difficulty":"Hard","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-1061","name":"Stuck in a Rut","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1061","source":"Bronze","difficulty":"Very Hard","isStarred":false,"tags":["Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"simulation"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}