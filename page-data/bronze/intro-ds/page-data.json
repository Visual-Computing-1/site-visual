{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/bronze/intro-ds",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*Usually, the choice between a static array and a dynamic array is just personal preference.*/\n/*END C++ SECTION ON ARRAYS*/\n/*BEGIN JAVA SECTION ON ARRAYS*/\n/*END JAVA SECTION ON ARRAYS*/\n/*BEGIN PYTHON SECTION ON ARRAYS*/\n/*END PYTHON SECTION ON ARRAYS*/\n/*END SECTION ON ARRAYS*/\n/*This is not frequently used by competitive programmers, but it is good to know and can help simplify things sometimes.*/\n/*Python automatically sorts a list of tuples by the first element, then the second, and so on. This can save you time and keystrokes for certain problems like the one above.\n*/\n/*Unless someone has any. I really can't find anything...*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"intro-ds\", title = \"Introduction to Data Structures\", author = \"Darren Yao, Benjamin Qi, Allen Li, Neo Wang\", contributors = \"Nathan Wang, Abutalib Namazov\", description = \"Introduces the concept of a data structure, (dynamic) arrays, pairs, tuples.\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    ol: \"ol\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Warning: _missingComponent(\"Warning\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Optional: _missingComponent(\"Optional\"),\n    Quiz: _missingComponent(\"Quiz\")\n  }, _props.components), {HeaderLink, LanguageSection, CPPSection, JavaSection, PySection, Warning, Resources, Resource, MATHSPAN, Optional, Quiz, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"data-structures\",\n      children: [_jsx(_components.a, {\n        href: \"#data-structures\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Data Structures\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.strong, {\n        children: \"data structure\"\n      }), \" determines how data is organized so that information can be\\r\\nused efficiently. Each data structure supports some operations efficiently,\\r\\nwhile other operations are either inefficient or not supported at all. Since\\r\\ndifferent operations are supported by each data structure, you should carefully\\r\\nevaluate which data structure will work best for your particular problem.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"The C++\\r\\n\", _jsx(_components.a, {\n            href: \"http://www.cplusplus.com/reference/stl/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"standard library data structures\"\n          }), \" are\\r\\ndesigned to store any type of data. We put the desired data type within the \", _jsx(_components.code, {\n            children: \"<>\"\n          }), \"\\r\\nbrackets when declaring the data structure, as follows:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"vector<string> v;\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"This creates a \", _jsx(_components.code, {\n            children: \"vector\"\n          }), \" structure that only stores objects of type \", _jsx(_components.code, {\n            children: \"string\"\n          }), \".\"]\n        }), _jsxs(_components.p, {\n          children: [\"For our examples below, we will primarily use the \", _jsx(_components.code, {\n            children: \"int\"\n          }), \" data type, but note that\\r\\nyou can use any data type including \", _jsx(_components.code, {\n            children: \"string\"\n          }), \" and user-defined structures.\"]\n        }), _jsxs(_components.p, {\n          children: [\"Nearly every standard library data structure supports the \", _jsx(_components.code, {\n            children: \"size()\"\n          }), \" method, which\\r\\nreturns the number of elements in the data structure, and the \", _jsx(_components.code, {\n            children: \"empty()\"\n          }), \" method,\\r\\nwhich returns \", _jsx(_components.code, {\n            children: \"true\"\n          }), \" if the data structure is empty, and \", _jsx(_components.code, {\n            children: \"false\"\n          }), \" otherwise.\"]\n        })]\n      }), _jsx(JavaSection, {}), _jsx(PySection, {})]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"arrays\",\n          children: [_jsx(_components.a, {\n            href: \"#arrays\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Arrays\"]\n        }), _jsx(Warning, {\n          children: _jsx(_components.p, {\n            children: \"One can solve all Bronze problems without using anything from this module aside\\r\\nfrom arrays. The rest of this module isn't strictly necessary for Bronze\\r\\n(although it is highly recommended).\"\n          })\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"LCPP\",\n            url: \"https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdarray/\",\n            title: \"9.22 - Intro to std::array\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"You already know one of the simplest data structures: the \", _jsx(_components.strong, {\n            children: \"array\"\n          }), \"! In C++11,\\r\\nin addition to \", _jsx(_components.em, {\n            children: \"normal arrays\"\n          }), \", there exists an\\r\\n\", _jsxs(_components.a, {\n            href: \"http://www.cplusplus.com/reference/array/array/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: [_jsx(_components.code, {\n              children: \"array\"\n            }), \" class\"]\n          }), \" in the STL. For\\r\\nexample, an \", _jsx(_components.code, {\n            children: \"array\"\n          }), \" of 25 \", _jsx(_components.code, {\n            children: \"int\"\n          }), \"s can be initialized using the following line of\\r\\ncode:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"array<int, 25> arr;\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"The array class supports the normal STL operations (such as \", _jsx(_components.code, {\n            children: \".empty()\"\n          }), \" or\\r\\n\", _jsx(_components.code, {\n            children: \".size()\"\n          }), \") as well as the normal square-bracket access operator:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"arr[5] // accesses the element at the 5th index\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"In C++, arrays initialized locally using either the default syntax (i.e.\\r\\n\", _jsx(_components.code, {\n            children: \"int arr[25];\"\n          }), \" ) or the array class are initialized to random numbers because\\r\\nC++ doesn't have built-in memory management. In order to initialize an array to\\r\\nzero, you have several options:\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Use a for loop (or nested for loops).\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Declare the array globally.\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Declare the array with an empty initializer list (i.e. \", _jsx(_components.code, {\n              children: \"int arr[25]{};\"\n            }), \" ) as\\r\\nmentioned \", _jsx(_components.a, {\n              href: \"https://www.learncpp.com/cpp-tutorial/arrays-part-ii/\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"here\"\n            }), \".\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Use a built-in function such as\\r\\n\", _jsx(_components.a, {\n              href: \"http://www.cplusplus.com/reference/algorithm/fill_n/\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: _jsx(_components.code, {\n                children: \"std::fill_n(arr, 25, 0)\"\n              })\n            }), \"\\r\\nor\\r\\n\", _jsx(_components.a, {\n              href: \"http://www.cplusplus.com/reference/algorithm/fill/\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: _jsx(_components.code, {\n                children: \"std::fill(arr, arr+25, 0)\"\n              })\n            }), \".\"]\n          }), \"\\n\"]\n        }), _jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [_jsx(_components.a, {\n              href: \"http://www.cplusplus.com/reference/cstring/memset/\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: _jsx(_components.code, {\n                children: \"memset(arr, 0, sizeof arr)\"\n              })\n            }), \"\\r\\nwill also zero-initialize an array. However, it's important to note that\\r\\n\", _jsx(_components.code, {\n              children: \"memset\"\n            }), \" treats the value that is passed to it as an \", _jsx(_components.code, {\n              children: \"unsigned char\"\n            }), \". So for an\\r\\narray of 32-bit integers, \", _jsx(_components.code, {\n              children: \"memset(arr, -1, sizeof arr)\"\n            }), \" will set each element to\\r\\n\", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"-1\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\">1</span></span></span></span>\"\n            }), \", as you might expect. On the other hand, \", _jsx(_components.code, {\n              children: \"memset(arr, 1, sizeof arr)\"\n            }), \" will\\r\\nset each element to \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"1+2^8+2^{16}+2^{24}=16843009\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>+</mo><msup><mn>2</mn><mn>8</mn></msup><mo>+</mo><msup><mn>2</mn><mn>16</mn></msup><mo>+</mo><msup><mn>2</mn><mn>24</mn></msup><mo>=</mo><mn>16843009</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1+2^8+2^{16}+2^{24}=16843009</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">8</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">16</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">24</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">16843009</span></span></span></span>\"\n            }), \", not \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"1\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n            }), \".\"]\n          })\n        }), _jsxs(_components.h2, {\n          id: \"dynamic-arrays\",\n          children: [_jsx(_components.a, {\n            href: \"#dynamic-arrays\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Dynamic Arrays\"]\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"IUSACO\",\n            title: \"4.1, 4.2 - Dynamic Arrays\",\n            children: _jsx(_components.p, {\n              children: \"module is based off this\"\n            })\n          }), _jsx(Resource, {\n            source: \"CPH\",\n            title: \"4.1 - Dynamic Arrays\",\n            children: _jsx(_components.p, {\n              children: \"vectors, strings\"\n            })\n          }), _jsx(Resource, {\n            source: \"PAPS\",\n            title: \"3.1 - Vectors\"\n          }), _jsx(Resource, {\n            source: \"LCPP\",\n            title: \"9.23 - Intro to std::vector\",\n            url: \"https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdvector/\"\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"Dynamic arrays (\", _jsx(_components.a, {\n            href: \"http://www.cplusplus.com/reference/vector/vector/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"vector\"\n            })\n          }), \" in\\r\\nC++) support all the functions that a normal array does, and can resize itself\\r\\nto accommodate more elements. In a dynamic array, we can also add and delete\\r\\nelements at the end in \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(1)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \" time.\"]\n        }), _jsxs(_components.p, {\n          children: [\"For example, the following code creates a dynamic array and adds the numbers \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"1\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n          }), \"\\r\\nthrough \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"10\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">10</span></span></span></span>\"\n          }), \" to it:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"vector<int> v;\\r\\nfor(int i = 1; i <= 10; i++){\\r\\n\\tv.push_back(i);\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"g++\"\n          }), \" will allow you to create an array of variable length:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"int n; cin >> n;\\r\\nint v[n];\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"However, variable-length arrays are\\r\\n\", _jsxs(_components.a, {\n            href: \"https://stackoverflow.com/questions/1887097/why-arent-variable-length-arrays-part-of-the-c-standard\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: [_jsx(_components.em, {\n              children: \"not\"\n            }), \" part of the C++ standard\"]\n          }), \".\\r\\nWe recommend that you use a \", _jsx(_components.code, {\n            children: \"vector\"\n          }), \" for this purpose instead:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"vector<int> v(n); // one way\\r\\nvector<int> v; v.resize(n); // another way\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"In array-based contest problems, we'll use one-, two-, and three-dimensional\\r\\nstatic arrays much of the time. However, we can also have dynamic arrays of\\r\\ndynamic arrays (e.g. \", _jsx(_components.code, {\n            children: \"vector<vector<int>>\"\n          }), \") static arrays of dynamic arrays\\r\\n(e.g. \", _jsx(_components.code, {\n            children: \"array<vector<int>,5>\"\n          }), \"), dynamic arrays of static arrays (e.g.\\r\\n\", _jsx(_components.code, {\n            children: \"vector<array<int,5>>\"\n          }), \"), and so on.\"]\n        }), _jsxs(_components.h3, {\n          id: \"iterating\",\n          children: [_jsx(_components.a, {\n            href: \"#iterating\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Iterating\"]\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"CPH\",\n            title: \"4.4 - Working With Ranges\"\n          }), _jsx(Resource, {\n            source: \"CPP\",\n            title: \"Reference - <iterator>\",\n            url: \"https://www.cplusplus.com/reference/iterator/\"\n          }), _jsx(Resource, {\n            source: \"LCPP\",\n            title: \"9.24 - Intro to Iterators\",\n            url: \"https://www.learncpp.com/cpp-tutorial/introduction-to-iterators/\"\n          })]\n        }), _jsx(_components.p, {\n          children: \"One way to iterate through all elements of a static or dynamic array is to use a\\r\\nregular for loop.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"vector<int> v{1,7,4,5,2};\\r\\nfor (int i = 0; i < int(size(v)); i++){\\r\\n\\tcout << v[i] << \\\" \\\";\\r\\n}\\r\\ncout << endl;\\n\"\n          })\n        }), _jsx(Optional, {\n          children: _jsxs(_components.p, {\n            children: [_jsx(_components.code, {\n              children: \"std::vector\"\n            }), \" (and all the other standard library containers) support bounds-checked\\r\\naccesses as mentioned \", _jsx(_components.a, {\n              href: \"/general/debugging-lang?lang=cpp#checking-for-oob\",\n              children: \"here\"\n            }), \".\"]\n          })\n        }), _jsxs(_components.p, {\n          children: [\"We can also use \", _jsx(_components.strong, {\n            children: \"iterators\"\n          }), \". An iterator allows you to traverse a container by\\r\\npointing to an object within the container. However, they are \", _jsx(_components.strong, {\n            children: \"not\"\n          }), \" the same\\r\\nthing as pointers.\"]\n        }), _jsxs(_components.p, {\n          children: [\"For example, \", _jsx(_components.code, {\n            children: \"v.begin()\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"begin(v)\"\n          }), \" returns an iterator pointing to the first\\r\\nelement of the vector \", _jsx(_components.code, {\n            children: \"v\"\n          }), \". Apart from the standard way of traversing a vector\\r\\n(by treating it as an array), you can also use iterators:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"for (vector<int>::iterator it = v.begin(); it != v.end(); ++it) {\\r\\n\\tcout << *it << \\\" \\\"; //prints the values in the vector using the iterator\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"Here is another way to write this. \", _jsx(_components.code, {\n            children: \"auto\"\n          }), \" (since C++11) automatically infers the\\r\\ntype of an object:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"vector<int> v{1,7,4,5,2};\\r\\nfor (auto it = begin(v); it != end(v); it = next(it)) {\\r\\n\\tcout << *it << \\\" \\\"; //prints the values in the vector using the iterator\\r\\n}\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"We can also use a for-each loop.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"for (int element : v) {\\r\\n\\tcout << element << \\\" \\\"; //prints the values in the vector\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"inserting-and-erasing\",\n          children: [_jsx(_components.a, {\n            href: \"#inserting-and-erasing\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Inserting and Erasing\"]\n        }), _jsxs(_components.p, {\n          children: [\"Keep in mind that insertion and erasure in the middle of a \", _jsx(_components.code, {\n            children: \"vector\"\n          }), \" are\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(n)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"vector<int> v;\\r\\nv.push_back(2); // [2]\\r\\nv.push_back(3); // [2, 3]\\r\\nv.push_back(7); // [2, 3, 7]\\r\\nv.push_back(5); // [2, 3, 7, 5]\\r\\nv[1] = 4; // sets element at index 1 to 4 -> [2, 4, 7, 5]\\r\\nv.erase(v.begin() + 1); // removes element at index 1 -> [2, 7, 5]\\r\\n// this remove method is O(n); to be avoided\\r\\nv.push_back(8); // [2, 7, 5, 8]\\r\\nv.erase(v.end()-1); // [2, 7, 5]\\r\\n// here, we remove the element from the end of the list; this is O(1).\\r\\nv.push_back(4); // [2, 7, 5, 4]\\r\\nv.push_back(4); // [2, 7, 5, 4, 4]\\r\\nv.push_back(9); // [2, 7, 5, 4, 4, 9]\\r\\ncout << v[2]; // 5\\r\\nv.erase(v.begin(), v.begin()+3); // [4, 4, 9]\\r\\n// this erases the first three elements; O(n)\\n\"\n          })\n        }), _jsxs(_components.h2, {\n          id: \"strings\",\n          children: [_jsx(_components.a, {\n            href: \"#strings\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Strings\"]\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"LCPP\",\n            title: \"8.1 - An introduction to std::string\",\n            url: \"https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdstring/\",\n            children: _jsx(_components.p, {\n              children: \"Goes over the basics of strings\"\n            })\n          }), _jsx(Resource, {\n            source: \"CPP\",\n            title: \"Reference - std::string\",\n            url: \"http://www.cplusplus.com/reference/string/string/\",\n            children: _jsx(_components.p, {\n              children: \"C++ Reference for std::string\"\n            })\n          })]\n        }), _jsx(_components.p, {\n          children: \"You should be familiar with basic string manipulation techniques:\"\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Reading in strings from standard input\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Knowing how to use \", _jsx(_components.code, {\n              children: \"getline\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"cin\"\n            }), \" together (more rare; refer to LCPP\\r\\nresource above)\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Knowing how to sort strings, concatenate strings, loop through a string's\\r\\ncharacters\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Get the \", _jsx(_components.code, {\n              children: \"i\"\n            }), \"th character of a string\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Know how to get substrings with\\r\\n\", _jsx(_components.a, {\n              href: \"http://www.cplusplus.com/reference/string/string/substr/\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: _jsx(_components.code, {\n                children: \"string::substr\"\n              })\n            })]\n          }), \"\\n\"]\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"arrays-1\",\n          children: [_jsx(_components.a, {\n            href: \"#arrays-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Arrays\"]\n        }), _jsxs(_components.p, {\n          children: [\"Java default\\r\\n\", _jsx(_components.a, {\n            href: \"https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"Collections\"\n            })\n          }), \"\\r\\ndata structures are designed to store any type of object. However, we usually\\r\\ndon't want our data structures to only store one type of data, like integers or\\r\\nstrings. We do this by putting the desired data type within the \", _jsx(_components.code, {\n            children: \"<>\"\n          }), \" brackets\\r\\nwhen declaring the data structure, as follows:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"ArrayList<String> list = new ArrayList<String>();\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"This creates an \", _jsx(_components.code, {\n            children: \"ArrayList\"\n          }), \" structure that only stores objects of type \", _jsx(_components.code, {\n            children: \"String\"\n          }), \".\"]\n        }), _jsxs(_components.p, {\n          children: [\"For our examples below, we will primarily use the \", _jsx(_components.code, {\n            children: \"Integer\"\n          }), \" data type, but note\\r\\nthat you can have Collections of any object type, including \", _jsx(_components.code, {\n            children: \"Strings\"\n          }), \" , other\\r\\nCollections, or user-defined objects.\"]\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"Collections\"\n          }), \" data types always contain an \", _jsx(_components.code, {\n            children: \"add\"\n          }), \" method for adding an element to\\r\\nthe collection, and a \", _jsx(_components.code, {\n            children: \"remove\"\n          }), \" method which removes and returns a certain\\r\\nelement from the collection. They also support the \", _jsx(_components.code, {\n            children: \"size()\"\n          }), \" method, which\\r\\nreturns the number of elements in the data structure, and the \", _jsx(_components.code, {\n            children: \"isEmpty()\"\n          }), \"\\r\\nmethod, which returns \", _jsx(_components.code, {\n            children: \"true\"\n          }), \" if the data structure is empty, and \", _jsx(_components.code, {\n            children: \"false\"\n          }), \"\\r\\notherwise.\"]\n        }), _jsxs(_components.h2, {\n          id: \"dynamic-arrays-1\",\n          children: [_jsx(_components.a, {\n            href: \"#dynamic-arrays-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Dynamic Arrays\"]\n        }), _jsxs(_components.p, {\n          children: [\"Dynamic arrays\\r\\n(\", _jsx(_components.a, {\n            href: \"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"ArrayList\"\n            })\n          }), \"\\r\\nin Java) that support all the functions that a normal array does, and can\\r\\nrepeatedly reallocate storage to accommodate more elements as they are added.\"]\n        }), _jsxs(_components.p, {\n          children: [\"In a dynamic array, we can also add and delete elements at the end in\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(1)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \" time. For example, the following code creates a dynamic array\\r\\nand adds the numbers \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"1\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n          }), \" through \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"10\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">10</span></span></span></span>\"\n          }), \" to it:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"ArrayList<Integer> list = new ArrayList<Integer>();\\r\\nfor(int i = 1; i <= 10; i++){\\r\\n\\tlist.add(i);\\r\\n}\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"In array-based contest problems, we'll use one-, two-, and three-dimensional\\r\\nstatic arrays most of the time. However, we can also have static arrays of\\r\\ndynamic arrays, dynamic arrays of static arrays, and so on. Usually, the choice\\r\\nbetween a static array and a dynamic array is just personal preference.\"\n        }), _jsxs(_components.h3, {\n          id: \"iterating-1\",\n          children: [_jsx(_components.a, {\n            href: \"#iterating-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Iterating\"]\n        }), _jsx(_components.p, {\n          children: \"To iterate through a static or dynamic array, we can use either the regular for\\r\\nloop or the for-each loop.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"ArrayList<Integer> list = new ArrayList<Integer>();\\r\\nlist.add(1); list.add(7); list.add(4); list.add(5); list.add(2);\\r\\nint[] arr = {1, 7, 4, 5, 2};\\r\\nfor(int i = 0; i < list.size(); i++){ // regular\\r\\n\\tSystem.out.println(list.get(i));\\r\\n}\\r\\nfor(int element : arr){ // for-each\\r\\n\\tSystem.out.println(element);\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"adding-and-removing\",\n          children: [_jsx(_components.a, {\n            href: \"#adding-and-removing\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Adding and Removing\"]\n        }), _jsxs(_components.p, {\n          children: [\"We can add and remove at any index of a dynamic array in \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(n)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \" time.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"ArrayList<Integer> list = new ArrayList<Integer>();\\r\\nlist.add(2); // [2]\\r\\nlist.add(3); // [2, 3]\\r\\nlist.add(7); // [2, 3, 7]\\r\\nlist.add(5); // [2, 3, 7, 5]\\r\\nlist.set(1, 4); // sets element at index 1 to 4 -> [2, 4, 7, 5]\\r\\nlist.remove(1); // removes element at index 1 -> [2, 7, 5]\\r\\n// this remove method is O(n); to be avoided\\r\\nlist.add(8); // [2, 7, 5, 8]\\r\\nlist.remove(list.size()-1); // [2, 7, 5]\\r\\n// here, we remove the element from the end of the list; this is O(1)\\r\\nSystem.out.println(list.get(2)); // 5\\n\"\n          })\n        })]\n      }), _jsxs(PySection, {\n        children: [_jsxs(_components.h2, {\n          id: \"lists\",\n          children: [_jsx(_components.a, {\n            href: \"#lists\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Lists\"]\n        }), _jsxs(_components.p, {\n          children: [\"The default way to store data in Python is using a \", _jsx(_components.strong, {\n            children: \"list\"\n          }), \", which can\\r\\nautomatically resize itself to accommodate more elements. We can add and delete\\r\\nelements at the end in \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(1)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \" time. A list can be initialized as\\r\\nfollows:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"arr = []\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"Python lists are \", _jsx(_components.strong, {\n            children: \"generic\"\n          }), \". This means that they can store any kind of data\\r\\ntype, including objects. For example, the following code creates a dynamic array\\r\\nand adds the numbers \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"1\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n          }), \" through \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"10\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">10</span></span></span></span>\"\n          }), \" to it:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"for i in range(1, 11): # Note that range(i, j) includes i, but does not include j\\r\\n\\tarr.append(i)\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"In Python, we can give a dynamic array an initial size. The code below creates a\\r\\ndynamic array with \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"30\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>30</mn></mrow><annotation encoding=\\\"application/x-tex\\\">30</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">30</span></span></span></span>\"\n          }), \" zeroes.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"arr = [0] * 30\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"iterating-2\",\n          children: [_jsx(_components.a, {\n            href: \"#iterating-2\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Iterating\"]\n        }), _jsx(_components.p, {\n          children: \"We can use a regular for loop to iterate through all elements of a list.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"arr = [1, 7, 4, 5, 2]\\r\\n\\r\\nfor i in range(len(arr)):\\r\\n\\tprint(arr[i], end = \\\" \\\")\\r\\nprint()\\r\\n\\r\\nfor element in arr:\\r\\n\\tprint(element, end = \\\" \\\")\\r\\nprint()\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"We can also use \", _jsx(_components.strong, {\n            children: \"iterators\"\n          }), \". An iterator allows you to traverse a container by\\r\\npointing to an object within the container. \", _jsx(_components.code, {\n            children: \"iter(arr)\"\n          }), \" returns an iterator\\r\\npointing to the first element of the list \", _jsx(_components.code, {\n            children: \"arr\"\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"arr = [4, 2, 0, 0, 5]\\r\\nit = iter(arr)\\r\\n\\r\\nprint(next(it)) # 4\\r\\nprint(next(it)) # 2\\r\\nprint(next(it)) # 0\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"inserting-and-erasing-1\",\n          children: [_jsx(_components.a, {\n            href: \"#inserting-and-erasing-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Inserting and Erasing\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"arr = []\\r\\narr.append(2) # [2]\\r\\narr.append(3) # [2, 3]\\r\\narr.append(7) # [2, 3, 7]\\r\\narr.append(5) # [2, 3, 7, 5]\\r\\narr[1] = 4; # sets element at index 1 to 4 -> [2, 4, 7, 5]\\r\\narr.pop(1) # removes element at index 1 -> [2, 7, 5]\\r\\n# this remove method is O(n); to be avoided\\r\\narr.append(8) # [2, 7, 5, 8]\\r\\narr.pop() # [2, 7, 5]\\r\\n# here, we remove the element from the end of the list; this is O(1).\\r\\narr.append(4) # [2, 7, 5, 4]\\r\\narr.append(4) # [2, 7, 5, 4, 4]\\r\\narr.append(9) # [2, 7, 5, 4, 4, 9]\\r\\nprint(arr[2]) # 5\\r\\narr = arr[3:] # [4, 4, 9]\\r\\n# this erases the first three elements; O(n)\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"list-comprehensions\",\n          children: [_jsx(_components.a, {\n            href: \"#list-comprehensions\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"List Comprehensions\"]\n        }), _jsxs(_components.p, {\n          children: [\"List comprehensions are extremely useful for simplifying a python for loop that\\r\\nmodifies/creates a list into one expression. The general syntax is:\\r\\n\", _jsx(_components.code, {\n            children: \"[ expression for item in list if conditional ]\"\n          })]\n        }), _jsx(_components.p, {\n          children: \"An example is provided in the code block below.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"# If a number is odd, add the number times 2 into the array\\r\\nold_list = [2, 5, 3, 1, 6]\\r\\nnew_list = []\\r\\nfor i in old_list:\\r\\n\\tif i % 2 == 1:\\r\\n\\t\\tnew_list.append(i * 2);\\r\\nprint(new_list) # [10, 6, 2]\\r\\n# Simplified one liner with list comprehension\\r\\n# Recall the form [ expression for item in list if conditional ]\\r\\n# expression: i * 2\\r\\n# list: old_list\\r\\n# conditional: i % 2 == 1 (only include item i if it satisfies the conditional)\\r\\nnew_list = [i * 2 for i in old_list if i % 2 == 1]\\r\\nprint(new_list) # [10, 6, 2]\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"A very applicable use of list comprehensions for competitive programming in\\r\\nparticular is creating an integer list from space separated input:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"# Example input: 5 3 2 6 8 1\\r\\n# Note that the conditional in the list comprehension is optional, and defaults to True if not provided\\r\\narr = [int(x) for x in input().split()]\\r\\nprint(arr) # [5, 3, 2, 6, 8, 1]\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"For more information on list comprehensions, including nesting them to create\\r\\nmultidimensional lists, refer to the below resources.\"\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"PythonForBeginners\",\n            title: \"List Comprehensions in Python\",\n            url: \"https://www.pythonforbeginners.com/basics/list-comprehensions-in-python\",\n            children: 'Basic list comprehension tutorial'\n          }), _jsx(Resource, {\n            source: \"GFG\",\n            title: \"Nested List Comprehensions in Python\",\n            url: \"https://www.geeksforgeeks.org/nested-list-comprehensions-in-python/\",\n            children: 'Nesting list comprehensions'\n          })]\n        })]\n      })]\n    }), \"\\n\", \"\\n\", _jsxs(_components.h2, {\n      id: \"pairs--tuples\",\n      children: [_jsx(_components.a, {\n        href: \"#pairs--tuples\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Pairs & Tuples\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we want to store a collection of points on the 2D plane, then we can use a\\r\\ndynamic array of \", _jsx(_components.strong, {\n        children: \"pairs\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Of course, both \", _jsx(_components.code, {\n            children: \"vector<vector<int>>\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"vector<array<int,2>>\"\n          }), \" would suffice\\r\\nfor this case, but a pair can also store two elements of different types.\"]\n        }), _jsxs(_components.h3, {\n          id: \"c-pairs\",\n          children: [_jsx(_components.a, {\n            href: \"#c-pairs\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.a, {\n            href: \"http://www.cplusplus.com/reference/utility/pair/pair/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"C++ Pairs\"\n          })]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"pair<type1, type2> p\"\n            }), \": Creates a pair \", _jsx(_components.code, {\n              children: \"p\"\n            }), \" with two elements with the first\\r\\none being of \", _jsx(_components.code, {\n              children: \"type1\"\n            }), \" and the second one being of \", _jsx(_components.code, {\n              children: \"type2\"\n            }), \".\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"make_pair(a, b)\"\n            }), \": Returns a pair with values \", _jsx(_components.code, {\n              children: \"a\"\n            }), \", \", _jsx(_components.code, {\n              children: \"b\"\n            }), \".\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"{a, b}\"\n            }), \": With C++11 and above, this can be used as to create a pair, which is\\r\\neasier to write than \", _jsx(_components.code, {\n              children: \"make_pair(a, b)\"\n            }), \".\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"pair.first\"\n            }), \": The first value of the pair.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"pair.second\"\n            }), \": The second value of the pair.\"]\n          }), \"\\n\"]\n        }), _jsx(_components.p, {\n          children: \"Example:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tpair<string, int> myPair1 = make_pair(\\\"Testing\\\", 123);\\r\\n\\tcout << myPair1.first << \\\" \\\" << myPair1.second << endl;\\r\\n\\tmyPair1.first = \\\"It is possible to edit pairs after declaring them\\\";\\r\\n\\tcout << myPair1.first << \\\" \\\" << myPair1.second << endl;\\r\\n\\tpair<string, string> myPair2 = {\\\"Testing\\\", \\\"curly braces\\\"};\\r\\n\\tcout << myPair2.first << \\\" \\\" << myPair2.second << endl;\\r\\n}\\r\\n\\r\\n/* Output:\\r\\nTesting 123\\r\\nIt is possible to edit pairs after declaring them 123\\r\\nTesting curly braces\\r\\n*/\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"c-tuples\",\n          children: [_jsx(_components.a, {\n            href: \"#c-tuples\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.a, {\n            href: \"http://www.cplusplus.com/reference/tuple/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"C++ Tuples\"\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"Of course, we can hold more than two values with something like\\r\\n\", _jsx(_components.code, {\n            children: \"pair<int,pair<int,int>>\"\n          }), \", but it gets messy when you need a lot of elements. In\\r\\nthis case, using \", _jsx(_components.strong, {\n            children: \"tuples\"\n          }), \" might be more convenient.\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"tuple<type1, type2, ..., typeN> t\"\n            }), \": Creates a tuple with \", _jsx(_components.code, {\n              children: \"N\"\n            }), \" elements, i'th\\r\\none being of \", _jsx(_components.code, {\n              children: \"typei\"\n            }), \".\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"make_tuple(a, b, c, ..., d)\"\n            }), \": Returns a tuple with values written in the\\r\\nbrackets.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"get<i>(t)\"\n            }), \": Returns the \", _jsx(_components.code, {\n              children: \"i\"\n            }), \"'th element of the tuple \", _jsx(_components.code, {\n              children: \"t\"\n            }), \". Can also be used to\\r\\nchange the element of a tuple.\"]\n          }), \"\\n\"]\n        }), _jsxs(_components.p, {\n          children: [\"This operation only works for constant \", _jsx(_components.code, {\n            children: \"i\"\n          }), \". Namely, it is \", _jsx(_components.strong, {\n            children: \"not\"\n          }), \" allowed to do\\r\\nsomething like the following since \", _jsx(_components.code, {\n            children: \"i\"\n          }), \" is not constant:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"tuple<int,int,int> t{3,4,5};\\r\\nint i = 1; cout << get<i>(t);\\n\"\n          })\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"tie(a, b, c, ..., d) = t\"\n            }), \": Assigns \", _jsx(_components.code, {\n              children: \"a, b, c, ..., d\"\n            }), \" to the elements of the\\r\\ntuple \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"t\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\\\"application/x-tex\\\">t</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6151em;\\\"></span><span class=\\\"mord mathnormal\\\">t</span></span></span></span>\"\n            }), \" accordingly.\"]\n          }), \"\\n\"]\n        }), _jsx(_components.p, {\n          children: \"Example:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint a = 3, b = 4, c = 5;\\r\\n\\ttuple<int, int, int> t = tie(a, b, c);\\r\\n\\tcout << get<0>(t) << \\\" \\\" << get<1>(t) << \\\" \\\" << get<2>(t) << endl;\\r\\n\\tget<0>(t) = 7;\\r\\n\\tcout << get<0>(t) << \\\" \\\" << get<1>(t) << \\\" \\\" << get<2>(t) << endl;\\r\\n\\r\\n\\ttuple<string, string, int> tp2 = make_tuple(\\\"Hello\\\", \\\"world\\\", 100);\\r\\n\\tstring s1, s2; int x;\\r\\n\\ttie(s1, s2, x) = tp2;\\r\\n\\tcout << s1 << \\\" \\\" << s2 << \\\" \\\" << x << endl;\\r\\n}\\r\\n\\r\\n/* Output:\\r\\n3 4 5\\r\\n7 4 5\\r\\nHello world 100\\r\\n*/\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsx(Warning, {\n          title: \"Language Note\",\n          children: _jsx(_components.p, {\n            children: \"Pairs and tuples are not available in Java's standard libraries, though we can\\r\\nwork around that.\"\n          })\n        }), _jsx(_components.p, {\n          children: \"We can create our own generic Pair class in Java:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"static class Pair<K, V> {\\r\\n\\tK first;\\r\\n\\tV second;\\r\\n\\r\\n\\tpublic Pair(K first_value, V second_value) {\\r\\n\\t\\tfirst = first_value;\\r\\n\\t\\tsecond = second_value;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"Then, we can use the \", _jsx(_components.code, {\n            children: \"Pair\"\n          }), \" class as follows:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"Pair<Integer, String> p = new Pair(5, \\\"hello\\\");\\r\\nSystem.out.println(p.first + \\\" \\\" + p.second);\\n\"\n          })\n        })]\n      }), _jsxs(PySection, {\n        children: [_jsx(Warning, {\n          title: \"Language Note\",\n          children: _jsxs(_components.p, {\n            children: [_jsx(_components.strong, {\n              children: \"Pairs are not available in Python.\"\n            }), \" Just use tuples; no need for pairs!\"]\n          })\n        }), _jsxs(_components.h3, {\n          id: \"python-tuples\",\n          children: [_jsx(_components.a, {\n            href: \"#python-tuples\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Python Tuples\"]\n        }), _jsx(_components.p, {\n          children: \"Use the link below (if you know of a better one, please let us know!) to learn\\r\\nabout tuples.\"\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"Tutorialspoint\",\n            title: \"Python Tuples\",\n            url: \"https://www.tutorialspoint.com/python/python_tuples.htm\",\n            starred: true\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"memory-allocation\",\n      children: [_jsx(_components.a, {\n        href: \"#memory-allocation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Memory Allocation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One thing to keep in mind when using arrays is the memory limit. Usually the\\r\\nUSACO memory limit is 256 MB. To estimate how many values can be stored within\\r\\nthis limit:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Calculate the total memory size in bytes: for 256 MB, that's \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"256\\\\cdot 10^6\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>256</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">256\\\\cdot 10^6</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">256</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Divide by the size, in bytes, of an \", _jsx(_components.code, {\n          children: \"int\"\n        }), \" (4), or a \", _jsx(_components.code, {\n          children: \"long long\"\n        }), \" (8), etc. For\\r\\nexample, the number of \", _jsx(_components.code, {\n          children: \"int\"\n        }), \"s that you are able to store is bounded above by\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\frac{256\\\\cdot 10^6}{4}=64\\\\cdot 10^6\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mfrac><mrow><mn>256</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><mn>4</mn></mfrac><mo>=</mo><mn>64</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{256\\\\cdot 10^6}{4}=64\\\\cdot 10^6</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.3629em;vertical-align:-0.345em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.0179em;\\\"><span style=\\\"top:-2.655em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">256</span><span class=\\\"mbin mtight\\\">⋅</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8913em;\\\"><span style=\\\"top:-2.931em;margin-right:0.0714em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.5em;\\\"></span><span class=\\\"sizing reset-size3 size1 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">64</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Be aware that\\r\\n\", _jsx(_components.a, {\n          href: \"https://stackoverflow.com/questions/2860234/what-is-overhead\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"program overhead\"\n        }), \"\\r\\n(which can be very significant, especially with recursive functions) will\\r\\nreduce the amount of memory available.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"quiz\",\n      children: [_jsx(_components.a, {\n        href: \"#quiz\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Quiz\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsxs(Quiz, {\n          children: [_jsxs(Quiz.Question, {\n            children: [_jsxs(_components.p, {\n              children: [\"How do you count the number of items in an \", _jsx(_components.code, {\n                children: \"std::vector\"\n              }), \"? Suppose we named the vector \", _jsx(_components.code, {\n                children: \"v\"\n              }), \".\"]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"v.size()\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. \", _jsx(_components.code, {\n                    children: \"size()\"\n                  }), \" returns the number of elements in the data structure!\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"v.length()\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The method \", _jsx(_components.code, {\n                    children: \"length()\"\n                  }), \" does not exist on an \", _jsx(_components.code, {\n                    children: \"std::vector\"\n                  })]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"v.count()\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The method \", _jsx(_components.code, {\n                    children: \"count()\"\n                  }), \" does not exist on an \", _jsx(_components.code, {\n                    children: \"std::vector\"\n                  })]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"v.resize()\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The method \", _jsx(_components.code, {\n                    children: \"resize()\"\n                  }), \" resizes the vector to the specified number of elements\"]\n                })\n              })]\n            })]\n          }), _jsxs(Quiz.Question, {\n            children: [_jsxs(_components.p, {\n              children: [\"Which of the following would print out \", _jsx(_components.code, {\n                children: \"5\"\n              }), \"? If there are multiple correct answers, any of them will be accepted.\"]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-cpp\",\n                  children: \"int a = 3, b = 4, c = 5;\\r\\ntuple<int, int, int> t = tie(a, b, c);\\r\\ncout << get<2>(t);\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. \", _jsx(_components.code, {\n                    children: \"get<i>(t)\"\n                  }), \": Returns the \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"i\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n                  }), \"-th element of the tuple \", _jsx(_components.code, {\n                    children: \"t\"\n                  }), \".\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-cpp\",\n                  children: \"int a = 3, b = 4, c = 5;\\r\\ntuple<int, int, int> t = tie(a, b, c);\\r\\ncout << t.get(2);\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. \", _jsx(_components.code, {\n                    children: \"t.get()\"\n                  }), \" is not a valid method.\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-cpp\",\n                  children: \"vector<int> v;\\r\\nv.push_back(2);\\r\\nv.push_back(3);\\r\\nv.push_back(7);\\r\\nv.push_back(5);\\r\\ncout << v[3];\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. The array is \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"0\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n                  }), \"-indexed, which means that \", _jsx(_components.code, {\n                    children: \"v[3]\"\n                  }), \" corresponds to the \\\"fourth\\\" element in the vector, which is \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"5\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\\\"application/x-tex\\\">5</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">5</span></span></span></span>\"\n                  }), \".\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-cpp\",\n                  children: \"vector<int> v;\\r\\nv.push_back(2);\\r\\nv.push_back(3);\\r\\nv.push_back(7);\\r\\nv.push_back(5);\\r\\ncout << v[4];\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The array is \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"0\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n                  }), \"-indexed, which means that \", _jsx(_components.code, {\n                    children: \"v[3]\"\n                  }), \" corresponds to the \\\"fourth\\\" element in the vector, which is \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"5\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\\\"application/x-tex\\\">5</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">5</span></span></span></span>\"\n                  }), \". \", _jsx(_components.code, {\n                    children: \"v[4]\"\n                  }), \" is out of bounds.\"]\n                })\n              })]\n            })]\n          }), _jsxs(Quiz.Question, {\n            children: [_jsx(_components.p, {\n              children: \"Why are data structures useful? If there are multiple correct answers, any of them will be accepted.\"\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.p, {\n                children: \"Data structures can provide efficient operations on certain types of data.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. For example, \", _jsx(_components.code, {\n                    children: \"std::set\"\n                  }), \" can insert elements and determine whether or not items are contained within it in \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"\\\\mathcal{O}(\\\\log N)\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n                  }), \" time.\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.p, {\n                children: \"Data structures can store different types of data.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. For example, \", _jsx(_components.code, {\n                    children: \"std::vector\"\n                  }), \" can store both \", _jsx(_components.code, {\n                    children: \"int\"\n                  }), \" and \", _jsx(_components.code, {\n                    children: \"string\"\n                  }), \".\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: \"They provide a step-by-step set of rules to solve a problem.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsx(_components.p, {\n                  children: \"Incorrect. This is an algorithm.\"\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: \"Data structures are sometimes inefficient.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsx(_components.p, {\n                  children: \"Incorrect. Data structures are not useful for this reason.\"\n                })\n              })]\n            })]\n          })]\n        })\n      }), _jsx(JavaSection, {\n        children: _jsxs(Quiz, {\n          children: [_jsxs(Quiz.Question, {\n            children: [_jsxs(_components.p, {\n              children: [\"How do you count the number of items in an \", _jsx(_components.code, {\n                children: \"ArrayList\"\n              }), \"? Suppose we named it \", _jsx(_components.code, {\n                children: \"list\"\n              }), \".\"]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"list.size()\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. \", _jsx(_components.code, {\n                    children: \"size()\"\n                  }), \" returns the number of elements in the data structure!\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"list.length()\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The method \", _jsx(_components.code, {\n                    children: \"length()\"\n                  }), \" does not exist on an \", _jsx(_components.code, {\n                    children: \"ArrayList\"\n                  })]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"list.count()\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The method \", _jsx(_components.code, {\n                    children: \"count()\"\n                  }), \" does not exist on an \", _jsx(_components.code, {\n                    children: \"ArrayList\"\n                  })]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"list.length\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The property \", _jsx(_components.code, {\n                    children: \"length\"\n                  }), \" exists in arrays, but not \", _jsx(_components.code, {\n                    children: \"ArrayList\"\n                  })]\n                })\n              })]\n            })]\n          }), _jsxs(Quiz.Question, {\n            children: [_jsx(_components.p, {\n              children: \"Why are data structures useful? If there are multiple correct answers, any of them will be accepted.\"\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.p, {\n                children: \"Data structures can provide efficient operations on certain types of data.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. For example, a \", _jsx(_components.code, {\n                    children: \"HashSet\"\n                  }), \" can insert elements and query whether or not they are present in \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"\\\\mathcal{O}(1)\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n                  }), \" time.\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.p, {\n                children: \"Data structures can store different types of data.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. For example, you can have an \", _jsx(_components.code, {\n                    children: \"ArrayList\"\n                  }), \" that stores \", _jsx(_components.code, {\n                    children: \"String\"\n                  }), \". Or, you can have one that holds \", _jsx(_components.code, {\n                    children: \"Integer\"\n                  }), \".\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: \"They provide a step-by-step set of rules to solve a problem.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsx(_components.p, {\n                  children: \"Incorrect. This is an algorithm.\"\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: \"Data structures are sometimes inefficient.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsx(_components.p, {\n                  children: \"Incorrect. Data structures are not useful for this reason.\"\n                })\n              })]\n            })]\n          })]\n        })\n      }), _jsx(PySection, {\n        children: _jsxs(Quiz, {\n          children: [_jsxs(Quiz.Question, {\n            children: [_jsxs(_components.p, {\n              children: [\"How do you count the number of items in a \", _jsx(_components.code, {\n                children: \"list\"\n              }), \"? Suppose we named the list \", _jsx(_components.code, {\n                children: \"l\"\n              }), \".\"]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-py\",\n                  children: \"len(l)\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsx(_components.p, {\n                  children: \"Correct.\"\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-py\",\n                  children: \"count(l)\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The method \", _jsx(_components.code, {\n                    children: \"count()\"\n                  }), \" is not defined.\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-py\",\n                  children: \"size(l)\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. The method \", _jsx(_components.code, {\n                    children: \"size()\"\n                  }), \" is not defined.\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-py\",\n                  children: \"l.length()\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"A \", _jsx(_components.code, {\n                    children: \"list\"\n                  }), \" does not have the \", _jsx(_components.code, {\n                    children: \"length()\"\n                  }), \" method.\"]\n                })\n              })]\n            })]\n          }), _jsxs(Quiz.Question, {\n            children: [_jsxs(_components.p, {\n              children: [\"Which of the following would print out \", _jsx(_components.code, {\n                children: \"5\"\n              }), \"? If there are multiple correct answers, any of them will be accepted.\"]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-py\",\n                  children: \"t = (3, 4, 5)\\r\\nprint(t[2])\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. The corresponding indices for \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"[3, 4, 5]\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>3</mn><mo separator=\\\"true\\\">,</mo><mn>4</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[3, 4, 5]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">3</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n                  }), \" are \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"[0,1,2]\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>0</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[0,1,2]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n                  }), \" respectively.\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-py\",\n                  children: \"t = (3, 4, 5)\\r\\nprint(t.get(2))\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. A \", _jsx(_components.code, {\n                    children: \"tuple\"\n                  }), \" does not have the attribute \", _jsx(_components.code, {\n                    children: \"get\"\n                  }), \".\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-py\",\n                  children: \"l = []\\r\\nl.append(2)\\r\\nl.append(3)\\r\\nl.append(7)\\r\\nl.append(5)\\r\\nprint(l[3])\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. The corresponding list is \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"[2, 3, 7 ,5]\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>3</mn><mo separator=\\\"true\\\">,</mo><mn>7</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[2, 3, 7 ,5]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">3</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">7</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n                  }), \" with the indices \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"[0, 1, 2, 3]\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>0</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>3</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[0, 1, 2, 3]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">3</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n                  }), \" respectively.\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-py\",\n                  children: \"l = []\\r\\nl.append(2)\\r\\nl.append(3)\\r\\nl.append(7)\\r\\nl.append(5)\\r\\nprint(l[4])\\n\"\n                })\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Incorrect. Remember that \", _jsx(_components.code, {\n                    children: \"list\"\n                  }), \" is \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"0\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n                  }), \"-indexed, so the index \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"3\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n                  }), \" would correspond to \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"5\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\\\"application/x-tex\\\">5</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">5</span></span></span></span>\"\n                  }), \".\"]\n                })\n              })]\n            })]\n          }), _jsxs(Quiz.Question, {\n            children: [_jsx(_components.p, {\n              children: \"Why are data structures useful? If there are multiple correct answers, any of them will be accepted.\"\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.p, {\n                children: \"Data structures can provide efficient operations on certain types of data.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. For example, a \", _jsx(_components.code, {\n                    children: \"HashSet\"\n                  }), \" can insert elements and query whether or not they are present in \", _jsx(MATHSPAN, {\n                    className: \"math math-inline\",\n                    latex: \"\\\\mathcal{O}(1)\",\n                    children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n                  }), \" time.\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              correct: true,\n              children: [_jsx(_components.p, {\n                children: \"Data structures can store different types of data.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsxs(_components.p, {\n                  children: [\"Correct. For example, you can have an \", _jsx(_components.code, {\n                    children: \"ArrayList\"\n                  }), \" that stores \", _jsx(_components.code, {\n                    children: \"String\"\n                  }), \". Or, you can have one that holds \", _jsx(_components.code, {\n                    children: \"Integer\"\n                  }), \".\"]\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: \"They provide a step-by-step set of rules to solve a problem.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsx(_components.p, {\n                  children: \"Incorrect. This is an algorithm.\"\n                })\n              })]\n            }), _jsxs(Quiz.Answer, {\n              children: [_jsx(_components.p, {\n                children: \"Data structures are sometimes inefficient.\"\n              }), _jsx(Quiz.Explanation, {\n                children: _jsx(_components.p, {\n                  children: \"Incorrect. Data structures are not useful for this reason.\"\n                })\n              })]\n            })]\n          })]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Nothing to see here! To reiterate, arrays of fixed size should suffice for\\r\\nessentially every Bronze problem, but dynamic arrays, pairs, and tuples can\\r\\ngreatly simplify implementation at times. You'll see some examples of these in\\r\\nthe following module.\"\n    }), \"\\n\"]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  description,\n  default: MDXContent\n};\n","frontmatter":{"title":"Introduction to Data Structures","author":"Darren Yao, Benjamin Qi, Allen Li, Neo Wang","contributors":"Nathan Wang, Abutalib Namazov","id":"intro-ds","prerequisites":null,"description":"Introduces the concept of a data structure, (dynamic) arrays, pairs, tuples.","frequency":null},"parent":{"name":"Intro_DS","relativePath":"2_Bronze/Intro_DS.mdx"},"fields":{"division":"bronze"},"toc":{"cpp":[{"depth":2,"value":"Data Structures","slug":"data-structures"},{"depth":2,"value":"Arrays","slug":"arrays"},{"depth":2,"value":"Dynamic Arrays","slug":"dynamic-arrays"},{"depth":3,"value":"Iterating","slug":"iterating"},{"depth":3,"value":"Inserting and Erasing","slug":"inserting-and-erasing"},{"depth":2,"value":"Strings","slug":"strings"},{"depth":2,"value":"Pairs &amp; Tuples","slug":"pairs--tuples"},{"depth":3,"value":"C++ Pairs","slug":"c-pairs"},{"depth":3,"value":"C++ Tuples","slug":"c-tuples"},{"depth":2,"value":"Memory Allocation","slug":"memory-allocation"},{"depth":2,"value":"Quiz","slug":"quiz"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Data Structures","slug":"data-structures"},{"depth":2,"value":"Arrays","slug":"arrays-1"},{"depth":2,"value":"Dynamic Arrays","slug":"dynamic-arrays-1"},{"depth":3,"value":"Iterating","slug":"iterating-1"},{"depth":3,"value":"Adding and Removing","slug":"adding-and-removing"},{"depth":2,"value":"Pairs &amp; Tuples","slug":"pairs--tuples"},{"depth":2,"value":"Memory Allocation","slug":"memory-allocation"},{"depth":2,"value":"Quiz","slug":"quiz"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Data Structures","slug":"data-structures"},{"depth":2,"value":"Lists","slug":"lists"},{"depth":3,"value":"Iterating","slug":"iterating-2"},{"depth":3,"value":"Inserting and Erasing","slug":"inserting-and-erasing-1"},{"depth":3,"value":"List Comprehensions","slug":"list-comprehensions"},{"depth":2,"value":"Pairs &amp; Tuples","slug":"pairs--tuples"},{"depth":3,"value":"Python Tuples","slug":"python-tuples"},{"depth":2,"value":"Memory Allocation","slug":"memory-allocation"},{"depth":2,"value":"Quiz","slug":"quiz"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"intro-ds"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}