{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/bronze/ad-hoc",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*Most USACO Bronze problems fall into specific categories, such as simulation and complete search. Those which don't often require more thought, although they are not necessarily more difficult to implement.*/\n/*Any problem that doesn't fall under any well-defined category can be labelled as **ad hoc**. Since there is no fixed algorithm or idea to solving these problems, they can be hard to generalize.*/\n/*Try to solve as many practice problems below as you can, and click the solution sketch tab if you can't figure the solution out.*/\n/*If anyone disagrees with any of the tips / ideas presented in the blogs below, just let me know. I think they're quite interesting, though I haven't tried it out myself.*/\n/*\n<Resources>\n<Resource\nsource=\"ZLE@kauntaofficial.github.io\"\ntitle=\"The Art of Thinking\"\nurl=\"https://kauntaofficial.github.io/the-art-of-thinking\"\n>\nblog with more tips\n</Resource>\n<Resource\nsource=\"ZLE@kauntaofficial.github.io\"\ntitle=\"Developing Intuition\"\nurl=\"https://kauntaofficial.github.io/developing-intuition\"\n>\ndeveloping intuition while practicing\n</Resource>\n</Resources>\n*/\n/*Don't you love Dhruv Rohatgi problems?*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"ad-hoc\", title = \"Ad Hoc Problems\", author = \"Michael Cao\", description = \"Problems that do not fall into standard categories with well-studied solutions.\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    blockquote: \"blockquote\",\n    strong: \"strong\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {HeaderLink, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [\"\\n\", _jsx(_components.p, {\n      children: \"According to USACO Training 1.2:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Ad hoc\"\n        }), \" problems are those whose algorithms do not fall into standard\\r\\ncategories with well-studied solutions. Each ad hoc problem is different; no\\r\\nspecific or general techniques exist to solve them.\"]\n      }), \"\\n\"]\n    }), \"\\n\", \"\\n\", _jsxs(_components.p, {\n      children: [\"In this module, we'll go over some general tips that may be useful in\\r\\napproaching problems that \", _jsx(_components.em, {\n        children: \"appear\"\n      }), \" to be ad hoc.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Draw lots of small cases to gain a better understanding of the problem. If\\r\\nyou're having trouble debugging, draw more cases. If you don't know how to\\r\\nstart with a problem, draw more cases. Whenever you don't know how to further\\r\\napproach a problem, you're probably missing an important observation, so draw\\r\\nmore cases and make observations about properties of the problem.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Whenever you find an observation that seems useful, write it down! Writing\\r\\ndown ideas lets you easily come back to them later, and makes sure you don't\\r\\nforget about ideas that could potentially be the solution.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Don't get stuck on any specific idea, unless you see an entire solution.\\r\\nTrying to complete search an ad hoc problem could end up wasting a lot of your\\r\\ntime in contest.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Try to approach the problem from a lot of different perspectives. Try to mess\\r\\naround with formulas or draw a visual depiction of the problem (maybe some\\r\\nsort of \", _jsx(_components.a, {\n          href: \"/bronze/intro-graphs\",\n          children: \"graph\"\n        }), \"). One of the most helpful things you can\\r\\ndo when solving ad hoc problems is to keep trying ideas until you make\\r\\nprogress. This is something you get better at as you do more problems.\"]\n      }), \"\\n\"]\n    }), \"\\n\", \"\\n\", \"\\n\", \"\\n\", _jsx(_components.p, {\n      children: \"In the end, the best way to get better at ad hoc problems (or any type of\\r\\nproblem) is to do a lot of them.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", \"\\n\", _jsxs(_components.p, {\n      children: [\"Of course, ad hoc problems can be\\r\\n\", _jsx(_components.a, {\n        href: \"/general/expected-knowledge#problem-usaco-591\",\n        children: \"quite easy\"\n      }), \", but the ones presented below\\r\\nare generally on the harder side.\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Ad Hoc Problems","author":"Michael Cao","contributors":null,"id":"ad-hoc","prerequisites":null,"description":"Problems that do not fall into standard categories with well-studied solutions.","frequency":1},"parent":{"name":"Ad_Hoc","relativePath":"2_Bronze/Ad_Hoc.mdx"},"fields":{"division":"bronze"},"toc":{"cpp":[{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"general","problems":[{"uniqueId":"usaco-915","name":"Sleepy Cow Herding","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=915","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-892","name":"Sleepy Cow Sorting","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=892","source":"Bronze","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-832","name":"Milking Order","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=832","source":"Bronze","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-809","name":"Taming the Herd","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=809","source":"Bronze","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-737","name":"Modern Art","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=737","source":"Bronze","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_art_bronze_open17.html","sketch":null}},{"uniqueId":"usaco-808","name":"Hoofball","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=808","source":"Bronze","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-1088","name":"Spaced Out","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1088","source":"Silver","difficulty":"Very Hard","isStarred":false,"tags":["Greedy"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"ad-hoc"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}