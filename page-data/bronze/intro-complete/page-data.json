{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/bronze/intro-complete",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"intro-complete\", title = \"Basic Complete Search\", author = \"Darren Yao, Dong Liu\", contributors = \"Brad Ma, Nathan Gong\", description = \"An easy example: iterating through all pairs.\", frequency = 4;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    a: \"a\",\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    MATHDIV: _missingComponent(\"MATHDIV\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Warning: _missingComponent(\"Warning\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {Resources, Resource, FocusProblem, Spoiler, MATHDIV, LanguageSection, CPPSection, JavaSection, PySection, Warning, MATHSPAN, HeaderLink, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"IUSACO\",\n        title: \"6 - Complete Search\",\n        children: _jsx(_components.p, {\n          children: \"module is based off this\"\n        })\n      })\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"In many problems (especially in Bronze) it suffices to check all possible cases\\r\\nin the solution space, whether it be all elements, all pairs of elements, or all\\r\\nsubsets, or all permutations. Unsurprisingly, this is called \", _jsx(_components.strong, {\n        children: \"complete search\"\n      }), \"\\r\\n(or \", _jsx(_components.strong, {\n        children: \"brute force\"\n      }), \"), because it completely searches the entire solution space.\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sample\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsx(_components.p, {\n        children: \"We can iterate through every pair of points and find the square of the distance\\r\\nbetween them, by squaring the formula for Euclidean distance:\"\n      }), _jsx(MATHDIV, {\n        className: \"math math-display\",\n        latex: \"\\\\text{distance}[(x_1,y_1),(x_2,y_2)]^2 = (x_2-x_1)^2 + (y_2-y_1)^2.\",\n        children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mtext>distance</mtext><mo stretchy=\\\"false\\\">[</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">)</mo><mo separator=\\\"true\\\">,</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy=\\\"false\\\">)</mo><msup><mo stretchy=\\\"false\\\">]</mo><mn>2</mn></msup><mo>=</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub><msup><mo stretchy=\\\"false\\\">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub><msup><mo stretchy=\\\"false\\\">)</mo><mn>2</mn></msup><mi mathvariant=\\\"normal\\\">.</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\text{distance}[(x_1,y_1),(x_2,y_2)]^2 = (x_2-x_1)^2 + (y_2-y_1)^2.</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1141em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord\\\">distance</span></span><span class=\\\"mopen\\\">[(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mclose\\\"><span class=\\\"mclose\\\">]</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8641em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1141em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\"><span class=\\\"mclose\\\">)</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8641em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1141em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\"><span class=\\\"mclose\\\">)</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8641em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mord\\\">.</span></span></span></span></span>\"\n      }), _jsxs(_components.p, {\n        children: [\"Maintain the current maximum square distance in \", _jsx(_components.code, {\n          children: \"max_square\"\n        }), \".\"]\n      }), _jsxs(LanguageSection, {\n        children: [_jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint N; cin >> N;\\r\\n\\tvector<int> x(N), y(N);\\r\\n\\tfor (int& t: x) cin >> t;\\r\\n\\tfor (int& t: y) cin >> t;\\r\\n\\tint max_square = 0;\\r\\n\\tfor (int i = 0; i < N; i++) { // for each first point\\r\\n\\t\\tfor (int j = i+1; j < N; j++) { // for each second point\\r\\n\\t\\t\\tint dx = x[i]-x[j], dy = y[i]-y[j];\\r\\n\\t\\t\\tint square = dx*dx+dy*dy;\\r\\n\\t\\t\\t// if the square of the distance between the two points is greater than\\r\\n\\t\\t\\t// our current maximum, then update the maximum\\r\\n\\t\\t\\tmax_square = max(max_square,square);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << max_square;\\r\\n}\\n\"\n            })\n          })\n        }), _jsx(JavaSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class MaximumDistance {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint[] x = new int[n];\\r\\n\\t\\tint[] y = new int[n];\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tx[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\ty[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint max = 0; // storing the current maximum\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n; i++) { // for each first point\\r\\n\\t\\t\\tfor (int j = i + 1; j < n; j++) { // for each second point\\r\\n\\t\\t\\t\\tint dx = x[i] - x[j];\\r\\n\\t\\t\\t\\tint dy = y[i] - y[j];\\r\\n\\t\\t\\t\\t// if the square of the distance between the two points is greater than\\r\\n\\t\\t\\t\\t// our current maximum, then update the maximum\\r\\n\\t\\t\\t\\tmax = Math.max(max, dx * dx + dy * dy);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(max);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n            })\n          })\n        }), _jsxs(PySection, {\n          children: [_jsx(Warning, {\n            children: _jsx(_components.p, {\n              children: \"Make sure compile using PyPy 3. TLEs using Python3.\"\n            })\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-py\",\n              children: \"n = int(input())\\r\\nx = list(map(int, input().split()))\\r\\ny = list(map(int, input().split()))\\r\\n\\r\\nmax_square = 0\\r\\nfor i in range(n):\\r\\n\\tfor j in range(i + 1, n):\\r\\n\\t\\tdx = x[i] - x[j]\\r\\n\\t\\tdy = y[i] - y[j]\\r\\n\\t\\tmax_square = max(max_square, dx * dx + dy * dy)\\r\\nprint(max_square)\\n\"\n            })\n          })]\n        })]\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"A couple notes:\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Since we're iterating through all pairs of points, we start the \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"j\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n          }), \" loop from\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"j = i+1\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">j = i+1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7429em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n          }), \" so that point \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"i\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n          }), \" and point \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"j\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n          }), \" are never the same point.\\r\\nFurthermore, it makes it so that each pair is only counted once. In this\\r\\nproblem, it doesn't matter whether we double-count pairs or whether we allow\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"i\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n          }), \" and \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"j\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n          }), \" to be the same point, but in other problems where we're counting\\r\\nsomething rather than looking at the maximum, it's important to be careful\\r\\nthat we don't overcount.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Secondly, the problem asks for the square of the maximum Euclidean distance\\r\\nbetween any two points. Some students may be tempted to maintain the maximum\\r\\ndistance in an integer variable, and then square it at the end when\\r\\noutputting. However, the problem here is that while the square of the distance\\r\\nbetween two integer points is always an integer, the distance itself isn't\\r\\nguaranteed to be an integer. Thus, we'll end up shoving a non-integer value\\r\\ninto an integer variable, which truncates the decimal part.\"\n        }), \"\\n\"]\n      }), _jsxs(LanguageSection, {\n        children: [_jsxs(CPPSection, {\n          children: [_jsx(_components.p, {\n            children: \"The following solution correctly stores the maximum distance in a floating point\\r\\nvariable.\"\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint N; cin >> N;\\r\\n\\tvector<int> x(N), y(N);\\r\\n\\tfor (int& t: x) cin >> t;\\r\\n\\tfor (int& t: y) cin >> t;\\r\\n\\tdouble max_dist = 0;\\r\\n\\tfor (int i = 0; i < N; i++) { // for each first point\\r\\n\\t\\tfor (int j = i+1; j < N; j++) { // for each second point\\r\\n\\t\\t\\tint dx = x[i]-x[j], dy = y[i]-y[j];\\r\\n\\t\\t\\tint square = dx*dx+dy*dy;\\r\\n\\t\\t\\t// if the square of the distance between the two points is greater than\\r\\n\\t\\t\\t// our current maximum, then update the maximum\\r\\n\\t\\t\\tmax_dist = max(max_dist,sqrt(square));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << (int)pow(max_dist,2);\\r\\n}\\n\"\n            })\n          }), _jsx(Warning, {\n            children: _jsx(_components.p, {\n              children: \"However, it still fails on the following test case (it outputs 12, but the\\r\\nanswer is 13):\"\n            })\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"2\\r\\n0 3\\r\\n2 0\\n\"\n            })\n          }), _jsxs(_components.p, {\n            children: [\"Rounding suffices (\", _jsx(_components.code, {\n              children: \"(int)round(pow(max_dist,2))\"\n            }), \"), but the takeaway is that you\\r\\nshould stick with integers whenever possible.\"]\n          })]\n        }), _jsxs(JavaSection, {\n          children: [_jsx(_components.p, {\n            children: \"The following solution correctly stores the maximum distance in a floating point\\r\\nvariable.\"\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class MaximumDistance2 {\\r\\n\\tpublic static void main (String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint[] x = new int[n];\\r\\n\\t\\tint[] y = new int[n];\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tx[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\ty[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdouble maxSquare = 0; // storing the current maximum\\r\\n\\t\\tfor (int i = 0; i < n; i++) {  // for each first point\\r\\n\\t\\t\\tfor(int j = i + 1; j < n; j++){ // for each second point\\r\\n\\t\\t\\t\\tint dx = x[i] - x[j];\\r\\n\\t\\t\\t\\tint dy = y[i] - y[j];\\r\\n\\t\\t\\t\\tint  square = dx * dx + dy * dy;\\r\\n\\t\\t\\t\\t// if the square of the distance between the two points is greater than\\r\\n\\t\\t\\t\\t// our current maximum, then update the maximum\\r\\n\\t\\t\\t\\tmaxSquare = Math.max(maxSquare, Math.sqrt(square));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println((int) Math.pow(maxSquare, 2));\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n}\\r\\n\\n\"\n            })\n          }), _jsx(Warning, {\n            children: _jsx(_components.p, {\n              children: \"However, it still fails on the following test case (it outputs 12, but the\\r\\nanswer is 13):\"\n            })\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"2\\r\\n0 3\\r\\n2 0\\n\"\n            })\n          }), _jsxs(_components.p, {\n            children: [\"Rounding suffices (\", _jsx(_components.code, {\n              children: \"(int) Math.round(Math.pow(maxSquare, 2))\"\n            }), \"), but the takeaway is that you\\r\\nshould stick with integers whenever possible.\"]\n          })]\n        }), _jsxs(PySection, {\n          children: [_jsx(_components.p, {\n            children: \"The following solution correctly stores the maximum distance in a floating point\\r\\nvariable.\"\n          }), _jsx(Warning, {\n            children: _jsx(_components.p, {\n              children: \"Make sure to run using PyPy 3. The program will run out of time and/or memory unless you do.\"\n            })\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-py\",\n              children: \"import math\\r\\nN = int(input())\\r\\nxpoints = list(map(int, input().split(\\\" \\\")))\\r\\nypoints = list(map(int, input().split(\\\" \\\")))\\r\\n\\r\\npoints = [[xpoints[i], ypoints[i]] for i in range(N)]\\r\\nMaxDistance = 0\\r\\nfor i in range(N): #first point\\r\\n\\tfor j in range(i + 1, N): #second point\\r\\n\\t\\tdx = points[i][0] - points[j][0]\\r\\n\\t\\tdy = points[i][1] - points[j][1]\\r\\n\\t\\tsquare = dx ** 2 + dy ** 2\\r\\n\\t\\t#pick maximum\\r\\n\\t\\tMaxDistance = max(MaxDistance, math.sqrt(square))\\r\\n\\r\\nprint(round(MaxDistance ** 2))\\n\"\n            })\n          }), _jsx(Warning, {\n            children: _jsxs(_components.p, {\n              children: [\"However, it still fails on the following test case (it outputs \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"12.999999999999998\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>12.999999999999998</mn></mrow><annotation encoding=\\\"application/x-tex\\\">12.999999999999998</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">12.999999999999998</span></span></span></span>\"\n              }), \", but the\\r\\nanswer is \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"13\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>13</mn></mrow><annotation encoding=\\\"application/x-tex\\\">13</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">13</span></span></span></span>\"\n              }), \"):\"]\n            })\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"2\\r\\n0 3\\r\\n2 0\\n\"\n            })\n          }), _jsxs(_components.p, {\n            children: [\"Rounding suffices (\", _jsx(_components.code, {\n              children: \"round(MaxDistance ** 2)\"\n            }), \"), but the takeaway is that you\\r\\nshould stick with integers whenever possible.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"probs\",\n      hideSuggestProblemButton: true\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Basic Complete Search","author":"Darren Yao, Dong Liu","contributors":"Brad Ma, Nathan Gong","id":"intro-complete","prerequisites":null,"description":"An easy example: iterating through all pairs.","frequency":4},"parent":{"name":"Intro_Complete","relativePath":"2_Bronze/Intro_Complete.mdx"},"fields":{"division":"bronze"},"toc":{"cpp":[{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sample","problems":[{"uniqueId":"cfgym-102951A","name":"Maximum Distance","url":"https://codeforces.com/gym/102951/problem/A","source":"CF","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"link","label":"In Module","labelTooltip":null,"url":"https://usaco.guide/bronze/intro-complete#problem-cfgym-102951A","sketch":null}}]},{"listId":"probs","problems":[{"uniqueId":"usaco-615","name":"Milk Pails","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=615","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-639","name":"Diamond Collector","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=639","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-1060","name":"Daisy Chains","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1060","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-963","name":"Cow Gymnastics","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=963","source":"Bronze","difficulty":"Normal","isStarred":true,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-736","name":"Bovine Genomics","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=736","source":"Bronze","difficulty":"Normal","isStarred":true,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-1011","name":"Triangles","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1011","source":"Bronze","difficulty":"Normal","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-784","name":"Lifeguards","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=784","source":"Bronze","difficulty":"Normal","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-712","name":"Why Did the Cow Cross the Road II","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=712","source":"Bronze","difficulty":"Normal","isStarred":true,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-893","name":"Guess the Animal","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=893","source":"Bronze","difficulty":"Hard","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-739","name":"Bovine Genomics","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=739","source":"Silver","difficulty":"Hard","isStarred":true,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-617","name":"Load Balancing","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=617","source":"Bronze","difficulty":"Hard","isStarred":true,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-1203","name":"Sleeping in Class","url":"http://usaco.org/index.php?page=viewproblem2&cpid=1203","source":"Bronze","difficulty":"Hard","isStarred":true,"tags":["Complete Search"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_prob1_bronze_feb22.html","sketch":null}},{"uniqueId":"usaco-569","name":"Contaminated Milk","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=569","source":"Bronze","difficulty":"Very Hard","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-1037","name":"Cowntact Tracing","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1037","source":"Bronze","difficulty":"Very Hard","isStarred":true,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-640","name":"Bull in a China Shop","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=640","source":"Bronze","difficulty":"Very Hard","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-619","name":"Load Balancing","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=619","source":"Silver","difficulty":"Very Hard","isStarred":false,"tags":["Complete Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"intro-complete"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}