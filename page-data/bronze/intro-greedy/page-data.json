{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/bronze/intro-greedy",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*Don't overuse it though?*/\n/*Anything else major that needs to be added? Bronze Ad Hoc is not very complicated.*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"intro-greedy\", title = \"Introduction to Greedy Algorithms\", author = \"Darren Yao, Benjamin Qi\", contributors = \"Ryan Chou\", description = \"Selecting the choice that seems to be the best at the moment at every step of your algorithm.\", frequency = 2, prerequisites = [\"ad-hoc\", \"intro-ds\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Warning: _missingComponent(\"Warning\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Info: _missingComponent(\"Info\"),\n    Problems: _missingComponent(\"Problems\"),\n    Quiz: _missingComponent(\"Quiz\")\n  }, _props.components), {HeaderLink, Resources, Resource, Warning, FocusProblem, Spoiler, LanguageSection, CPPSection, JavaSection, PySection, Info, Problems, Quiz, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"greedy-algorithms\",\n      children: [_jsx(_components.a, {\n        href: \"#greedy-algorithms\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Greedy Algorithms\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some USACO Bronze problems that appear to be ad hoc can actually be solved using\\r\\n\", _jsx(_components.strong, {\n        children: \"greedy\"\n      }), \" algorithms. This idea will be covered in a future\\r\\n\", _jsx(_components.a, {\n        href: \"/silver/greedy-sorting\",\n        children: \"module\"\n      }), \", but we'll introduce the general mindset in\\r\\nthis section.\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CPH\",\n        title: \"6.1 - Coin Problem\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"other examples are outside scope of bronze\"\n        })\n      })\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsxs(_components.p, {\n        children: [\"True \", _jsx(_components.strong, {\n          children: \"\\\"greedy\\\"\"\n        }), \" problems start to show up in silver, though the greedy mindset\\r\\ncan be very helpful for bronze problems.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"From the above:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.strong, {\n          children: \"greedy\"\n        }), \" algorithm constructs a solution to the problem by always making a\\r\\nchoice that looks the best at the moment. A greedy algorithm never takes back\\r\\nits choices, but directly constructs the final solution. For this reason,\\r\\ngreedy algorithms are usually very efficient.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Greedy\"\n      }), \" does not refer to a single algorithm, but rather a way of thinking\\r\\nthat is applied to problems; there's no one way to do greedy algorithms. Hence,\\r\\nwe use a selection of well-known examples to help you understand the greedy\\r\\nparadigm.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"example---mad-scientist\",\n      children: [_jsx(_components.a, {\n        href: \"#example---mad-scientist\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example - Mad Scientist\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"tutorial\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Try to come up with a greedy algorithm for problem above.\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Correct Greedy Algorithm\",\n      children: [_jsx(_components.p, {\n        children: \"In this problem, the correct greedy solution is to continually flip the longest\\r\\npossible ranges of mismatching cows.\"\n      }), _jsxs(_components.p, {\n        children: [\"Mad Scientist has an excellent\\r\\n\", _jsx(_components.a, {\n          href: \"http://www.usaco.org/current/data/sol_breedflip_bronze_feb20.html\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"editorial\"\n        }), \"\\r\\nwith a video solution and intuitive proof.\"]\n      }), _jsx(_components.p, {\n        children: \"It is highly recommended you read it to gain a better understanding of the\\r\\ngreedy algorithm.\"\n      })]\n    }), \"\\n\", _jsx(Spoiler, {\n      title: \"Solution\",\n      children: _jsxs(LanguageSection, {\n        children: [_jsxs(CPPSection, {\n          children: [_jsxs(_components.p, {\n            children: [\"From the\\r\\n\", _jsx(_components.a, {\n              href: \"http://www.usaco.org/current/data/sol_breedflip_bronze_feb20.html\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"official analysis\"\n            }), \":\"]\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <iostream>\\r\\n#include <string>\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"breedflip.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"breedflip.out\\\", \\\"w\\\", stdout);\\r\\n\\tll n;\\r\\n\\tcin >> n;\\r\\n\\tstring A;\\r\\n\\tstring B;\\r\\n\\tcin >> A >> B;\\r\\n\\tll ans = 0;\\r\\n\\tbool mismatched = false;\\r\\n\\tfor(ll i=0; i<n; i++) {\\r\\n\\t\\tif(A[i] != B[i]) {\\r\\n\\t\\t\\tif(!mismatched) {\\r\\n\\t\\t\\t\\tmismatched = true;\\r\\n\\t\\t\\t\\tans++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tmismatched = false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << ans << endl;\\r\\n}\\n\"\n            })\n          })]\n        }), _jsxs(JavaSection, {\n          children: [_jsxs(_components.p, {\n            children: [\"From the\\r\\n\", _jsx(_components.a, {\n              href: \"http://www.usaco.org/current/data/sol_breedflip_bronze_feb20.html\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"official analysis\"\n            }), \"\\r\\n(with Kattio added):\"]\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\npublic class Solution {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"breedflip\\\");\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tchar[] a = io.next().toCharArray();\\r\\n\\t\\tchar[] b = io.next().toCharArray();\\r\\n\\t\\tint ret = 0;\\r\\n\\t\\twhile (!new String(a).equals(new String(b))) {\\r\\n\\t\\t\\tret++;\\r\\n\\t\\t\\tint lhs = 0;\\r\\n\\t\\t\\twhile (a[lhs] == b[lhs]) lhs++;\\r\\n\\t\\t\\tint rhs = n-1;\\r\\n\\t\\t\\twhile (a[rhs] == b[rhs]) rhs--;\\r\\n\\t\\t\\tfor (int i = lhs; i <= rhs; i++) {\\r\\n\\t\\t\\t\\tif (a[i] == 'G') a[i] = 'H';\\r\\n\\t\\t\\t\\telse a[i] = 'G';\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(ret);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n            })\n          })]\n        }), _jsx(PySection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-py\",\n              children: \"import sys\\r\\nsys.stdin = open(\\\"breedflip.in\\\",\\\"r\\\")\\r\\nsys.stdout = open(\\\"breedflip.out\\\",\\\"w\\\")\\r\\n\\r\\nN,a,b = input(),input(),input()\\r\\ns = [False]+[x != y for x,y in zip(a,b)] # difference list\\r\\n# now count occurrences of [False,True], as the first C++ solution does\\r\\nprint(sum(1 if not x and y else 0 for x,y in zip(s,s[1:])))\\n\"\n            })\n          })\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note that not all greedy problems necessarily require mathematical proofs of\\r\\ncorrectness. It is often sufficent to intuitively convince yourself your\\r\\nalgorithm is correct.\"\n    }), \"\\n\", _jsx(Info, {\n      title: \"Pro Tip\",\n      children: _jsx(_components.p, {\n        children: \"Sometimes, if the algorithm is easy enough to implement, you don't even need to\\r\\nconvince yourself it's correct; just code it and see if it passes. Competitive\\r\\nprogrammers refer to this as \\\"Proof by AC,\\\" or \\\"Proof by Accepted.\\\"\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\"\n    }), \"\\n\", \"\\n\", _jsxs(_components.h2, {\n      id: \"quiz\",\n      children: [_jsx(_components.a, {\n        href: \"#quiz\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Quiz\"]\n    }), \"\\n\", _jsxs(Quiz, {\n      children: [_jsxs(Quiz.Question, {\n        children: [_jsx(_components.p, {\n          children: \"What is a greedy algorithm?\"\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: \"An algorithm which backtracks in order to find the most optimal solution.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Incorrect. Although greedy algorithms can use backtracking, this is not true for all of them.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: \"An algorithm which makes the locally optimal choice at each stage.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Correct. This allows a greedy algorithm to be very efficient and often easier to code.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: \"An algorithm which tries every possible combination in order to find the most optimal outcome.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsxs(_components.p, {\n              children: [\"Incorrect. This is known as \", _jsx(_components.a, {\n                href: \"/bronze/intro-complete\",\n                children: \"complete search\"\n              }), \" or \", _jsx(_components.a, {\n                href: \"/bronze/intro-complete\",\n                children: \"brute force\"\n              }), \".\"]\n            })\n          })]\n        })]\n      }), _jsxs(Quiz.Question, {\n        children: [_jsx(_components.p, {\n          children: \"Why would a greedy algorithm be preferred over a complete search algorithm when faced with a large input size?\"\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: \"Since greedy algorithms directly construct an answer, greedy algorithms are generally more efficient.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Correct.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: \"Since finding an optimal choice is often easier than doing casework for all pairs, greedy algorithms are easier to implement.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Incorrect. This varies for every problem.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: \"Greedy algorithms are much easier to debug.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Incorrect. This varies for every problem.\"\n            })\n          })]\n        })]\n      }), _jsxs(Quiz.Question, {\n        children: [_jsx(_components.p, {\n          children: \"Why should you learn how to greedily think about problems?\"\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: \"It provides a new outlook on a problem, and could help you solve a problem much faster!\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Correct. All of these are viable answers.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: \"It can be a substitute for some algorithms.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Correct. All of these are viable answers.\"\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  description,\n  frequency,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"Introduction to Greedy Algorithms","author":"Darren Yao, Benjamin Qi","contributors":"Ryan Chou","id":"intro-greedy","prerequisites":["ad-hoc","intro-ds"],"description":"Selecting the choice that seems to be the best at the moment at every step of your algorithm.","frequency":2},"parent":{"name":"Intro_Greedy","relativePath":"2_Bronze/Intro_Greedy.mdx"},"fields":{"division":"bronze"},"toc":{"cpp":[{"depth":2,"value":"Greedy Algorithms","slug":"greedy-algorithms"},{"depth":3,"value":"Example - Mad Scientist","slug":"example---mad-scientist"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Quiz","slug":"quiz"}],"java":[{"depth":2,"value":"Greedy Algorithms","slug":"greedy-algorithms"},{"depth":3,"value":"Example - Mad Scientist","slug":"example---mad-scientist"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Quiz","slug":"quiz"}],"py":[{"depth":2,"value":"Greedy Algorithms","slug":"greedy-algorithms"},{"depth":3,"value":"Example - Mad Scientist","slug":"example---mad-scientist"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Quiz","slug":"quiz"}]}},"moduleProblemLists":{"problemLists":[{"listId":"tutorial","problems":[{"uniqueId":"usaco-1012","name":"Mad Scientist","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1012","source":"Bronze","difficulty":"Easy","isStarred":false,"tags":["Greedy"],"solution":{"kind":"link","label":"In Module","labelTooltip":null,"url":"https://usaco.guide/bronze/intro-greedy#problem-usaco-1012","sketch":null}}]},{"listId":"general","problems":[{"uniqueId":"usaco-689","name":"Cow Tipping","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=689","source":"Bronze","difficulty":"Normal","isStarred":false,"tags":["Greedy"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-1084","name":"Even More Odd Photos","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1084","source":"Bronze","difficulty":"Normal","isStarred":false,"tags":["Greedy"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-785","name":"Out of Place","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=785","source":"Bronze","difficulty":"Hard","isStarred":true,"tags":["Greedy"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-989","name":"Race","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=989","source":"Bronze","difficulty":"Very Hard","isStarred":true,"tags":["Greedy"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"intro-greedy"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}