{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-987-word-processor/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-987\", source = \"USACO Bronze 2020 January\", title = \"Word Processor\", author = \"Danh Ta Chi Thanh\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_word_bronze_jan20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Python)\"\n      })\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <cstdio>\\r\\n#include <string>\\r\\nusing namespace std;\\r\\n\\r\\nint main(){\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0); // see Fast Input & Output\\r\\n\\tfreopen(\\\"word.in\\\",\\\"r\\\",stdin);\\r\\n\\tfreopen(\\\"word.out\\\",\\\"w\\\",stdout);\\r\\n\\r\\n\\t//Read N and K.\\r\\n\\tint N, K;\\r\\n\\tcin >> N >> K;\\r\\n\\r\\n\\t//This variable is used for storing the number of characters\\r\\n\\t//on the current line but NOT including the spaces characters.\\r\\n\\tint Word_Length = 0;\\r\\n\\r\\n\\tfor (int i = 0; i < N; ++i){\\r\\n\\t\\tstring S;\\r\\n\\t\\tcin >> S; //Read the next word.\\r\\n\\t\\t//Calculate the new length if we put the new word into the current line.\\r\\n\\t\\tWord_Length += S.length();\\r\\n\\t\\tif (Word_Length <= K) { //If it still satisfies the constraint then print that word.\\r\\n\\t\\t\\t//If it is not the first ever word then we print a space character\\r\\n\\t\\t\\tif(i) cout << \\\" \\\";\\r\\n\\t\\t\\tcout << S;\\r\\n\\t\\t}\\r\\n\\t\\telse { //Else we create a new line and print the word on that line.\\r\\n\\t\\t\\tcout << \\\"\\\\n\\\" << S;\\r\\n\\t\\t\\tWord_Length = S.length();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-987","source":"USACO Bronze 2020 January","title":"Word Processor","author":"Danh Ta Chi Thanh"},"parent":{"name":"usaco-987","relativePath":"usaco-987.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"expected-knowledge","title":"Expected Knowledge"}}}}]},"problemInfo":{"uniqueId":"usaco-987","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=987"}},"pageContext":{"id":"usaco-987"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}