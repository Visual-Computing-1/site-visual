{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-898-sleepy-cow-sort/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-898\", source = \"USACO Gold 2019 January\", title = \"Sleepy Cow Sorting\", author = \"Nathan Gong, Melody Yu (Video)\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Youtube: _missingComponent(\"Youtube\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, Youtube, MATHSPAN, LanguageSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_sleepy_gold_jan19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"video-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#video-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Video Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: The video solution might not be the same as other solutions. Code in C++.\"\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"6oyl7lTKdPY\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Sleepy {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tScanner sc = new Scanner(new File(\\\"sleepy.in\\\"));\\r\\n\\t\\tPrintWriter out = new PrintWriter(\\\"sleepy.out\\\");\\r\\n\\r\\n\\t\\tint n = sc.nextInt();\\r\\n\\t\\tint[] cows = new int[n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tcows[i] = sc.nextInt()-1;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * To find K, we first need to calculate the length of the longest\\r\\n\\t\\t * suffix of the array that is already in order. \\r\\n\\t\\t * \\r\\n\\t\\t * Then, we can subtract that length from N to get K\\r\\n\\t\\t * \\r\\n\\t\\t * Read the analysis of the bronze version of this problem to learn why\\r\\n\\t\\t * this is the case:\\r\\n\\t\\t * http://www.usaco.org/current/data/sol_sleepy_bronze_jan19.html\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tint suffixLength = 1;\\r\\n\\t\\tfor (int i = n-1; i >= 0; i--) {\\r\\n\\t\\t\\t// If current cow is in order, increment suffix length and continue\\r\\n\\t\\t\\t// Otherwise, there has been an inversion so we break from the loop\\r\\n\\t\\t\\tif (cows[i] > cows[i-1]) {\\r\\n\\t\\t\\t\\tsuffixLength++;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tint k = n-suffixLegth;\\r\\n\\t\\tout.println(k);\\r\\n\\r\\n\\t\\t/* To calculate the minimum amount of paces each cow needs to make,\\r\\n\\t\\t * we first need to find the number of cows in the sorted region that \\r\\n\\t\\t * are smaller than that cow (this is done through a segment tree).\\r\\n\\t\\t * \\r\\n\\t\\t * Then, we can add that to the number of cows that the cow has to move\\r\\n\\t\\t * through to reach the sorted region of the array, or in other words,\\r\\n\\t\\t * the number of cows to the right of the current cow that are in the\\r\\n\\t\\t * unsorted region of the array.\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tSegmentTree seg = new SegmentTree(n);\\r\\n\\t\\tfor (int i = k; i < n; i++) {\\r\\n\\t\\t\\tseg.add(cows[i], 1);\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < k; i++) {\\r\\n\\t\\t\\t// Takes the prefix sum up to cows[i] - 1, which calculates the\\r\\n\\t\\t\\t// number of cows smaller than the current cow\\r\\n\\t\\t\\tint smaller = seg.sum(0, cows[i]-1);\\r\\n\\r\\n\\t\\t\\tout.print(smaller + (k-i-1));\\r\\n\\t\\t\\tif (i < k-1) out.print(\\\" \\\");\\r\\n\\t\\t\\tseg.add(cows[i], 1);\\r\\n\\t\\t}\\r\\n\\t\\tout.println();\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class SegmentTree {\\r\\n\\t\\tprivate int[] tree;\\r\\n\\t\\tprivate int n;\\r\\n\\t\\r\\n\\t\\tpublic SegmentTree(int n) {\\r\\n\\t\\t\\tthis.n = n;\\r\\n\\t\\t\\ttree = new int[n*2];\\r\\n\\t\\t}\\r\\n\\t\\r\\n\\t\\tpublic int sum(int a, int b) {\\r\\n\\t\\t\\ta += n;\\r\\n\\t\\t\\tb += n;\\r\\n\\t\\t\\tint sum = 0;\\r\\n\\t\\t\\twhile (a <= b) {\\r\\n\\t\\t\\t\\tif (a%2 == 1) sum += tree[a++];\\r\\n\\t\\t\\t\\tif (b%2 == 0) sum += tree[b--];\\r\\n\\t\\t\\t\\ta /= 2;\\r\\n\\t\\t\\t\\tb /= 2;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn sum;\\r\\n\\t\\t}\\r\\n\\t\\r\\n\\t\\tpublic void add(int index, int amount) {\\r\\n\\t\\t\\tindex += n;\\r\\n\\t\\t\\ttree[index] += amount;\\r\\n\\t\\t\\tfor (index /= 2; index >= 1; index /= 2) {\\r\\n\\t\\t\\t\\ttree[index] = tree[2*index]+tree[2*index+1];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-898","source":"USACO Gold 2019 January","title":"Sleepy Cow Sorting","author":"Nathan Gong, Melody Yu (Video)"},"parent":{"name":"usaco-898","relativePath":"usaco-898.mdx"},"toc":{"cpp":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"PURS","title":"Point Update Range Sum"}}}}]},"problemInfo":{"uniqueId":"usaco-898","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=898"}},"pageContext":{"id":"usaco-898"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}