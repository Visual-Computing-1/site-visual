{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1681-game-routes/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1681\", source = \"CSES\", title = \"Game Routes\", author = \"Andrew Wang, Sofia Yang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    MATHDIV: _missingComponent(\"MATHDIV\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, MATHDIV, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N+M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N+M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This problem is very similar to the \\\"Longest Flight Route\\\" problem discussed\\r\\nearlier in this module. Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[v]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>v</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[v]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" denote the number of paths reaching \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \". We\\r\\ncan see,\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"dp[v]= \\\\sum_{\\\\text{edge } u\\\\to v \\\\text{ exists}}dp[u],\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>v</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><munder><mo>∑</mo><mrow><mtext>edge </mtext><mi>u</mi><mo>→</mo><mi>v</mi><mtext> exists</mtext></mrow></munder><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>u</mi><mo stretchy=\\\"false\\\">]</mo><mo separator=\\\"true\\\">,</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[v]= \\\\sum_{\\\\text{edge } u\\\\to v \\\\text{ exists}}dp[u],</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.4882em;vertical-align:-1.4382em;\\\"></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.05em;\\\"><span style=\\\"top:-1.8479em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord text mtight\\\"><span class=\\\"mord mtight\\\">edge </span></span><span class=\\\"mord mathnormal mtight\\\">u</span><span class=\\\"mrel mtight\\\">→</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord text mtight\\\"><span class=\\\"mord mtight\\\"> exists</span></span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∑</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.4382em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"with an exception of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[1]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[1]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \", or the starting node, having a value of 1. We\\r\\nprocess the nodes topologically so \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[u]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>u</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[u]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" will already have been computed\\r\\nbefore \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[v]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>v</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[v]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <queue>\\r\\nusing namespace std;\\r\\nint n;\\r\\nvector<int> edge[100001];\\r\\nvector<int> backedge[100001];\\r\\n\\r\\nint main(){\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tint m; cin >> n >> m;\\r\\n\\tint in_degree[n+1], dp[n+1];\\r\\n\\tfor(int i = 0; i <= n; i++){\\r\\n\\t\\tin_degree[i] = 0;\\r\\n\\t\\tdp[i] = 0;\\r\\n\\t}\\r\\n\\tdp[1] = 1;\\r\\n\\tfor(int i = 0; i < m; i++){\\r\\n\\t\\tint a,b; cin >> a >> b;\\r\\n\\t\\tedge[a].push_back(b);\\r\\n\\t\\tbackedge[b].push_back(a);\\r\\n\\t\\tin_degree[b]++;\\r\\n\\t}\\r\\n\\t//uses Kahn's algorithm\\r\\n\\tqueue<int> q;\\r\\n\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\tif(in_degree[i] == 0) {\\r\\n\\t\\t\\tq.push(i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\twhile(!q.empty()) {\\r\\n\\t\\tint node = q.front();\\r\\n\\t\\tq.pop();\\r\\n\\t\\tfor(int next : edge[node]) {\\r\\n\\t\\t\\tin_degree[next]--;\\r\\n\\t\\t\\tif(in_degree[next] == 0) q.push(next);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor(int prev : backedge[node]) {\\r\\n\\t\\t\\tdp[node] = (dp[node] + dp[prev]) % 1000000007;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << dp[n] << endl;\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class cses1681 {\\r\\n\\tpublic static final int MOD = (int) 1e9 + 7;\\r\\n\\tpublic static ArrayList<Integer>[] forwards;\\r\\n\\tpublic static ArrayList<Integer>[] backwards;\\r\\n\\tpublic static int[] degree;\\r\\n\\tpublic static int[] dp;\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(r.readLine());\\r\\n\\t\\tint N = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint M = Integer.parseInt(st.nextToken());\\r\\n\\r\\n\\t\\tforwards = new ArrayList[N];\\r\\n\\t\\tbackwards = new ArrayList[N];\\r\\n\\t\\tdegree = new int[N];\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tforwards[i] = new ArrayList<>();\\r\\n\\t\\t\\tbackwards[i] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(r.readLine());\\r\\n\\t\\t\\tint a = Integer.parseInt(st.nextToken()) - 1;\\r\\n\\t\\t\\tint b = Integer.parseInt(st.nextToken()) - 1;\\r\\n\\t\\t\\tforwards[a].add(b);\\r\\n\\t\\t\\tbackwards[b].add(a);\\r\\n\\t\\t\\tdegree[b]++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//dp[i] is the number of ways to get to node i.\\r\\n\\t\\tdp = new int[N];\\r\\n\\t\\tdp[0] = 1;\\r\\n\\r\\n\\t\\t//Add source nodes with only outgoing edges to queue.\\r\\n\\t\\tQueue<Integer> q = new LinkedList<>();\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif (degree[i] == 0) {\\r\\n\\t\\t\\t\\tq.add(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\twhile (!q.isEmpty()) {\\r\\n\\t\\t\\t//Remove the node from the queue and check its neighbors.\\r\\n\\t\\t\\tint cur = q.poll();\\r\\n\\t\\t\\tfor (int next : forwards[cur]) {\\r\\n\\t\\t\\t\\tdegree[next]--;\\r\\n\\t\\t\\t\\t//Add new sources to queue.\\r\\n\\t\\t\\t\\tif (degree[next] == 0) {\\r\\n\\t\\t\\t\\t\\tq.add(next);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Calculate the number of ways by checking backwards.\\r\\n\\t\\t\\tfor (int prev : backwards[cur]) {\\r\\n\\t\\t\\t\\tdp[cur] = (dp[cur] + dp[prev]) % MOD;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(dp[N - 1]);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1681","source":"CSES","title":"Game Routes","author":"Andrew Wang, Sofia Yang"},"parent":{"name":"cses-1681","relativePath":"cses-1681.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"toposort","title":"Topological Sort"}}}}]},"problemInfo":{"uniqueId":"cses-1681","url":"https://cses.fi/problemset/task/1681"}},"pageContext":{"id":"cses-1681"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}