{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-790-cow-at-large/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-790\", source = \"USACO Gold 2018 January\", title = \"Cow At Large\", author = \"Qi Wang, Jesse Choe\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, JavaSection, HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_atlarge_gold_jan18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Suppose that a given farmer reaches Bessie at barn \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \"; this is only possible if that farmer reached barn \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" either:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"At the same time as Bessie\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"At an earlier time than Bessie\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This means that we can treat this problem as a shortest path problem, where the farmer reaches barn \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" at the same time or earlier than Bessie if \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist1[i]} \\\\leq \\\\texttt{dist2[i]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist1[i]</mtext><mo>≤</mo><mtext mathvariant=\\\"monospace\\\">dist2[i]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist1[i]} \\\\leq \\\\texttt{dist2[i]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8304em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist1[i]</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist2[i]</span></span></span></span></span>\"\n      }), \". Here, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist1[i]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist1[i]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist1[i]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist1[i]</span></span></span></span></span>\"\n      }), \" represents the shortest distance between any given farmer and the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \"-th barn, and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist2[i]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist2[i]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist2[i]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist2[i]</span></span></span></span></span>\"\n      }), \" represents the shortest distance between Bessie and the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \"-th barn. Note that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist2[i]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist2[i]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist2[i]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist2[i]</span></span></span></span></span>\"\n      }), \" can also be represented as the tree depth at barn \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" with the tree rooted at barn \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can run BFS to find \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist1[i]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist1[i]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist1[i]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist1[i]</span></span></span></span></span>\"\n      }), \" and DFS or BFS to find \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist2[i]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist2[i]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist2[i]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist2[i]</span></span></span></span></span>\"\n      }), \". Once we find these shortest distances, we can simulate Bessies' movement by \\\"catching\\\" her when \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist1[i]} \\\\leq \\\\texttt{dist2[i]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist1[i]</mtext><mo>≤</mo><mtext mathvariant=\\\"monospace\\\">dist2[i]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist1[i]} \\\\leq \\\\texttt{dist2[i]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8304em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist1[i]</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist2[i]</span></span></span></span></span>\"\n      }), \". Once Bessie is caught, we can stop her movement and increase the total number of farmers by 1. This greedily finds the minimum number of farmers, since we only store the \\\"optimal\\\" farmers in our answer.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\nusing vl = vector<ll>;\\r\\nusing pl = pair<ll, ll>;\\r\\n\\r\\n#define pb push_back\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\nconst ll MAXN = 1e5, INF = 1e9;\\r\\n\\r\\nvl adj[MAXN];\\r\\n\\r\\nint main(){\\r\\n\\tfreopen(\\\"atlarge.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"atlarge.out\\\", \\\"w\\\", stdout);\\r\\n\\tll n, k; \\r\\n\\tcin >> n >> k; \\r\\n\\t--k;\\r\\n\\tfor (int i = 0; i < n - 1; i++) {\\r\\n\\t\\tll a, b; \\r\\n\\t\\tcin >> a >> b; \\r\\n\\t\\t--a, --b;\\r\\n\\t\\tadj[a].pb(b), adj[b].pb(a);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/* \\r\\n\\t * dist2 represents the shortest path from \\r\\n\\t * Bessie's location to barn i\\r\\n\\t * dist1 represents the shortest path from \\r\\n\\t * any given farmers' location to barn i\\r\\n\\t */\\r\\n\\tvl dist1(n, INF), dist2(n, INF);\\r\\n\\tdist2[k] = 0;\\r\\n\\tqueue<ll> q; \\r\\n\\tq.push(k);\\r\\n\\t\\r\\n\\t// BFS to find the shortest path from node k to node i\\r\\n\\twhile (!q.empty()) {\\r\\n\\t\\tll cur = q.front(); \\r\\n\\t\\tq.pop();\\r\\n\\t\\tfor (ll u: adj[cur]) {\\r\\n\\t\\t\\tif (dist2[cur] + 1 < dist2[u]) {\\r\\n\\t\\t\\t\\tdist2[u] = dist2[cur] + 1;\\r\\n\\t\\t\\t\\tq.push(u);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\t\\t\\t\\t\\t      \\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tif (adj[i].size() == 1) {\\r\\n\\t\\t\\tq.push(i);\\r\\n\\t\\t\\tdist1[i] = 0;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t/* \\r\\n\\t * BFS to find the shortest distance between node j to node i, \\r\\n\\t * where j is a leaf node (the farmers' location)\\r\\n\\t */\\r\\n\\twhile (!q.empty()) {\\r\\n\\t\\tll cur = q.front(); \\r\\n\\t\\tq.pop();\\r\\n\\t\\tfor (ll u: adj[cur]) {\\r\\n\\t\\t\\tif (dist1[cur] + 1 < dist1[u]) {\\r\\n\\t\\t\\t\\tdist1[u] = dist1[cur] + 1;\\r\\n\\t\\t\\t\\tq.push(u);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\t\\t\\t\\t\\t      \\r\\n\\tll res = 0; \\r\\n\\tq.push(k); \\r\\n\\tvl vis(n);\\r\\n\\twhile (!q.empty()) {\\r\\n\\t\\tll cur = q.front(); \\r\\n\\t\\tq.pop();\\r\\n\\t\\t// Stop Bessie if a given farmer arrives at \\\"cur\\\" first\\r\\n\\t\\tif (dist1[cur] <= dist2[cur]) {\\r\\n\\t\\t\\tres++;\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\t// Used to avoid backtracking\\r\\n\\t\\tif (vis[cur]) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tvis[cur] = true;\\r\\n\\t\\tfor (ll u: adj[cur]) {\\r\\n\\t\\t\\tq.push(u);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << res << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"java-implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#java-implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Java Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class AtLarge {\\r\\n\\tstatic int N, K, A = 0;\\r\\n\\tstatic List<Integer>[] adj;\\r\\n\\tstatic int[] depth, leaf, inDeg, parent;\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tKattio io = new Kattio(\\\"atlarge\\\");\\r\\n\\r\\n\\t\\tN = io.nextInt();\\r\\n\\t\\tK = io.nextInt();\\r\\n\\r\\n\\t\\tadj = new List[N];\\r\\n\\t\\tdepth = new int[N];\\r\\n\\t\\tleaf = new int[N];\\r\\n\\t\\tinDeg = new int[N];\\r\\n\\t\\tparent = new int[N];\\r\\n\\r\\n\\t\\tArrays.fill(depth, -1);\\r\\n\\t\\tArrays.fill(leaf, Integer.MAX_VALUE);\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tadj[i] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N - 1; i++) {\\r\\n\\t\\t\\tint a = io.nextInt() - 1;\\r\\n\\t\\t\\tint b = io.nextInt() - 1;\\r\\n\\r\\n\\t\\t\\tadj[a].add(b);\\r\\n\\t\\t\\tadj[b].add(a);\\r\\n\\r\\n\\t\\t\\tinDeg[a]++;\\r\\n\\t\\t\\tinDeg[b]++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdepth[K - 1] = 0;\\r\\n\\t\\tdfs(K - 1);\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif (inDeg[i] == 1) {\\r\\n\\t\\t\\t\\tbfs(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif (i != K - 1) {\\r\\n\\t\\t\\t\\tif (depth[parent[i]] < leaf[parent[i]] && depth[i] >= leaf[i]) {\\r\\n\\t\\t\\t\\t\\tA++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(A);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void dfs(int n) {\\r\\n\\t\\tfor (Integer c : adj[n]) {\\r\\n\\t\\t\\tif(depth[c] != -1) continue;\\r\\n\\r\\n\\t\\t\\tdepth[c] = depth[n] + 1;\\r\\n\\t\\t\\tparent[c] = n;\\r\\n\\t\\t\\tdfs(c);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void bfs(int l) {\\r\\n\\t\\tQueue<Edge> q = new LinkedList<>();\\r\\n\\t\\tq.add(new Edge(l, 0));\\r\\n\\r\\n\\t\\twhile(!q.isEmpty()) {\\r\\n\\t\\t\\tEdge curr = q.poll();\\r\\n\\r\\n\\t\\t\\tleaf[curr.n] = Math.min(leaf[curr.n], curr.d);\\r\\n\\r\\n\\t\\t\\tfor(Integer n : adj[curr.n]) {\\r\\n\\t\\t\\t\\tif(leaf[n] < curr.d + 1) continue;\\r\\n\\r\\n\\t\\t\\t\\tq.add(new Edge(n, curr.d + 1));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class Edge {\\r\\n\\t\\tint n, d;\\r\\n\\t\\tpublic Edge(int a, int b) {\\r\\n\\t\\t\\tn = a;\\r\\n\\t\\t\\td = b;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-790","source":"USACO Gold 2018 January","title":"Cow At Large","author":"Qi Wang, Jesse Choe"},"parent":{"name":"usaco-790","relativePath":"usaco-790.mdx"},"toc":{"cpp":[],"java":[{"depth":2,"value":"Java Implementation","slug":"java-implementation"}],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"bfs","title":"Breadth First Search (BFS)"}}}}]},"problemInfo":{"uniqueId":"usaco-790","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=790"}},"pageContext":{"id":"usaco-790"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}