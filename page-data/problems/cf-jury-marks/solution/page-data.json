{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-jury-marks/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-831C\", source = \"CF\", title = \"Jury Marks\", author = \"Danh Ta Chi Thanh, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, HeaderLink, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/53302\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(K^2 \\\\log K)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>K</mi><mn>2</mn></msup><mi>log</mi><mo>‚Å°</mo><mi>K</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(K^2 \\\\log K)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint mark_num;\\r\\n\\tint remember_num;\\r\\n\\tcin >> mark_num >> remember_num;\\r\\n\\r\\n\\t// All net changes in the score\\r\\n\\tvector<int> changes(mark_num + 1);\\r\\n\\tvector<int> scores(remember_num);\\r\\n\\tfor (int i = 1; i <= mark_num; ++i) {\\r\\n\\t\\tcin >> changes[i];\\r\\n\\t\\tchanges[i] += changes[i - 1];\\r\\n\\t}\\r\\n\\tfor (int& p : scores) {\\r\\n\\t\\tcin >> p;\\r\\n\\t}\\r\\n\\r\\n\\tset<int> poss_starts;\\r\\n\\tfor (int m = 1; m <= mark_num; ++m) {\\r\\n\\t\\tposs_starts.insert(scores.front() - changes[m]);\\r\\n\\t}\\r\\n\\r\\n\\tint ans = 0;\\r\\n\\tfor (int s : poss_starts) {\\r\\n\\t\\t// What all the scores are going to now be given the starting score\\r\\n\\t\\tset<int> points;\\r\\n\\t\\tfor (int i = 1; i <= mark_num; ++i) {\\r\\n\\t\\t\\tpoints.insert(s + changes[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbool valid = true;\\r\\n\\t\\tfor (int p : scores) {\\r\\n\\t\\t\\tvalid &= points.count(p);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tans += valid;\\r\\n\\t}\\r\\n\\tcout << ans << endl;\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class JuryMarks {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint numJury = io.nextInt();\\r\\n\\t\\tint numScores = io.nextInt();\\r\\n\\t\\t// All net changes in the score\\r\\n\\t\\tint[] changes = new int[numJury + 1];\\r\\n\\t\\tint[] scores = new int[numScores];\\r\\n\\r\\n\\t\\tfor (int x = 1; x <= numJury; x++) {\\r\\n\\t\\t\\tchanges[x] = io.nextInt() + changes[x - 1];\\r\\n\\t\\t}\\r\\n\\t\\tfor (int x = 0; x < numScores; x++) {\\r\\n\\t\\t\\tscores[x] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tSet<Integer> possStarts = new TreeSet<>();\\r\\n\\t\\tfor (int x = 1; x <= numJury; x++) {\\r\\n\\t\\t\\tpossStarts.add(scores[0] - changes[x]);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tint validStarts = 0;\\r\\n\\t\\tfor (int s : possStarts) {\\r\\n\\t\\t\\t// What all the scores are going to now be given the starting score\\r\\n\\t\\t\\tSet<Integer> points = new TreeSet<>();\\r\\n\\t\\t\\tfor (int i = 1; i <= numJury; i++) {\\r\\n\\t\\t\\t\\tpoints.add(s + changes[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tboolean valid = true;\\r\\n\\t\\t\\tfor (int p : scores) {\\r\\n\\t\\t\\t\\tvalid &= points.contains(p);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvalidStarts += valid ? 1 : 0;\\r\\n\\t\\t}\\r\\n\\t\\tio.println(validStarts);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"mark_num, remember_num = [int(i) for i in input().split()]\\r\\n\\r\\n# All net changes in the score\\r\\nchanges = [0] + [int(i) for i in input().split()]\\r\\nscores = {int(i) for i in input().split()}\\r\\nassert mark_num == len(changes) - 1 and len(scores) == remember_num\\r\\n \\r\\nfor i in range(1, len(changes)):\\r\\n\\tchanges[i] += changes[i - 1]\\r\\n \\r\\nposs_starts = set()\\r\\nrandom_score = next(iter(scores))\\r\\nfor c in range(1, len(changes)):\\r\\n\\tposs_starts.add(random_score - changes[c])\\r\\n\\r\\nvalid_starts = 0\\r\\nfor s in poss_starts:\\r\\n\\t# What all the scores are going to now be given the starting score\\r\\n\\tresulting_scores = set()\\r\\n\\tfor c in range(1, len(changes)):\\r\\n\\t\\tresulting_scores.add(s + changes[c])\\r\\n\\t\\r\\n\\tvalid_starts += scores.issubset(resulting_scores)\\r\\n\\r\\nprint(valid_starts)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-831C","source":"CF","title":"Jury Marks","author":"Danh Ta Chi Thanh, Brad Ma"},"parent":{"name":"cf-831C","relativePath":"cf-831C.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sets","title":"Introduction to Sets & Maps"}}}}]},"problemInfo":{"uniqueId":"cf-831C","url":"https://codeforces.com/contest/831/problem/C"}},"pageContext":{"id":"cf-831C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}