{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-687-dont-be-last/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-687\", source = \"USACO Bronze 2017 January\", title = \"Don't Be Last\", author = \"Benjamin Qi, Jesse Choe, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_notlast_bronze_jan17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The test data is not particularly strong. Make sure that your solution outputs\\r\\n\", _jsx(_components.code, {\n        children: \"Tie\"\n      }), \" in both of the following test cases.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"4\\r\\nBessie 1\\r\\nElsie 1\\r\\nDaisy 2\\r\\nGertie 3\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"7\\r\\nBessie 1\\r\\nElsie 1\\r\\nDaisy 2\\r\\nGertie 2\\r\\nAnnabelle 3\\r\\nMaggie 4\\r\\nHenrietta 4\\n\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nconstexpr int COW_NUM = 7;\\r\\n\\r\\nint main() {\\r\\n\\tifstream read(\\\"notlast.in\\\");\\r\\n\\tint N;\\r\\n\\tread >> N;\\r\\n\\r\\n\\tmap<string, int> raw;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tstring a;\\r\\n\\t\\tint b;\\r\\n\\t\\tread >> a >> b;\\r\\n\\t\\traw[a] += b;\\r\\n\\t}\\r\\n\\r\\n\\tvector<pair<int, string>> cows;\\r\\n\\tfor (pair<string, int> t : raw) {\\r\\n\\t\\tcows.push_back({t.second, t.first});\\r\\n\\t}\\r\\n\\tsort(cows.begin(), cows.end());\\r\\n\\r\\n\\tint ind = 0;\\r\\n\\t/*\\r\\n\\t * only move the pointer if all cows produced some milk, as\\r\\n\\t * any unmentioned cows will have produced 0 milk\\r\\n\\t */\\r\\n\\tif (cows.size() == COW_NUM) {\\r\\n\\t\\twhile (ind < cows.size() && cows[ind].first == cows[0].first) {\\r\\n\\t\\t\\tind++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tif (ind < cows.size()\\r\\n\\t\\t\\t&& (ind + 1 == cows.size() ||\\r\\n\\t\\t\\t\\tcows[ind].first != cows[ind + 1].first)) {\\r\\n\\t\\tofstream(\\\"notlast.out\\\") << cows[ind].second << endl;\\r\\n\\t} else {\\r\\n\\t\\tofstream(\\\"notlast.out\\\") << \\\"Tie\\\" << endl;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class NotLast {\\r\\n\\tstatic class Cow {\\r\\n\\t\\tpublic String name;\\r\\n\\t\\tpublic int amt;\\r\\n\\r\\n\\t\\tpublic Cow(String name, int amt) {\\r\\n\\t\\t\\tthis.name = name;\\r\\n\\t\\t\\tthis.amt = amt;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tstatic final int COW_NUM = 7;\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new FileReader(\\\"notlast.in\\\"));\\r\\n\\t\\t\\r\\n\\t\\tint cowNum = Integer.parseInt(read.readLine());\\r\\n\\t\\tHashMap<String, Integer> raw = new HashMap<>();\\r\\n\\t\\tfor (int c = 0; c < cowNum; c++) {\\r\\n\\t\\t\\tStringTokenizer cow = new StringTokenizer(read.readLine());\\r\\n\\t\\t\\tString name = cow.nextToken();\\r\\n\\t\\t\\tint amt = Integer.parseInt(cow.nextToken());\\r\\n\\t\\t\\traw.put(name, raw.getOrDefault(name, 0) + amt);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tArrayList<Cow> cows = new ArrayList<>();\\r\\n\\t\\tfor (String n : raw.keySet()) {\\r\\n\\t\\t\\tcows.add(new Cow(n, raw.get(n)));\\r\\n\\t\\t}\\r\\n\\t\\tcows.sort(Comparator.comparingInt(c -> c.amt));\\r\\n\\r\\n\\t\\tint ind = 0;\\r\\n\\t\\t/*\\r\\n\\t\\t * only move the pointer if all cows produced some milk, as\\r\\n\\t\\t * any unmentioned cows will have produced 0 milk\\r\\n\\t\\t */\\r\\n\\t\\tif (cows.size() == COW_NUM) {\\r\\n\\t\\t\\twhile (ind < cows.size() && cows.get(ind).amt == cows.get(0).amt) {\\r\\n\\t\\t\\t\\tind++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tPrintWriter written = new PrintWriter(\\\"notlast.out\\\");\\r\\n\\t\\tif (ind < cows.size()\\r\\n\\t\\t\\t\\t&& (ind + 1 == cows.size() ||\\r\\n\\t\\t\\t\\t\\tcows.get(ind).amt != cows.get(ind + 1).amt)) {\\r\\n\\t\\t\\twritten.println(cows.get(ind).name);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\twritten.println(\\\"Tie\\\");\\r\\n\\t\\t}\\r\\n\\t\\twritten.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"COW_NUM = 7\\r\\n\\r\\nwith open('notlast.in') as read:\\r\\n\\traw = {}\\r\\n\\tfor _ in range(int(read.readline())):\\r\\n\\t\\tname, amt = read.readline().split()\\r\\n\\t\\tamt = int(amt)\\r\\n\\t\\tif name not in raw:\\r\\n\\t\\t\\traw[name] = 0\\r\\n\\t\\traw[name] += amt\\r\\n\\r\\ncows = [(amt, name) for name, amt in raw.items()]\\r\\ncows.sort()\\r\\n\\r\\nind = 0\\r\\n\\\"\\\"\\\"\\r\\nonly move the pointer if all cows produced some milk, as\\r\\nany unmentioned cows will have produced 0 milk\\r\\n\\\"\\\"\\\"\\r\\nif len(cows) == COW_NUM:\\r\\n\\twhile ind < len(cows) and cows[ind][0] == cows[0][0]:\\r\\n\\t\\tind += 1\\r\\n\\r\\nwritten = open('notlast.out', 'w')\\r\\nif (ind < len(cows)\\r\\n\\t\\tand (ind + 1 == len(cows) or cows[ind][0] != cows[ind + 1][0])):\\r\\n\\tprint(cows[ind][1], file=written)\\r\\nelse:\\r\\n\\tprint('Tie', file=written)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-687","source":"USACO Bronze 2017 January","title":"Don't Be Last","author":"Benjamin Qi, Jesse Choe, Kevin Sheng"},"parent":{"name":"usaco-687","relativePath":"usaco-687.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sets","title":"Introduction to Sets & Maps"}}}}]},"problemInfo":{"uniqueId":"usaco-687","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=687"}},"pageContext":{"id":"usaco-687"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}