{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1091-concert-tickets/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1091\", source = \"CSES\", title = \"Concert Tickets\", author = \"Danh Ta Chi Thanh, Ben Dodge\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/83295\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Unofficial Editorial (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For each customer, we want to find the maximum possible ticket price they will\\r\\naccept from the available tickets. If the customer's maximum price is too low,\\r\\nso that no ticket price is below it, we can return -1. If not, we find the\\r\\ngreatest ticket price less than or equal to the maximum price, and then remove\\r\\nthat price as specified by the problem. We use a multiset for this.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((n+ m)\\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy=\\\"false\\\">)</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((n+ m)\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\n//variables used for the current problem\\r\\nint n,m,h,t; multiset<int> tickets;\\r\\n\\r\\nvoid solve() {\\r\\n\\tcin >> n >> m;\\r\\n\\tfor (int i=0;i<n;++i){\\r\\n\\t\\tcin >> h; tickets.insert(h);\\r\\n\\t}\\r\\n\\tfor (int i=0;i<m;++i){\\r\\n\\t\\tcin >> t;\\r\\n\\t\\tauto it = tickets.upper_bound(t);\\r\\n\\t\\tif (it==tickets.begin()){\\r\\n\\t\\t\\tcout << -1 << \\\"\\\\n\\\";\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\tcout << *(--it) << \\\"\\\\n\\\";\\r\\n\\t\\t\\ttickets.erase(it);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main(){\\r\\n\\tios::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\tsolve();\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class ConcertTickets {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tReader io = new Reader();\\r\\n\\t\\tPrintWriter pw = new PrintWriter(System.out);\\r\\n\\r\\n\\t\\tint ticketNum = io.nextInt();\\r\\n\\t\\tint peopleNum = io.nextInt();\\r\\n\\t\\t// No multiset in java so we'll have to use a TreeMap\\r\\n\\t\\tNavigableMap<Integer, Integer> ticketMultiset = new TreeMap<>();\\r\\n\\t\\tMap.Entry<Integer, Integer> val;\\r\\n\\r\\n\\t\\tfor (int i = 0; i < ticketNum; i++) {\\r\\n\\t\\t\\tint priceOfTicket = io.nextInt();\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * If the set already contains the same key value, \\r\\n\\t\\t\\t * create another pair next to it\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tif (ticketMultiset.containsKey(priceOfTicket)) {\\r\\n\\t\\t\\t\\tticketMultiset.put(priceOfTicket, \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tticketMultiset.get(priceOfTicket) + 1);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tticketMultiset.put(priceOfTicket, 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < peopleNum; i++) {\\r\\n\\t\\t\\tint customerMaxPrice = io.nextInt();\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * Get the optimal ticket for this customer \\r\\n\\t\\t\\t * We add 1 because lowerEntry returns the highest \\r\\n\\t\\t\\t * *strictly* lower entry\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tval = ticketMultiset.lowerEntry(customerMaxPrice + 1); \\r\\n\\t\\t\\t// If there are no possible prices, we can exit and return -1\\r\\n\\t\\t\\tif (val != null) {\\r\\n\\t\\t\\t\\tpw.println(val.getKey());\\r\\n\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t * If there's more than one set with the key value, \\r\\n\\t\\t\\t\\t * then replace the current set with \\r\\n\\t\\t\\t\\t * the next-lowest set with the same key \\r\\n\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\tif (val.getValue() == 1) {\\r\\n\\t\\t\\t\\t\\tticketMultiset.remove(val.getKey());\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tticketMultiset.put(val.getKey(), val.getValue() - 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tpw.println(-1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n\\t// Kattio is too slow\\r\\n\\t//BeginCodeSnip{Fast Reader}\\r\\n\\tstatic class Reader\\r\\n\\t{\\r\\n\\t\\tfinal private int BUFFER_SIZE = 1 << 16;\\r\\n\\t\\tprivate DataInputStream din;\\r\\n\\t\\tprivate byte[] buffer;\\r\\n\\t\\tprivate int bufferPointer, bytesRead;\\r\\n \\r\\n\\t\\tpublic Reader()\\r\\n\\t\\t{\\r\\n\\t\\t\\tdin = new DataInputStream(System.in);\\r\\n\\t\\t\\tbuffer = new byte[BUFFER_SIZE];\\r\\n\\t\\t\\tbufferPointer = bytesRead = 0;\\r\\n\\t\\t}\\r\\n\\t\\tprivate void fillBuffer() throws IOException\\r\\n\\t\\t{\\r\\n\\t\\t\\tbytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\\r\\n\\t\\t\\tif (bytesRead == -1)\\r\\n\\t\\t\\t\\tbuffer[0] = -1;\\r\\n\\t\\t}\\r\\n \\r\\n\\t\\tprivate byte read() throws IOException\\r\\n\\t\\t{\\r\\n\\t\\t\\tif (bufferPointer == bytesRead)\\r\\n\\t\\t\\t\\tfillBuffer();\\r\\n\\t\\t\\treturn buffer[bufferPointer++];\\r\\n\\t\\t}\\r\\n \\r\\n\\t\\tpublic void close() throws IOException\\r\\n\\t\\t{\\r\\n\\t\\t\\tif (din == null)\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\tdin.close();\\r\\n\\t\\t}\\r\\n\\t\\tpublic int nextInt() throws IOException\\r\\n\\t\\t{\\r\\n\\t\\t\\tint ret = 0;\\r\\n\\t\\t\\tbyte c = read();\\r\\n\\t\\t\\twhile (c <= ' ')\\r\\n\\t\\t\\t\\tc = read();\\r\\n\\t\\t\\tboolean neg = (c == '-');\\r\\n\\t\\t\\tif (neg)\\r\\n\\t\\t\\t\\tc = read();\\r\\n\\t\\t\\tdo\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tret = ret * 10 + c - '0';\\r\\n\\t\\t\\t}  while ((c = read()) >= '0' && c <= '9');\\r\\n \\r\\n\\t\\t\\tif (neg)\\r\\n\\t\\t\\t\\treturn -ret;\\r\\n\\t\\t\\treturn ret;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t//EndCodeSnip{}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1091","source":"CSES","title":"Concert Tickets","author":"Danh Ta Chi Thanh, Ben Dodge"},"parent":{"name":"cses-1091","relativePath":"cses-1091.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorted-sets","title":"More Operations on Sorted Sets"}}}}]},"problemInfo":{"uniqueId":"cses-1091","url":"https://cses.fi/problemset/task/1091"}},"pageContext":{"id":"cses-1091"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}