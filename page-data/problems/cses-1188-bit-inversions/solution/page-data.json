{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1188-bit-inversions/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1188\", source = \"CSES\", title = \"Bit Inversions\", author = \"Dustin Miao\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"We can use a Segment Tree over the given array of bits. Assume, for now, that we are querying for the longest continuous subsegment of 1s. In a node of\\r\\nthe segment tree corresponding to range \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[l, r]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \", we will store three pieces of information:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"The longest prefix of 1s in the range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[l, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \" (denote this as \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"P\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The longest suffix of 1s in the range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[l, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \" (denote this as \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"S\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The longest subarray of 1s in the range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[l, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \" (denote this as \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"A\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The length of the subarray (equivalent to \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"r - l + 1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">r - l + 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \") (denote this as \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"L\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\\\"application/x-tex\\\">L</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span></span></span></span>\"\n        }), \")\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To merge left child \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" and right child \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \" to make node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a.P = a.L\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>P</mi><mo>=</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a.P = a.L</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c.P = a.L + b.P\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>P</mi><mo>=</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi><mo>+</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c.P = a.L + b.P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n        }), \"; otherwise, \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c.P = a.P\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>P</mi><mo>=</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c.P = a.P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"b.S = b.L\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi><mo>=</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b.S = b.L</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c.S = b.L + a.S\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi><mo>=</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi><mo>+</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c.S = b.L + a.S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n        }), \"; otherwise, \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c.S = b.S\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi><mo>=</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c.S = b.S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c.A = \\\\max(a.A, b.A, a.S + b.P)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>A</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>A</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>A</mi><mo separator=\\\"true\\\">,</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi><mo>+</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>P</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">c.A = \\\\max(a.A, b.A, a.S + b.P)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c.L = a.L + b.L\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi><mo>=</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi><mo>+</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c.L = a.L + b.L</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span></span></span></span>\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A bit flip operation corresponds to a point update on the segment tree and a longest homogeneous subarray query corresponds to the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n      }), \" value of\\r\\nthe root node. We can thus handle all operations efficiently. Note that using two segment trees that are inverses of each other (one for the 0s and one for the 1s)\\r\\nmakes the implementation easier.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((N + Q)\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>Q</mi><mo stretchy=\\\"false\\\">)</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((N + Q)\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nstruct node { int P, S, A, L; } val0 {0, 0, 0, 1}, val1{1, 1, 1, 1};\\r\\n\\r\\nnode operator+(const node& a, const node& b) {\\r\\n\\treturn { a.P == a.L ? a.L + b.P : a.P,\\r\\n\\t\\t\\t b.S == b.L ? b.L + a.S : b.S, \\r\\n\\t\\t\\t max(max(a.A, b.A), a.S + b.P),\\r\\n\\t\\t\\t a.L + b.L};\\r\\n}\\r\\n\\r\\ntemplate<typename T, size_t N>\\r\\nclass SegmentTree {\\r\\nprivate:\\r\\n\\tT tree[4 * N], dval;\\r\\n\\tfunction<T(const T&, const T&)> merge;\\r\\n\\r\\n\\tvoid build(int t, int tl, int tr) {\\r\\n\\t\\tif (tl == tr) {\\r\\n\\t\\t\\ttree[t] = dval;\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tbuild(t << 1, tl, (tl + tr) >> 1);\\r\\n\\t\\tbuild(t << 1 | 1, ((tl + tr) >> 1) + 1, tr);\\r\\n\\t\\ttree[t] = merge(tree[t << 1], tree[t << 1 | 1]);\\r\\n\\t} \\r\\n\\r\\n\\tvoid update(int i, T v, int t, int tl, int tr) {\\r\\n\\t\\tif (tl == tr) {\\r\\n\\t\\t\\ttree[t] = v;\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tif (i <= (tl + tr) >> 1) \\r\\n\\t\\t\\tupdate(i, v, t << 1, tl, (tl + tr) >> 1);\\r\\n\\t\\telse \\r\\n\\t\\t\\tupdate(i, v, t << 1 | 1, ((tl + tr) >> 1) + 1, tr);\\r\\n\\t\\ttree[t] = merge(tree[t << 1], tree[t << 1 | 1]);\\r\\n\\t}\\r\\n\\r\\n\\tT query(int l, int r, int t, int tl, int tr) {\\r\\n\\t\\tif (r < tl || tr < l)\\r\\n\\t\\t\\treturn dval;\\r\\n\\t\\tif (l <= tl && tr <= r)\\r\\n\\t\\t\\treturn tree[t];\\r\\n\\t\\treturn merge(query(l, r, t << 1, tl, (tl + tr) >> 1), query(l, r, t << 1 | 1, ((tl + tr) >> 1) + 1, tr));\\r\\n\\t}\\r\\n\\r\\npublic:\\r\\n\\tSegmentTree(function<T(const T&, const T&)> merge, T dval = 0) : merge(merge), dval(dval) {\\r\\n\\t\\tbuild();\\r\\n\\t}\\r\\n\\r\\n\\tinline void build() { build(1, 0, N - 1); }\\r\\n\\r\\n\\tinline void update(int i, T v) { update(i, v, 1, 0, N - 1); }\\r\\n\\r\\n\\tinline T query(int l, int r) { return query(l, r, 1, 0, N - 1); }\\r\\n};\\r\\n\\r\\nstring S;\\r\\nint Q;\\r\\nSegmentTree<node, 200005> ST0 ([](const node& a, const node& b) { return a + b; }, val0);\\r\\nSegmentTree<node, 200005> ST1 ([](const node& a, const node& b) { return a + b; }, val0);\\r\\n\\r\\nint main() {\\r\\n\\tcin >> S;\\r\\n\\tfor (int i = 0; i < S.size(); i++) {\\r\\n\\t\\tif (S[i] == '0') {\\r\\n\\t\\t\\tST0.update(i, val1);\\r\\n\\t\\t\\tST1.update(i, val0);\\r\\n\\t\\t}\\r\\n\\t\\telse if (S[i] == '1') {\\r\\n\\t\\t\\tST0.update(i, val0);\\r\\n\\t\\t\\tST1.update(i, val1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcin >> Q;\\r\\n\\twhile (Q--) {\\r\\n\\t\\tint x; cin >> x; x--;\\r\\n\\t\\tif (S[x] == '0') {\\r\\n\\t\\t\\tST0.update(x, val0);\\r\\n\\t\\t\\tST1.update(x, val1);\\r\\n\\t\\t\\tS[x] = '1';\\r\\n\\t\\t}\\r\\n\\t\\telse if (S[x] == '1') {\\r\\n\\t\\t\\tST1.update(x, val0);\\r\\n\\t\\t\\tST0.update(x, val1);\\r\\n\\t\\t\\tS[x] = '0';\\r\\n\\t\\t}\\r\\n\\t\\tcout << max(ST0.query(0, S.size() - 1).A, ST1.query(0, S.size() - 1).A) << ' ';\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1188","source":"CSES","title":"Bit Inversions","author":"Dustin Miao"},"parent":{"name":"cses-1188","relativePath":"cses-1188.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorted-sets","title":"More Operations on Sorted Sets"}}}},{"node":{"module":{"frontmatter":{"id":"segtree-ext","title":"More Applications of Segment Tree"}}}}]},"problemInfo":{"uniqueId":"cses-1188","url":"https://cses.fi/problemset/task/1188"}},"pageContext":{"id":"cses-1188"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}