{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-856-the-bucket-list/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-856\", source = \"USACO Bronze 2018 December\", title = \"The Bucket List\", author = \"Ananth Kashyap, Sathvik Chundru, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_blist_bronze_dec18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation-1---brute-force\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1---brute-force\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation 1 - Brute Force\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\cdot T)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>⋅</mo><mi>T</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\cdot T)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", T is the maximum time\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            children: \"file_in = open(\\\"blist.in\\\")\\r\\ndata = file_in.read().strip().split(\\\"\\\\n\\\")\\r\\nn = int(data[0])\\r\\ncows = [list(map(int, data[i + 1].split(\\\" \\\"))) for i in range(n)]\\r\\n\\r\\n# Initialize a variable to store the maximum number of buckets needed\\r\\nmax_buckets = cows[0][2]\\r\\n\\r\\n# For each possible time, check how many buckets are needed at that time\\r\\n# Set the maximum equal to that value if it is larger than the current maximum\\r\\nfor i in range(1, 1001):\\r\\n\\tbuckets_at_this_time = 0\\r\\n\\tfor j in range(n):\\r\\n\\t\\tif i >= cows[j][0] and i <= cows[j][1]:\\r\\n\\t\\t\\tbuckets_at_this_time += cows[j][2]\\r\\n\\tmax_buckets = max(max_buckets, buckets_at_this_time)\\r\\n\\r\\nfile_out = open(\\\"blist.out\\\", \\\"w\\\")\\r\\nfile_out.write(str(max_buckets))\\r\\nfile_out.close()\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class TheBucketList {\\r\\n\\tstatic final int MAX_TIME = 1000;\\r\\n\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"blist\\\");\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\r\\n\\t\\tint[] startTimes = new int[n + 1];\\r\\n\\t\\tint[] endTimes = new int[n + 1];\\r\\n\\t\\tint[] bucketsNeeded = new int[n + 1];\\r\\n\\r\\n\\t\\tfor (int x = 1; x <= n; x++) {\\r\\n\\t\\t\\tstartTimes[x] = io.nextInt();\\r\\n\\t\\t\\tendTimes[x] = io.nextInt();\\r\\n\\t\\t\\tbucketsNeeded[x] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// keep track of the maximum buckets in all of the times\\r\\n\\t\\tint maxBuckets = 0;\\r\\n\\r\\n\\t\\t// loop through each time and get the buckets needed\\r\\n\\t\\tfor (int time = 1; time <= MAX_TIME; time++) {\\r\\n\\t\\t\\tint bucketsAtTime = 0;\\r\\n\\r\\n\\t\\t\\t// the buckets for those with\\r\\n\\t\\t\\t// times in the range\\r\\n\\t\\t\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\t\\t\\tif (startTimes[i] <= time && time <= endTimes[i]) {\\r\\n\\t\\t\\t\\t\\tbucketsAtTime += bucketsNeeded[i];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tmaxBuckets = Math.max(maxBuckets, bucketsAtTime);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(maxBuckets);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation-2---sweep\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-2---sweep\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation 2 - Sweep\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A faster solution than Implementation 1 where you do not need to\\r\\nrecount the buckets for every time. This is similar to the second\\r\\nsolution in in the official analysis.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <algorithm>  \\r\\n#include <cstdio>\\r\\nusing namespace std;\\r\\nint event[1001]; // declaring the array globally to initialize all the elements to 0\\r\\nint main() {\\r\\n\\tfreopen(\\\"blist.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"blist.out\\\", \\\"w\\\", stdout); \\r\\n\\tint maxtime = 1000;\\r\\n\\tint n; cin >> n;\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\tfor (int i = 0; i < n; i++) { // iterating through every cow\\r\\n\\t\\tint start; cin >> start; \\r\\n\\t\\tint end; cin >> end;\\r\\n\\t\\tint amt; cin >> amt;\\r\\n\\t\\t// at time start, cow i needs to be milked, so \\r\\n\\t\\t// we'll need amt additional buckets (hence adding amt)\\r\\n\\t\\tevent[start] += amt;\\r\\n\\t\\t// at time end, cow i is done milking, so we can free up \\r\\n\\t\\t// amt buckets (hence subtracting amt)\\r\\n\\t\\tevent[end] -= amt; \\r\\n\\t}\\r\\n\\t\\t\\r\\n\\t// res represents the maximum number of buckets we'll need \\r\\n\\t// to use at any given time and cur represents \\r\\n\\t// how many buckets we need to use at the current \\r\\n\\t// time we're processing\\r\\n\\tint res = 0, cur = 0;\\r\\n\\tfor (int i = 0; i <= maxtime; i++) {\\r\\n\\t\\t// at time i, the number of buckets in use changes by event[i]\\r\\n\\t\\t// so we want to update the number of buckets \\r\\n\\t\\t// we are currently using accordingly\\r\\n\\t\\tcur += event[i];\\r\\n\\t\\t// we want res to be the greatest number of buckets \\r\\n\\t\\t// we need to use at any given point in time\\r\\n\\t\\tres = max(res, cur); \\r\\n\\t\\t\\r\\n\\t}\\r\\n\\t\\r\\n\\t\\r\\n\\tcout << res << '\\\\n'; \\r\\n\\t\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class TheBucketList2 {\\r\\n\\tstatic final int maxTime = 1000;\\r\\n\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"blist\\\");\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\r\\n\\t\\tint[] startTimes = new int[n + 1];\\r\\n\\t\\tint[] endTimes = new int[n + 1];\\r\\n\\t\\tint[] bucketsNeeded = new int[n + 1];\\r\\n\\r\\n\\t\\t// these track when the cows start\\r\\n\\t\\tint[] cowStart = new int[maxTime + 1];\\r\\n\\t\\tint[] cowEnd = new int[maxTime + 1];\\r\\n\\r\\n\\t\\tfor (int x = 1; x <= n; x++) {\\r\\n\\t\\t\\tstartTimes[x] = io.nextInt();\\r\\n\\t\\t\\tendTimes[x] = io.nextInt();\\r\\n\\t\\t\\tbucketsNeeded[x] = io.nextInt();\\r\\n\\r\\n\\t\\t\\tcowStart[startTimes[x]] = x;\\r\\n\\t\\t\\tcowEnd[endTimes[x]] = x;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint maxBuckets = 0;\\r\\n\\t\\tint countBuckets = 0;\\r\\n\\r\\n\\t\\tfor (int t = 1; t <= 1000; t++) {\\r\\n\\t\\t\\t// is a start, increase the bucket count\\r\\n\\t\\t\\tif (cowStart[t] > 0) {\\r\\n\\t\\t\\t\\tcountBuckets += bucketsNeeded[cowStart[t]];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// keep track of the maximum buckets needed at any time\\r\\n\\t\\t\\tmaxBuckets = Math.max(maxBuckets, countBuckets);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// is an end, decrease the bucket count\\r\\n\\t\\t\\tif (cowEnd[t] > 0) {\\r\\n\\t\\t\\t\\tcountBuckets -= bucketsNeeded[cowEnd[t]];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(maxBuckets);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\t\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-856","source":"USACO Bronze 2018 December","title":"The Bucket List","author":"Ananth Kashyap, Sathvik Chundru, Brad Ma"},"parent":{"name":"usaco-856","relativePath":"usaco-856.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation 1 - Brute Force","slug":"implementation-1---brute-force"},{"depth":2,"value":"Implementation 2 - Sweep","slug":"implementation-2---sweep"}],"java":[{"depth":2,"value":"Implementation 1 - Brute Force","slug":"implementation-1---brute-force"},{"depth":2,"value":"Implementation 2 - Sweep","slug":"implementation-2---sweep"}],"py":[{"depth":2,"value":"Implementation 1 - Brute Force","slug":"implementation-1---brute-force"},{"depth":2,"value":"Implementation 2 - Sweep","slug":"implementation-2---sweep"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"simulation","title":"Simulation"}}}}]},"problemInfo":{"uniqueId":"usaco-856","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=856"}},"pageContext":{"id":"usaco-856"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}