{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/ks-checksum/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"ks-checksum\", source = \"Kick Start 2020 Round A\", title = \"Check Sum\", author = \"Neo Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000436140/000000000068c2c3#analysis\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since the official analysis is well-documented and covers the problem in its\\r\\nentirety, read that first. The following notes clarify a few details of the\\r\\nimplementation.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Firstly, note that the number of rows and columns is equivalent to \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"2N\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">2N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n        }), \",\\r\\nbecause the matrix is square. Therefore, when constructing our graph, we can\\r\\nsimply add \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"N\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n        }), \" to distinguish row \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" from column \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Of course, the problem of finding a minimum weight cycle breaking edge set is\\r\\nequivalent to the well known problem of finding a maximum weight spanning\\r\\nforest of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"G\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n        }), \", except that we would build the complement set of edges to keep\\r\\nrather than the set of edges to remove.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Notice that the edges that we should remove - which are highlighted in the\\r\\ndiagram in red - are equivalent to any edges that are not included in the\\r\\nmaximum spanning tree of graph \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"G\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n        }), \". Therefore, our answer is equivalent to the\\r\\ndifference between the total sum of all the edges and the those that are in\\r\\nthe maximum spanning tree.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\nstruct DSU {\\r\\n\\tvi e; void init(int N) { e = vi(N,-1); }\\r\\n\\tint get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); }\\r\\n\\tbool sameSet(int a, int b) { return get(a) == get(b); }\\r\\n\\tint size(int x) { return -e[get(x)]; }\\r\\n\\tbool unite(int x, int y) { // union by size\\r\\n\\t\\tx = get(x), y = get(y); if (x == y) return 0;\\r\\n\\t\\tif (e[x] > e[y]) swap(x,y);\\r\\n\\t\\te[x] += e[y]; e[y] = x; return 1;\\r\\n\\t}\\r\\n};\\r\\n\\r\\ntemplate<class T> T kruskal(int N, vector<pair<T,pi>> ed) {\\r\\n\\tsort(ed.rbegin(), ed.rend());\\r\\n\\tT ans = 0; DSU D; D.init(N); // edges that unite are in MST\\r\\n\\tfor(auto a : ed) if (D.unite(a.s.f,a.s.s)) ans += a.f;\\r\\n\\treturn ans;\\r\\n}\\r\\n\\r\\nvoid solve(int tc) {\\r\\n\\tint n; cin >> n;\\r\\n\\tvector<vi> A(n, vi(n)), B(n, vi(n));\\r\\n\\tfor(int i = 0; i < n; i++) for(int j = 0; j < n; j++) cin >> A[i][j];\\r\\n\\tfor(int i = 0; i < n; i++) for(int j = 0; j < n; j++) cin >> B[i][j];\\r\\n\\tvi row(n), col(n);\\r\\n\\tfor(int i = 0; i < n; i++) cin >> row[i];\\r\\n\\tfor(int i = 0; i < n; i++) cin >> col[i];\\r\\n\\tvector<pair<int, pi>> edges;\\r\\n\\tint total = 0;\\r\\n\\tfor(int i = 0; i < n; i++) for(int j = 0; j < n; j++) {\\r\\n\\t\\tif(A[i][j] == -1)  {\\r\\n\\t\\t\\t// n + j is used to distinguish rows from cols\\r\\n\\t\\t\\tedges.pb({B[i][j], {i, n + j}});\\r\\n\\t\\t\\ttotal += B[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << \\\"Case #\\\" << tc << \\\": \\\" << total - kruskal(2*n, edges) << \\\"\\\\n\\\";\\r\\n}\\r\\nint main() {\\r\\n\\tsetIO();\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tfor(int i = 1; i <= n; i++) solve(i);\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"ks-checksum","source":"Kick Start 2020 Round A","title":"Check Sum","author":"Neo Wang"},"parent":{"name":"ks-checksum","relativePath":"ks-checksum.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"mst","title":"Minimum Spanning Trees"}}}}]},"problemInfo":{"uniqueId":"ks-checksum","url":"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000436140/000000000068c2c3"}},"pageContext":{"id":"ks-checksum"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}