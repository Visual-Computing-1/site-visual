{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1090-ferris-wheel/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1090\", source = \"CSES\", title = \"Ferris Wheel\", author = \"Danh Ta Chi Thanh, Kenny Cho, Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/83295\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Unofficial Editorial\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since each gondola can contain either 1 or 2 children, for each gondola, we can\\r\\ndo one of two things:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Pair the lightest child with the heaviest child possible without exceeding\\r\\nthe weight limit.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"If the pairing isn't possible, we only include the lightest child.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Those left unpaired each get their own gondola. The implementation below uses\\r\\nthe above method.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Alternatively, for each gondola, we can also\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Pair the heaviest child with the lightest child if possible.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Otherwise, only include the heaviest child.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Both pairing methods can be achieved in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time using two\\r\\npointers, and sorting brings the overall time complexity to\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n\\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n\\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nconst int maxn=2e5+10;\\r\\n\\r\\n// Variables used for the current problem\\r\\nint n,x,p[maxn],i,j,ans;\\r\\n// Keeps track of the number of children who have had their own gondola\\r\\nbool have_gondola_yet[maxn];\\r\\n\\r\\nvoid solve() {\\r\\n\\tcin >> n >> x;\\r\\n\\tfor (int i=0;i<n;++i) cin >> p[i];\\r\\n\\tsort(p,p+n);\\r\\n\\ti=0;j=n-1;\\r\\n\\twhile (i<j){\\r\\n\\t\\tif (p[i]+p[j]>x){\\r\\n\\t\\t\\t// If the total weight of two children exceeds x\\r\\n\\t\\t\\t// Then we move to the lighter child.\\r\\n\\t\\t\\t--j;\\r\\n\\t\\t}\\r\\n\\t\\telse{ // If it satisfies the condition.\\r\\n\\t\\t\\t++ans; // Increment the number of gondolas used\\r\\n\\t\\t\\t// Mark that they have had their gondola\\r\\n\\t\\t\\thave_gondola_yet[i]=have_gondola_yet[j]=true;\\r\\n\\t\\t\\t++i; --j; //Move to the next children.\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i=0;i<n;++i){\\r\\n\\t\\t// Calculate the number of children not having gondolas yet\\r\\n\\t\\t// to get the total number of gondolas needed for the problem.\\r\\n\\t\\tans+= have_gondola_yet[i] == false;\\r\\n\\t}\\r\\n\\tcout << ans << \\\"\\\\n\\\";\\r\\n}\\r\\n\\r\\nint main(){\\r\\n\\tios_base::sync_with_stdio(false);\\r\\n\\tcin.tie(nullptr);\\r\\n\\tsolve();\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\n\\r\\npublic class FerrisWheel {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tScanner sc = new Scanner(System.in);\\r\\n\\r\\n\\t\\tint n = sc.nextInt();\\r\\n\\t\\tint x = sc.nextInt();\\r\\n\\t\\tsc.nextLine();\\r\\n\\r\\n\\t\\t// Read in weights of children (this optimization is necessary to pass \\r\\n\\t\\t// all test cases)\\r\\n\\t\\tString[] weightsStr = sc.nextLine().split(\\\" \\\");\\r\\n\\t\\t// weights is of type Integer to prevent having to cast the result from\\r\\n\\t\\t// Integer.parseInt() to an int, saving time (part of optimization)\\r\\n\\t\\tInteger[] weights = new Integer[n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tweights[i] = Integer.parseInt(weightsStr[i]);\\r\\n\\t\\t}\\r\\n\\t\\tArrays.sort(weights);\\r\\n\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tint i = 0;  // left pointer\\r\\n\\t\\tint j = n - 1;  // right pointer\\r\\n\\t\\twhile (i <= j) {\\r\\n\\t\\t\\tans++;  // Increment number of gondolas used\\r\\n\\t\\t\\tif (i == j) break;\\r\\n\\t\\t\\t// If total weight is too large, move to lighter child\\r\\n\\t\\t\\tif (weights[i] + weights[j] > x) {\\r\\n\\t\\t\\t\\tj--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Otherwise, we pair the two children and move on\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\tj--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(ans);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            children: \"_, max_weight = map(int, input().split())\\r\\nweights = sorted(map(int, input().split()))\\r\\n\\r\\nlight_ptr = 0\\r\\nheavy_ptr = len(weights) - 1\\r\\ngondola_total = 0\\r\\nwhile light_ptr <= heavy_ptr:\\r\\n\\t# Pair the heaviest child with the lightest child if possible\\r\\n\\tif weights[light_ptr] + weights[heavy_ptr] <= max_weight:\\r\\n\\t\\tlight_ptr += 1\\r\\n\\t\\theavy_ptr -= 1\\r\\n\\t# Otherwise, only include the heaviest child\\r\\n\\telse:\\r\\n\\t\\theavy_ptr -= 1\\r\\n\\t# Increment the number of gondolas used\\r\\n\\tgondola_total += 1\\r\\nprint(gondola_total)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1090","source":"CSES","title":"Ferris Wheel","author":"Danh Ta Chi Thanh, Kenny Cho, Nathan Gong"},"parent":{"name":"cses-1090","relativePath":"cses-1090.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"greedy-sorting","title":"Greedy Algorithms with Sorting"}}}}]},"problemInfo":{"uniqueId":"cses-1090","url":"https://cses.fi/problemset/task/1090"}},"pageContext":{"id":"cses-1090"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}