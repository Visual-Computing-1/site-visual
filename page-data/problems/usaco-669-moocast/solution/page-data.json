{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-669-moocast/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-669\", source = \"USACO Gold 2016 December\", title = \"Moocast\", author = \"Neo Wang, Óscar Garries\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_moocast_gold_dec16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsxs(_components.h3, {\n          id: \"implementation-dsu\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation-dsu\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation (DSU)\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\n#define vt vector\\r\\n\\r\\n#define FOR(i, a, b) for(int i = (a); i < (b); i++)\\r\\n#define FORE(i, a, b) for(int i = (a); i <= (b); i++)\\r\\n#define F0R(i, a) for(int i = 0; i < (a); i++)\\r\\n#define trav(a, x) for (auto& a : x)\\r\\n\\r\\nstruct UF {\\r\\n\\tvt<int> e;\\r\\n\\tUF(int n) : e(n, -1) {}\\r\\n\\tbool sameSet(int a, int b) { return find(a) == find(b); }\\r\\n\\tint size(int x) { return -e[find(x)]; }\\r\\n\\tint find(int x) { return e[x] < 0 ? x : e[x] = find(e[x]); }\\r\\n\\tbool join(int a, int b) {\\r\\n\\t\\ta = find(a), b = find(b);\\r\\n\\t\\tif (a == b) return false;\\r\\n\\t\\tif (e[a] > e[b]) swap(a, b);\\r\\n\\t\\te[a] += e[b]; e[b] = a;\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nstruct Edge {\\r\\n\\tint i, j, w;\\r\\n};\\r\\n\\r\\nbool comp(Edge a, Edge b) {\\r\\n\\treturn a.w < b.w;\\r\\n}\\r\\n\\r\\nconst int MX = 1000;\\r\\n\\r\\nint N;\\r\\nint x[MX];\\r\\nint y[MX];\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\r\\n\\tfreopen(\\\"moocast.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"moocast.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tcin >> N;\\r\\n\\r\\n\\tUF uf(N);\\r\\n\\r\\n\\tF0R(i, N) {\\r\\n\\t\\tcin >> x[i];\\r\\n\\t\\tcin >> y[i];\\r\\n\\t}\\r\\n\\r\\n\\tvt<Edge> edges;\\r\\n\\r\\n\\tF0R(i, N) {\\r\\n\\t\\tF0R(j, i) {\\r\\n\\t\\t\\tint d = (x[i]-x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]);\\r\\n\\t\\t\\tedges.push_back({i, j, d});\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tsort(edges.begin(), edges.end(), comp);\\r\\n\\r\\n\\tint lastWeight = 0;\\r\\n\\tint numComponents = N;\\r\\n\\r\\n\\ttrav(curr, edges) {\\r\\n\\t\\tif(!uf.sameSet(curr.i, curr.j)) {\\r\\n\\t\\t\\tuf.join(curr.i, curr.j);\\r\\n\\t\\t\\tlastWeight = curr.w;\\r\\n\\t\\t\\tif(--numComponents == 1) {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tcout << lastWeight;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"implementation-binary-search--dfs\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation-binary-search--dfs\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation (Binary Search + DFS)\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\n\\r\\nconst int maxN = 1e3;\\r\\n\\r\\nvector<int> x(maxN), y(maxN);\\r\\nvector<bool> visited(maxN);\\r\\nvector<vector<bool>> g(maxN, vector<bool>(maxN, false));\\r\\nint n;\\r\\n\\r\\nint dfs (int v) {\\r\\n\\tvisited[v] = true;\\r\\n\\r\\n\\tint curCows = 0;\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tif (visited[i] || !g[v][i]) continue;\\r\\n\\t\\tcurCows += dfs(i);\\r\\n\\t}\\r\\n\\r\\n\\treturn (curCows + 1);\\r\\n}\\r\\n\\r\\nbool ok (ll mid) {\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\tg[i][j] = false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\tll dist = (x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]);\\r\\n\\t\\t\\tif (dist <= mid) g[i][j] = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfill (visited.begin(), visited.end(), false);\\r\\n\\r\\n\\tint cows = dfs(0);\\r\\n\\r\\n\\treturn (cows == n);\\r\\n}\\r\\n\\r\\nint main () {\\r\\n\\tfreopen(\\\"moocast.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"moocast.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t cin >> x[i] >> y[i];\\r\\n\\t}\\r\\n\\r\\n\\tll lo = 1, hi = 1e10;\\r\\n\\tll sol = hi;\\r\\n\\r\\n\\twhile (lo <= hi) {\\r\\n\\t\\tll mid = lo + (hi - lo)/2LL;\\r\\n\\r\\n\\t\\tif (ok(mid)) {\\r\\n\\t\\t\\tsol = min (sol, mid);\\r\\n\\t\\t\\thi = mid - 1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tlo = mid + 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tcout << sol << '\\\\n';\\r\\n}\\r\\n\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-669","source":"USACO Gold 2016 December","title":"Moocast","author":"Neo Wang, Óscar Garries"},"parent":{"name":"usaco-669","relativePath":"usaco-669.mdx"},"toc":{"cpp":[{"depth":3,"value":"Implementation (DSU)","slug":"implementation-dsu"},{"depth":3,"value":"Implementation (Binary Search + DFS)","slug":"implementation-binary-search--dfs"}],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dsu","title":"Disjoint Set Union"}}}},{"node":{"module":{"frontmatter":{"id":"dfs","title":"Depth First Search (DFS)"}}}}]},"problemInfo":{"uniqueId":"usaco-669","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=669"}},"pageContext":{"id":"usaco-669"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}