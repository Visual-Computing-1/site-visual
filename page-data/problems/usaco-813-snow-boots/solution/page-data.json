{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-813-snow-boots/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst id = \"usaco-813\", source = \"USACO Gold 2018 February\", title = \"Snow Boots\", author = \"Benjamin Qi\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _props.components), {wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_snowboots_gold_feb18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can use a sorted set in place of the linked list mentioned in the official\\r\\nsolution. The time complexity remains the same.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"snowboots.in\\\",\\\"r\\\",stdin);\\r\\n\\tfreopen(\\\"snowboots.out\\\",\\\"w\\\",stdout);\\r\\n\\r\\n\\tint N,B; cin >> N >> B;\\r\\n\\tvector<int> f(N); for (int& t: f) cin >> t;\\r\\n\\r\\n\\tvector<int> tiles_by_depth;\\r\\n\\tfor (int i = 1; i < N-1; ++i)\\r\\n\\t\\ttiles_by_depth.push_back(i);\\r\\n\\tsort(begin(tiles_by_depth),end(tiles_by_depth),\\r\\n\\t\\t[&](int x, int y) { return f[x] > f[y]; });\\r\\n\\r\\n\\tset<int> indices;\\r\\n\\tfor (int i = 0; i < N; ++i)\\r\\n\\t\\tindices.insert(i);\\r\\n\\r\\n\\tvector<array<int,3>> query;\\r\\n\\tfor (int i = 0; i < B; ++i) {\\r\\n\\t\\tint s,d; cin >> s >> d;\\r\\n\\t\\tquery.push_back({s,d,i});\\r\\n\\t}\\r\\n\\tsort(query.rbegin(), query.rend());\\r\\n\\r\\n\\tint tile_index = 0, needed_step = 1;\\r\\n\\tvector<bool> ans(B);\\r\\n\\tfor (auto a: query) {\\r\\n\\t\\twhile (tile_index < tiles_by_depth.size()\\r\\n\\t\\t\\t\\t && f[tiles_by_depth[tile_index]] > a[0]) {\\r\\n\\t\\t\\tint x = tiles_by_depth[tile_index];\\r\\n\\t\\t\\tauto it = indices.find(x);\\r\\n\\t\\t\\tneeded_step = max(needed_step,*next(it)-*prev(it));\\r\\n\\t\\t\\tindices.erase(it);\\r\\n\\t\\t\\t++tile_index;\\r\\n\\t\\t}\\r\\n\\t\\tans[a[2]] = a[1] >= needed_step;\\r\\n\\t}\\r\\n\\r\\n\\tfor (bool b: ans)\\r\\n\\t\\tcout << b << \\\"\\\\n\\\";\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-813","source":"USACO Gold 2018 February","title":"Snow Boots","author":"Benjamin Qi"},"parent":{"name":"usaco-813","relativePath":"usaco-813.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorted-sets","title":"More Operations on Sorted Sets"}}}}]},"problemInfo":{"uniqueId":"usaco-813","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=813"}},"pageContext":{"id":"usaco-813"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}