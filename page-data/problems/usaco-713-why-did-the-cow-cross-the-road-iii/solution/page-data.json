{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-713-why-did-the-cow-cross-the-road-iii/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-713\", source = \"USACO Bronze 2017 February\", title = \"Why Did the Cow Cross the Road III\", author = \"Óscar Garries, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, CPPSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_cowqueue_bronze_feb17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since the time the cows arrive and need for questioning can be up to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^6\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^6</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \", we should traverse through the times as steps.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \": \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <cstdio>\\r\\n#include <vector>\\r\\n#include <algorithm>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"cowqueue.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"cowqueue.out\\\", \\\"w\\\", stdout);\\r\\n\\t\\r\\n\\tint n;\\r\\n\\tint curTime = 0; \\r\\n\\tcin >> n;\\r\\n\\t\\r\\n\\tvector<pair<int, int>> cows(n);\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t\\tcin >> cows[i].first >> cows[i].second;\\r\\n\\t\\r\\n\\tsort(cows.begin(), cows.end());\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t// this cow was already waiting, add questioning time to current time.\\r\\n\\t\\tif (curTime > cows[i].first) {\\r\\n\\t\\t\\tcurTime += cows[i].second;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// the last cow finished before this one arrived,\\r\\n\\t\\t\\t// set the current time to when this cow finishes.\\r\\n\\t\\t\\tcurTime = cows[i].first + cows[i].second;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tcout << curTime << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\n\\r\\nsys.stdin = open(\\\"cowqueue.in\\\", \\\"r\\\")\\r\\nsys.stdout = open(\\\"cowqueue.out\\\", \\\"w\\\")\\r\\n\\r\\nn = int(input())\\r\\ncur_time = 0\\r\\ncows = []\\r\\n\\r\\nfor i in range(n): \\r\\n\\tcows.append(list(map(int, input().split())))\\r\\n\\r\\ncows.sort()\\r\\n\\r\\nfor cow in cows:\\r\\n\\tif cur_time > cow[0]:\\r\\n\\t\\tcur_time += cow[1]\\r\\n\\telse:\\r\\n\\t\\tcur_time = cow[0] + cow[1]\\r\\n\\r\\nprint(cur_time)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-713","source":"USACO Bronze 2017 February","title":"Why Did the Cow Cross the Road III","author":"Óscar Garries, Ryan Chou"},"parent":{"name":"usaco-713","relativePath":"usaco-713.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorting","title":"Introduction to Sorting"}}}}]},"problemInfo":{"uniqueId":"usaco-713","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=713"}},"pageContext":{"id":"usaco-713"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}