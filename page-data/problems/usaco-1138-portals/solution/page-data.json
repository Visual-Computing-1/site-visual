{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1138-portals/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1138\", source = \"USACO Gold 2021 Open\", title = \"Portals\", author = \"Maggie Liu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution-1---kruskals\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1---kruskals\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1 - Kruskal's\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_prob2_gold_open21.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <algorithm>\\r\\nusing namespace std;\\r\\n\\r\\nstruct Edge\\r\\n{\\r\\n\\tint from, to, cost;\\r\\n};\\r\\nconst int MAX_N = 100000;\\r\\nint parent[MAX_N * 2];\\r\\nint comp_size[MAX_N * 2];\\r\\n\\r\\n// BeginCodeSnip{Standard DSU operations}\\r\\nvoid init(int n)\\r\\n{\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tparent[i] = i;\\r\\n\\t\\tcomp_size[i] = 1;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint find(int a)\\r\\n{\\r\\n\\tif (a == parent[a])\\r\\n\\t{\\r\\n\\t\\treturn a;\\r\\n\\t}\\r\\n\\treturn parent[a] = find(parent[a]);\\r\\n}\\r\\n\\r\\nbool unite(int a, int b)\\r\\n{\\r\\n\\tint root_a = find(a), root_b = find(b);\\r\\n\\tif (root_a == root_b)\\r\\n\\t{\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\tif (comp_size[root_a] > comp_size[root_b])\\r\\n\\t{\\r\\n\\t\\tswap(root_a, root_b);\\r\\n\\t}\\r\\n\\tparent[root_a] = root_b;\\r\\n\\tcomp_size[root_b] += comp_size[root_a];\\r\\n\\treturn true;\\r\\n}\\r\\n// EndCodeSnip\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tinit(n * 2);\\r\\n\\tint cost, p1, p2, p3, p4;\\r\\n\\tvector<Edge> edges;\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tcin >> cost >> p1 >> p2 >> p3 >> p4;\\r\\n\\t\\t// an edge from p1 to p2 or from p3 to p4 has 0 cost\\r\\n\\t\\tedges.push_back({p1 - 1, p2 - 1, 0});\\r\\n\\t\\tedges.push_back({p3 - 1, p4 - 1, 0});\\r\\n\\t\\t// to get an edge from p1 to p3, we need to pay to permute the portals\\r\\n\\t\\tedges.push_back({p1 - 1, p3 - 1, cost});\\r\\n\\t}\\r\\n\\r\\n\\t// sort edges in increasing order of cost\\r\\n\\tsort(edges.begin(), edges.end(), [](Edge a, Edge b){\\r\\n\\t\\treturn a.cost < b.cost;\\r\\n\\t});\\r\\n\\t\\r\\n\\tint min_cost = 0;\\r\\n\\tfor (Edge edge : edges)\\r\\n\\t{\\r\\n\\t\\tif (unite(edge.from, edge.to))\\r\\n\\t\\t{\\r\\n\\t\\t\\tmin_cost += edge.cost;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << min_cost << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---prims\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---prims\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - Prim's\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <queue>\\r\\n#include <vector>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 100000;\\r\\nstruct Node\\r\\n{\\r\\n\\tint vertex, cost;\\r\\n\\tbool operator>(Node other) const\\r\\n\\t{\\r\\n\\t\\treturn cost > other.cost;\\r\\n\\t}\\r\\n};\\r\\nint main()\\r\\n{\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tpriority_queue<Node, vector<Node>, greater<Node>> pq;\\r\\n\\tvector<Node> adj[2 * MAX_N];\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tint cost, p1, p2, p3, p4;\\r\\n\\t\\tcin >> cost >> p1 >> p2 >> p3 >> p4;\\r\\n\\t\\tp1--; p2--; p3--; p4--;\\r\\n\\t\\t// an edge connecting p1 and p2 or connecting p3 and p4 has cost 0\\r\\n\\t\\tadj[p1].push_back({p2, 0});\\r\\n\\t\\tadj[p2].push_back({p1, 0});\\r\\n\\t\\tadj[p3].push_back({p4, 0});\\r\\n\\t\\tadj[p4].push_back({p3, 0});\\r\\n\\t\\t// to get an edge from p1 to p3, we need to pay to permute the portals\\r\\n\\t\\tadj[p1].push_back({p3, cost});\\r\\n\\t\\tadj[p3].push_back({p1, cost});\\r\\n\\t}\\r\\n\\tpq.push({0, 0});\\r\\n\\tbool visited[2 * MAX_N]{};\\r\\n\\tint min_cost = 0;\\r\\n\\t// use Prim's to find the MST\\r\\n\\twhile (!pq.empty())\\r\\n\\t{\\r\\n\\t\\tint curr = pq.top().vertex, cost = pq.top().cost;\\r\\n\\t\\tpq.pop();\\r\\n\\t\\tif (visited[curr])\\r\\n\\t\\t{\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tvisited[curr] = true;\\r\\n\\t\\tmin_cost += cost;\\r\\n\\t\\t// add edges from the current, visited vertex to unvisited vertices\\r\\n\\t\\tfor (Node next : adj[curr])\\r\\n\\t\\t{\\r\\n\\t\\t\\tif (!visited[next.vertex])\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tpq.push(next);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << min_cost << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1138","source":"USACO Gold 2021 Open","title":"Portals","author":"Maggie Liu"},"parent":{"name":"usaco-1138","relativePath":"usaco-1138.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1 - Kruskal&#39;s","slug":"solution-1---kruskals"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - Prim&#39;s","slug":"solution-2---prims"}],"java":[{"depth":2,"value":"Solution 1 - Kruskal&#39;s","slug":"solution-1---kruskals"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - Prim&#39;s","slug":"solution-2---prims"}],"py":[{"depth":2,"value":"Solution 1 - Kruskal&#39;s","slug":"solution-1---kruskals"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - Prim&#39;s","slug":"solution-2---prims"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"mst","title":"Minimum Spanning Trees"}}}}]},"problemInfo":{"uniqueId":"usaco-1138","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1138"}},"pageContext":{"id":"usaco-1138"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}