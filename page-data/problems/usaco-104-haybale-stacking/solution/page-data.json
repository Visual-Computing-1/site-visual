{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-104-haybale-stacking/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-104\", source = \"USACO Bronze 2012 January\", title = \"Haybale Stacking\", author = \"Óscar Garries, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_stacking.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"c-implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#c-implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"C++ Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main () {\\r\\n\\tint n, k;\\r\\n\\tcin >> n >> k;\\r\\n\\tvector<int> diff(n + 1);\\r\\n\\tfor (int i = 0; i < k; i++) { // read input and build difference array\\r\\n\\t\\tint l, r;\\r\\n\\t\\tcin >> l >> r;\\r\\n\\t\\tl--; // make zero-indexed\\r\\n\\t\\tr--;\\r\\n\\t\\tdiff[l]++;\\r\\n\\t\\tdiff[r + 1]--;\\r\\n\\t}\\r\\n\\r\\n\\tint sol[1000000];\\r\\n\\tint tot = 0;\\r\\n\\tfor (int i = 0; i < n; i++) { // build prefix sum array\\r\\n\\t\\ttot += diff[i];\\r\\n\\t\\tsol[i] = tot;\\r\\n\\t}\\r\\n\\tsort (sol, sol + n); // sort to get median\\r\\n\\tcout << sol[n / 2] << '\\\\n'; // output the median\\r\\n}\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"java-implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#java-implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Java Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\nclass haybaleStacking {\\r\\n\\tpublic static void main (String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint k = io.nextInt();\\r\\n\\t\\tint[] differenceArray = new int[n + 1]; \\r\\n\\t\\t// differenceArray[n] is the difference between A[n + 1] and A[n]\\r\\n\\r\\n\\t\\tfor (int x = 0; x < k; x++) { // read input and build differenceArray\\r\\n\\t\\t\\tint a = io.nextInt() - 1; // read and make zero-indexed\\r\\n\\t\\t\\tint b = io.nextInt() - 1;\\r\\n\\r\\n\\t\\t\\tdifferenceArray[a]++;\\r\\n\\t\\t\\tdifferenceArray[b + 1]--;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint[] prefixSum = new int[n + 1];\\r\\n\\t\\tint total = 0;\\r\\n\\r\\n\\t\\tfor (int x = 0; x < n; x++) { // build prefixSum array\\r\\n\\t\\t\\ttotal += differenceArray[x];\\r\\n\\t\\t\\tprefixSum[x] = total;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tArrays.sort(prefixSum);\\r\\n\\t\\tio.println(prefixSum[prefixSum.length / 2]);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-104","source":"USACO Bronze 2012 January","title":"Haybale Stacking","author":"Óscar Garries, Brad Ma"},"parent":{"name":"usaco-104","relativePath":"usaco-104.mdx"},"toc":{"cpp":[{"depth":2,"value":"C++ Implementation","slug":"c-implementation"}],"java":[{"depth":2,"value":"Java Implementation","slug":"java-implementation"}],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"prefix-sums","title":"Introduction to Prefix Sums"}}}},{"node":{"module":{"frontmatter":{"id":"visual","title":"Visual"}}}}]},"problemInfo":{"uniqueId":"usaco-104","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=104"}},"pageContext":{"id":"usaco-104"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}