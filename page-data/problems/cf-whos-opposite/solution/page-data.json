{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-whos-opposite/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1560B\", source = \"CF\", title = \"Who's Opposite?\", author = \"Ryan Chou, Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/94009\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since the number of people left of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" and the number of people right of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \" must be equal, we can find the total number of people in the circle with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"|a - b| \\\\cdot 2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">∣</mi><mi>a</mi><mo>−</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">∣</mi><mo>⋅</mo><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">|a - b| \\\\cdot 2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">∣</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"From here, we can see if this circle is possible with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a, b, c > \\\\texttt{numGroup}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo separator=\\\"true\\\">,</mo><mi>c</mi><mo>&gt;</mo><mtext mathvariant=\\\"monospace\\\">numGroup</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">a, b, c &gt; \\\\texttt{numGroup}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">numGroup</span></span></span></span></span>\"\n      }), \",\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If any of these exceed the number of people in the circle, they can't have a partner.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Otherwise, we can subtract or add \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"|a - b|\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">∣</mi><mi>a</mi><mo>−</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">|a - b|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n      }), \" from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n      }), \" to find the answer.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\nusing namespace std;\\r\\n\\r\\nint solve(long long a, long long b, long long c) {\\r\\n\\tlong long numGroup = abs(a - b) * 2;\\r\\n\\t\\r\\n\\tif (a > numGroup || b > numGroup || c > numGroup) {\\r\\n\\t\\treturn -1;\\r\\n\\t} else {\\r\\n\\t\\tlong long ans = c + abs(a - b);\\r\\n\\t\\t/*\\r\\n\\t\\t * If the answer is greater than the number\\r\\n\\t\\t * of people in the group, then we should \\r\\n\\t\\t * subtract the number of people between a and b\\r\\n\\t\\t * to find the answer (since this creates a circle).\\r\\n\\t\\t */\\r\\n\\t\\tif (ans > numGroup) ans -= (abs(a - b) * 2);\\r\\n\\t\\treturn ans;\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tlong long a, b, c;\\r\\n\\t\\tcin >> a >> b >> c;\\r\\n\\t\\tcout << solve(a, b, c) << endl;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class WhosOpposite {\\r\\n\\tstatic long solve(long a, long b, long c) {\\r\\n\\t\\tlong numGroup = Math.abs(a - b) * 2;\\r\\n\\t\\r\\n\\t\\tif (a > numGroup || b > numGroup || c > numGroup) {\\r\\n\\t\\t\\treturn -1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tlong ans = c + Math.abs(a - b);\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t* If the answer is greater than the number\\r\\n\\t\\t\\t* of people in the group, then we should \\r\\n\\t\\t\\t* subtract the number of people between a and b\\r\\n\\t\\t\\t* to find the answer (since this creates a circle).\\r\\n\\t\\t\\t*/\\r\\n\\t\\t\\tif (ans > numGroup) ans -= (Math.abs(a - b) * 2);\\r\\n\\t\\t\\treturn ans;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tlong a = io.nextInt();\\r\\n\\t\\t\\tlong b = io.nextInt();\\r\\n\\t\\t\\tlong c = io.nextInt();\\r\\n\\t\\t\\tio.println(solve(a, b, c));\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"def solve(a, b, c):\\r\\n\\tnum_group = abs(a - b) * 2\\r\\n\\r\\n\\tif a > num_group or b > num_group or c > num_group:\\r\\n\\t\\treturn -1\\r\\n\\telse:\\r\\n\\t\\tans = c + abs(a - b)\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tIf the answer is greater than the number\\r\\n\\t\\tof people in the group, then we should \\r\\n\\t\\tsubtract the number of people between a and b\\r\\n\\t\\tto find the answer (since this creates a circle).\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tif ans > num_group: ans -= (abs(a - b) * 2)\\r\\n\\t\\treturn ans\\r\\n\\r\\nn = int(input())\\r\\nfor _ in range(n):\\r\\n\\ta, b, c = map(int, input().split())\\r\\n\\tprint(solve(a, b, c))\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1560B","source":"CF","title":"Who's Opposite?","author":"Ryan Chou, Nathan Gong"},"parent":{"name":"cf-1560B","relativePath":"cf-1560B.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":null}}]},"problemInfo":{"uniqueId":"cf-1560B","url":"https://codeforces.com/problemset/problem/1560/B"}},"pageContext":{"id":"cf-1560B"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}