{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-896-mountain-view/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-896\", source = \"USACO Silver 2019 January\", title = \"Mountain View\", author = \"Jesse Choe, Sofia Yang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, HeaderLink, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://usaco.org/current/data/sol_mountains_silver_jan19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n\\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"sorting-a-struct-using-a-comparator-function\",\n          children: [_jsx(_components.a, {\n            href: \"#sorting-a-struct-using-a-comparator-function\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Sorting a Struct Using a Comparator Function\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\n#define pb push_back\\r\\n#define all(x) begin(x), end(x)\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\nvoid setIO(string fileName = \\\"\\\") {\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tif((int)fileName.size()) {\\r\\n\\t\\tfreopen((fileName+\\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\t\\tfreopen((fileName+\\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nstruct Mountain {\\r\\n\\tint l, r;\\r\\n};\\r\\n\\r\\nbool cmp(Mountain a, Mountain b) {\\r\\n\\tif(a.l == b.l) {\\r\\n\\t\\treturn a.r > b.r;\\r\\n\\t}\\r\\n\\treturn a.l < b.l;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"mountains\\\");\\r\\n\\tint n; cin >> n;\\r\\n\\tvector<Mountain> mountains;\\r\\n\\tfor(int i=0; i<n; i++) {\\r\\n\\t\\tint x, y; cin >> x >> y;\\r\\n\\t\\tmountains.pb({x-y, x+y});\\r\\n\\t}\\r\\n\\tsort(all(mountains), cmp);\\r\\n\\tint rightMost = -1, ans = 0;\\r\\n\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\tif(mountains[i].r > rightMost) {\\r\\n\\t\\t\\tans++;\\r\\n\\t\\t\\trightMost = mountains[i].r;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << ans << endl;\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"\\r\\nimport java.io.*;\\r\\nimport java.util.Arrays;\\r\\nimport java.util.StringTokenizer;\\r\\n\\r\\npublic class mountains {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new FileReader(\\\"mountains.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(new FileWriter(\\\"mountains.out\\\"));\\r\\n\\t\\tint N = Integer.parseInt(br.readLine());\\r\\n\\t\\tmountain[] arr = new mountain[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tint x = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint y = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint s = x - y;\\r\\n\\t\\t\\tint e = x + y;\\r\\n\\t\\t\\tarr[i] = new mountain(s, e);\\r\\n\\t\\t}\\r\\n\\t\\tArrays.sort(arr);\\r\\n\\r\\n\\t\\tint max = -1;\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif (arr[i].e > max) {\\r\\n\\t\\t\\t\\tans++;\\r\\n\\t\\t\\t\\tmax = arr[i].e;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tpw.println(ans);\\r\\n\\t\\tpw.close();\\r\\n\\r\\n\\t}\\r\\n}\\r\\n\\r\\nclass mountain implements Comparable<mountain> {\\r\\n\\r\\n\\tpublic int s, e;\\r\\n\\r\\n\\tpublic mountain(int s, int e) {\\r\\n\\t\\tthis.s = s;\\r\\n\\t\\tthis.e = e;\\r\\n\\t}\\r\\n\\r\\n\\tpublic int compareTo(mountain other) {\\r\\n\\t\\tif (this.s != other.s) {\\r\\n\\t\\t\\treturn Integer.compare(this.s, other.s);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn Integer.compare(other.e, this.e);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-896","source":"USACO Silver 2019 January","title":"Mountain View","author":"Jesse Choe, Sofia Yang"},"parent":{"name":"usaco-896","relativePath":"usaco-896.mdx"},"toc":{"cpp":[{"depth":2,"value":"Sorting a Struct Using a Comparator Function","slug":"sorting-a-struct-using-a-comparator-function"}],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sorting-custom","title":"Custom Comparators and Coordinate Compression"}}}}]},"problemInfo":{"uniqueId":"usaco-896","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=896"}},"pageContext":{"id":"usaco-896"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}