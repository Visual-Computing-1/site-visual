{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-593-mowing-the-field/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-593\", source = \"USACO Bronze 2016 January\", title = \"Mowing the Field\", author = \"Óscar Garries, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_mowing_bronze_jan16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can simulate Farmer John's movements across his field and update our answer if he ever comes across the same patch of grass.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(NS)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>S</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(NS)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">NS</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\nsys.stdin = open('mowing.in', 'r')\\r\\nsys.stdout = open('mowing.out', 'w')\\r\\n\\r\\n# Make a hashmap, and mark off steps.\\r\\n# We'll first mark off his starting position.\\r\\nvisits = {1000 * 1000 + 1000: 0}\\r\\n\\r\\n# FJ's starting position.\\r\\ncurrX = 1000\\r\\ncurrY = 1000\\r\\ncurrentTime = 0\\r\\nans = 100 * 10 + 1\\r\\n\\r\\nn = int(input())\\r\\n\\r\\nfor _ in range(n):\\r\\n\\tdirection, numSteps = map(str, input().split())\\r\\n\\tdirX = 0\\r\\n\\tdirY = 0\\r\\n\\t# Get the direction Farmer John is moving.\\r\\n\\tif direction == \\\"N\\\":\\r\\n\\t\\tdirX = 1\\r\\n\\t\\tdirY = 0\\r\\n\\telif direction == \\\"W\\\":\\r\\n\\t\\tdirX = 0\\r\\n\\t\\tdirY = 1\\r\\n\\telif direction == \\\"E\\\":\\r\\n\\t\\tdirX = 0\\r\\n\\t\\tdirY = -1\\r\\n\\telse:\\r\\n\\t\\tdirX = -1\\r\\n\\t\\tdirY = 0\\r\\n\\tfor j in range(int(numSteps)):\\r\\n\\t\\t# Update our curent position.\\r\\n\\t\\tcurrX += dirX\\r\\n\\t\\tcurrY += dirY\\r\\n\\t\\tcurrentTime += 1\\r\\n\\t\\t# Store the time FJ has been to this patch of grass with \\r\\n\\t\\t# a unique id.\\r\\n\\t\\tid = 1000 * currX + currY\\r\\n\\r\\n\\t\\t# If FJ has been to the current patch of grass before,\\r\\n\\t\\t# update our answer.\\r\\n\\t\\tif id in visits:\\r\\n\\t\\t\\tans = min(ans, currentTime - visits[id])\\r\\n\\t\\t# Make an entry in the hashmap if FJ has not come \\r\\n\\t\\t# across this patch of grass yet.\\r\\n\\t\\tvisits[id] = currentTime\\r\\n\\r\\n# If FJ has never gone back to the same patch of grass.\\r\\nif ans == 100 * 10 + 1:\\r\\n\\tans = -1\\r\\nprint(ans)\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\ntypedef long long ll;\\r\\ntypedef long double ld;\\r\\n\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\n#define len(x) (int)x.size()\\r\\n\\r\\nconst int INF = 1e9;\\r\\n\\r\\nint ma[2002][2002];\\r\\n\\r\\nint main(){\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tfreopen(\\\"mowing.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"mowing.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tfor (int i = 0; i < 2002; i++) {\\r\\n\\t\\tfor (int j = 0; j < 2002; j++) {\\r\\n\\t\\t\\tma[i][j] = INF;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tint sol = INF;\\r\\n\\tbool is = false;\\r\\n\\tint t = 0;\\r\\n\\tint y = 1000, x = 1000;\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tchar direc;\\r\\n\\t\\tint move;\\r\\n\\t\\tcin >> direc >> move;\\r\\n\\t\\tauto upd = [&] (int &cordinate, bool sum) {\\r\\n\\t\\t\\tfor (int sum = 1; sum <= move; sum++) {\\r\\n\\t\\t\\t\\tt++;\\r\\n\\t\\t\\t\\tif (sum) cordinate++;\\r\\n\\t\\t\\t\\telse cordinate--;\\r\\n\\t\\t\\t\\tif (ma[y][x] != INF) {\\r\\n\\t\\t\\t\\t\\t\\tis = true;\\r\\n\\t\\t\\t\\t\\t\\tsol = min(sol, t - ma[y][x]);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tma[y][x] = t;\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tif (direc == 'N') {\\r\\n\\t\\t\\tupd(y, false);\\r\\n\\t\\t} else if (direc == 'E'){\\r\\n\\t\\t\\tupd(x, true);\\r\\n\\t\\t} else if (direc == 'W'){\\r\\n\\t\\t\\tupd(x, false);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tupd(y, true);\\r\\n\\t}\\r\\n\\t}\\r\\n\\tif (!is) cout << -1 << '\\\\n';\\r\\n\\telse cout << sol << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-593","source":"USACO Bronze 2016 January","title":"Mowing the Field","author":"Óscar Garries, Ryan Chou"},"parent":{"name":"usaco-593","relativePath":"usaco-593.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"simulation","title":"Simulation"}}}}]},"problemInfo":{"uniqueId":"usaco-593","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=593"}},"pageContext":{"id":"usaco-593"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}