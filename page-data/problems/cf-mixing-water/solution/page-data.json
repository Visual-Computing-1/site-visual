{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-mixing-water/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1359C\", source = \"CF\", title = \"Mixing Water\", author = \"Jesse Choe\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    Info: _missingComponent(\"Info\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {Info, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Info, {\n      title: \"Constant Time Solution\",\n      children: _jsx(_components.p, {\n        children: _jsxs(_components.strong, {\n          children: [\"Note: the \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(1)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \" solution for this problem is provided in the\\r\\n\", _jsx(_components.a, {\n            href: \"https://codeforces.com/blog/entry/78116\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"official editorial\"\n          }), \".\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Consider the following observations:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Case 1: The number of cups of hot water poured is equal to the number of cups of cold water poured. Pouring an equal number of cups of hot and cold water is equivalent to pouring one cup of each.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Case 2: Otherwise, there must be exactly one more cup of hot water poured than cold water poured. Thus, there will be \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c_i + 1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">c_i + 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7333em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" cups of hot water and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c_i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \" cups of cold water for some \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c_i \\\\geq 0\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">c_i \\\\geq 0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.786em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It can be proven, using induction, that the average barrel temperatures when \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c_i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \" is odd is a monotonically decreasing function. Thus, we can binary search on the maximum number of odd cups \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c_i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \" which gives a temperature of at least \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"t\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\\\"application/x-tex\\\">t</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6151em;\\\"></span><span class=\\\"mord mathnormal\\\">t</span></span></span></span>\"\n        }), \" by checking the odd integers around it.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The answer will either be the barrel with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \", \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", or \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c_i + 2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>+</mo><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">c_i + 2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7333em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \" cups.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\ndouble hot_water, cold_water, desired_temp;\\r\\n\\r\\n/*\\r\\n * This function checks whether pouring cupsPoured amount of cups achieves an average\\r\\n * barrel temperature greater than or equal to desired_temp. Technically, this represents\\r\\n * 2 * cupsPoured + 1 cups\\r\\n */\\r\\n\\r\\nbool works (int cupsPoured) {\\r\\n\\tdouble totalBarrelTemperature = (hot_water * (cupsPoured + 1) + cold_water * (cupsPoured));\\r\\n\\tdouble totalCupsPoured = (double) (2 * cupsPoured + 1.0);\\r\\n\\tdouble avgBarrelTemperature = totalBarrelTemperature / totalCupsPoured;\\r\\n\\treturn avgBarrelTemperature >= desired_temp;\\r\\n}\\r\\n\\r\\nvoid solve () {\\r\\n\\t/* \\r\\n\\t * maximumCups represents the the maximum number of cups such\\r\\n\\t * that the barrel temperature is greater than desired_temp.\\r\\n\\t */\\r\\n\\tcin >> hot_water >> cold_water >> desired_temp;\\r\\n\\t// Binary search on the answer for maximumCups.\\r\\n\\tint left = 0, right = 1e6 + 1, maximumCups = 0;\\r\\n\\r\\n\\twhile (left <= right) {\\r\\n\\t\\tint mid = left + (right - left) / 2;\\r\\n\\t\\tif (works(mid)) {\\r\\n\\t\\t\\tmaximumCups = mid;\\r\\n\\t\\t\\tleft = mid + 1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tright = mid - 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// If it is impossible to find a temperature close to desired_temp, then print 2\\r\\n\\tif (maximumCups == 1e6 + 1) {\\r\\n\\t\\tcout << 2 << endl;\\r\\n\\t} else {\\r\\n\\t\\t/*\\r\\n\\t\\t * The solution must lie between barrel1 and barrel2 if the total number of cups\\r\\n\\t\\t * is odd. barrel1 represents the barrel with an average temperature slightly\\r\\n\\t\\t * greater than desired_temp. barrel2 represent the barrel with an average\\r\\n\\t\\t * temperature slightly less than desired_temp. These two barrels will be the\\r\\n\\t\\t * closest to desired_temp.\\r\\n\\t\\t */\\r\\n\\t\\tdouble totalBarrel1 = (hot_water * (maximumCups + 1) + cold_water * maximumCups);\\r\\n\\t\\tdouble totalBarrel2 = (hot_water * (maximumCups + 2) + cold_water * (maximumCups + 1));\\r\\n\\t\\tdouble barrel1Cups = (double)(2 * maximumCups + 1.0);\\r\\n\\t\\tdouble barrel2Cups = (double)(2 * maximumCups + 3.0);\\r\\n\\t\\tdouble avgBarrel1 = totalBarrel1 / barrel1Cups;\\r\\n\\t\\tdouble avgBarrel2 = totalBarrel2 / barrel2Cups;\\r\\n\\t\\tdouble hot_cold_avg = (hot_water + cold_water) / 2.0;\\r\\n\\r\\n\\t\\tdouble minAbsDifference = min({abs(desired_temp - avgBarrel1),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tabs(desired_temp - avgBarrel2),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tabs(desired_temp - hot_cold_avg)});\\r\\n\\t\\t\\r\\n\\t\\t/*\\r\\n\\t\\t * If the minimum absolute difference from desired_temp is\\r\\n\\t\\t * hot_cold_avg, then it suffices to print 2. Otherwise, print\\r\\n\\t\\t * the barrel with the minimum absolute difference from desired_temp.\\r\\n\\t\\t */\\r\\n\\t\\tif (minAbsDifference == abs(desired_temp - hot_cold_avg)) {\\r\\n\\t\\t\\tcout << 2 << endl;\\r\\n\\t\\t} else if (minAbsDifference == abs(desired_temp - avgBarrel1)) {\\r\\n\\t\\t\\tcout << 2 * maximumCups + 1 << endl;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tcout << 2 * maximumCups + 3 << endl;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint t; cin >> t;\\r\\n\\tfor (int i = 1; i <= t; i++) {\\r\\n\\t\\tsolve();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1359C","source":"CF","title":"Mixing Water","author":"Jesse Choe"},"parent":{"name":"cf-1359C","relativePath":"cf-1359C.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"silver-conclusion","title":"Additional Practice for USACO Silver"}}}}]},"problemInfo":{"uniqueId":"cf-1359C","url":"https://codeforces.com/problemset/problem/1359/C"}},"pageContext":{"id":"cf-1359C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}