{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-832-milking-order/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-832\", source = \"USACO Bronze 2018 Open\", title = \"Milking Order\", author = \"Ananth Kashyap\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution-1\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_milkorder_bronze_open18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this problem, there are three cases that we have to consider:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" is fixed: In this case, the solution is simple, as we just output its fixed position.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" is in the given hierarchy of cows: In this case, we want to place every cow in the hierarchy as early as possible.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" is neither fixed nor in the hierarchy: In this case, we would want to place every cow in the hierarchy as late as possible, such that cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" gets the earliest possible position.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N(M + N))\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">(</mo><mi>M</mi><mo>+</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N(M + N))</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">))</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"file_in = open('milkorder.in')\\r\\ndata = file_in.read().strip().split('\\\\n')\\r\\nn, m, k = map(int, data[0].split(' '))\\r\\nhierarchy = list(map(int, data[1].split(' ')))\\r\\nfixed = [list(map(int, data[i + 2].split(' '))) for i in range(k)]\\r\\n\\r\\ncows = [0 for i in range(n)]\\r\\n\\r\\nfor i in range(k):\\r\\n  \\tcows[fixed[i][1] - 1] = fixed[i][0]\\r\\n\\r\\nif 1 in cows:\\r\\n\\t# Case 1\\r\\n \\tans = cows.index(1) + 1\\r\\nelse:\\r\\n\\tif 1 not in hierarchy:\\r\\n\\t\\t# Case 2\\r\\n\\t\\ti = n - 1\\r\\n\\t\\tpointer = m - 1\\r\\n\\t\\twhile pointer >= 0:\\r\\n\\t\\t\\tif hierarchy[pointer] in cows:\\r\\n\\t\\t\\t\\ti = cows.index(hierarchy[pointer]) - 1\\r\\n\\t\\t\\t\\tpointer -= 1\\r\\n\\t\\t\\telse:\\r\\n\\t\\t\\t\\tif cows[i] == 0:\\r\\n\\t\\t\\t\\t\\tcows[i] = hierarchy[pointer]\\r\\n\\t\\t\\t\\t\\ti -= 1\\r\\n\\t\\t\\t\\t\\tpointer -= 1\\r\\n\\t\\t\\t\\telse:\\r\\n\\t\\t\\t\\t\\ti -= 1\\r\\n\\r\\n\\t\\tfor i in range(n):\\r\\n\\t\\t\\tif cows[i] == 0:\\r\\n\\t\\t\\t\\tans = i + 1\\r\\n\\t\\t\\t\\tbreak\\r\\n\\telse:\\r\\n\\t\\t# Case 3\\r\\n\\t\\ti = 0\\r\\n\\t\\tpointer = 0\\r\\n\\t\\twhile pointer <= m - 1:\\r\\n\\t\\t\\tif hierarchy[pointer] in cows:\\r\\n\\t\\t\\t\\ti = cows.index(hierarchy[pointer]) + 1\\r\\n\\t\\t\\t\\tpointer += 1\\r\\n\\t\\t\\telse:\\r\\n\\t\\t\\t\\tif cows[i] == 0:\\r\\n\\t\\t\\t\\t\\tcows[i] = hierarchy[pointer]\\r\\n\\t\\t\\t\\t\\ti += 1\\r\\n\\t\\t\\t\\t\\tpointer += 1\\r\\n\\t\\t\\t\\telse:\\r\\n\\t\\t\\t\\t\\ti += 1\\r\\n\\t\\tfor i in range(n):\\r\\n\\t\\t\\tif cows[i] == 1:\\r\\n\\t\\t\\t\\tans = i + 1\\r\\n\\t\\t\\t\\tbreak\\r\\n\\r\\nprint(ans, file=open('milkorder.out', 'w'))\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-832","source":"USACO Bronze 2018 Open","title":"Milking Order","author":"Ananth Kashyap"},"parent":{"name":"usaco-832","relativePath":"usaco-832.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"ad-hoc","title":"Ad Hoc Problems"}}}}]},"problemInfo":{"uniqueId":"usaco-832","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=832"}},"pageContext":{"id":"usaco-832"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}