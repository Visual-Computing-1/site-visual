{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/ceoi-2012job-scheduling/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"ceoi-12-JobScheduling\", source = \"CEOI 2012\", title = \"Job Scheduling\", author = \"Chuyang Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://web.archive.org/web/20200923160544/http://ceoi2012.elte.hu/download/modelsolutions/1_soljobs.pdf\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To find the minimum possible solution, we can use binary search on the number of machines needed for finishing the jobs within the given deadline. With \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" requests, the number of needed machines must lie in the range \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[1, M]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>M</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[1, M]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" as in the worst case where all the requests are given on the last day, we still have \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"D + 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>D</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">D + 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">D</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" days to process these requests.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For each number of machines being tested, we can check its feasibility in linear time if the given job requests are already sorted in ascending order with respect to the request date. We iterate through each day \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" and add requests to the schedule in the sorted order. If there is no available machine left on a certain day \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" while there are still requests not processed, we move to next day \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i+1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">i+1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7429em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and process these requests. If the day \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" exceeds the delay limit for the current job being processed, i.e. the request date of the job added with the permitted delay is strictly less than the current day \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \", we can stop iterating as it is not possible to use the giving number of machines to process all the jobs within the deadline. Otherwise, if we have processed all job requests, the number of machines being tested is feasible, and we also found a schedule for these jobs.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\n#define all(x) begin(x), end(x)\\r\\n#define mp make_pair\\r\\n\\r\\nusing pi = pair<int, int>;\\r\\nusing vi = vector<int>;\\r\\n\\r\\nint N, D, M;\\r\\n\\r\\n// test if it is possible to finish the jobs using given # of machines\\r\\n// return: first: possible or not, second: if possible, the schedule for the jobs\\r\\npair<bool, vector<vi>> isFeasible(const vector<pi> &jobs, int machineCount)\\r\\n{\\r\\n\\tvector<vi> schedule(N);\\r\\n\\tint reqNum = 0;\\r\\n\\t// we simulate from day 1 until the last day N\\r\\n\\t// we move to the next day if all the machines are used or\\r\\n\\t// there is no more job requests left on or before this day\\r\\n\\tfor (int day = 1; day <= N; day++)\\r\\n\\t{\\r\\n\\t\\tfor (int j = 0; j < machineCount; j++)\\r\\n\\t\\t{\\r\\n\\t\\t\\t// if all jobs before and on this day are finished,\\r\\n\\t\\t\\t// we can go to the next day, even if there are usable machines left\\r\\n\\t\\t\\t// we can determine that since the vector jobs is sorted\\r\\n\\t\\t\\tif (jobs[reqNum].first > day)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t// if the current date is before the deadline for the job\\r\\n\\t\\t\\t// we can add this job to the schedule and move to the next job request\\r\\n\\t\\t\\tif (jobs[reqNum].first + D >= day)\\r\\n\\t\\t\\t\\tschedule[day - 1].push_back(jobs[reqNum++].second);\\r\\n\\t\\t\\t// otherwise, it is not feasible due to deadline\\r\\n\\t\\t\\telse\\r\\n\\t\\t\\t\\treturn mp(false, schedule);\\r\\n\\r\\n\\t\\t\\t// if we have processed all the requests, we have found a feasible sol\\r\\n\\t\\t\\tif (reqNum == M)\\r\\n\\t\\t\\t\\treturn mp(true, schedule);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// if not all the requests can be processed within the given N days,\\r\\n\\t// then it is not feasible\\r\\n\\treturn mp(false, schedule);\\r\\n}\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tcin.tie(0)->sync_with_stdio(false);\\r\\n\\r\\n\\tcin >> N >> D >> M;\\r\\n\\tvector<pi> jobs(M);\\r\\n\\tfor (int i = 0; i < M; i++)\\r\\n\\t{\\r\\n\\t\\tint day;\\r\\n\\t\\tcin >> day;\\r\\n\\t\\t// first: request date, second: index [1..M]\\r\\n\\t\\tjobs[i] = mp(day, i + 1);\\r\\n\\t}\\r\\n\\t// we sort the jobs by the request date in ascending order\\r\\n\\t// sothat we can test them using isFeasible() in linear time whether they\\r\\n\\t// can be done in given time using a certain amount of machines\\r\\n\\tsort(all(jobs));\\r\\n\\r\\n\\tvector<vi> result;\\r\\n\\t// binary search on the number of machines for the minimum possible solution\\r\\n\\t// left and right bound, l and r\\r\\n\\tint l = 1, r = M;\\r\\n\\twhile (l < r)\\r\\n\\t{\\r\\n\\t\\tint machineNum = (l + r) / 2;\\r\\n\\t\\t// test if the jobs would finish within the deadline\\r\\n\\t\\t// using the current # of machines, machineNum\\r\\n\\t\\tpair<bool, vector<vi>> curResult = isFeasible(jobs, machineNum);\\r\\n\\t\\t// if it's possible, we set the right bound as the tested machine number\\r\\n\\t\\t// and save the current schedule\\r\\n\\t\\tif (curResult.first)\\r\\n\\t\\t{\\r\\n\\t\\t\\tr = machineNum;\\r\\n\\t\\t\\tresult = curResult.second;\\r\\n\\t\\t}\\r\\n\\t\\t// otherwise, we set the left bound to be the tested number + 1\\r\\n\\t\\t// and test the next machineNum again\\r\\n\\t\\telse\\r\\n\\t\\t\\tl = machineNum + 1;\\r\\n\\t}\\r\\n\\r\\n\\tcout << l << \\\"\\\\n\\\";\\r\\n\\tfor (int i = 0; i < N; i++)\\r\\n\\t{\\r\\n\\t\\tfor (int &idx : result[i])\\r\\n\\t\\t\\tcout << idx << \\\" \\\";\\r\\n\\t\\tcout << 0 << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"ceoi-12-JobScheduling","source":"CEOI 2012","title":"Job Scheduling","author":"Chuyang Wang"},"parent":{"name":"ceoi-12-JobScheduling","relativePath":"ceoi-12-JobScheduling.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"binary-search","title":"Binary Search"}}}}]},"problemInfo":{"uniqueId":"ceoi-12-JobScheduling","url":"https://oj.uz/problem/view/CEOI12_jobs"}},"pageContext":{"id":"ceoi-12-JobScheduling"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}