{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-740-wheres-bessie/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-740\", source = \"USACO Silver 2017 US Open\", title = \"Where's Bessie?\", author = \"Qi Wang, Pranav Jadhav\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_where_silver_open17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h> \\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 20;\\r\\nvector<vector<char>> image(MAX_N, vector<char>(MAX_N));\\r\\nvector<vector<bool>> visited(MAX_N, vector<bool>(MAX_N));\\r\\n\\r\\n// PCL described by top-left (i1,j1) and bottom-right (i2,j2) corner\\r\\nstruct PCL {\\r\\n\\tint i1, j1, i2, j2;\\r\\n};\\r\\n\\r\\n// Floodfill to find connected regions\\r\\nint i_min, i_max, j_min, j_max;\\r\\nvoid floodfill(int i , int j, char color) {\\r\\n\\tif(\\r\\n\\t\\ti < i_min || j < j_min || i > i_max || j > j_max ||\\r\\n\\t\\tvisited[i][j] ||\\r\\n\\t\\timage[i][j] != color\\r\\n\\t) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tvisited[i][j] = true;\\r\\n\\r\\n\\tfloodfill(i + 1, j, color);\\r\\n\\tfloodfill(i - 1, j, color);\\r\\n\\tfloodfill(i, j + 1, color);\\r\\n\\tfloodfill(i, j - 1, color);\\r\\n}\\r\\n\\r\\n// Check whether a given region is a PCL\\r\\nbool is_pcl(int i1, int j1, int i2, int j2) {\\r\\n\\t// keep track of num of regions for each color A-Z\\r\\n\\tvector<int> region_count(26, 0);\\r\\n\\r\\n\\t// set bounds for floodfill\\r\\n\\ti_min = i1;\\r\\n\\ti_max = i2;\\r\\n\\tj_min = j1;\\r\\n\\tj_max = j2;\\r\\n\\r\\n\\t// Count # of connected regions for each color present in bounds\\r\\n\\tfor (int i = i1; i <= i2; i++) {\\r\\n\\t\\tfor (int j = j1; j <= j2; j++) {\\r\\n\\t\\t\\tif (!visited[i][j]) {\\r\\n\\t\\t\\t\\tchar cur_color = image[i][j];\\r\\n\\t\\t\\t\\tregion_count[cur_color - 'A']++;\\r\\n\\t\\t\\t\\tfloodfill(i, j, cur_color);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Reset visited vector for the next call\\r\\n\\tfill(visited.begin(), visited.end(), vector<bool>(MAX_N, false));\\r\\n\\r\\n\\t// Verify PCL conditions\\r\\n\\tint color_count = 0;\\r\\n\\tbool color_with_one_region = false;\\r\\n\\tbool color_with_more_regions = false;\\r\\n\\tfor (int i = 0; i < 26; i++) {\\r\\n\\t\\tif (region_count[i] != 0) {\\r\\n\\t\\t\\tcolor_count++;\\r\\n\\t\\t}\\r\\n\\t\\tif (region_count[i] == 1) {\\r\\n\\t\\t\\tcolor_with_one_region = true;\\r\\n\\t\\t}\\r\\n\\t\\tif (region_count[i] > 1) {\\r\\n\\t\\t\\tcolor_with_more_regions = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn (\\r\\n\\t\\tcolor_count == 2 &&\\r\\n\\t\\tcolor_with_one_region &&\\r\\n\\t\\tcolor_with_more_regions\\r\\n\\t);\\r\\n}\\r\\n\\r\\n// Check if PCL a is inside PCL b\\r\\nbool is_inside(PCL a, PCL b) {\\r\\n\\treturn (\\r\\n\\t\\ta.i1 >= b.i1 &&\\r\\n\\t\\ta.i2 <= b.i2 &&\\r\\n\\t\\ta.j1 >= b.j1 &&\\r\\n\\t\\ta.j2 <= b.j2\\r\\n\\t);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"where.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"where.out\\\", \\\"w\\\", stdout);\\r\\n\\tint n;\\r\\n\\tint pcl_count = 0;\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\tcin >> image[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvector<PCL> pcl_list;\\r\\n\\r\\n\\t// Brute force every rectangle to find PCLs\\r\\n\\tfor (int i1 = 0; i1 < n; i1++) {\\r\\n\\t\\tfor (int j1 = 0; j1 < n; j1++) {\\r\\n\\t\\t\\tfor (int i2 = 0; i2 < n; i2++) {\\r\\n\\t\\t\\t\\tfor (int j2 = 0; j2 < n; j2++) {\\r\\n\\t\\t\\t\\t\\tif (is_pcl(i1, j1, i2, j2)) {\\r\\n\\t\\t\\t\\t\\t\\tPCL new_pcl = {i1, j1, i2, j2};\\r\\n\\t\\t\\t\\t\\t\\tpcl_list.push_back(new_pcl);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// If a PCL is inside another PCL, don't count it\\r\\n\\tfor (int i = 0; i < pcl_list.size(); i++) {\\r\\n\\t\\tPCL current_pcl = pcl_list[i];\\r\\n\\t\\tbool valid_pcl = true;\\r\\n\\t\\tfor (int j = 0; j < pcl_list.size(); j++) {\\r\\n\\t\\t\\tif (i == j) {continue;}\\r\\n\\t\\t\\tPCL other_pcl = pcl_list[j];\\r\\n\\t\\t\\tif (is_inside(current_pcl, other_pcl)) {\\r\\n\\t\\t\\t\\tvalid_pcl = false;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tpcl_count += valid_pcl;\\r\\n\\t}\\r\\n\\r\\n\\tcout << pcl_count << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"//Created by Qi Wang\\r\\nimport java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class where {\\r\\n\\tstatic int N,A;\\r\\n\\tstatic char[][] F, temp;\\r\\n\\tstatic List<PCL> list = new ArrayList<>();\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tInputReader in = new InputReader(\\\"where.in\\\");\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"where.out\\\")));\\r\\n\\t\\tN = in.nextInt(); F = new char[N][N]; temp = new char[N][N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tString line = in.nextLine();\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tF[i][j] = line.charAt(j);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//Brute forcing every rectangle\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tfor (int k = 0; k < N; k++) {\\r\\n\\t\\t\\t\\t\\tfor (int l = 0; l < N; l++) {\\r\\n\\t\\t\\t\\t\\t\\tif(check(i, j, k, l)) {\\r\\n\\t\\t\\t\\t\\t\\t\\tlist.add(new PCL(i,j,k,l));\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < list.size(); i++) {\\r\\n\\t\\t\\tif(max(i)) A++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tout.println(A);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\tprivate static class PCL{\\r\\n\\t\\tpublic int i, j, k, l;\\r\\n\\t\\tpublic PCL(int a, int b, int c, int d){\\r\\n\\t\\t\\ti = a; j = b; k = c; l = d;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tpublic static boolean max(int x){\\r\\n\\t\\tfor (int i = 0; i < list.size(); i++) {\\r\\n\\t\\t\\tif(i==x) continue;\\r\\n\\t\\t\\tif(inside(list.get(x), list.get(i))) return false;\\r\\n\\t\\t}\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\tpublic static boolean inside(PCL o, PCL s){\\r\\n\\t\\t//checking if o is inside of s\\r\\n\\t\\treturn o.i >= s.i && o.j >= s.j && o.k <= s.k && o.l <= s.l;\\r\\n\\t}\\r\\n\\r\\n\\t//Takes the top-left point and the bottom-right point\\r\\n\\tpublic static boolean check(int i1, int j1, int i2, int j2)\\r\\n\\t{\\r\\n\\t\\t//Number of colors\\r\\n\\t\\tint co = 0;\\r\\n\\t\\t//The count for number of sections given a letter\\r\\n\\t\\tint[] color = new int[26];\\r\\n\\t\\tfor (int i=i1; i<=i2; i++)\\r\\n\\t\\t\\tfor (int j=j1; j<=j2; j++)\\r\\n\\t\\t\\t\\ttemp[i][j] = F[i][j];\\r\\n\\t\\tfor (int i=i1; i<=i2; i++)\\r\\n\\t\\t\\tfor (int j=j1; j<=j2; j++)\\r\\n\\t\\t\\t\\t//if temp[i][j] is '-' it's marked\\r\\n\\t\\t\\t\\tif (temp[i][j] != '-') {\\r\\n\\t\\t\\t\\t\\tint c = temp[i][j] - 'A';\\r\\n\\t\\t\\t\\t\\t//Incrementing number of colors.\\r\\n\\t\\t\\t\\t\\tif (color[c] == 0) co++;\\r\\n\\t\\t\\t\\t\\t//Incrementing the number of connected components of c.\\r\\n\\t\\t\\t\\t\\tcolor[c]++;\\r\\n\\r\\n\\t\\t\\t\\t\\t//Floodfill\\r\\n\\t\\t\\t\\t\\tfill(i,j,temp[i][j]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\tif (co != 2) return false;\\r\\n\\t\\tboolean one = false, more = false;\\r\\n\\t\\tfor (int i=0; i<26; i++) {\\r\\n\\t\\t\\tif (color[i] == 1) one = true;\\r\\n\\t\\t\\tif (color[i] > 1) more = true;\\r\\n\\t\\t}\\r\\n\\t\\treturn one && more;\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void fill(int i, int j, char C){\\r\\n\\t\\tif(i < 0 || j < 0 || i >= N || j >= N) return;\\r\\n\\t\\tif(temp[i][j] != C) return;\\r\\n\\t\\ttemp[i][j] = '-';\\r\\n\\r\\n\\t\\tfill(i, j-1, C);\\r\\n\\t\\tfill(i, j+1, C);\\r\\n\\t\\tfill(i-1, j, C);\\r\\n\\t\\tfill(i+1, j, C);\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class InputReader {\\r\\n\\t\\tpublic BufferedReader reader;\\r\\n\\t\\tpublic StringTokenizer tokenizer;\\r\\n\\r\\n\\t\\tpublic InputReader() {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new InputStreamReader(System.in), 32768);\\r\\n\\t\\t\\t} catch (Exception e) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Could not create input stream\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic InputReader(String fileName) {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new FileReader(new File(fileName)), 32768);\\r\\n\\t\\t\\t} catch (Exception ex) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Input file does not exist! Put it in the project folder.\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ttokenizer = null;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\ttokenizer = new StringTokenizer(reader.readLine());\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn tokenizer.nextToken();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic boolean hasNextInt() throws IOException { return reader.ready(); }\\r\\n\\r\\n\\t\\tpublic int nextInt() {\\r\\n\\t\\t\\treturn Integer.parseInt(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic double nextDouble() {\\r\\n\\t\\t\\treturn Double.parseDouble(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic long nextLong() {\\r\\n\\t\\t\\treturn Long.parseLong(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic char nextChar() {\\r\\n\\t\\t\\treturn next().charAt(0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * When you call next(), that entire line will be skipped.\\r\\n\\t\\t * No flushing buffers.\\r\\n\\t\\t * Doesn't work when you want to scan the remaining line.\\r\\n\\t\\t *\\r\\n\\t\\t * @return entire line\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tpublic String nextLine() {\\r\\n\\t\\t\\tString str = \\\"\\\";\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstr = reader.readLine();\\r\\n\\t\\t\\t\\ttokenizer = null;\\r\\n\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn str;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-740","source":"USACO Silver 2017 US Open","title":"Where's Bessie?","author":"Qi Wang, Pranav Jadhav"},"parent":{"name":"usaco-740","relativePath":"usaco-740.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"flood-fill","title":"Flood Fill"}}}}]},"problemInfo":{"uniqueId":"usaco-740","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=740"}},"pageContext":{"id":"usaco-740"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}