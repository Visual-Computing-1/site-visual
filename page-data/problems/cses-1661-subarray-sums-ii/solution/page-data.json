{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1661-subarray-sums-ii/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1661\", source = \"CSES\", title = \"Subarray Sums II\", author = \"Qi Wang, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"problem\",\n      children: [_jsx(_components.a, {\n        href: \"#problem\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problem\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We are asked to find the number of subarrays that sum up to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" given the size\\r\\nof the array and its elements.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can have a map that keeps track of the prefix sums. At each index \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \", we can\\r\\ncount the number of prefixes with sum equal to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{prefixSum}[i] - x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">prefixSum</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{prefixSum}[i] - x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">prefixSum</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". This\\r\\nwill ensure that we can remove a prefix from our current prefix to build a\\r\\nsubarray with sum \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". After every iteration, we just add our new prefix sum to\\r\\nthe map.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <map>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\n/**\\r\\n * @author Qi Wang\\r\\n * (detemplifying courtesy to Kevin Sheng)\\r\\n */\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\r\\n\\tint N, X;\\r\\n\\tcin >> N >> X;\\r\\n\\tvector<int> T(N);\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tcin >> T[i];\\r\\n\\t}\\r\\n\\r\\n\\tlong long prefix_sum = 0;\\r\\n\\tlong long ans = 0;\\r\\n\\tmap<long long, int> sums;\\r\\n\\tsums[0] = 1;\\r\\n\\tfor (int x : T) {\\r\\n\\t\\tprefix_sum += x;\\r\\n\\t\\t/*\\r\\n\\t\\t * If there is a subarray with a prefix sum of prefix_sum - X,\\r\\n\\t\\t * we can exclude it from our current subarray to get the desired sum.\\r\\n\\t\\t * Thus, we can add the number of those subarrays to our answer.\\r\\n\\t\\t */\\r\\n\\t\\tans += sums[prefix_sum - X];\\r\\n\\t\\t// Increment the amount of prefix sums with a sum of prefix_sum\\r\\n\\t\\tsums[prefix_sum]++;\\r\\n\\t}\\r\\n\\tcout << ans << endl;\\r\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class SubarraySumsII {\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint arraySize = io.nextInt();\\r\\n\\t\\tint target = io.nextInt();\\r\\n\\t\\tint[] array = new int[arraySize];\\r\\n\\r\\n\\t\\tfor (int x = 0; x < arraySize; x++) {\\r\\n\\t\\t\\tarray[x] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tlong prefixSum = 0;\\r\\n\\t\\tlong answer = 0;\\r\\n\\t\\tMap<Long, Integer> sums = new HashMap<>();\\r\\n\\t\\tsums.put((long) 0, 1);\\r\\n\\t\\t\\r\\n\\t\\tfor (int x : array) {\\r\\n\\t\\t\\tprefixSum += x;\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * If there is a subarray with a prefix sum of prefix_sum - X,\\r\\n\\t\\t\\t * we can exclude it from our current subarray to get the desired sum.\\r\\n\\t\\t\\t * Thus, we can add the number of those subarrays to our answer.\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tif (sums.containsKey(prefixSum - target)) {  // check if it is in our map\\r\\n\\t\\t\\t\\tanswer += sums.get(prefixSum - target);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Increment the amount of prefix sums with a sum of prefix_sum\\r\\n\\t\\t\\tif (!sums.containsKey(prefixSum)) {  // not yet in map, so add it\\r\\n\\t\\t\\t\\tsums.put(prefixSum, 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {  // already in map, add one to it\\r\\n\\t\\t\\t\\tsums.put(prefixSum, sums.get(prefixSum) + 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(answer);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"def main():\\r\\n\\t\\r\\n\\tN, X = map(int, input().split()) \\r\\n\\tprefix, res = 0, 0\\r\\n\\tmp = {0: 1} # mp[0] = 1\\r\\n\\t\\r\\n\\tfor x in input().split(): \\r\\n\\t\\tprefix += int(x)\\r\\n\\t\\tres += mp.get(prefix - X, 0) # if not in dict, return 0\\r\\n\\t\\tmp[prefix] = mp.get(prefix, 0) + 1 \\r\\n\\tprint(res)\\r\\n\\r\\nmain()\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1661","source":"CSES","title":"Subarray Sums II","author":"Qi Wang, Brad Ma"},"parent":{"name":"cses-1661","relativePath":"cses-1661.mdx"},"toc":{"cpp":[{"depth":2,"value":"Problem","slug":"problem"},{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Problem","slug":"problem"},{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Problem","slug":"problem"},{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"prefix-sums","title":"Introduction to Prefix Sums"}}}},{"node":{"module":{"frontmatter":{"id":"visual","title":"Visual"}}}}]},"problemInfo":{"uniqueId":"cses-1661","url":"https://cses.fi/problemset/task/1661"}},"pageContext":{"id":"cses-1661"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}