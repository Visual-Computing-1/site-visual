{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-568-speeding/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-568\", source = \"USACO Bronze 2015 December\", title = \"Speeding\", author = \"Jesse Choe, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_speeding_bronze_dec15.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int LEN = 100;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"speeding.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"speeding.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tint N, M;\\r\\n\\tcin >> N >> M;\\r\\n\\r\\n\\tint start = 0;\\r\\n\\tvector<int> limit(LEN);\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint length, speed;\\r\\n\\t\\tcin >> length >> speed;\\r\\n\\t\\tfor (int j = start; j < start + length; j++) {\\r\\n\\t\\t\\tlimit[j] = speed;\\r\\n\\t\\t}\\r\\n\\t\\tstart += length;\\r\\n\\t}\\r\\n\\r\\n\\tstart = 0;\\r\\n\\tvector<int> bessie(LEN);\\r\\n\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\tint length, speed;\\r\\n\\t\\tcin >> length >> speed;\\r\\n\\t\\tfor (int j = start; j < start + length; j++) {\\r\\n\\t\\t\\tbessie[j] = speed;\\r\\n\\t\\t}\\r\\n\\t\\tstart += length;\\r\\n\\t}\\r\\n\\r\\n\\tint worst = 0;\\r\\n\\tfor (int i = 0; i < LEN; i++) {\\r\\n\\t\\tworst = max(worst, bessie[i] - limit[i]);\\r\\n\\t}\\r\\n\\tcout << worst << endl;\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Speeding {\\r\\n\\tprivate static final int LEN = 100;\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new FileReader(\\\"speeding.in\\\"));\\r\\n\\t\\tStringTokenizer initial = new StringTokenizer(read.readLine());\\r\\n\\t\\tint roadSegNum = Integer.parseInt(initial.nextToken());\\r\\n\\t\\tint bessieSegNum = Integer.parseInt(initial.nextToken());\\r\\n\\t\\tint[][] limitSegs = new int[roadSegNum][2];\\r\\n\\t\\tfor (int s = 0; s < roadSegNum; s++) {\\r\\n\\t\\t\\tlimitSegs[s] = Arrays.stream(read.readLine().split(\\\" \\\"))\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t .mapToInt(Integer::parseInt).toArray();\\r\\n\\t\\t}\\r\\n\\t\\tint[][] bessieSegs = new int[bessieSegNum][2];\\r\\n\\t\\tfor (int s = 0; s < bessieSegNum; s++) {\\r\\n\\t\\t\\tbessieSegs[s] = Arrays.stream(read.readLine().split(\\\" \\\"))\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t .mapToInt(Integer::parseInt).toArray();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint[] limit = new int[LEN];\\r\\n\\t\\tint start = 0;\\r\\n\\t\\tfor (int[] s : limitSegs) {\\r\\n\\t\\t\\tfor (int i = 0; i < s[0]; i++) {\\r\\n\\t\\t\\t\\tlimit[start + i] = s[1];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tstart += s[0];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint[] bessie = new int[LEN];\\r\\n\\t\\tstart = 0;\\r\\n\\t\\tfor (int[] s : bessieSegs) {\\r\\n\\t\\t\\tfor (int i = 0; i < s[0]; i++) {\\r\\n\\t\\t\\t\\tbessie[start + i] = s[1];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tstart += s[0];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint worst = 0;\\r\\n\\t\\tfor (int p = 0; p < LEN; p++) {\\r\\n\\t\\t\\tworst = Math.max(worst, bessie[p] - limit[p]);\\r\\n\\t\\t}\\r\\n\\t\\tPrintWriter written = new PrintWriter(\\\"speeding.out\\\");\\r\\n\\t\\twritten.println(worst);\\r\\n\\t\\twritten.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"with open('speeding.in') as read:\\r\\n\\troad_seg_num, speed_seg_num = [int(i) for i in read.readline().split()]\\r\\n\\tlimit_segs = [[int(i) for i in read.readline().split()]\\r\\n\\t\\t\\t\\t   for _ in range(road_seg_num)]\\r\\n\\r\\n\\tbessie_segs = [[int(i) for i in read.readline().split()]\\r\\n\\t\\t\\t\\t\\tfor _ in range(speed_seg_num)]\\r\\n\\r\\nlimit = []\\r\\nfor s in limit_segs:\\r\\n\\tfor _ in range(s[0]):\\r\\n\\t\\tlimit.append(s[1])\\r\\nbessie = []\\r\\nfor s in bessie_segs:\\r\\n\\tfor _ in range(s[0]):\\r\\n\\t\\tbessie.append(s[1])\\r\\n\\r\\nworst = 0\\r\\nfor a, b in zip(limit, bessie):\\r\\n\\tworst = max(worst, b - a)\\r\\nprint(worst, file=open('speeding.out', 'w'))\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-568","source":"USACO Bronze 2015 December","title":"Speeding","author":"Jesse Choe, Kevin Sheng"},"parent":{"name":"usaco-568","relativePath":"usaco-568.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"simulation","title":"Simulation"}}}}]},"problemInfo":{"uniqueId":"usaco-568","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=568"}},"pageContext":{"id":"usaco-568"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}