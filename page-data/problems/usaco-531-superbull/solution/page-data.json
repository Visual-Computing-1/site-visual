{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-531-superbull/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-531\", source = \"USACO Silver 2015 February\", title = \"Superbull\", author = \"Maggie Liu, Sofia Yang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_superbull_silver.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-1---kruskal\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1---kruskal\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1 - Kruskal\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use Kruskal's to find the maximum spanning tree of the graph formed by\\r\\nthe teams. First, add all possible edges between two teams to the vector\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{edges}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">edges</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{edges}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">edges</span></span></span></span></span>\"\n      }), \" and sort it in decreasing order of edge weight. For each edge,\\r\\nif we can unite the connected components of the two vertices, then we have\\r\\neliminated one team. Increment \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{eliminated}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">eliminated</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{eliminated}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">eliminated</span></span></span></span></span>\"\n      }), \" by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and add the edge\\r\\nweight to our answer, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ans}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ans</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ans}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ans</span></span></span></span></span>\"\n      }), \". Once \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n - 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">n - 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" teams have been eliminated,\\r\\nwe can print \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ans}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ans</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ans}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ans</span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"kruskals-implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#kruskals-implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Kruskal's Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2 \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2 \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <cstdio>\\r\\n#include <algorithm>\\r\\n#include <vector>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 2000;\\r\\nint parent[MAX_N];\\r\\nint compsize[MAX_N];\\r\\nstruct Edge\\r\\n{\\r\\n\\tint from, to, weight;\\r\\n};\\r\\n\\r\\n// BeginCodeSnip{Standard DSU operations}\\r\\nvoid init(int n)\\r\\n{\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tparent[i] = i;\\r\\n\\t\\tcompsize[i] = 1;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint find(int a)\\r\\n{\\r\\n\\tif (a == parent[a])\\r\\n\\t{\\r\\n\\t\\treturn a;\\r\\n\\t}\\r\\n\\treturn parent[a] = find(parent[a]);\\r\\n}\\r\\n\\r\\nbool unite(int a, int b)\\r\\n{\\r\\n\\tint roota = find(a), rootb = find(b);\\r\\n\\tif (roota == rootb)\\r\\n\\t{\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\tif (compsize[roota] > compsize[rootb])\\r\\n\\t{\\r\\n\\t\\tswap(roota, rootb);\\r\\n\\t}\\r\\n\\tparent[roota] = rootb;\\r\\n\\tcompsize[rootb] += compsize[roota];\\r\\n\\treturn true;\\r\\n}\\r\\n// EndCodeSnip\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tfreopen(\\\"superbull.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"superbull.out\\\", \\\"w\\\", stdout);\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tint ids[MAX_N];\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tcin >> ids[i];\\r\\n\\t}\\r\\n\\tvector<Edge> edges;\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tfor (int j = i + 1; j < n; j++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tedges.push_back({i, j, ids[i] ^ ids[j]});\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tinit(n);\\r\\n\\t// sort edges in decreasing order of weight\\r\\n\\tsort(edges.begin(), edges.end(), [](Edge a, Edge b){\\r\\n\\t\\treturn a.weight > b.weight;\\r\\n\\t});\\r\\n\\tint eliminated = 0;\\r\\n\\tlong long ans = 0;\\r\\n\\tfor (Edge e : edges)\\r\\n\\t{\\r\\n\\t\\tif (unite(e.from, e.to))\\r\\n\\t\\t{\\r\\n\\t\\t\\teliminated++;\\r\\n\\t\\t\\tans += e.weight;\\r\\n\\t\\t\\t// if all but 1 team has been eliminated\\r\\n\\t\\t\\tif (eliminated == n - 1)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tcout << ans << endl;\\r\\n\\t\\t\\t\\treturn 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---prim\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---prim\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - Prim\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"explanation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can treat the different teams as nodes in a graph, and treat each possible pairing of two teams as an edge.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For each edge, its weight is equal to the XOR of the two node ids.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, we would like to find the maximum spanning tree in this graph by connecting the edges with the weights.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are 2 steps in doing so:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Find an unvisited node with the greatest weight, and add it to the MST.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Re-evaluate all the edge weights from the MST to the other unvisited nodes.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can repeat these 2 steps until all N nodes are in the maximum spanning tree.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Superbull {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"superbull\\\");\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\r\\n\\t\\tint[] ids = new int[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tids[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlong max_cost = 0;\\r\\n\\t\\tboolean[] visited = new boolean[N];\\r\\n\\t\\tint[] score = new int[N];\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tint node = -1;\\r\\n\\r\\n\\t\\t\\t// Find an unvisited node with the highest score.\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tif (visited[j]) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (node == -1 || (score[i] > score[node])) {\\r\\n\\t\\t\\t\\t\\tnode = j;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Add this node to the MST.\\r\\n\\t\\t\\tmax_cost += score[node];\\r\\n\\t\\t\\tvisited[node] = true;\\r\\n\\t\\t\\tSystem.out.println(node);\\r\\n\\r\\n\\t\\t\\t// Re-evaluate all other node scores.\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tscore[j] = Integer.max(score[j], (ids[node] ^ ids[j]));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(max_cost);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\r\\n\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-531","source":"USACO Silver 2015 February","title":"Superbull","author":"Maggie Liu, Sofia Yang"},"parent":{"name":"usaco-531","relativePath":"usaco-531.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1 - Kruskal","slug":"solution-1---kruskal"},{"depth":3,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Kruskal&#39;s Implementation","slug":"kruskals-implementation"},{"depth":2,"value":"Solution 2 - Prim","slug":"solution-2---prim"},{"depth":3,"value":"Explanation","slug":"explanation-1"},{"depth":3,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Solution 1 - Kruskal","slug":"solution-1---kruskal"},{"depth":3,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Kruskal&#39;s Implementation","slug":"kruskals-implementation"},{"depth":2,"value":"Solution 2 - Prim","slug":"solution-2---prim"},{"depth":3,"value":"Explanation","slug":"explanation-1"},{"depth":3,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Solution 1 - Kruskal","slug":"solution-1---kruskal"},{"depth":3,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Kruskal&#39;s Implementation","slug":"kruskals-implementation"},{"depth":2,"value":"Solution 2 - Prim","slug":"solution-2---prim"},{"depth":3,"value":"Explanation","slug":"explanation-1"},{"depth":3,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"mst","title":"Minimum Spanning Trees"}}}}]},"problemInfo":{"uniqueId":"usaco-531","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=531"}},"pageContext":{"id":"usaco-531"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}