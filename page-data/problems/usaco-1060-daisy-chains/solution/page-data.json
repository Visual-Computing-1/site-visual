{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1060-daisy-chains/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1060\", source = \"USACO Bronze 2020 December\", title = \"Daisy Chains\", author = \"Sathvik Chundru, Danh Ta Chi Thanh, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_prob2_bronze_dec20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Due to the low constraints of the problem, we can iterate through every possible photo.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^3)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^3)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <algorithm>\\r\\n#include <cstdio>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main(){\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tint petals[n];\\r\\n\\tfor (int i = 0; i < n; ++i) {\\r\\n\\t\\tcin >> petals[i];\\r\\n\\t}\\r\\n\\tint photos = 0;\\r\\n\\tfor (int i = 0; i < n; ++i) {\\r\\n\\t\\tfor (int j = i; j < n; ++j) {\\r\\n\\t\\t\\tint totalPetals = 0;\\r\\n\\t\\t\\tfor (int k = i; k <= j; ++k) {\\r\\n\\t\\t\\t\\ttotalPetals += petals[k];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tbool present = false;\\r\\n\\t\\t\\tfor (int k = i; k <= j; ++k) {\\r\\n\\t\\t\\t\\tif (petals[k] * (j-i+1) == totalPetals) {\\r\\n\\t\\t\\t\\t\\tpresent = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (present) {\\r\\n\\t\\t\\t\\t++photos;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << photos;\\r\\n\\treturn 0;\\r\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\t\\r\\nclass Main {\\r\\n\\tpublic static void main(String[] args){\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint[] petals = new int[n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\t/* \\r\\n\\t\\t\\t * storing each petal count in an array\\r\\n\\t\\t\\t * so we can keep track of which flower\\r\\n\\t\\t\\t * has how many petals based on the \\r\\n\\t\\t\\t * index it is stored in\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tpetals[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\t\\tint counter = 0;\\r\\n\\t\\t// brute force every possible subarray of flowers\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = i; j < n; j++) {\\r\\n\\t\\t\\t\\tint flowerCount = j - i + 1;\\r\\n\\t\\t\\t\\tint sum = 0;\\r\\n\\t\\t\\t\\tfor (int k = i; k <= j; k++) {\\r\\n\\t\\t\\t\\t\\tsum += petals[k];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t * finding the sum of all petals up to \\r\\n\\t\\t\\t\\t * this point so we can find the average \\r\\n\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\tif (sum % flowerCount != 0) {\\r\\n\\t\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t\\t * checking to see if the average is an\\r\\n\\t\\t\\t\\t\\t * integer; if not, we can save time and\\r\\n\\t\\t\\t\\t\\t * optimize by skipping this batch of flowers\\r\\n\\t\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t       /*\\r\\n\\t\\t\\t\\t* average = total sum of petals / total \\r\\n\\t\\t\\t\\t* number of flowers\\r\\n\\t\\t\\t\\t*/\\r\\n\\t\\t\\t\\tint avg = sum / flowerCount;\\r\\n\\t\\t\\t\\tfor (int k = i; k <= j; k++) {\\r\\n\\t\\t\\t\\t\\tif (petals[k] == avg) {\\r\\n\\t\\t\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t\\t\\t * checking to see if any flowers \\r\\n\\t\\t\\t\\t\\t\\t * have the exact same number of \\r\\n\\t\\t\\t\\t\\t\\t * petals as the average; if they do, \\r\\n\\t\\t\\t\\t\\t\\t * then adding them to a counter\\r\\n\\t\\t\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\t\\t\\tcounter++;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\t\\t\\t\\t      \\r\\n\\t\\tio.println(counter);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"N = int(input())\\r\\nflowers = list(map(int, input().split()))\\r\\nans = 0\\r\\n\\t\\r\\nfor i in range(N):\\r\\n\\tfor j in range(i, N):\\r\\n\\t\\t# find average petals in the range i - j\\r\\n\\t\\tavg_petals = sum(flowers[i:j + 1]) / len(flowers[i:j + 1])\\r\\n\\r\\n\\t\\tfor index in range(i, j + 1):\\r\\n\\t\\t\\tif flowers[index] == avg_petals:\\r\\n\\t\\t\\t\\t# we found an average flower\\r\\n\\t\\t\\t\\tans += 1\\r\\n\\t\\t\\t\\tbreak\\r\\nprint(ans)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1060","source":"USACO Bronze 2020 December","title":"Daisy Chains","author":"Sathvik Chundru, Danh Ta Chi Thanh, Ryan Chou"},"parent":{"name":"usaco-1060","relativePath":"usaco-1060.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-complete","title":"Basic Complete Search"}}}}]},"problemInfo":{"uniqueId":"usaco-1060","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1060"}},"pageContext":{"id":"usaco-1060"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}