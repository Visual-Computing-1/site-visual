{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/sapo-2014the-stables-of-genghis-khan/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"sapo-14-genghis\", source = \"SAPO 2014\", title = \"The Stables of Genghis Khan\", author = \"Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's define \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{lowestOps}[a][b]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lowestOps</mtext><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lowestOps}[a][b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lowestOps</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" as the minimum number of operations to see if each horse is in the stables or not, given that we only consider horses in the interval \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(\\\\texttt{stableHorses[a]}, \\\\texttt{stableHorses[b]})\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">stableHorses[a]</mtext><mo separator=\\\"true\\\">,</mo><mtext mathvariant=\\\"monospace\\\">stableHorses[b]</mtext><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(\\\\texttt{stableHorses[a]}, \\\\texttt{stableHorses[b]})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">stableHorses[a]</span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">stableHorses[b]</span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{stableHorses}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">stableHorses</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{stableHorses}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">stableHorses</span></span></span></span></span>\"\n      }), \" being a sorted list of all the horses that are in the stables.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Why use an open interval? It's to account for the horses with ID's that aren't contained in the range of the ID's of the horses of the stable. For example, if we had a horse with ID \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"4\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\\\"application/x-tex\\\">4</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span></span></span></span>\"\n      }), \", and the horses in the stables were \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[6, 7, 10]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>6</mn><mo separator=\\\"true\\\">,</mo><mn>7</mn><mo separator=\\\"true\\\">,</mo><mn>10</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[6, 7, 10]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">6</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">7</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">10</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \", then there would be no way for \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{lowestOps}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lowestOps</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lowestOps}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lowestOps</span></span></span></span></span>\"\n      }), \" to account for that horse.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To solve this, we can add two more hypothetical horses that are just out of bounds of all the other horses: one at the front and one at the end. This along with the open interval ensures that we can account for all horses excluding the hypothetical ones we've added.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then, to calculate the value for an interval, we go through all possible roots we can use for the tree of that interval. If we're calculating \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{lowestOps}[a][b]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lowestOps</mtext><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lowestOps}[a][b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lowestOps</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b-a\\\\geq3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi><mo>−</mo><mi>a</mi><mo>≥</mo><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">b-a\\\\geq3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \" and we're using a root \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n      }), \" (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a<c<b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>c</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a&lt;c&lt;b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \"), then we have the following recurrence relation:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{lowestOps}[a][b]=\\\\texttt{lowestOps}[a][c]+\\\\texttt{lowestOps}[c][b]+(\\\\texttt{stableHorses}[b]-\\\\texttt{stableHorses}[a]-1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lowestOps</mtext><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mtext mathvariant=\\\"monospace\\\">lowestOps</mtext><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>c</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mtext mathvariant=\\\"monospace\\\">lowestOps</mtext><mo stretchy=\\\"false\\\">[</mo><mi>c</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">stableHorses</mtext><mo stretchy=\\\"false\\\">[</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mtext mathvariant=\\\"monospace\\\">stableHorses</mtext><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lowestOps}[a][b]=\\\\texttt{lowestOps}[a][c]+\\\\texttt{lowestOps}[c][b]+(\\\\texttt{stableHorses}[b]-\\\\texttt{stableHorses}[a]-1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lowestOps</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lowestOps</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lowestOps</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">stableHorses</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">stableHorses</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^3)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^3)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <cassert>\\r\\n#include <vector>\\r\\n#include <algorithm>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nint main() {\\r\\n\\tint horse_num;\\r\\n\\tint stable_num;\\r\\n\\tstd::cin >> horse_num >> stable_num;\\r\\n\\tvector<int> stable_horses(stable_num);\\r\\n\\tfor (int& h : stable_horses) {\\r\\n\\t\\tstd::cin >> h;\\r\\n\\t\\tassert(0 < h && h <= horse_num);\\r\\n\\t}\\r\\n\\t// add two \\\"out-of-bounds\\\" horses\\r\\n\\tstable_horses.push_back(0);\\r\\n\\tstable_horses.push_back(horse_num + 1);\\r\\n\\r\\n\\tstd::sort(stable_horses.begin(), stable_horses.end());\\r\\n\\t\\r\\n\\t/*\\r\\n\\t * lowest_ops[i][j] = min operations if we only consider horses\\r\\n\\t * from that exist in the index interval (i, j)\\r\\n\\t * ex: lowest_ops[1][4] and stable_horses = [0, 1, 3, 7, 10, 11]\\r\\n\\t *     means that we only consider horses from (1, 10)\\r\\n\\t */\\r\\n\\tvector<vector<int>> lowest_ops(\\r\\n\\t\\tstable_num + 2, vector<int>(stable_num + 2, INT32_MAX)\\r\\n\\t);\\r\\n\\tfor (int i = 0; i < stable_num + 2; i++) {\\r\\n\\t\\tlowest_ops[i][i] = 0;\\r\\n\\t\\tif (i + 1 < stable_num + 2) {\\r\\n\\t\\t\\tlowest_ops[i][i + 1] = stable_horses[i + 1] - stable_horses[i] - 1;\\r\\n\\t\\t}\\r\\n\\t\\tif (i + 2 < stable_num + 2) {\\r\\n\\t\\t\\tlowest_ops[i][i + 2] = stable_horses[i + 2] - stable_horses[i] - 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int num = 4; num <= stable_num + 2; num++) {\\r\\n\\t\\tfor (int start = 0; start + num - 1 < stable_num + 2; start++) {\\r\\n\\t\\t\\tint end = start + num - 1;\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * first handle the beginning and ending edge cases,\\r\\n\\t\\t\\t * where the smallest or largest element has become the root\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tlowest_ops[start][end] = std::min(\\r\\n\\t\\t\\t\\tlowest_ops[start][end],\\r\\n\\t\\t\\t\\tlowest_ops[start][start + 1]\\r\\n\\t\\t\\t\\t+ lowest_ops[start + 1][end]\\r\\n\\t\\t\\t\\t+ stable_horses[end] - stable_horses[start + 1]\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tlowest_ops[start][end] = std::min(\\r\\n\\t\\t\\t\\tlowest_ops[start][end],\\r\\n\\t\\t\\t\\tlowest_ops[end - 1][end]\\r\\n\\t\\t\\t\\t+ lowest_ops[start][end - 1]\\r\\n\\t\\t\\t\\t+ stable_horses[end - 1] - stable_horses[start]\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * then get to the actual part where we combine\\r\\n\\t\\t\\t * two parts with top being the root\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tfor (int top = start + 2; top < end - 1; top++) {\\r\\n\\t\\t\\t\\tlowest_ops[start][end] = std::min(\\r\\n\\t\\t\\t\\t\\tlowest_ops[start][end],\\r\\n\\t\\t\\t\\t\\tlowest_ops[start][top]\\r\\n\\t\\t\\t\\t\\t+ lowest_ops[top][end]\\r\\n\\t\\t\\t\\t\\t+ stable_horses[end] - stable_horses[start] - 1\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << lowest_ops[0][stable_num + 1] << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.Arrays;\\r\\n\\r\\npublic final class genghis {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tint horseNum = Integer.parseInt(read.readLine());\\r\\n\\t\\tint stableNum = Integer.parseInt(read.readLine());\\r\\n\\t\\tint[] stableHorses = new int[stableNum + 2];\\r\\n\\t\\tfor (int i = 1; i <= stableNum; i++) {\\r\\n\\t\\t\\tstableHorses[i] = Integer.parseInt(read.readLine());\\r\\n\\t\\t\\tif (stableHorses[i] < 1 || horseNum < stableHorses[i]) {\\r\\n\\t\\t\\t\\tthrow new IllegalArgumentException(\\\"this horse shouldn't exist\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// add the \\\"out-of-bounds\\\" horses\\r\\n\\t\\tstableHorses[0] = 0;\\r\\n\\t\\tstableHorses[stableNum + 1] = horseNum + 1;\\r\\n\\t\\tArrays.sort(stableHorses);\\r\\n\\r\\n\\t\\t/*\\r\\n \\t\\t * lowestOps[i][j] = min operations if we only consider horses\\r\\n\\t\\t * from that exist in the index interval (i, j)\\r\\n\\t\\t * ex: lowestOps[1][4] and stable_horses = [0, 1, 3, 7, 10, 11]\\r\\n\\t\\t *     means that we only consider horses from (1, 10)\\r\\n\\t\\t */\\r\\n\\t\\tint[][] lowestOps = new int[stableNum + 2][stableNum + 2];\\r\\n\\t\\tfor (int i = 0; i < stableNum + 2; i++) {\\r\\n\\t\\t\\tArrays.fill(lowestOps[i], Integer.MAX_VALUE);\\r\\n\\t\\t\\tlowestOps[i][i] = 0;\\r\\n\\t\\t\\tif (i + 1 < stableNum + 2) {\\r\\n\\t\\t\\t\\tlowestOps[i][i + 1] = stableHorses[i + 1] - stableHorses[i] - 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (i + 2 < stableNum + 2) {\\r\\n\\t\\t\\t\\tlowestOps[i][i + 2] = stableHorses[i + 2] - stableHorses[i] - 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tfor (int num = 4; num <= stableNum + 2; num++) {\\r\\n\\t\\t\\tfor (int start = 0; start + num - 1 < stableNum + 2; start++) {\\r\\n\\t\\t\\t\\tint end =  start + num - 1;\\r\\n\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t * first handle the beginning and ending edge cases,\\r\\n\\t\\t\\t\\t * where the smallest or largest element has become the root\\r\\n\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\tlowestOps[start][end] = Math.min(\\r\\n\\t\\t\\t\\t\\t\\tlowestOps[start][end],\\r\\n\\t\\t\\t\\t\\t\\tlowestOps[start][start + 1]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ lowestOps[start + 1][end]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ stableHorses[end] - stableHorses[start + 1]\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\tlowestOps[start][end] = Math.min(\\r\\n\\t\\t\\t\\t\\t\\tlowestOps[start][end],\\r\\n\\t\\t\\t\\t\\t\\tlowestOps[end - 1][end]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ lowestOps[start][end - 1]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t+ stableHorses[end - 1] - stableHorses[start]\\r\\n\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t * then get to the actual part where we combine\\r\\n\\t\\t\\t\\t * two parts with top being the root\\r\\n\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\tfor (int top = start + 2; top < end - 1; top++) {\\r\\n\\t\\t\\t\\t\\tlowestOps[start][end] = Math.min(\\r\\n\\t\\t\\t\\t\\t\\t\\tlowestOps[start][end],\\r\\n\\t\\t\\t\\t\\t\\t\\tlowestOps[start][top]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t+ lowestOps[top][end]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t+ stableHorses[end] - stableHorses[start] - 1\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(lowestOps[0][stableNum + 1]);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"horse_num = int(input())\\r\\nstable_num = int(input())\\r\\nstable_horses = sorted([0, horse_num + 1] + [int(input()) for _ in range(stable_num)])\\r\\n\\r\\n\\\"\\\"\\\"\\r\\nlowest_ops[i][j] = min operations if we only consider horses\\r\\nfrom that exist in the index interval (i, j)\\r\\nex: lowest_ops[1][4] and stable_horses = [0, 1, 3, 7, 10, 11]\\r\\n\\tmeans that we only consider horses from (1, 10)\\r\\n\\\"\\\"\\\"\\r\\nlowest_ops = [[float('inf') for _ in range(stable_num + 2)] for _ in range(stable_num + 2)]\\r\\nfor i in range(stable_num + 2):\\r\\n\\tlowest_ops[i][i] = 0\\r\\n\\tif i + 1 < stable_num + 2:\\r\\n\\t\\tlowest_ops[i][i + 1] = stable_horses[i + 1] - stable_horses[i] - 1\\r\\n\\tif i + 2 < stable_num + 2:\\r\\n\\t\\tlowest_ops[i][i + 2] = stable_horses[i + 2] - stable_horses[i] - 1\\r\\n\\r\\nfor num in range(4, stable_num + 2 + 1):\\r\\n\\tfor start in range(0, (stable_num + 2) - (num - 1)):\\r\\n\\t\\tend = start + num - 1\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tfirst handle the beginning and ending edge cases,\\r\\n\\t\\twhere the smallest or largest element has become the root\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tlowest_ops[start][end] = min(\\r\\n\\t\\t\\tlowest_ops[start][end],\\r\\n\\t\\t\\tlowest_ops[start][start + 1]\\r\\n\\t\\t\\t+ lowest_ops[start + 1][end]\\r\\n\\t\\t\\t+ stable_horses[end] - stable_horses[start + 1]\\r\\n\\t\\t)\\r\\n\\t\\tlowest_ops[start][end] = min(\\r\\n\\t\\t\\tlowest_ops[start][end],\\r\\n\\t\\t\\tlowest_ops[end - 1][end]\\r\\n\\t\\t\\t+ lowest_ops[start][end - 1]\\r\\n\\t\\t\\t+ stable_horses[end - 1] - stable_horses[start]\\r\\n\\t\\t)\\r\\n\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tthen get to the actual part where we combine\\r\\n\\t\\ttwo parts with top being the root\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tfor top in range(start + 2, end - 1):\\r\\n\\t\\t\\tlowest_ops[start][end] = min(\\r\\n\\t\\t\\t\\tlowest_ops[start][end],\\r\\n\\t\\t\\t\\tlowest_ops[start][top]\\r\\n\\t\\t\\t\\t+ lowest_ops[top][end]\\r\\n\\t\\t\\t\\t+ stable_horses[end] - stable_horses[start] - 1\\r\\n\\t\\t\\t)\\r\\n\\r\\nprint(lowest_ops[0][stable_num + 1])\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"sapo-14-genghis","source":"SAPO 2014","title":"The Stables of Genghis Khan","author":"Kevin Sheng"},"parent":{"name":"sapo-14-genghis","relativePath":"sapo-14-genghis.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dp-ranges","title":"Range DP"}}}}]},"problemInfo":{"uniqueId":"sapo-14-genghis","url":"https://saco-evaluator.org.za/cms/sapo2014z/tasks/genghis/description"}},"pageContext":{"id":"sapo-14-genghis"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}