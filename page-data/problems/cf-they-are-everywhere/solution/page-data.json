{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-they-are-everywhere/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-701C\", source = \"CF\", title = \"They are Everywhere\", author = \"Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/46283\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's iterate through all possible ending flats while keeping a variable (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{closest\\\\_left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">closest_left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{closest\\\\_left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7063em;vertical-align:-0.0951em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">closest_left</span></span></span></span></span>\"\n      }), \" in the code) that keeps track of the closest starting point. When moving one to the right, we first add the new Pokemon to our list of caught Pokemon. Then, as long as the Pokemon at the starting point isn't unique, we move the starting point one flat forward. After processing each ending point, we update the total minimum flats travelled.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <unordered_map>\\r\\n#include <unordered_set>\\r\\n#include <algorithm>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\n/**\\r\\n * https://codeforces.com/problemset/problem/701/C\\r\\n * 7\\r\\n * bcAAcbc should output 3\\r\\n * 6\\r\\n * aaBCCe should output 5\\r\\n */\\r\\nint main() {\\r\\n\\tint flat_num;\\r\\n\\tstd::cin >> flat_num;\\r\\n\\tvector<char> flats(flat_num);\\r\\n\\tstd::unordered_set<char> types;\\r\\n\\tfor (char& p : flats) {\\r\\n\\t\\tstd::cin >> p;\\r\\n\\t\\ttypes.insert(p);\\r\\n\\t}\\r\\n\\r\\n\\tint shortest_interval = INT32_MAX;\\r\\n\\tstd::unordered_map<char, int> curr_pokemon;\\r\\n\\tint closest_left = 0;\\r\\n\\tfor (int right = 0; right < flat_num; right++) {\\r\\n\\t\\tcurr_pokemon[flats[right]]++;\\r\\n\\t\\t// check if removing the left one would remove a needed type\\r\\n\\t\\twhile (closest_left + 1 <= right\\r\\n\\t\\t\\t\\t&& curr_pokemon.count(flats[closest_left])\\r\\n\\t\\t\\t\\t&& curr_pokemon[flats[closest_left]] > 1) {\\r\\n\\t\\t\\tcurr_pokemon[flats[closest_left]]--;\\r\\n\\t\\t\\tclosest_left++;\\r\\n\\t\\t}\\r\\n\\t\\t/*\\r\\n\\t\\t * of course, it's a possibility the current arrangement\\r\\n\\t\\t * wasn't valid at all, so we need to check for that\\r\\n\\t\\t */\\r\\n\\t\\tif (curr_pokemon.size() == types.size()) {\\r\\n\\t\\t\\tshortest_interval = std::min(shortest_interval, right - closest_left + 1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << shortest_interval << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.BufferedReader;\\r\\nimport java.io.IOException;\\r\\nimport java.io.InputStreamReader;\\r\\nimport java.util.HashMap;\\r\\nimport java.util.HashSet;\\r\\n\\r\\n/**\\r\\n * https://codeforces.com/problemset/problem/701/C\\r\\n * 7\\r\\n * bcAAcbc should output 3\\r\\n * 6\\r\\n * aaBCCe should output 5\\r\\n */\\r\\npublic class Everywhere {\\r\\n\\tpublic static void main(String[] args) throws IOException  {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tint flatNum = Integer.parseInt(read.readLine());\\r\\n\\t\\tString flats = read.readLine();\\r\\n\\r\\n\\t\\tHashSet<Character> types = new HashSet<>();\\r\\n\\t\\tfor (int f = 0; f < flatNum; f++) {\\r\\n\\t\\t\\ttypes.add(flats.charAt(f));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint shortestInterval = Integer.MAX_VALUE;\\r\\n\\t\\tint closestLeft = 0;\\r\\n\\t\\tHashMap<Character, Integer> currCaught = new HashMap<>();\\r\\n\\t\\tfor (int right = 0; right < flatNum; right++) {\\r\\n\\t\\t\\tchar newCaught = flats.charAt(right);\\r\\n\\t\\t\\tcurrCaught.put(newCaught, currCaught.getOrDefault(newCaught, 0) + 1);\\r\\n\\t\\t\\t// move the left pointer to the left only if it isn't unique\\r\\n\\t\\t\\twhile (closestLeft + 1 <= right\\r\\n\\t\\t\\t\\t\\t&& currCaught.getOrDefault(flats.charAt(closestLeft), 0) > 1) {\\r\\n\\t\\t\\t\\tcurrCaught.put(\\r\\n\\t\\t\\t\\t\\tflats.charAt(closestLeft),\\r\\n\\t\\t\\t\\t\\tcurrCaught.get(flats.charAt(closestLeft)) - 1\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\tclosestLeft++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * of course, it could be that the config wasn't valid in the first place,\\r\\n\\t\\t\\t * so we'll have to check for that\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tif (currCaught.size() == types.size()) {\\r\\n\\t\\t\\t\\tshortestInterval = Math.min(shortestInterval, right - closestLeft + 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(shortestInterval);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"\\\"\\\"\\\"\\r\\nhttps://codeforces.com/contest/701/problem/C\\r\\n7\\r\\nbcAAcbc should output 3\\r\\n6\\r\\naaBCCe should output 5\\r\\n\\\"\\\"\\\"\\r\\nflat_num = int(input())\\r\\nflats = input()\\r\\ntypes = set(flats)\\r\\n \\r\\nshortest_interval = float('inf')\\r\\nclosest_left = 0\\r\\ncurr_caught = {}\\r\\nfor right, f in enumerate(flats):\\r\\n\\tif f not in curr_caught:\\r\\n\\t\\tcurr_caught[f] = 0\\r\\n\\tcurr_caught[f] += 1\\r\\n \\r\\n\\t# move the left pointer to the left only if we've caught another one like it\\r\\n\\twhile closest_left + 1 <= right and curr_caught.get(flats[closest_left], 0) > 1:\\r\\n\\t\\tcurr_caught[flats[closest_left]] -= 1\\r\\n\\t\\tclosest_left += 1\\r\\n \\r\\n\\t\\\"\\\"\\\"\\r\\n\\tof course, it could be that the config wasn't valid in the first place,\\r\\n\\tso we'll have to check for that\\r\\n\\t\\\"\\\"\\\"\\r\\n\\tif len(curr_caught) == len(types):\\r\\n\\t\\tshortest_interval = min(shortest_interval, right - closest_left + 1)\\r\\n \\r\\nprint(shortest_interval)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-701C","source":"CF","title":"They are Everywhere","author":"Kevin Sheng"},"parent":{"name":"cf-701C","relativePath":"cf-701C.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"two-pointers","title":"Two Pointers"}}}}]},"problemInfo":{"uniqueId":"cf-701C","url":"https://codeforces.com/problemset/problem/701/C"}},"pageContext":{"id":"cf-701C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}