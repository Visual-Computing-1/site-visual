{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-min-mex-cut/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1566B\", source = \"CF\", title = \"MIN-MEX Cut\", author = \"Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/94803\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since the MEX can be at most 2 when there is a substring that contains a 0 and 1, there's only 3 possible cases. If there are no zeros, then the MEX is 0, since all substrings would be missing a 0.  If all zeros are adjacent to one another, we can cut the entire sequence out, leaving a MEX of 1. The other groups, all comprised of ones would have a MEX of 0. Leaving the answer to be \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"max(0, 1) = 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\\\"false\\\">(</mo><mn>0</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">max(0, 1) = 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">0</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \". Lastly, if there are zeros and they're not adjacent to one another, then a substring like \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"{0, 1}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">{0, 1}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8389em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span></span>\"\n      }), \" must exist, resulting in a MEX of 2.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <algorithm>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint t;\\r\\n\\tcin >> t;\\r\\n\\tfor (int i = 0; i < t; i++) {\\r\\n\\t\\tstring s;\\r\\n\\t\\tcin >> s;\\r\\n\\t\\t// find the number of zeros\\r\\n\\t\\tint zeros = count(s.begin(), s.end(), '0');\\r\\n\\r\\n\\t\\t// no zeros, the answer is 0\\r\\n\\t\\tif (zeros == 0) {\\r\\n\\t\\t\\tcout << 0 << endl;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// first and last occurences of zero\\r\\n\\t\\t\\tint l = s.find('0');\\r\\n\\t\\t\\tint r = s.rfind('0');\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// if they're all adjacent to one another.\\r\\n\\t\\t\\tcout << ((r - l + 1 == zeros) ? 1 : 2) << endl;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"for _ in range(int(input())):\\r\\n\\ts = input()\\r\\n\\tzeros = s.count(\\\"0\\\")\\r\\n\\r\\n\\tif zeros == 0:\\r\\n\\t\\tprint(0)\\r\\n\\telse:\\r\\n\\t\\tl = s.find(\\\"0\\\")\\r\\n\\t\\tr = s.rfind(\\\"0\\\")\\r\\n  \\r\\n\\t\\tprint(1 if r - l + 1 == zeros else 2)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1566B","source":"CF","title":"MIN-MEX Cut","author":"Ryan Chou"},"parent":{"name":"cf-1566B","relativePath":"cf-1566B.mdx"},"toc":{"cpp":[{"depth":1,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":1,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":1,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":null}}]},"problemInfo":{"uniqueId":"cf-1566B","url":"https://codeforces.com/problemset/problem/1566/B"}},"pageContext":{"id":"cf-1566B"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}