{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-857-back-and-forth/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-857\", source = \"USACO Bronze 2018 December\", title = \"Back and Forth\", author = \"Benjamin Qi, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_backforth_bronze_dec18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Similar to the second solution from the analysis.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nset<int> possible;\\r\\n\\r\\nvoid get_possible(\\r\\n\\tint day,\\r\\n\\tint a_tank, vector<int> a_buckets,\\r\\n\\tint b_tank, vector<int> b_buckets\\r\\n) {\\r\\n\\t// Last day, add the amount of milk in the first tank.\\r\\n\\tif (day == 4) {\\r\\n\\t\\tpossible.insert(a_tank);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\t// This transfers every possible bucket from barn x to barn y.\\r\\n\\tfor (int i = 0; i < a_buckets.size(); i++) {\\r\\n\\t\\t// Bucket to transfer.\\r\\n\\t\\tint t = a_buckets[i];\\r\\n\\t\\t// Creates a new copy of available buckets, and transfers the ith one.\\r\\n\\t\\tvector<int> new_a = a_buckets;\\r\\n\\t\\tnew_a.erase(begin(new_a) + i);\\r\\n\\t\\tvector<int> new_b = b_buckets;\\r\\n\\t\\tnew_b.push_back(t);\\r\\n\\r\\n\\t\\t// Recursively call the function with the new buckets and tank amounts.\\r\\n\\t\\tget_possible(day + 1, b_tank + t, new_b, a_tank - t, new_a);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"backforth.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"backforth.out\\\", \\\"w\\\", stdout);\\r\\n\\tvector<int> a(10);\\r\\n\\tfor (int& i : a) {\\r\\n\\t\\tcin >> i;\\r\\n\\t}\\r\\n\\tvector<int> b(10);\\r\\n\\tfor (int& i : b) {\\r\\n\\t\\tcin >> i;\\r\\n\\t}\\r\\n\\r\\n\\tget_possible(0, 1000, a, 1000, b);\\r\\n\\tcout << possible.size() << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class BackForth {\\r\\n\\tstatic Set<Integer> possible = new HashSet<>();\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new FileReader(\\\"backforth.in\\\"));\\r\\n\\t\\t\\r\\n\\t\\tStringTokenizer aST = new StringTokenizer(read.readLine());\\r\\n\\t\\tStringTokenizer bST = new StringTokenizer(read.readLine());\\r\\n\\t\\tList<Integer> a = new ArrayList<>();\\r\\n\\t\\tList<Integer> b = new ArrayList<>();\\r\\n\\t\\tfor (int i = 0; i < 10; i++) {\\r\\n\\t\\t\\ta.add(Integer.parseInt(aST.nextToken()));\\r\\n\\t\\t\\tb.add(Integer.parseInt(bST.nextToken()));\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tgetPossible(0, 1000, a, 1000, b);\\r\\n\\r\\n\\t\\tPrintWriter write = new PrintWriter(\\\"backforth.out\\\");\\r\\n\\t\\twrite.println(possible.size());\\r\\n\\t\\twrite.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic void getPossible(\\r\\n\\t\\tint day,\\r\\n\\t\\tint aTank, List<Integer> aBuckets,\\r\\n\\t\\tint bTank, List<Integer> bBuckets\\r\\n\\t) {\\r\\n\\t\\t// Last day, add the amount of milk in the first tank.\\r\\n\\t\\tif (day == 4) {\\r\\n\\t\\t\\tpossible.add(aTank);\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// This transfers every possible bucket from barn x to barn y.\\r\\n\\t\\tfor (int i = 0; i < aBuckets.size(); i++) {\\r\\n\\t\\t\\t// Bucket to transfer.\\r\\n\\t\\t\\tint t = aBuckets.get(i);\\r\\n\\t\\t\\t// Creates a new copy of available buckets, and transfers the ith one.\\r\\n\\t\\t\\tList<Integer> newA = new ArrayList<>(aBuckets);\\r\\n\\t\\t\\tnewA.remove(i);\\r\\n\\t\\t\\tList<Integer> newB = new ArrayList<>(bBuckets);\\r\\n\\t\\t\\tnewB.add(t);\\r\\n\\r\\n\\t\\t\\t// Recursively call the function with the new buckets and tank amounts.\\r\\n\\t\\t\\tgetPossible(day + 1, bTank + t, newB, aTank - t, newA);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\nfrom typing import List\\r\\n\\r\\nsys.stdin = open('backforth.in', 'r')\\r\\nsys.stdout = open('backforth.out', 'w')\\r\\n\\r\\npossible = set()\\r\\n\\r\\ndef get_possible(\\r\\n\\tday: int,\\r\\n\\ta_tank: int, a_buckets: List[int],\\r\\n\\tb_tank: int, b_buckets: List[int]\\r\\n) -> None:\\r\\n\\t# Last day, add the amount of milk in the first tank.\\r\\n\\tif day == 4:\\r\\n\\t\\tpossible.add(a_tank)\\r\\n\\t\\treturn\\r\\n\\t\\t\\r\\n\\t# This transfers every possible bucket from barn x to barn y.\\r\\n\\tfor i in range(len(a_buckets)):\\r\\n\\t\\t# Bucket to transfer.\\r\\n\\t\\tt = a_buckets[i]\\r\\n\\r\\n\\t\\t# Creates a new copy of available buckets, and transfers the ith one.\\r\\n\\t\\tnew_a = a_buckets.copy()\\r\\n\\t\\tdel new_a[i]\\r\\n\\t\\tnew_b = b_buckets.copy()\\r\\n\\t\\tnew_b.append(t)\\r\\n\\r\\n\\t\\t# Recursively call the function with the new buckets and tank amounts.\\r\\n\\t\\tget_possible(day + 1, b_tank + t, new_b, a_tank - t, new_a)\\r\\n\\r\\na = list(map(int, input().split()))\\r\\nb = list(map(int, input().split()))\\r\\n\\r\\nget_possible(0, 1000, a, 1000, b)\\r\\n\\r\\nprint(len(possible))\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-857","source":"USACO Bronze 2018 December","title":"Back and Forth","author":"Benjamin Qi, Ryan Chou"},"parent":{"name":"usaco-857","relativePath":"usaco-857.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution","slug":"solution"}],"java":[{"depth":2,"value":"Solution","slug":"solution"}],"py":[{"depth":2,"value":"Solution","slug":"solution"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"complete-rec","title":"Complete Search with Recursion"}}}}]},"problemInfo":{"uniqueId":"usaco-857","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=857"}},"pageContext":{"id":"usaco-857"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}