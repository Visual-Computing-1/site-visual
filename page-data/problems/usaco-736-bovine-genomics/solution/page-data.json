{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-736-bovine-genomics/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-736\", source = \"USACO Bronze 2017 US Open\", title = \"Bovine Genomics\", author = \"Mrinall Umasudhan, Ananth Kashyap, Ben Dodge\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_cownomics_bronze_open17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-1---brute-force\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1---brute-force\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1 - Brute force\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We'll iterate through every character in every genome. For each character index, we'll find if there are any characters that appear in the genome of both a spotted and plain cow at that index. If there are, this position isn't a possible solution, so we can end this part of our search and move on to the next position to save on runtime. If there aren't, this is a possible solution.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \": \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(MN^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>M</mi><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(MN^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class BovineGeonomics {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"cownomics\\\");\\r\\n\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tint M = io.nextInt();\\r\\n\\t\\t// Representing each genome and individual characters in each genome\\r\\n\\t\\tint[][] spottyCows = new int[N][M];\\r\\n\\t\\tint[][] plainCows = new int[N][M];\\r\\n\\t\\tint possiblePositions = 0;\\r\\n\\r\\n\\t\\t// Fill arrays with appropriate chars\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tString sequence = io.next();\\r\\n\\t\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\t\\tspottyCows[i][j] = sequence.charAt(j);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tString sequence = io.next();\\r\\n\\t\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\t\\tplainCows[i][j] = sequence.charAt(j);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Iterating through every character\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tboolean duplicate = false;\\r\\n\\t\\t\\t// Iterating through every genome\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\t// Comparing to every other genome\\r\\n\\t\\t\\t\\tfor (int k = 0; k < N; k++) {\\r\\n\\t\\t\\t\\t\\t/* \\r\\n\\t\\t\\t\\t\\t * If there are any duplicates,\\r\\n\\t\\t\\t\\t\\t * then this isn't a possible position,\\r\\n\\t\\t\\t\\t\\t * so we can stop counting and make sure we don't count it\\r\\n\\t\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\t\\tif (spottyCows[j][i] == plainCows[k][i]) {\\r\\n\\t\\t\\t\\t\\t\\tduplicate = true;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * If we haven't found any equal characters,\\r\\n\\t\\t\\t * then there are no duplicates and this is a possible sequence\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tif (!duplicate) {\\r\\n\\t\\t\\t\\tpossiblePositions++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(possiblePositions);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"# Take in the input data using python standard file I/O system\\r\\nfile_in = open('cownomics.in')\\r\\ndata = file_in.read().strip().split('\\\\n')\\r\\n\\r\\nn, m = map(int, data[0].split(' '))\\r\\n\\r\\nspotty_cows = []\\r\\nplain_cows = []\\r\\n\\r\\nspotty_cows = [data[i + 1] for i in range(n)]\\r\\nplain_cows = [data[i + n + 1] for i in range(n)]\\r\\n\\r\\nspots = []\\r\\nplains = []\\r\\n\\r\\ntotal = 0\\r\\n\\r\\n# For every position, check if it can be a potential mutation location\\r\\n# Check if the spotty and plain cows have any repeated characters at this position\\r\\nfor i in range(m):\\r\\n\\tused = False\\r\\n\\tfor j in range(n):\\r\\n\\t\\tfor k in range(n):\\r\\n\\t\\t\\tif spotty_cows[j][i] == plain_cows[k][i]:\\r\\n\\t\\t\\t\\tused = True\\r\\n\\t\\t\\t\\tbreak\\r\\n\\tif used == False:\\r\\n\\t\\ttotal += 1\\r\\n\\r\\n# Add the answer to the output file using python standard file I/O system\\r\\nfile_out = open('cownomics.out', 'w')\\r\\nfile_out.write(str(total))\\r\\nfile_out.close()\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---hashset\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---hashset\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - Hashset\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(JavaSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation-1\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Time Complexity:\"\n          }), \" \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(N^2)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          })]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class BovineGenomics {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tScanner sc = new Scanner(new File(\\\"cownomics.in\\\"));\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"cownomics.out\\\")));\\r\\n\\t\\tint N = sc.nextInt();\\r\\n\\t\\tint M = sc.nextInt();\\r\\n\\r\\n\\t\\tchar[][] spotted = new char[N][M];\\r\\n\\t\\tchar[][] plain = new char[N][M];\\r\\n\\t\\tint ans = 0;\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tString s = sc.next();\\r\\n\\t\\t\\tchar[] a = s.toCharArray();\\r\\n\\t\\t\\tif (M >= 0) System.arraycopy(a, 0, spotted[i], 0, M);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tString s = sc.next();\\r\\n\\t\\t\\tchar[] a = s.toCharArray();\\r\\n\\t\\t\\tif (M >= 0) System.arraycopy(a, 0, plain[i], 0, M);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tboolean contains = false;\\r\\n\\t\\t\\tHashSet<Character> a = new HashSet<>();\\r\\n\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\ta.add(plain[j][i]); // Go to column j at position i\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tif (a.contains(spotted[j][i])) {\\r\\n\\t\\t\\t\\t\\tcontains = true;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!contains) ans++;\\r\\n\\t\\t}\\r\\n\\t\\tout.println(ans);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-736","source":"USACO Bronze 2017 US Open","title":"Bovine Genomics","author":"Mrinall Umasudhan, Ananth Kashyap, Ben Dodge"},"parent":{"name":"usaco-736","relativePath":"usaco-736.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1 - Brute force","slug":"solution-1---brute-force"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - Hashset","slug":"solution-2---hashset"}],"java":[{"depth":2,"value":"Solution 1 - Brute force","slug":"solution-1---brute-force"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - Hashset","slug":"solution-2---hashset"},{"depth":2,"value":"Implementation","slug":"implementation-1"}],"py":[{"depth":2,"value":"Solution 1 - Brute force","slug":"solution-1---brute-force"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - Hashset","slug":"solution-2---hashset"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-complete","title":"Basic Complete Search"}}}}]},"problemInfo":{"uniqueId":"usaco-736","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=736"}},"pageContext":{"id":"usaco-736"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}