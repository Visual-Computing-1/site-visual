{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-569-contaminated-milk/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-569\", source = \"USACO Bronze 2015 December\", title = \"Contaminated Milk\", author = \"Jesse Choe\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_badmilk_bronze_dec15.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsx(_components.p, {\n          children: \"In this problem, we are asked to find how many people are sick based on what\\r\\ntype of milk each person drank, when they drank it, and when a person got sick.\\r\\nTo solve this problem, we must find the types of milk that could (potentially)\\r\\nmake a person sick. To do this, we must check if a person drank milk type X\\r\\nbefore they became sick. Therefore, we loop over every sick person and store the\\r\\npossible milk types in a 2D array of integers. Then, we loop over all the\\r\\npossible milk types for every sick person and check for commonalities. If there\\r\\nis consistency in the possible milk types (every sick person), then we add that\\r\\nto an array and consider it one of the possible types of milk that would make\\r\\nsomeone sick. After this, we check how many people drank one of the possible\\r\\nmilk types (consistent with each sick person), and print the number of people\\r\\nwho were sick.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\n#define FastIO ios_base::sync_with_stdio(0); cin.tie(0)\\r\\n#define len(x) (int)(x).length()\\r\\n\\r\\nvoid setIO(string fileName = \\\"\\\"){\\r\\n\\tFastIO;\\r\\n\\tif(len(fileName)){\\r\\n\\t\\tfreopen((fileName+\\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\t\\tfreopen((fileName+\\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nstruct Drinks {\\r\\n\\tint t, p, m;\\r\\n};\\r\\n\\r\\nstruct Sick {\\r\\n\\tint p, t;\\r\\n};\\r\\n\\r\\nint main(){\\r\\n\\tsetIO(\\\"badmilk\\\");\\r\\n\\tint n, m, d, s; cin >> n >> m >> d >> s;\\r\\n\\tvector<Drinks> drinks(d); vector<Sick> sick(s);\\r\\n\\tvector<int> drank[n];\\r\\n\\tfor(int i=0; i<d; i++){\\r\\n\\t\\tcin >> drinks[i].p >> drinks[i].m >> drinks[i].t;\\r\\n\\t\\tdrinks[i].p--; drinks[i].m--; drinks[i].t--;\\r\\n\\t}\\r\\n\\tfor(int i=0; i<s; i++){\\r\\n\\t\\tcin >> sick[i].p >> sick[i].t;\\r\\n\\t\\tsick[i].p--; sick[i].t--;\\r\\n\\t}\\r\\n\\tfor(int i=0; i<d; i++){\\r\\n\\t\\tfor(int i=0; i<s; i++){\\r\\n\\t\\t\\tif(drinks[i].p == sick[j].p && drinks[i].t < sick[j].t){\\r\\n\\t\\t\\t\\tdrank[drinks[i].p].push_back(drinks[i].m);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvector<bool> sickMilk(m);\\r\\n\\tfor(int milk = 0; milk < m; milk++){\\r\\n\\t\\tsickMilk[milk] = true;\\r\\n\\t}\\r\\n\\tfor(int milk = 0; milk < m; milk++){\\r\\n\\t\\tfor(int person = 0; person < n; person++){\\r\\n\\t\\t\\tif(sz(drank[person])){\\r\\n\\t\\t\\t\\tbool possible = false;\\r\\n\\t\\t\\t\\tfor(int a: drank[person]){\\r\\n\\t\\t\\t\\t\\tif(a == milk){\\r\\n\\t\\t\\t\\t\\t\\tpossible = true;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif(!possible){\\r\\n\\t\\t\\t\\t\\tsickMilk[milk] = false;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvector<bool> isSick(n);\\r\\n\\tfor(int milk = 0; milk < m; milk++){\\r\\n\\t\\tfor(int i=0; i<d; i++){\\r\\n\\t\\t\\tif(sickMilk[milk] && drinks[i].m == milk){\\r\\n\\t\\t\\t\\tisSick[drinks[i].p] = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tint ans = 0;\\r\\n\\tfor(int i=0; i<n; i++){\\r\\n\\t\\tans += isSick[i];\\r\\n\\t}\\r\\n\\tcout << ans << endl;\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-569","source":"USACO Bronze 2015 December","title":"Contaminated Milk","author":"Jesse Choe"},"parent":{"name":"usaco-569","relativePath":"usaco-569.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-complete","title":"Basic Complete Search"}}}}]},"problemInfo":{"uniqueId":"usaco-569","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=569"}},"pageContext":{"id":"usaco-569"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}