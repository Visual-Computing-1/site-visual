{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-894-grass-planting/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-894\", source = \"USACO Silver 2019 January\", title = \"Grass Planting\", author = \"Neo Wang, Aadit Ambadkar, Sandeep Wadhwa\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_planting_silver_jan19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-1---intended-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1---intended-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1 - Intended Solution\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{deg}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">deg</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{deg}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">deg</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" represent the degree of node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \": the number of paths\\r\\nconnecting the node. Then, considering that node, and that node alone, you would\\r\\nneed \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{deg}[i]+1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">deg</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{deg}[i]+1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">deg</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" grass types. This is because you would need\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{deg}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">deg</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{deg}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">deg</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" for each of the adjacent nodes, and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" for the node itself.\\r\\nIt can be shown that the tree can also be colored accordingly in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\max(\\\\texttt{deg}[i])+1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>‚Å°</mo><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">deg</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(\\\\texttt{deg}[i])+1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">deg</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" colors.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 10000;\\r\\n\\r\\n// USACO-style file input\\r\\nvoid setIO(string name = \\\"\\\"){ // FastIO see General -> Fast Input and Output\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tif(name.size()){\\r\\n\\t\\tfreopen((name+\\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\t\\tfreopen((name+\\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"planting\\\");\\r\\n\\r\\n\\tint n; \\r\\n\\tcin >> n;\\r\\n\\tint deg[MAX_N + 1] = {}; // initialize with 0s\\r\\n\\tint u, v;\\r\\n\\tint maxDeg = INT_MIN;  // tracking maxDegree\\r\\n\\tfor (int i = 1; i < n; i++) {\\r\\n\\t\\tcin >> u >> v;\\r\\n\\t\\tdeg[u]++;\\r\\n\\t\\tdeg[v]++;\\r\\n\\t\\tmaxDeg = max(maxDeg, max(deg[u], deg[v]));\\r\\n\\t}\\r\\n\\tcout << maxDeg + 1 << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.StringTokenizer;\\r\\n\\r\\npublic class GrassPlanting {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"planting\\\");\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint[] deg = new int[n+1];\\r\\n\\t\\tfor(int i = 0; i < n-1; i++) {\\r\\n\\t\\t\\tint a = io.nextInt(), b = io.nextInt();\\r\\n\\t\\t\\tdeg[a]++; deg[b]++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint ret = 0;\\r\\n\\r\\n\\t\\tfor(int i = 1; i <= n; i++) ret = Math.max(ret, deg[i]);\\r\\n\\t\\tio.println(ret+1);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class Kattio extends PrintWriter {\\r\\n\\t\\tprivate BufferedReader r;\\r\\n\\t\\tprivate StringTokenizer st;\\r\\n\\r\\n\\t\\t// standard input\\r\\n\\t\\tpublic Kattio() { this(System.in,System.out); }\\r\\n\\r\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\r\\n\\t\\t\\tsuper(o);\\r\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// USACO-style file input\\r\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\r\\n\\t\\t\\tsuper(new FileWriter(problemName+\\\".out\\\"));\\r\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName+\\\".in\\\"));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// returns null if no more input\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\r\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\r\\n\\t\\t\\t\\treturn st.nextToken();\\r\\n\\t\\t\\t} catch (Exception e) {}\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t}\\r\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\r\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\r\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---dfs\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---dfs\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - DFS\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \": \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This can also be solved using DFS. The solution is less elegant but generates a\\r\\nvalid assignment of grass types in the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ans}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ans</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ans}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ans</span></span></span></span></span>\"\n      }), \" array.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 10000;\\r\\n\\r\\n// USACO-style file input\\r\\nvoid setIO(string name = \\\"\\\"){ // FastIO see General -> Fast Input and Output\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tif(name.size()){\\r\\n\\t\\tfreopen((name+\\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\t\\tfreopen((name+\\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nbool visited[MAX_N + 1];\\r\\nint ans[MAX_N + 1];\\r\\nvector<int> adjList[MAX_N + 1];\\r\\n\\r\\nvoid dfs(int self, int parent){\\r\\n\\tint len = adjList[self].size();\\r\\n\\tint g = 1;\\r\\n\\tfor (int i : adjList[self]) {\\r\\n\\t\\tif (i != parent) {\\r\\n\\t\\t\\twhile (g == ans[self] || g == ans[parent]) \\r\\n\\t\\t\\t\\tg++;\\r\\n\\t\\t\\tans[i] = g;\\r\\n\\t\\t\\tdfs(i, self);\\r\\n\\t\\t\\tg++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"planting\\\");\\r\\n\\r\\n\\tint n; \\r\\n\\tcin >> n;\\r\\n\\tint u, v;\\r\\n\\tfor (int i = 1; i < n; i++){\\r\\n\\t\\tcin >> u >> v;\\r\\n\\t\\tadjList[u].push_back(v);\\r\\n\\t\\tadjList[v].push_back(u);\\r\\n\\t}\\r\\n\\tdfs(1, 1);\\r\\n\\tint maxAns = 0;\\r\\n\\tfor (int curAns : ans) {\\r\\n\\t\\tmaxAns = max(maxAns, curAns);\\r\\n\\t}\\r\\n\\tcout << maxAns << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\npublic class Main {\\r\\n\\tpublic static int[] ans;\\r\\n\\tpublic static List<Integer>[] adj;\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader f = new BufferedReader(new FileReader(\\\"planting.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\\\"planting.out\\\")));\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(f.readLine());\\r\\n\\t\\tint farms = Integer.parseInt(st.nextToken());\\r\\n\\t\\tadj = new List[farms];\\r\\n\\t\\tfor (int i = 0; i < farms; i++) {\\r\\n\\t\\t\\tadj[i] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < farms - 1; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(f.readLine());\\r\\n\\t\\t\\tint a = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint b = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tadj[a - 1].add(b - 1);\\r\\n\\t\\t\\tadj[b - 1].add(a - 1);\\r\\n\\t\\t}\\r\\n\\t\\tans = new int[farms];\\r\\n\\t\\tans[0] = 1;\\r\\n\\t\\tdfs(0, 0);\\r\\n\\t\\tint max = 0;\\r\\n\\t\\tfor (int i : ans) {\\r\\n\\t\\t\\tmax = Math.max(max, i);\\r\\n\\t\\t}\\r\\n\\t\\tpw.println(max);\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n\\tpublic static void dfs(int self, int parent) {\\r\\n\\t\\tint len = adj[self].size();\\r\\n\\t\\tint g = 1;\\r\\n\\t\\tfor (int i : adj[self]) {\\r\\n\\t\\t\\tif (i != parent) {\\r\\n\\t\\t\\t\\twhile (g == ans[self] || g == ans[parent]) g++;\\r\\n\\t\\t\\t\\tans[i] = g;\\r\\n\\t\\t\\t\\tdfs(i, self);\\r\\n\\t\\t\\t\\tg++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-894","source":"USACO Silver 2019 January","title":"Grass Planting","author":"Neo Wang, Aadit Ambadkar, Sandeep Wadhwa"},"parent":{"name":"usaco-894","relativePath":"usaco-894.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1 - Intended Solution","slug":"solution-1---intended-solution"},{"depth":2,"value":"Solution 2 - DFS","slug":"solution-2---dfs"}],"java":[{"depth":2,"value":"Solution 1 - Intended Solution","slug":"solution-1---intended-solution"},{"depth":2,"value":"Solution 2 - DFS","slug":"solution-2---dfs"}],"py":[{"depth":2,"value":"Solution 1 - Intended Solution","slug":"solution-1---intended-solution"},{"depth":2,"value":"Solution 2 - DFS","slug":"solution-2---dfs"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-graphs","title":"Introduction to Graphs"}}}}]},"problemInfo":{"uniqueId":"usaco-894","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=894"}},"pageContext":{"id":"usaco-894"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}