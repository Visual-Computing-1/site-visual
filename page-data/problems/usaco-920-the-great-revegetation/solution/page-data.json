{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-920-the-great-revegetation/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-920\", source = \"USACO Silver 2019 February\", title = \"The Great Revegetation\", author = \"Sofia Yang, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\",\n    img: \"img\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_revegetate_silver_feb19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Assume that we have a valid solution composed of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"K\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\\\"application/x-tex\\\">K</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span></span></span></span>\"\n      }), \" connected components in our graph.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's look at one of these connected components, which could look something like this:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsxs(_components.span, {\n        className: \"gatsby-resp-image-wrapper\",\n        style: {\n          position: \"relative\",\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          maxWidth: \"682px\"\n        },\n        children: [\"\\n      \", _jsxs(_components.a, {\n          className: \"gatsby-resp-image-link\",\n          href: \"/static/1b31b086fe7e8922352a2a427eb58e01/0ea77/connected_component.png\",\n          style: {\n            display: \"block\"\n          },\n          target: \"_blank\",\n          rel: \"noopener\",\n          children: [\"\\n    \", _jsx(_components.span, {\n            className: \"gatsby-resp-image-background-image\",\n            style: {\n              paddingBottom: \"59.13461538461539%\",\n              position: \"relative\",\n              bottom: \"0\",\n              left: \"0\",\n              display: \"block\"\n            }\n          }), \"\\n  \", _jsx(_components.img, {\n            className: \"gatsby-resp-image-image\",\n            alt: \"possible connected component\",\n            title: \"possible connected component\",\n            src: \"/static/1b31b086fe7e8922352a2a427eb58e01/0ea77/connected_component.png\",\n            srcSet: \"/static/1b31b086fe7e8922352a2a427eb58e01/f29da/connected_component.png 208w, /static/1b31b086fe7e8922352a2a427eb58e01/5d0f3/connected_component.png 416w, /static/1b31b086fe7e8922352a2a427eb58e01/0ea77/connected_component.png 682w\",\n            sizes: \"(max-width: 682px) 100vw, 682px\",\n            style: {\n              width: \"100%\",\n              height: \"100%\",\n              margin: \"0\",\n              verticalAlign: \"middle\",\n              position: \"absolute\",\n              top: \"0\",\n              left: \"0\"\n            },\n            loading: \"lazy\"\n          }), \"\\n  \"]\n        }), \"\\n    \"]\n      }), \"\\r\\n\", _jsx(_components.em, {\n        children: \"image credit: Sofia Yang\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, for each of the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"K\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\\\"application/x-tex\\\">K</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span></span></span></span>\"\n      }), \" connected components, the grass types can be flipped and still be a valid solution:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsxs(_components.span, {\n        className: \"gatsby-resp-image-wrapper\",\n        style: {\n          position: \"relative\",\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          maxWidth: \"682px\"\n        },\n        children: [\"\\n      \", _jsxs(_components.a, {\n          className: \"gatsby-resp-image-link\",\n          href: \"/static/0b6c388f078ec5408dcdad559d13eb18/0ea77/inverted_connected_component.png\",\n          style: {\n            display: \"block\"\n          },\n          target: \"_blank\",\n          rel: \"noopener\",\n          children: [\"\\n    \", _jsx(_components.span, {\n            className: \"gatsby-resp-image-background-image\",\n            style: {\n              paddingBottom: \"59.13461538461539%\",\n              position: \"relative\",\n              bottom: \"0\",\n              left: \"0\",\n              display: \"block\"\n            }\n          }), \"\\n  \", _jsx(_components.img, {\n            className: \"gatsby-resp-image-image\",\n            alt: \"inverted connected component\",\n            title: \"inverted connected component\",\n            src: \"/static/0b6c388f078ec5408dcdad559d13eb18/0ea77/inverted_connected_component.png\",\n            srcSet: \"/static/0b6c388f078ec5408dcdad559d13eb18/f29da/inverted_connected_component.png 208w, /static/0b6c388f078ec5408dcdad559d13eb18/5d0f3/inverted_connected_component.png 416w, /static/0b6c388f078ec5408dcdad559d13eb18/0ea77/inverted_connected_component.png 682w\",\n            sizes: \"(max-width: 682px) 100vw, 682px\",\n            style: {\n              width: \"100%\",\n              height: \"100%\",\n              margin: \"0\",\n              verticalAlign: \"middle\",\n              position: \"absolute\",\n              top: \"0\",\n              left: \"0\"\n            },\n            loading: \"lazy\"\n          }), \"\\n  \"]\n        }), \"\\n    \"]\n      }), \"\\r\\n\", _jsx(_components.em, {\n        children: \"image credit: Sofia Yang\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \" possible ways to arrange each connected component. Thus, if there's \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \" connected components, there's \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2^k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\\\"application/x-tex\\\">2^k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8491em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8491em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" ways to arrange the entire graph.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note how the nodes force their adjacent ones to have a specific coloring, so if any two nodes don't satisfy this condition, it's impossible. Otherwise, the solution will always be \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2^k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\\\"application/x-tex\\\">2^k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8491em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8491em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"revegetate.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"revegetate.out\\\", \\\"w\\\", stdout);\\r\\n\\t\\r\\n\\tint n, m;\\r\\n\\tcin >> n >> m;\\r\\n\\r\\n\\tvector<vector<pair<int, bool>>> adj(n);\\r\\n\\t\\r\\n\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\tchar type;\\r\\n\\t\\tint u, v;\\r\\n\\t\\tcin >> type >> u >> v;\\r\\n\\t\\t\\r\\n\\t\\tadj[--u].push_back({--v, type == 'S'});\\r\\n\\t\\tadj[v].push_back({u, type == 'S'});\\r\\n\\t}\\r\\n\\r\\n\\tint component_num = 0;\\r\\n\\tbool impossible = false;\\r\\n\\tvector<int> color(n, -1);\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t// haven't visited this node yet.\\r\\n\\t\\tif (color[i] == -1) {\\r\\n\\t\\t\\tcomponent_num++;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tqueue<pair<int, bool>> todo;\\r\\n\\t\\t\\ttodo.push({i, true});\\r\\n\\r\\n\\t\\t\\twhile (!todo.empty()) {\\r\\n\\t\\t\\t\\t// process next node\\r\\n\\t\\t\\t\\tpair<int, bool> nxt = todo.front();\\r\\n\\t\\t\\t\\ttodo.pop();\\r\\n\\r\\n\\t\\t\\t\\t// set grass type for nxt.first\\r\\n\\t\\t\\t\\tcolor[nxt.first] = nxt.second;\\r\\n\\r\\n\\t\\t\\t\\t// iterate through adjacent nodes\\r\\n\\t\\t\\t\\tfor (pair<int, bool> u : adj[nxt.first]) {\\r\\n\\t\\t\\t\\t\\tbool type = u.second ? nxt.second : !nxt.second;\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t// haven't visited\\r\\n\\t\\t\\t\\t\\tif (color[u.first] == -1) {\\r\\n\\t\\t\\t\\t\\t\\ttodo.push({u.first, type});\\r\\n\\t\\t\\t\\t\\t// creates a contradiction\\r\\n\\t\\t\\t\\t\\t} else if (color[u.first] == !type) {\\r\\n\\t\\t\\t\\t\\t\\timpossible = true;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tif (impossible) {\\r\\n\\t\\tcout << 0 << endl;\\r\\n\\t} else {\\r\\n\\t\\t// 2^component_num in binary is 1, followed by component_num zeros.\\r\\n\\t\\tcout << 1;\\r\\n\\t\\tfor (int i = 0; i < component_num; i++) {\\r\\n\\t\\t\\tcout << 0;\\r\\n\\t\\t}\\r\\n\\t\\tcout << endl;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.StringTokenizer;\\r\\n\\r\\npublic class revegetate {\\r\\n\\tpublic static int[] type;\\r\\n\\tpublic static boolean impossible;\\r\\n\\tpublic static ArrayList<Integer>[] same;\\r\\n\\tpublic static ArrayList<Integer>[] diff;\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new FileReader(\\\"revegetate.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(new FileWriter(\\\"revegetate.out\\\"));\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tint N = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint M = Integer.parseInt(st.nextToken());\\r\\n\\r\\n\\t\\ttype = new int[N + 1];\\r\\n\\t\\tsame = new ArrayList[N + 1];\\r\\n\\t\\tdiff = new ArrayList[N + 1];\\r\\n\\r\\n\\t\\t// Initialize the adjacency lists.\\r\\n\\t\\tfor (int i = 0; i <= N; i++) {\\r\\n\\t\\t\\tsame[i] = new ArrayList<>();\\r\\n\\t\\t\\tdiff[i] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\t\\tint comps = 0; // The number of connected components.\\r\\n\\r\\n\\t\\t// Read in the edges.\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tchar type = st.nextToken().charAt(0);\\r\\n\\t\\t\\tint a = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint b = Integer.parseInt(st.nextToken());\\r\\n\\r\\n\\t\\t\\t// They share the same type of grass\\r\\n\\t\\t\\tif (type == 'S') {\\r\\n\\t\\t\\t\\tsame[a].add(b);\\r\\n\\t\\t\\t\\tsame[b].add(a);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// They share different types of grass.\\r\\n\\t\\t\\tif (type == 'D') {\\r\\n\\t\\t\\t\\tdiff[a].add(b);\\r\\n\\t\\t\\t\\tdiff[b].add(a);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 1; i <= N; i++) {\\r\\n\\t\\t\\t// This node is unvisited, so try to color it with color '1'.\\r\\n\\t\\t\\tif (type[i] == 0) {\\r\\n\\t\\t\\t\\tvisit(i, 1);\\r\\n\\t\\t\\t\\tcomps++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// It is impossible to color the fields.\\r\\n\\t\\tif (impossible) {\\r\\n\\t\\t\\tpw.println(0);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// The solution is 2^(number of components).\\r\\n\\t\\t\\tpw.print(1);\\r\\n\\t\\t\\tfor (int i = 0; i < comps; i++) {\\r\\n\\t\\t\\t\\tpw.print(0);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tpw.println();\\r\\n\\t\\t}\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// Visit a node and color it.\\r\\n\\tpublic static void visit(int node, int color) {\\r\\n\\t\\ttype[node] = color;\\r\\n\\r\\n\\t\\t// Check all of the nodes that are supposed to share the same color.\\r\\n\\t\\tfor (int next : same[node]) {\\r\\n\\t\\t\\t// There is a contradiction here.\\r\\n\\t\\t\\tif (type[next] == 3 - color) {\\r\\n\\t\\t\\t\\timpossible = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (type[next] == 0) {\\r\\n\\t\\t\\t\\tvisit(next, color);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Check all of the nodes that are supposed to have a different color.\\r\\n\\t\\tfor (int next : diff[node]) {\\r\\n\\t\\t\\t// There is a contradiction here.\\r\\n\\t\\t\\tif (type[next] == color) {\\r\\n\\t\\t\\t\\timpossible = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (type[next] == 0) {\\r\\n\\t\\t\\t\\tvisit(next, 3 - color);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-920","source":"USACO Silver 2019 February","title":"The Great Revegetation","author":"Sofia Yang, Ryan Chou"},"parent":{"name":"usaco-920","relativePath":"usaco-920.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dfs","title":"Depth First Search (DFS)"}}}}]},"problemInfo":{"uniqueId":"usaco-920","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=920"}},"pageContext":{"id":"usaco-920"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}