{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1640-sum-of-two-values/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1640\", source = \"CSES\", title = \"Sum of Two Values\", author = \"Michael Cao, DRGSH, Benjamin Qi, Brad Ma, Ryan Chou, David Zhang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, PySection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Given an array of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" elements, you are asked to find two values which sum to\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-1---dictionarymap\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1---dictionarymap\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1 - Dictionary/Map\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's start by iterating over the first value in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time. Given\\r\\none value, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \", the other value must be \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x - a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x - a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" unless \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a > x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a &gt; x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" (in which case\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" cannot be a valid first value).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So the question reduces to, given some value \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \", does some other value \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x - a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x - a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \"\\r\\nexist?\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsxs(_components.h3, {\n          id: \"using-a-dictionary\",\n          children: [_jsx(_components.a, {\n            href: \"#using-a-dictionary\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Using a Dictionary\"]\n        })\n      }), _jsx(CPPSection, {\n        children: _jsxs(_components.h3, {\n          id: \"using-a-map\",\n          children: [_jsx(_components.a, {\n            href: \"#using-a-map\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Using a Map\"]\n        })\n      }), _jsx(JavaSection, {\n        children: _jsxs(_components.h3, {\n          id: \"using-a-map-1\",\n          children: [_jsx(_components.a, {\n            href: \"#using-a-map-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Using a Map\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"One idea that comes to mind would be to used a boolean array to store the\\r\\nvalues. Unfortunately, since \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a_i \\\\leq 10^9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">a_i \\\\leq 10^9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.786em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \", this approach isn't feasible.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsxs(_components.p, {\n          children: [\"However, we can store the values in a dictionary which maps each value to an\\r\\nindex, and use the\\r\\n\", _jsx(_components.a, {\n            href: \"https://stackoverflow.com/questions/1964934/what-does-contains-do-what-can-call-contains-function\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"__contains__\"\n            })\n          }), \"\\r\\ndunder method to check whether a value exists, and return the corresponding\\r\\nindex if it does.\"]\n        })\n      }), _jsx(CPPSection, {\n        children: _jsxs(_components.p, {\n          children: [\"However, we can store the values in an (un)ordered map which maps each value to\\r\\nan index, and use the \", _jsx(_components.code, {\n            children: \".count\"\n          }), \" method to check whether a value exists, and\\r\\nreturn the corresponding index if it does.\"]\n        })\n      }), _jsx(JavaSection, {\n        children: _jsxs(_components.p, {\n          children: [\"However, we can store the values in a map which maps each value to an index, and\\r\\nuse the \", _jsx(_components.code, {\n            children: \".containsKey\"\n          }), \" method to check whether a value exists, and return the\\r\\ncorresponding index if it does.\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To be careful not to count the same index twice, we'll add values to the map as\\r\\nwe iterate through it, so at some index \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" you only consider values with index\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j < i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j &lt; i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\nint main() {\\r\\n\\tint n, x; cin >> n >> x;\\r\\n\\tvi a(n);\\r\\n\\tmap<int, int> vals;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> a[i];\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tif(vals.count(x - a[i])){\\r\\n\\t\\t\\tcout << i + 1 << \\\" \\\" << vals[x - a[i]] << \\\"\\\\n\\\";\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t\\tvals[a[i]] = i + 1;\\r\\n\\t}\\r\\n\\tcout << \\\"IMPOSSIBLE\\\" << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class SumOfTwoValues {\\r\\n\\tpublic static void main (String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint target = io.nextInt();\\r\\n\\t\\tint[] values = new int[n];\\r\\n\\t\\t// use a map to avoid using a very large array\\r\\n\\t\\tMap<Integer, Integer> map = new HashMap<>();\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tvalues[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\t// target minus a number is the other number\\r\\n\\t\\t\\tif (map.containsKey(target - values[i])) {\\r\\n\\t\\t\\t\\tio.println((i + 1) + \\\" \\\" + map.get(target - values[i]));\\r\\n\\t\\t\\t\\t// remember to close here before exiting to avoid\\r\\n\\t\\t\\t\\t// blank output\\r\\n\\t\\t\\t\\tio.close();\\r\\n\\t\\t\\t\\tSystem.exit(0);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tmap.put(values[i], i + 1);\\r\\n\\t\\t}\\r\\n\\t\\tio.println(\\\"IMPOSSIBLE\\\");\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\t\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\n\\r\\nn,x = map(int,input().split())\\r\\na = [int(x) for x in input().split()]\\r\\n\\r\\nval_to_ind = {}\\r\\nfor i,val in enumerate(a):\\r\\n\\tif x-val in val_to_ind:\\r\\n\\t\\t# equivalent to val_to_ind.__contains__(x-val)\\r\\n\\t\\tprint(i+1,val_to_ind[x-val])\\r\\n\\t\\tsys.exit(0)\\r\\n\\tval_to_ind[val] = i+1\\r\\n\\r\\nprint(\\\"IMPOSSIBLE\\\")\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---two-pointers\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---two-pointers\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - Two Pointers\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By keeping two pointers, one at each end of the list, we can greedily move the left and right pointers if the sum of the two elements are less than or greater than the target sum, finding the two indices in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class TwoSum {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tint X = io.nextInt();\\r\\n\\r\\n\\t\\tList<Pair> a = new ArrayList<>();\\r\\n\\t\\t\\t\\t\\t\\t  \\r\\n\\t\\t// append the element and its index\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tint x = io.nextInt();\\r\\n\\t\\t\\ta.add(new Pair(x, i + 1));\\r\\n\\t\\t}\\r\\n\\t\\tCollections.sort(a);\\r\\n\\t\\tint i = 0, j = (int) N - 1;\\r\\n\\t\\twhile (i < j) {\\r\\n\\t\\t\\t// adjust the left and right pointers.\\r\\n\\t\\t\\tif (a.get(i).val + a.get(j).val > X)\\r\\n\\t\\t\\t\\tj--;\\r\\n\\t\\t\\telse if (a.get(i).val + a.get(j).val < X)\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\telse if (a.get(i).val + a.get(j).val == X) {\\r\\n\\t\\t\\t\\tio.println(a.get(i).index + \\\" \\\" + a.get(j).index);\\r\\n\\t\\t\\t\\tio.close();\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(\\\"IMPOSSIBLE\\\");\\r\\n\\t\\tio.close();\\t\\t\\t\\t\\t \\r\\n\\t}\\r\\n\\r\\n\\tstatic class Pair implements Comparable<Pair> {\\r\\n\\t\\tint val, index;\\r\\n\\r\\n\\t\\tpublic Pair(int x, int y) {\\r\\n\\t\\t\\tthis.val = x;\\r\\n\\t\\t\\tthis.index = y;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic int compareTo(Pair o) {\\r\\n\\t\\t\\treturn -Integer.compare(o.val, val);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\nint main() {\\r\\n\\tll N, X;\\r\\n\\tcin >> N >> X;\\r\\n\\tvector<pair<int,int>> a;\\r\\n\\t\\r\\n\\t// append the element and its index\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tll x;\\r\\n\\t\\tcin >> x;\\r\\n\\t\\ta.pb({x, i + 1});\\r\\n\\t}\\r\\n\\t\\r\\n\\tsort(a.begin(), a.end());\\r\\n\\tint i = 0, j = N - 1;\\r\\n\\t\\r\\n\\twhile (i < j) {\\r\\n\\t\\t// adjust left and right pointers.\\r\\n\\t\\tif(a[i].f + a[j].f > X)\\r\\n\\t\\t\\tj--;\\r\\n\\t\\telse if (a[i].f + a[j].f < X)\\r\\n\\t\\t\\ti++;\\r\\n\\t\\telse if (a[i].f + a[j].f == X) {\\r\\n\\t\\t\\tcout << a[i].s << \\\" \\\" << a[j].s;\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << \\\"IMPOSSIBLE\\\" << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"nums = list(map(int, input().split()))\\r\\na = []\\r\\n\\r\\n# append element and index.\\r\\nfor i in range(n):\\r\\n\\ta.append([nums[i], i + 1])\\r\\n\\r\\na.sort()\\r\\nans = []\\r\\nleft, right = 0, n - 1\\r\\n\\r\\nwhile left < right:\\r\\n\\tsumlr = a[left][0] + a[right][0]\\r\\n\\tif sumlr == x:\\r\\n\\t\\tans.append(str(a[right][1]))\\r\\n\\t\\tans.append(str(a[left][1]))\\r\\n\\t\\tbreak\\r\\n\\telif sumlr > x:\\r\\n\\t\\tright -= 1\\r\\n\\telse:\\r\\n\\t\\tleft += 1\\r\\n\\r\\n# print IMPOSSIBLE if we haven't found a pair\\r\\nprint(\\\" \\\".join(ans) if ans else \\\"IMPOSSIBLE\\\")\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1640","source":"CSES","title":"Sum of Two Values","author":"Michael Cao, DRGSH, Benjamin Qi, Brad Ma, Ryan Chou, David Zhang"},"parent":{"name":"cses-1640","relativePath":"cses-1640.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1 - Dictionary/Map","slug":"solution-1---dictionarymap"},{"depth":3,"value":"Using a Map","slug":"using-a-map"},{"depth":2,"value":"Solution 2 - Two Pointers","slug":"solution-2---two-pointers"}],"java":[{"depth":2,"value":"Solution 1 - Dictionary/Map","slug":"solution-1---dictionarymap"},{"depth":3,"value":"Using a Map","slug":"using-a-map-1"},{"depth":2,"value":"Solution 2 - Two Pointers","slug":"solution-2---two-pointers"}],"py":[{"depth":2,"value":"Solution 1 - Dictionary/Map","slug":"solution-1---dictionarymap"},{"depth":3,"value":"Using a Dictionary","slug":"using-a-dictionary"},{"depth":2,"value":"Solution 2 - Two Pointers","slug":"solution-2---two-pointers"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"two-pointers","title":"Two Pointers"}}}},{"node":{"module":{"frontmatter":{"id":"intro-sets","title":"Introduction to Sets & Maps"}}}}]},"problemInfo":{"uniqueId":"cses-1640","url":"https://cses.fi/problemset/task/1640"}},"pageContext":{"id":"cses-1640"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}