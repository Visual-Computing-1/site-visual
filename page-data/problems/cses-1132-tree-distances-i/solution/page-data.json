{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1132-tree-distances-i/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1132\", source = \"CSES\", title = \"Tree Distances I\", author = \"Nathan Wang, Benjamin Qi, Abhishek Singh, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    Warning: _missingComponent(\"Warning\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, LanguageSection, CPPSection, JavaSection, Warning, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution-1\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Described in \", _jsx(_components.a, {\n        href: \"/CPH.pdf#page=147\",\n        children: \"CPH 14.3\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include<bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nvector<int> adj[200001];\\r\\nint firstMax[200001];  // to store first-max length.\\r\\nint secondMax[200001];  // to store second-max length.\\r\\nint c[200001];   // to store child for path of max length.\\r\\n\\r\\n// calculate for every node x the maximum\\r\\n// length of a path that goes through a child of x\\r\\nvoid dfs(int v, int p) {\\r\\n\\tfirstMax[v] = 0;\\r\\n\\tsecondMax[v] = 0;\\r\\n\\tfor (auto x : adj[v]) {\\r\\n\\t\\tif (x == p)continue;\\r\\n\\t\\tdfs(x, v);\\r\\n\\t\\tif (firstMax[x] + 1 > firstMax[v]) {\\r\\n\\t\\t\\tsecondMax[v] = firstMax[v];\\r\\n\\t\\t\\tfirstMax[v] = firstMax[x] + 1;\\r\\n\\t\\t\\tc[v] = x;\\r\\n\\t\\t}\\r\\n\\t\\telse if (firstMax[x] + 1 > secondMax[v]) {\\r\\n\\t\\t\\tsecondMax[v] = firstMax[x] + 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// calculate for every node x the\\r\\n// maximum length of a path through its parent p\\r\\nvoid dfs2(int v, int p) {\\r\\n\\tfor (auto x : adj[v]) {\\r\\n\\t\\tif (x == p) continue;\\r\\n\\t\\tif (c[v] == x) {\\r\\n\\t\\t\\tif (firstMax[x] < secondMax[v] + 1) {\\r\\n\\t\\t\\t\\tsecondMax[x] = firstMax[x];\\r\\n\\t\\t\\t\\tfirstMax[x] = secondMax[v] + 1;\\r\\n\\t\\t\\t\\tc[x] = v;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tsecondMax[x] = max(secondMax[x], secondMax[v] + 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tsecondMax[x] = firstMax[x];\\r\\n\\t\\t\\tfirstMax[x] =  firstMax[v] + 1;\\r\\n\\t\\t\\tc[x] = v;\\r\\n\\t\\t}\\r\\n\\t\\tdfs2(x, v);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tFIO;\\r\\n\\tint n, u, v;\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n - 1; i++) {\\r\\n\\t\\tcin >> u >> v;\\r\\n\\t\\tadj[u].push_back(v);\\r\\n\\t\\tadj[v].push_back(u);\\r\\n\\t}\\r\\n\\tdfs(1, -1);\\r\\n\\tdfs2(1, -1);\\r\\n\\r\\n\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\tcout << firstMax[i] << \\\" \\\";\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      }), _jsxs(JavaSection, {\n        children: [_jsx(Warning, {\n          children: _jsx(_components.p, {\n            children: \"Java exceeds the time limit on two test cases.\"\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"\\r\\nimport java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class TreeDistancesI {\\r\\n\\tstatic ArrayList<Integer>[] adj;\\r\\n\\tstatic int MAX_N = 200000;\\r\\n\\tstatic int [] firstMax = new int[MAX_N + 1];  // to store first-max length.\\r\\n\\tstatic int [] secondMax = new int[MAX_N + 1]; // to store second-max length.\\r\\n\\tstatic int [] c = new int[MAX_N + 1]; // to store child for path of max length.\\r\\n\\r\\n\\tpublic static void dfs(int v, int p) {\\r\\n\\t\\tfirstMax[v] = 0;\\r\\n\\t\\tsecondMax[v] = 0;\\r\\n\\t\\tfor (int x : adj[v]) {\\r\\n\\t\\t\\tif (x == p) continue;\\r\\n\\t\\t\\tdfs(x, v);\\r\\n\\t\\t\\tif (firstMax[x] + 1 > firstMax[v]) {\\r\\n\\t\\t\\t\\tsecondMax[v] = firstMax[v];\\r\\n\\t\\t\\t\\tfirstMax[v] = firstMax[x] + 1;\\r\\n\\t\\t\\t\\tc[v] = x;\\r\\n\\t\\t\\t} else if (firstMax[x] + 1 > secondMax[v]) {\\r\\n\\t\\t\\t\\tsecondMax[v] = firstMax[x] + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void dfs2(int v, int p) {\\r\\n\\t\\tfor (int x : adj[v]) {\\r\\n\\t\\t\\tif (x == p) continue;\\r\\n\\t\\t\\tif (c[v] == x) {\\r\\n\\t\\t\\t\\tif (firstMax[x] < secondMax[v] + 1) {\\r\\n\\t\\t\\t\\t\\tsecondMax[x] = firstMax[x];\\r\\n\\t\\t\\t\\t\\tfirstMax[x] = secondMax[v] + 1;\\r\\n\\t\\t\\t\\t\\tc[x] = v;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tsecondMax[x] = Math.max(secondMax[x], secondMax[v] + 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tsecondMax[x] = firstMax[x];\\r\\n\\t\\t\\t\\tfirstMax[x] =  firstMax[v] + 1;\\r\\n\\t\\t\\t\\tc[x] = v;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tdfs2(x, v);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main (String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n, u, v;\\r\\n\\t\\tn = io.nextInt();\\r\\n\\t\\tadj = new ArrayList[n + 1];\\r\\n\\t\\tfor (int x = 0; x < adj.length; x++) {\\r\\n\\t\\t\\tadj[x] = new ArrayList();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n - 1; i++) {\\r\\n\\t\\t\\tu = io.nextInt();\\r\\n\\t\\t\\tv = io.nextInt();\\r\\n\\t\\t\\tadj[u].add(v);\\r\\n\\t\\t\\tadj[v].add(u);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdfs(1, -1);\\r\\n\\t\\tdfs2(1, -1);\\r\\n\\r\\n\\t\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\t\\tio.print(firstMax[i] + \\\" \\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Compute a diameter of the tree as described by algorithm 2\\r\\n\", _jsx(_components.a, {\n        href: \"/CPH.pdf#page=146\",\n        children: \"here\"\n      }), \". Once we have a diameter \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(a,b)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(a,b)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \",\\r\\noutput \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\max(dist(a,i),dist(b,i))\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>‚Å°</mo><mo stretchy=\\\"false\\\">(</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\\\"false\\\">(</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>i</mi><mo stretchy=\\\"false\\\">)</mo><mo separator=\\\"true\\\">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\\\"false\\\">(</mo><mi>b</mi><mo separator=\\\"true\\\">,</mo><mi>i</mi><mo stretchy=\\\"false\\\">)</mo><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(dist(a,i),dist(b,i))</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">)</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">))</span></span></span></span>\"\n      }), \" for each node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\n// dist[0][i] = distance from node a to node i\\r\\n// dist[1][i] = distance from node b to node i\\r\\nint dist[2][200000];\\r\\nvector<int> adj[200000];\\r\\n\\r\\nint dfs(int u, int p, int d, int i) {\\r\\n\\tdist[i][u] = d;\\r\\n\\tint opt = -1;\\r\\n\\tfor (int v : adj[u]) {\\r\\n\\t\\tif (v != p) {\\r\\n\\t\\t\\tint x = dfs(v, u, d+1, i);\\r\\n\\t\\t\\tif (opt == -1 || dist[i][x] > dist[i][opt]) opt = x;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn opt == -1 ? u : opt;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint n; cin >> n;\\r\\n\\tfor (int i = 0; i < n-1; i++) {\\r\\n\\t\\tint a, b; cin >> a >> b; --a; --b;\\r\\n\\t\\tadj[a].push_back(b); adj[b].push_back(a);\\r\\n\\t}\\r\\n\\t// first, find node a by finding the farthest node from an arbitrary node x\\r\\n\\tint mxNode = dfs(0, 0, 0, 0);\\r\\n\\t// then, find node b (this step also computes distance from a to every other node)\\r\\n\\tint mxNode2 = dfs(mxNode, mxNode, 0, 0);\\r\\n\\t// finally, compute the distance from b to every other node\\r\\n\\tdfs(mxNode2, mxNode2, 0, 1);\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcout << max(dist[0][i], dist[1][i]) << \\\" \\\\n\\\"[i == n-1];\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1132","source":"CSES","title":"Tree Distances I","author":"Nathan Wang, Benjamin Qi, Abhishek Singh, Brad Ma"},"parent":{"name":"cses-1132","relativePath":"cses-1132.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"}],"java":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"}],"py":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-tree","title":"Introduction to Tree Algorithms"}}}},{"node":{"module":{"frontmatter":{"id":"all-roots","title":"DP on Trees - Solving For All Roots"}}}}]},"problemInfo":{"uniqueId":"cses-1132","url":"https://cses.fi/problemset/task/1132"}},"pageContext":{"id":"cses-1132"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}