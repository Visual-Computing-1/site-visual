{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/apio-2014beads/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"apio-14-beads\", source = \"APIO 2014\", title = \"Beads and Wires\", author = \"Andi Qu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {IncompleteSection, HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(IncompleteSection, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nint n, a, b;\\r\\nll w, pw[200001], dp[200001][2][2];\\r\\nvector<pair<int, ll>> graph[200001];\\r\\n\\r\\nvoid dfs(int node, int par) {\\r\\n\\tif (graph[node].size() == 1 && par != -1) return;\\r\\n\\r\\n\\tll tot = 0, best_mid = INT_MIN, best_unuse_mid = INT_MIN, best_unuse_mid2 = INT_MIN,\\r\\n\\t   best_unuse_nomid = INT_MIN, best_unuse_nomid2 = INT_MIN;\\r\\n\\r\\n\\tint best_unuse_mid_child, best_unuse_mid_child2, best_unuse_nomid_child,\\r\\n\\t\\tbest_unuse_nomid_child2;\\r\\n\\r\\n\\tfor (int i = 0; i < graph[node].size(); i++) {\\r\\n\\t\\tif (graph[node][i].first != par) {\\r\\n\\t\\t\\tint child = graph[node][i].first;\\r\\n\\t\\t\\tll edge = graph[node][i].second;\\r\\n\\r\\n\\t\\t\\tpw[child] = edge;\\r\\n\\r\\n\\t\\t\\tdfs(child, node);\\r\\n\\r\\n\\t\\t\\tll normsc = max(dp[child][0][0], dp[child][1][0]);\\r\\n\\t\\t\\ttot += normsc;\\r\\n\\t\\t\\tll midsc = max(dp[child][0][1], dp[child][1][1]) - normsc;\\r\\n\\r\\n\\t\\t\\tif (midsc > best_mid) best_mid = midsc;\\r\\n\\r\\n\\t\\t\\tll unuse_midsc = dp[child][0][1] + edge - normsc;\\r\\n\\r\\n\\t\\t\\tif (unuse_midsc > best_unuse_mid) {\\r\\n\\t\\t\\t\\tbest_unuse_mid2 = best_unuse_mid;\\r\\n\\t\\t\\t\\tbest_unuse_mid_child2 = best_unuse_mid_child;\\r\\n\\t\\t\\t\\tbest_unuse_mid = unuse_midsc;\\r\\n\\t\\t\\t\\tbest_unuse_mid_child = child;\\r\\n\\t\\t\\t} else if (unuse_midsc > best_unuse_mid2) {\\r\\n\\t\\t\\t\\tbest_unuse_mid2 = unuse_midsc;\\r\\n\\t\\t\\t\\tbest_unuse_mid_child2 = child;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tll unuse_nomidsc = dp[child][0][0] + edge - normsc;\\r\\n\\r\\n\\t\\t\\tif (unuse_nomidsc > best_unuse_nomid) {\\r\\n\\t\\t\\t\\tbest_unuse_nomid2 = best_unuse_nomid;\\r\\n\\t\\t\\t\\tbest_unuse_nomid_child2 = best_unuse_nomid_child;\\r\\n\\t\\t\\t\\tbest_unuse_nomid = unuse_nomidsc;\\r\\n\\t\\t\\t\\tbest_unuse_nomid_child = child;\\r\\n\\t\\t\\t} else if (unuse_nomidsc > best_unuse_nomid2) {\\r\\n\\t\\t\\t\\tbest_unuse_nomid2 = unuse_nomidsc;\\r\\n\\t\\t\\t\\tbest_unuse_nomid_child2 = child;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tdp[node][0][0] = tot;\\r\\n\\tdp[node][0][1] = tot + max(0LL, best_mid);\\r\\n\\tdp[node][0][1] = max(dp[node][0][1], tot + best_unuse_nomid + best_unuse_nomid2);\\r\\n\\r\\n\\tif (best_unuse_mid_child != best_unuse_nomid_child) {\\r\\n\\t\\tdp[node][0][1] = max(dp[node][0][1], tot + best_unuse_nomid + best_unuse_mid);\\r\\n\\t} else {\\r\\n\\t\\tdp[node][0][1] = max(dp[node][0][1], tot + best_unuse_nomid2 + best_unuse_mid);\\r\\n\\t\\tdp[node][0][1] = max(dp[node][0][1], tot + best_unuse_nomid + best_unuse_mid2);\\r\\n\\t}\\r\\n\\r\\n\\tdp[node][1][0] = tot + pw[node] + best_unuse_nomid;\\r\\n\\tdp[node][1][1] = tot + pw[node] + best_unuse_mid;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n - 1; i++) {\\r\\n\\t\\tcin >> a >> b >> w;\\r\\n\\t\\tgraph[a].push_back({b, w});\\r\\n\\t\\tgraph[b].push_back({a, w});\\r\\n\\t}\\r\\n\\tdfs(1, -1);\\r\\n\\r\\n\\tcout << max(dp[1][0][1], dp[1][0][0]) << '\\\\n';\\r\\n\\treturn 0;\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"apio-14-beads","source":"APIO 2014","title":"Beads and Wires","author":"Andi Qu"},"parent":{"name":"apio-14-beads","relativePath":"apio-14-beads.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"all-roots","title":"DP on Trees - Solving For All Roots"}}}}]},"problemInfo":{"uniqueId":"apio-14-beads","url":"https://oj.uz/problem/view/APIO14_beads"}},"pageContext":{"id":"apio-14-beads"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}