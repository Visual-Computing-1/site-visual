{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-860-mooyo-mooyo/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-860\", source = \"USACO Silver 2018 December\", title = \"Mooyo Mooyo\", author = \"Nathan Gong, Pranav Jadhav\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_mooyomooyo_silver_dec18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint n, k;\\r\\nconst int MAX_ROWS = 100;\\r\\nconst int MAX_COLS = 10;\\r\\nvector<vector<char>> board(MAX_ROWS, vector<char>(MAX_COLS));\\r\\nvector<vector<bool>> visited(MAX_ROWS, vector<bool>(MAX_COLS));\\r\\n\\r\\n// stores current component indices to set to '0'\\r\\nvector<pair<int, int>> component;\\r\\n\\r\\n/*\\r\\n * floodfill to count connected regions\\r\\n * returns size of connected region\\r\\n * fills 'component' vector with the indices of the component\\r\\n */\\r\\nint floodfill(int i, int j, char color) {\\r\\n\\tint cnt = 1;\\r\\n\\tif (\\r\\n\\t\\ti < 0 || j < 0 || i >= n || j >= MAX_COLS ||\\r\\n\\t\\tvisited[i][j] ||\\r\\n\\t\\tboard[i][j] != color\\r\\n\\t) {\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\t\\r\\n\\tvisited[i][j] = 1;\\r\\n\\tcomponent.push_back({i, j});\\r\\n\\tcnt += (\\r\\n\\t\\tfloodfill(i + 1, j, color)\\r\\n\\t\\t+ floodfill(i - 1, j, color)\\r\\n\\t\\t+ floodfill(i, j + 1, color)\\r\\n\\t\\t+ floodfill(i, j - 1, color)\\r\\n\\t);\\r\\n\\treturn cnt;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"mooyomooyo.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"mooyomooyo.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tcin >> n >> k;\\r\\n\\r\\n\\tfor (int i = n - 1; i >= 0; i--) {\\r\\n\\t\\tstring nums;\\r\\n\\t\\tcin >> nums;\\r\\n\\t\\tfor (int j = 0; j < MAX_COLS; j++) {\\r\\n\\t\\t\\tboard[i][j] = nums[j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\t * Loop while there are regions that got destroyed (board changed)\\r\\n\\t * If no regions were destroyed, we are at the final state (break loop; return answer)\\r\\n\\t */\\r\\n\\tbool board_changed = true;\\r\\n\\twhile (board_changed) {\\r\\n\\t\\tboard_changed = false;\\r\\n\\r\\n\\t\\t// destroy all haybales in connected regions with size >= k\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < MAX_COLS; j++) {\\r\\n\\t\\t\\t\\tif (!visited[i][j] && board[i][j] != '0') {\\r\\n\\t\\t\\t\\t\\tchar current_color = board[i][j];\\r\\n\\t\\t\\t\\t\\tint cnt = floodfill(i, j, current_color);\\r\\n\\r\\n\\t\\t\\t\\t\\tif (cnt >= k) {\\r\\n\\t\\t\\t\\t\\t\\t// found a region to destroy\\r\\n\\t\\t\\t\\t\\t\\tboard_changed = true;\\r\\n\\t\\t\\t\\t\\t\\tfor (auto p: component) {\\r\\n\\t\\t\\t\\t\\t\\t\\tboard[p.first][p.second] = '0';\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tcomponent.clear();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// run gravity\\r\\n\\t\\tfor (int col = 0; col < MAX_COLS; col++) {\\r\\n\\t\\t\\tvector <char> column_after_gravity;\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * loop over rows from bottom to top of current column\\r\\n\\t\\t\\t * add nonzero elements to vector 'column_after_gravity'\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tfor (int row = 0; row < n; row++) {\\r\\n\\t\\t\\t\\tif (board[row][col] != '0') {\\r\\n\\t\\t\\t\\t\\tcolumn_after_gravity.push_back(board[row][col]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * edit the board to reflect changes\\r\\n\\t\\t\\t * going from bottom to top, fill the column with column_after_gravity\\r\\n\\t\\t\\t * while we can, otherwise make it '0' (empty)\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tfor (int row = 0; row < n; row++) {\\r\\n\\t\\t\\t\\tif (row < column_after_gravity.size()) {\\r\\n\\t\\t\\t\\t\\tboard[row][col] = column_after_gravity[row];\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tboard[row][col] = '0';\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// reset visited array\\r\\n\\t\\tfill(visited.begin(), visited.end(), vector<bool>(MAX_COLS, false));\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = n - 1; i >= 0; i--) {\\r\\n\\t\\tfor (int j = 0; j < MAX_COLS; j++) {\\r\\n\\t\\t\\tcout << board[i][j];\\r\\n\\t\\t}\\r\\n\\t\\tcout << '\\\\n';\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class MooyoMooyo {\\r\\n\\tstatic int n, m, k;\\r\\n\\tstatic int[][] grid, region;\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"mooyomooyo\\\");\\r\\n\\r\\n\\t\\tn = io.nextInt();\\r\\n\\t\\tm = 10;\\r\\n\\t\\tk = io.nextInt();\\r\\n\\t\\tgrid = new int[n][m];\\r\\n\\t\\tregion = new int[n][m];\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tString row = io.next();\\r\\n\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\tgrid[i][j] = Character.getNumericValue(row.charAt(j));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Loop until game ends (when there are no more regions to delete)\\r\\n\\t\\twhile (true) {\\r\\n\\t\\t\\t// Stores the current region we're on\\r\\n\\t\\t\\tint r = 1;\\r\\n\\t\\t\\t// Reset region matrix\\r\\n\\t\\t\\tregion = new int[n][m];\\r\\n\\r\\n\\t\\t\\tSet<Integer> largeRegions = new HashSet<>();\\r\\n\\t\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\t\\t/* \\r\\n\\t\\t\\t\\t\\t * Floodfill only if the current square isn't empty\\r\\n\\t\\t\\t\\t\\t * and hasn't been visited (if it already has, region[i][j]\\r\\n\\t\\t\\t\\t\\t * would be nonzero)\\r\\n\\t\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\t\\tif (grid[i][j] != 0 && region[i][j] == 0) {\\r\\n\\t\\t\\t\\t\\t\\tint size = floodfill(i, j, r, grid[i][j]);\\r\\n\\t\\t\\t\\t\\t\\tif (size >= k) {\\r\\n\\t\\t\\t\\t\\t\\t\\tlargeRegions.add(r);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tr++;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Stop simulation if there are no more regions to delete\\r\\n\\t\\t\\tif (largeRegions.size() == 0) {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Delete squares that are part of a large region\\r\\n\\t\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\t\\tif (largeRegions.contains(region[i][j])) {\\r\\n\\t\\t\\t\\t\\t\\tgrid[i][j] = 0;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t/* \\r\\n\\t\\t\\t * Apply gravity; In other words, for each column, we move all the\\r\\n\\t\\t\\t * zeros to the top\\r\\n\\t\\t\\t * Here's a good source explaining a similar concept:\\r\\n\\t\\t\\t * https://www.geeksforgeeks.org/move-zeroes-end-array/\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\tint count = n - 1;\\r\\n\\t\\t\\t\\tfor (int i = n - 1; i >= 0; i--) {\\r\\n\\t\\t\\t\\t\\tif (grid[i][j] != 0) {\\r\\n\\t\\t\\t\\t\\t\\tgrid[count--][j] = grid[i][j];\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\twhile (count >= 0) {\\r\\n\\t\\t\\t\\t\\tgrid[count--][j] = 0;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\tio.print(grid[i][j]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tio.println();\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t// Returns the size of the region containing square (i, j)\\r\\n\\tstatic int floodfill(int i, int j, int r, int color) {\\r\\n\\t\\t// Exit if out of bounds, already visited, or if the current square\\r\\n\\t\\t// has a different color\\r\\n\\t\\tif (i < 0 || i >= n || j < 0 || j >= m) return 0;\\r\\n\\t\\tif (region[i][j] != 0) return 0;\\r\\n\\t\\tif (grid[i][j] != color) return 0;\\r\\n\\t\\t\\r\\n\\t\\t// If we haven't exited, we can continue with floodfill\\r\\n\\t\\tregion[i][j] = r;\\r\\n\\t\\tint size = 1;\\r\\n\\t\\tsize += floodfill(i + 1, j, r, color);\\r\\n\\t\\tsize += floodfill(i - 1, j, r, color);\\r\\n\\t\\tsize += floodfill(i, j + 1, r, color);\\r\\n\\t\\tsize += floodfill(i, j - 1, r, color);\\r\\n\\t\\treturn size;\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-860","source":"USACO Silver 2018 December","title":"Mooyo Mooyo","author":"Nathan Gong, Pranav Jadhav"},"parent":{"name":"usaco-860","relativePath":"usaco-860.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"flood-fill","title":"Flood Fill"}}}}]},"problemInfo":{"uniqueId":"usaco-860","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=860"}},"pageContext":{"id":"usaco-860"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}