{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-2166-prefix-sum-queries/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-2166\", source = \"CSES\", title = \"Prefix Sum Queries\", author = \"Dong Liu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \": \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this problem, we're given an array \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" and we're asked to answer 2 types of\\r\\nqueries\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"update the value at position \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" to \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"calculate the maximum prefix sum in the range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[a, b]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[a, b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-1---segment-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1---segment-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1 - Segment Tree\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In each segment tree node, we will store\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{sum}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">sum</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{sum}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">sum</span></span></span></span></span>\"\n        }), \": the sum of the elements in the range\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{pref}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">pref</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{pref}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">pref</span></span></span></span></span>\"\n        }), \": the maximum prefix sum in the range\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To calculate \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{seg}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">seg</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{seg}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">seg</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \",\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{sum}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">sum</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{sum}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">sum</span></span></span></span></span>\"\n        }), \" would be equal to \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left}.\\\\texttt{sum} + \\\\texttt{right}.\\\\texttt{sum}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">sum</mtext><mo>+</mo><mtext mathvariant=\\\"monospace\\\">right</mtext><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">sum</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}.\\\\texttt{sum} + \\\\texttt{right}.\\\\texttt{sum}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">sum</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">sum</span></span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The maximum prefix has to end at either the left segment (\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left}.\\\\texttt{pref}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">pref</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}.\\\\texttt{pref}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">pref</span></span></span></span></span>\"\n        }), \"), or at the right segment (\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left}.\\\\texttt{sum} + \\\\texttt{right}.\\\\texttt{pref}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">sum</mtext><mo>+</mo><mtext mathvariant=\\\"monospace\\\">right</mtext><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">pref</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}.\\\\texttt{sum} + \\\\texttt{right}.\\\\texttt{pref}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">sum</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">pref</span></span></span></span></span>\"\n        }), \"), so \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{pref}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">pref</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{pref}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">pref</span></span></span></span></span>\"\n        }), \" would equal \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\max(\\\\texttt{left}.\\\\texttt{pref}, \\\\texttt{left}.\\\\texttt{sum} + \\\\texttt{right}.\\\\texttt{pref})\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>‚Å°</mo><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">left</mtext><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">pref</mtext><mo separator=\\\"true\\\">,</mo><mtext mathvariant=\\\"monospace\\\">left</mtext><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">sum</mtext><mo>+</mo><mtext mathvariant=\\\"monospace\\\">right</mtext><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">pref</mtext><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(\\\\texttt{left}.\\\\texttt{pref}, \\\\texttt{left}.\\\\texttt{sum} + \\\\texttt{right}.\\\\texttt{pref})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">pref</span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">sum</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">pref</span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now we can build and update any value in our segment tree.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To answer an query, we can split the range \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[l, r]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" into \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" segments. To calculate the answer, we just repeatedly merge these segments until there is one left and take the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{pref}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">pref</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{pref}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">pref</span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n \\r\\nconst int N = 200010;\\r\\nconst int S = 1 << 18;\\r\\n \\r\\nint n, q, a[N];\\r\\n \\r\\nstruct node {\\r\\n\\tlong long sum, pref;\\r\\n\\tnode(long long sum, long long pref) : sum(sum), pref(pref) {}\\r\\n\\tnode(long long x = 0) : sum(x), pref(max(0LL, x)) {}\\r\\n\\tfriend node operator+(const node& a, const node& b) {\\r\\n\\t\\treturn {a.sum + b.sum, max(a.pref, a.sum + b.pref)};\\r\\n\\t}\\r\\n} tt[S << 1];\\r\\n \\r\\nvoid build(int k = 1, int l = 1, int r = n) {\\r\\n\\tif (l == r) { tt[k] = node(a[l]); return; }\\r\\n\\tint m = (l + r) >> 1;\\r\\n\\tbuild(k << 1, l, m);\\r\\n\\tbuild(k << 1 | 1, m + 1, r);\\r\\n\\ttt[k] = tt[k << 1] + tt[k << 1 | 1];\\r\\n}\\r\\n \\r\\nvoid update(int i, int x, int k = 1, int l = 1, int r = n) {\\r\\n\\tif (l == r) { tt[k] = node(x); return; }\\r\\n\\tint m = (l + r) >> 1;\\r\\n\\tif (i <= m) update(i, x, k << 1, l, m);\\r\\n\\telse update(i, x, k << 1 | 1, m + 1, r);\\r\\n\\ttt[k] = tt[k << 1] + tt[k << 1 | 1];\\r\\n}\\r\\n \\r\\nnode query(int ql, int qr, int k = 1, int l = 1, int r = n) {\\r\\n\\tif (ql > r || qr < l) return 0;\\r\\n\\tif (ql <= l && qr >= r) return tt[k];\\r\\n\\tint m = (l + r) >> 1;\\r\\n\\tnode q1 = query(ql, qr, k << 1, l, m);\\r\\n\\tnode q2 = query(ql, qr, k << 1 | 1, m + 1, r);\\r\\n\\treturn q1 + q2;\\r\\n}\\r\\n \\r\\nint main() {\\r\\n\\tscanf(\\\"%d%d\\\", &n, &q);\\r\\n\\tfor (int i = 1; i <= n; ++i)\\r\\n\\t\\tscanf(\\\"%d\\\", a + i);\\r\\n\\tbuild();\\r\\n\\tfor (int i = 0, t, x, y; i < q; ++i) {\\r\\n\\t\\tscanf(\\\"%d%d%d\\\", &t, &x, &y);\\r\\n\\t\\tif (t == 1) update(x, a[x] = y);\\r\\n\\t\\telse printf(\\\"%lld\\\\n\\\", query(x, y).pref);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---with-lazy-propagation\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---with-lazy-propagation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - With Lazy Propagation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use a segment tree with \", _jsx(_components.a, {\n        href: \"/plat/RURQ\",\n        children: \"lazy propagation\"\n      }), \" to solve this\\r\\nproblem. Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ps}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ps</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ps}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ps</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" be the sum of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a_1, a_2, \\\\dots a_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\\\"true\\\">,</mo><mo>‚Ä¶</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">a_1, a_2, \\\\dots a_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">‚Ä¶</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \". We can\\r\\nmaintain a segment tree consisting of the maximum \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ps}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ps</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ps}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6528em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ps</span></span></span></span></span>\"\n      }), \" in the range of\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[l,r]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l,r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To update the value at position \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \", we add \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x-a_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mo>‚àí</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">x-a_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">‚àí</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" to each of the values\\r\\nin the range \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[i,N]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo separator=\\\"true\\\">,</mo><mi>N</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[i,N]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To answer a query of type 2, our answer would be\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\max_{i \\\\in [a, b]}(\\\\texttt{ps}[i]) - \\\\texttt{ps}[{a-1}]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mrow><mi>max</mi><mo>‚Å°</mo></mrow><mrow><mi>i</mi><mo>‚àà</mo><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow></msub><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">ps</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">)</mo><mo>‚àí</mo><mtext mathvariant=\\\"monospace\\\">ps</mtext><mo stretchy=\\\"false\\\">[</mo><mrow><mi>a</mi><mo>‚àí</mo><mn>1</mn></mrow><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max_{i \\\\in [a, b]}(\\\\texttt{ps}[i]) - \\\\texttt{ps}[{a-1}]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1052em;vertical-align:-0.3552em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">max</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3448em;\\\"><span style=\\\"top:-2.5198em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mrel mtight\\\">‚àà</span><span class=\\\"mopen mtight\\\">[</span><span class=\\\"mord mathnormal mtight\\\">a</span><span class=\\\"mpunct mtight\\\">,</span><span class=\\\"mord mathnormal mtight\\\">b</span><span class=\\\"mclose mtight\\\">]</span></span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3552em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ps</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">‚àí</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ps</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">‚àí</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span></span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\n\\r\\ntemplate<class T> struct LSegTree {\\r\\n\\tint N; vector<T> t, lz; T U=-1e18;\\r\\n\\tT F(T i, T j) { return max(i,j); } LSegTree() {}\\r\\n\\tLSegTree(int N) : N(N), t(4*(N+1),U), lz(4*(N+1),0) {}\\r\\n\\tvoid pull(int i) { t[i] = F(t[i*2],t[i*2+1]); }\\r\\n\\tvoid push(int i, int l, int r) {\\r\\n\\t\\tt[i]+=lz[i];\\r\\n\\t\\tif(l!=r) lz[i*2]+=lz[i], lz[i*2+1]+=lz[i];\\r\\n\\t\\tlz[i]=0; }\\r\\n\\tvoid build(vector<ll> &v) { build(v,1,0,N); }\\r\\n\\tvoid build(vector<ll> &v, int i, int l, int r) {\\r\\n\\t\\tif(l==r) { t[i]=v[l]; return; } int m=(l+r)/2;\\r\\n\\t\\tbuild(v,i*2,l,m); build(v,i*2+1,m+1,r); pull(i);\\r\\n\\t}\\r\\n\\tvoid upd(int L, int R, T v) { upd(L,R,v,1,0,N); }\\r\\n\\tvoid upd(int L, int R, T v, int i, int l, int r) {\\r\\n\\t\\tpush(i,l,r); if(R<l || L>r) return;\\r\\n\\t\\tif(L<=l && R>=r) { lz[i]+=v; push(i,l,r); return; }\\r\\n\\t\\tint m=(l+r)/2; upd(L,R,v,i*2,l,m);\\r\\n\\t\\tupd(L,R,v,i*2+1,m+1,r); pull(i);\\r\\n\\t}\\r\\n\\tT qry(int L, int R) { return qry(L,R,1,0,N); }\\r\\n\\tT qry(int L, int R, int i, int l, int r) {\\r\\n\\t\\tpush(i,l,r); if(R<l || L>r) return U;\\r\\n\\t\\tif(L<=l && R>=r) return t[i]; int m=(l+r)/2;\\r\\n\\t\\treturn F(qry(L,R,i*2,l,m), qry(L,R,i*2+1,m+1,r));\\r\\n\\t}\\r\\n};\\r\\n\\r\\nint n, q;\\r\\nvector<ll> a, ps;\\r\\nLSegTree<ll> st;\\r\\n\\r\\nint main() {\\r\\n\\r\\n\\tcin >> n >> q;\\r\\n\\ta = ps = vector<ll>(n+1);\\r\\n\\tfor(int i=1; i<=n; i++) cin >> a[i];\\r\\n\\r\\n\\t// construct ps\\r\\n\\tps[0] = 0;\\r\\n\\tfor(int i=1; i<=n; i++) ps[i] = ps[i-1] + a[i];\\r\\n\\r\\n\\t// construct the segment tree\\r\\n\\tst = LSegTree<ll>(n);\\r\\n\\tst.build(ps);\\r\\n\\r\\n\\t// queries\\r\\n\\twhile(q--) {\\r\\n\\t\\tint t; cin >> t;\\r\\n\\t\\tif(t==1) {\\r\\n\\t\\t\\t// update a[i] to x\\r\\n\\t\\t\\tint i; ll x; cin >> i >> x;\\r\\n\\t\\t\\tst.upd(i, n, x-a[i]); a[i]=x;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// max ps in the range [a,b] - ps[a-1]\\r\\n\\t\\t\\tint a, b; cin >> a >> b;\\r\\n\\t\\t\\tcout << st.qry(a-1,b) - st.qry(a-1,a-1) << '\\\\n';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-2166","source":"CSES","title":"Prefix Sum Queries","author":"Dong Liu"},"parent":{"name":"cses-2166","relativePath":"cses-2166.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1 - Segment Tree","slug":"solution-1---segment-tree"},{"depth":2,"value":"Solution 2 - With Lazy Propagation","slug":"solution-2---with-lazy-propagation"}],"java":[{"depth":2,"value":"Solution 1 - Segment Tree","slug":"solution-1---segment-tree"},{"depth":2,"value":"Solution 2 - With Lazy Propagation","slug":"solution-2---with-lazy-propagation"}],"py":[{"depth":2,"value":"Solution 1 - Segment Tree","slug":"solution-1---segment-tree"},{"depth":2,"value":"Solution 2 - With Lazy Propagation","slug":"solution-2---with-lazy-propagation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"RURQ","title":"Range Update Range Query"}}}}]},"problemInfo":{"uniqueId":"cses-2166","url":"https://cses.fi/problemset/task/2166"}},"pageContext":{"id":"cses-2166"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}