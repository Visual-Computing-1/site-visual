{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-915-sleepy-cow-herding/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-915\", source = \"USACO Bronze 2019 February\", title = \"Sleepy Cow Herding\", author = \"Sathvik Chundru, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {LanguageSection, PySection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_herding_bronze_feb19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\n\\r\\nsys.stdin = open('herding.in', 'r')\\r\\nsys.stdout = open('herding.out', 'w')\\r\\na, b, c = map(int, input().split())\\r\\n\\r\\n# Best scenario: the three elements are already in order.\\r\\nif c == a + 2:\\r\\n\\tprint(0)\\r\\n\\\"\\\"\\\"\\r\\nIf there is a difference by 2, it can be solved in one move. \\r\\n3 5 9 -> 5 7 9\\r\\n\\\"\\\"\\\"\\r\\nelif b == a + 2 or c == b + 2:\\r\\n\\tprint(1)\\r\\n\\\"\\\"\\\"\\r\\nIt can always be solved in two moves by moving a -> c - 2 and b -> c - 1.\\r\\nIf there is less than one integer between the two elements, it'll be taken care\\r\\nof in the if statement above.\\r\\n\\\"\\\"\\\"\\r\\nelse:\\r\\n\\tprint(2)\\r\\n\\\"\\\"\\\"\\r\\nThe worst case is incrementing by 1 in the largest gap.\\r\\n3 5 9 -> 5 6 9 -> 6 7 9 -> 7 8 9\\r\\n\\\"\\\"\\\"\\r\\nprint(max(b - a, c - b) - 1)\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\nclass Main {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tScanner sc = new Scanner(new File(\\\"herding.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(new File(\\\"herding.out\\\"));\\r\\n\\t\\tint[] cows = new int[3];\\r\\n\\t\\tcows[0] = sc.nextInt();\\r\\n\\t\\tcows[1] = sc.nextInt();\\r\\n\\t\\tcows[2] = sc.nextInt();\\r\\n\\t\\tArrays.sort(cows);\\r\\n\\r\\n\\t\\tif (cows[2] == cows[0] + 2) {\\r\\n\\t\\t\\tpw.println(0); \\r\\n\\t\\t} else if (cows[1] == cows[0] + 2 || cows[2] == cows[1] + 2) {\\r\\n\\t\\t\\tpw.println(1); \\r\\n\\t\\t} else {\\r\\n\\t\\t\\tpw.println(2); \\r\\n\\t\\t}\\r\\n\\t\\tpw.println(Math.max(cows[1] - cows[0], cows[2] - cows[1]) - 1);\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <algorithm>\\r\\n#include <vector>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"herding.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"herding.out\\\", \\\"w\\\", stdout);\\r\\n\\t\\r\\n\\t// all cow locations\\r\\n\\tvector<int> a;\\r\\n\\tfor (int i = 0; i < 3; i++) {\\r\\n\\t\\tint b;\\r\\n\\t\\tcin >> b;\\r\\n\\t\\ta.push_back(b);\\r\\n\\t}\\r\\n\\tsort(a.begin(), a.end());\\r\\n\\r\\n\\t/*\\r\\n\\t * The minimum number of moves can only be 0, 1, or 2.\\r\\n\\t * 0 is if they're already consecutive,\\r\\n\\t * 1 is if there's a difference of 2 between any 2 numbers,\\r\\n\\t * and 2 is for all other cases.\\r\\n\\t */\\r\\n\\tif (a[0] == a[2] - 2) {\\r\\n\\t\\tcout << 0 << endl;\\r\\n\\t} else if ((a[1] == a[2] - 2) || (a[0] == a[1] - 2)) {\\r\\n\\t\\tcout << 1 << endl;\\r\\n\\t} else {\\r\\n\\t\\tcout << 2 << endl;\\r\\n\\t}\\r\\n\\t// max is equal to largest difference between end and middle, minus one.\\r\\n\\tcout << max(a[2] - a[1], a[1] - a[0]) - 1;\\r\\n}\\r\\n\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-915","source":"USACO Bronze 2019 February","title":"Sleepy Cow Herding","author":"Sathvik Chundru, Ryan Chou"},"parent":{"name":"usaco-915","relativePath":"usaco-915.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"ad-hoc","title":"Ad Hoc Problems"}}}}]},"problemInfo":{"uniqueId":"usaco-915","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=915"}},"pageContext":{"id":"usaco-915"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}