{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-power-products/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1225D\", source = \"CF\", title = \"Power Products\", author = \"Jesse Choe\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/70898\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log ^2N \\\\sqrt N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>N</mi><msqrt><mi>N</mi></msqrt><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log ^2N \\\\sqrt N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1767em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord sqrt\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.9267em;\\\"><span class=\\\"svg-align\\\" style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;padding-left:0.833em;\\\">N</span></span><span style=\\\"top:-2.8867em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"hide-tail\\\" style=\\\"min-width:0.853em;height:1.08em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\\nc69,-144,104.5,-217.7,106.5,-221\\nl0 -0\\nc5.3,-9.3,12,-14,20,-14\\nH400000v40H845.2724\\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1133em;\\\"><span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\nusing pi = pair<int, int>;\\r\\n\\r\\nint exponent;\\r\\n\\r\\n/**\\r\\n * We can define a prime factorization pair as the following:\\r\\n * (a, b mod k) represents a prime number (a) to the power of (b mod k).\\r\\n */\\r\\nvector<pi> factor(int number){\\r\\n\\tmap<int, int> factors;\\r\\n\\tfor (int i = 2; i * i <= number; i++) {\\r\\n\\t\\twhile (number % i == 0) {\\r\\n\\t\\t\\tnumber /= i;\\r\\n\\t\\t\\tfactors[i]++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (number > 1) {\\r\\n\\t\\tfactors[number]++;\\r\\n\\t}\\r\\n\\tvector<pi> prime_factorization;\\r\\n\\tfor (pi primes: factors) {\\r\\n\\t\\tif (primes.second % exponent > 0) {\\r\\n\\t\\t\\tprime_factorization.push_back({primes.first, primes.second % exponent});\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn prime_factorization;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Let's define the inverse of a prime factorization pair as follows:\\r\\n * Given the pair (a, b), where a represents the prime number and\\r\\n * b represents the exponent mod k, the inverse of (a, b) would be\\r\\n * precisely (a, k - b) since a ^ b * a ^ (k - b) = a ^ k.\\r\\n */\\r\\nvector<pi> find_factor_inverse(vector<pi> original){\\r\\n\\tint prime_num = original.size();\\r\\n\\tvector<pi> inverse(prime_num);\\r\\n\\tfor (int i = 0; i < prime_num; i++) {\\r\\n\\t\\tinverse[i].first = original[i].first;\\r\\n\\t\\tinverse[i].second = exponent - original[i].second;\\r\\n\\t}\\r\\n\\treturn inverse;\\r\\n}\\r\\n\\r\\nint main(){\\r\\n\\tint size;\\r\\n\\tcin >> size >> exponent;\\r\\n\\t/*\\r\\n\\t * Store the prime factorization pairs in an std::map\\r\\n\\t * so we can check how many pairs can be multiplied\\r\\n\\t * to a given pair so that it becomes some number x ^ k\\r\\n\\t * quickly.\\r\\n\\t */\\r\\n\\tmap<vector<pi>, int> factor_frequency;\\r\\n\\tvector<int> arr(size);\\r\\n\\tfor (int i = 0; i < size; i++) {\\r\\n\\t\\tcin >> arr[i];\\r\\n\\t\\tfactor_frequency[factor(arr[i])]++;\\r\\n\\t}\\r\\n\\tll num_of_pairs = 0;\\r\\n\\tfor (int i = 0; i < size; i++) {\\r\\n\\t\\tif (factor(arr[i]) == find_factor_inverse(factor(arr[i]))) {\\r\\n\\t\\t\\t// We don't want to count itself, so we do the frequency - 1\\r\\n\\t\\t\\tnum_of_pairs += (factor_frequency[factor(arr[i])] - 1);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tnum_of_pairs += factor_frequency[find_factor_inverse(factor(arr[i]))];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// We divide the number of pairs by 2 so that we don't overcount\\r\\n\\tcout << num_of_pairs / 2 << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1225D","source":"CF","title":"Power Products","author":"Jesse Choe"},"parent":{"name":"cf-1225D","relativePath":"cf-1225D.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"divisibility","title":"Divisibility"}}}}]},"problemInfo":{"uniqueId":"cf-1225D","url":"https://codeforces.com/contest/1225/problem/D"}},"pageContext":{"id":"cf-1225D"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}