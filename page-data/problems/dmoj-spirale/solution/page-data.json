{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/dmoj-spirale/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"dmoj-spirale\", source = \"DMOJ\", title = \"Spirale\", author = \"Oscar Garries\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(K*N*M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>K</mi><mo>∗</mo><mi>N</mi><mo>∗</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(K*N*M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∗</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∗</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can simulate the spiral around each starting position. For every cell in our solution\\r\\nwe will choose the minimum number that visit this cell.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\nusing ld = long double;\\r\\n\\r\\nvector<int> ui = {0, -1, 0, 1}, uj = {1, 0, -1, 0}, di = {0, -1, 0, 1}, dj = {-1, 0, 1, 0};\\r\\nint mat[50][50], cnt = 0, n, m, k, cur = 0;\\r\\n\\r\\nvoid fn (int x, int y) {\\r\\n\\tif (x < 0 || x >= m || y < 0 || y >= n) return;\\r\\n\\tcnt++;\\r\\n\\tmat[y][x] = min(mat[y][x], cur);\\r\\n}\\r\\n\\r\\nint main () {\\r\\n\\tcin >> n >> m >> k;\\r\\n\\tint x, y, z;\\r\\n\\tvector<int> ti, tj;\\r\\n\\tfor (int i = 0; i < 50; i++) {\\r\\n\\t\\tfor (int j = 0; j < 50; j++) {\\r\\n\\t\\t\\tmat[i][j] = 1e9;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < k; i++) {\\r\\n\\t\\tcin >> x >> y >> z;\\r\\n\\t\\tx--; y--;\\r\\n\\t\\tswap(x, y);\\r\\n\\t\\tif (z == 0) {\\r\\n\\t\\t\\tti = di;\\r\\n\\t\\t\\ttj = dj;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tti = ui;\\r\\n\\t\\t\\ttj = uj;\\r\\n\\t\\t}\\r\\n\\t\\tint kk = 1;\\r\\n\\t\\tint di = 1;\\r\\n\\t\\tint c = 2;\\r\\n\\t\\tcur = 1;\\r\\n\\t\\tcnt = 0;\\r\\n\\t\\tfn(x, y);\\r\\n\\t\\twhile (true) {\\r\\n\\t\\t\\tif (cnt >= n * m) break;\\r\\n\\t\\t\\tif (c == 0) {\\r\\n\\t\\t\\t\\tdi++;\\r\\n\\t\\t\\t\\tc = 2;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfor (int va = 0; va < di; va++) {\\r\\n\\t\\t\\t\\tx += tj[kk];\\r\\n\\t\\t\\t\\ty += ti[kk];\\r\\n\\t\\t\\t\\tcur++;\\r\\n\\t\\t\\t\\tfn(x, y);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tc--;\\r\\n\\t\\t\\tkk = (kk + 1) % 4;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\tcout << mat[i][j] << (j == m - 1 ? '\\\\n' : ' ');\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"dmoj-spirale","source":"DMOJ","title":"Spirale","author":"Oscar Garries"},"parent":{"name":"dmoj-spirale","relativePath":"dmoj-spirale.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"bronze-conclusion","title":"Additional Practice for USACO Bronze"}}}}]},"problemInfo":{"uniqueId":"dmoj-spirale","url":"https://dmoj.ca/problem/coci17c5p2"}},"pageContext":{"id":"dmoj-spirale"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}