{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1014-swapity-swapity-swap/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1014\", source = \"USACO Silver 2020 Feburary\", title = \"Swapity Swap Swap\", author = \"Qi Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {MATHSPAN, LanguageSection, JavaSection, HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_swap_silver_feb20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(NM)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(NM)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">NM</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(JavaSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"java-implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#java-implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Java Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class swapswap {\\r\\n\\tstatic int N, M, K;\\r\\n\\tstatic int[] f;\\r\\n\\tstatic int[] P, A;\\r\\n\\tstatic boolean[] vis;\\r\\n\\tstatic List<Integer> c = new ArrayList<>();\\r\\n\\tstatic Queue<Integer> q = new LinkedList<>();\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"swap\\\");\\r\\n\\t\\tN = io.nextInt();\\r\\n\\t\\tM = io.nextInt();\\r\\n\\t\\tK = io.nextInt();\\r\\n\\r\\n\\t\\tvis = new boolean[N+1];\\r\\n\\t\\tf = new int[N+1];\\r\\n\\t\\tP = new int[N+1];\\r\\n\\t\\tA = new int[N+1];\\r\\n\\r\\n\\t\\tfor (int i = 1; i < N + 1; i++) {\\r\\n\\t\\t\\tf[i] = i;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tint a = io.nextInt();\\r\\n\\t\\t\\tint b = io.nextInt();\\r\\n\\r\\n\\t\\t\\tfor (int j = a; j <= (a + b) / 2; j++) {\\r\\n\\t\\t\\t\\tint temp = f[j];\\r\\n\\t\\t\\t\\tf[j] = f[b-j+a];\\r\\n\\t\\t\\t\\tf[b-j+a] = temp;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor(int i = 1; i < N + 1; i++) {\\r\\n\\t\\t\\tP[f[i]] = i;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 1; i < N + 1; i++) {\\r\\n\\t\\t\\tif(!vis[i]) {\\r\\n\\t\\t\\t\\tdfs(i);\\r\\n\\r\\n\\t\\t\\t\\tint si = q.size();\\r\\n\\t\\t\\t\\tint ix = 0;\\r\\n\\t\\t\\t\\twhile (!q.isEmpty()) {\\r\\n\\t\\t\\t\\t\\tint np = (ix + K) % si;\\r\\n\\t\\t\\t\\t\\tA[c.get(np)] = q.poll();\\r\\n\\t\\t\\t\\t\\tix++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tc.clear();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 1; i < N + 1; i++) {\\r\\n\\t\\t\\tio.println(A[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void dfs(int n) {\\r\\n\\t\\tvis[n] = true;\\r\\n\\t\\tc.add(n);\\r\\n\\t\\tq.add(n);\\r\\n\\t\\tif(!vis[P[n]])\\r\\n\\t\\t\\tdfs(P[n]);\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class Kattio extends PrintWriter {\\r\\n\\t\\tprivate BufferedReader r;\\r\\n\\t\\tprivate StringTokenizer st;\\r\\n\\r\\n\\t\\t// standard input\\r\\n\\t\\tpublic Kattio() { this(System.in,System.out); }\\r\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\r\\n\\t\\t\\tsuper(o);\\r\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\r\\n\\t\\t}\\r\\n\\t\\t// USACO-style file input\\r\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\r\\n\\t\\t\\tsuper(new FileWriter(problemName+\\\".out\\\"));\\r\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName+\\\".in\\\"));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// returns null if no more input\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\r\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\r\\n\\t\\t\\t\\treturn st.nextToken();\\r\\n\\t\\t\\t} catch (Exception e) {}\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\r\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\r\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1014","source":"USACO Silver 2020 Feburary","title":"Swapity Swap Swap","author":"Qi Wang"},"parent":{"name":"usaco-1014","relativePath":"usaco-1014.mdx"},"toc":{"cpp":[],"java":[{"depth":2,"value":"Java Implementation","slug":"java-implementation"}],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":null}}]},"problemInfo":{"uniqueId":"usaco-1014","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1014"}},"pageContext":{"id":"usaco-1014"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}