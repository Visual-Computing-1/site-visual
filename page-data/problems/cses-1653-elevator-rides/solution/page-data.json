{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1653-elevator-rides/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1653\", source = \"CSES\", title = \"Elevator Rides\", author = \"Sofia Yang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/CPH.pdf#page=112\",\n        children: \"CPH Solution (10.5)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\cdot 2^N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>⋅</mo><msup><mn>2</mn><mi>N</mi></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\cdot 2^N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0913em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8413em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class ElevatorRides {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint people = io.nextInt();\\r\\n\\t\\tint maxWeight = io.nextInt();\\r\\n\\r\\n\\t\\tint[] weight = new int[people];\\r\\n\\t\\tfor (int i = 0; i < people; i++) {\\r\\n\\t\\t\\tweight[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * dp[bitmask] is the current best state\\r\\n\\t\\t * in terms of the number of rides used, and weight used on the last ride.\\r\\n\\t\\t * The bitmask is used to represent whether the people have used the elevator.\\r\\n\\t\\t * If the ith bit is set, it means the ith person has used the elevator.\\r\\n\\t\\t */\\r\\n\\t\\tState[] dp = new State[1 << people];\\r\\n\\t\\tdp[0] = new State(1, 0);\\r\\n\\r\\n\\t\\tfor (int mask = 1; mask < (1 << people); mask++) {\\r\\n\\t\\t\\tdp[mask] = new State(people + 1, maxWeight + 1);\\r\\n\\t\\t\\tfor (int i = 0; i < people; i++) {\\r\\n\\t\\t\\t\\t// the ith person has used the elevator.\\r\\n\\t\\t\\t\\tif ((mask & (1 << i)) > 0) {\\r\\n\\t\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t\\t * The previous state from when the\\r\\n\\t\\t\\t\\t\\t * ith person has not used the elevator.\\r\\n\\t\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\t\\tint prev = mask ^ (1 << i);\\r\\n\\t\\t\\t\\t\\tState cur = new State(dp[prev].rides, dp[prev].weight);\\r\\n\\t\\t\\t\\t\\t// We need to use a new ride.\\r\\n\\t\\t\\t\\t\\tif (cur.weight + weight[i] > maxWeight) {\\r\\n\\t\\t\\t\\t\\t\\tcur.rides++;\\r\\n\\t\\t\\t\\t\\t\\tcur.weight = Integer.min(weight[i], cur.weight);\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t// Add the weight of the ith person to the current ride.\\r\\n\\t\\t\\t\\t\\t\\tcur.weight += weight[i];\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t// Check if it is better than the original.\\r\\n\\t\\t\\t\\t\\tif (cur.compareTo(dp[mask]) < 0) {\\r\\n\\t\\t\\t\\t\\t\\tdp[mask] = cur;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// Result when all people have used the elevator.\\r\\n\\t\\tio.println(dp[(1 << people) - 1].rides);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t// State (i,j) means that we're on the ith ride, and we've used up j weight.\\r\\n\\tstatic class State {\\r\\n\\t\\tpublic int rides, weight;\\r\\n\\r\\n\\t\\tpublic State(int rides, int weight) {\\r\\n\\t\\t\\tthis.rides = rides;\\r\\n\\t\\t\\tthis.weight = weight;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic int compareTo(State oState) {\\r\\n\\t\\t\\tif (this.rides == oState.rides) {\\r\\n\\t\\t\\t\\treturn Integer.compare(this.weight, oState.weight);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn Integer.compare(this.rides, oState.rides);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\nint main() {\\r\\n\\tint people, maxWeight;\\r\\n\\tcin >> people >> maxWeight;\\r\\n\\tvector<int> weight(people);\\r\\n\\tfor (int& i : weight)\\r\\n\\t\\tcin >> i;\\r\\n\\r\\n\\tvector<pair<int, int>> dp(1 << people, { people + 1, maxWeight + 1 });\\r\\n\\tdp[0] = make_pair(1, 0);\\r\\n\\t/* \\r\\n\\t * Loop through all bitmasks.\\r\\n\\t * The bitmasks represent whether each person has used the elevator or not.\\r\\n\\t * If the ith bit is set, this means the ith person has used the elevator.\\r\\n\\t */\\r\\n\\tfor (int mask = 1; mask < (1 << people); mask++) {\\r\\n\\t\\tfor (int i = 0; i < people; i++)\\r\\n\\t\\t\\t// The ith person has used the elevator.\\r\\n\\t\\t\\tif (mask & (1 << i)) {\\r\\n\\t\\t\\t\\tauto prev = dp[mask ^ (1 << i)];\\r\\n\\t\\t\\t\\tint numRides = prev.first;\\r\\n\\t\\t\\t\\tint totalWeight = prev.second;\\r\\n\\t\\t\\t\\t// We need to use a new ride.\\r\\n\\t\\t\\t\\tif (totalWeight + weight[i] <= maxWeight)\\r\\n\\t\\t\\t\\t\\ttotalWeight += weight[i];\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t// Add the weight of the ith person to the current ride.\\r\\n\\t\\t\\t\\t\\tnumRides++;\\r\\n\\t\\t\\t\\t\\ttotalWeight = weight[i];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// Update if it is better than the original.\\r\\n\\t\\t\\t\\tdp[mask] = min(dp[mask], make_pair(numRides, totalWeight));\\r\\n\\t\\t\\t}\\r\\n\\t}\\r\\n\\t// Result when all people have used the elevator.\\r\\n\\tcout << dp[(1 << people) - 1].first;\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1653","source":"CSES","title":"Elevator Rides","author":"Sofia Yang"},"parent":{"name":"cses-1653","relativePath":"cses-1653.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dp-bitmasks","title":"Bitmask DP"}}}}]},"problemInfo":{"uniqueId":"cses-1653","url":"https://cses.fi/problemset/task/1653"}},"pageContext":{"id":"cses-1653"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}