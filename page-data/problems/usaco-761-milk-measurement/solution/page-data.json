{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-761-milk-measurement/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-761\", source = \"USACO Bronze 2017 December\", title = \"Milk Measurement\", author = \"Ryan Chou, Mithil Srungarapu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_measurement_bronze_dec17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++ and Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since there are only \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \" cows and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N \\\\leq 1000\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N \\\\leq 1000</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8193em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1000</span></span></span></span>\"\n      }), \", we can sort all of the entries\\r\\nby date and update the selected cow's milk value for each entry.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tfreopen(\\\"measurement.in\\\",\\\"r\\\",stdin);\\r\\n\\tfreopen(\\\"measurement.out\\\",\\\"w\\\",stdout);\\r\\n\\r\\n\\t// Taking input\\r\\n\\tint num_of_inputs;\\r\\n\\tcin >> num_of_inputs;\\r\\n\\tvector<tuple<int, string, int>> list;\\r\\n\\tfor (int i = 0; i < num_of_inputs; i++)\\r\\n\\t{\\r\\n\\t\\tint temp1;\\r\\n\\t\\tstring temp2;\\r\\n\\t\\tint temp3;\\r\\n\\t\\tcin >> temp1 >> temp2 >> temp3;\\r\\n\\t\\tlist.push_back(make_tuple(temp1, temp2, temp3));\\r\\n\\t}\\r\\n\\t/*\\r\\n\\t * Sort list by first column.\\r\\n\\t * More information on sorting can be found on https://usaco.guide/bronze/intro-sorting\\r\\n\\t */\\r\\n\\tsort(list.begin(), list.end());\\r\\n\\t/*\\r\\n\\t * Map which holds the current production of each cow.\\r\\n\\t * In the future, we will change the production values based on input.\\r\\n\\t */\\r\\n\\tmap<string, int> cows = {\\r\\n\\t\\t{\\\"Bessie\\\", 7},\\r\\n\\t\\t{\\\"Elsie\\\", 7},\\r\\n\\t\\t{\\\"Mildred\\\", 7}};\\r\\n\\t/*\\r\\n\\t * Store current winner inside a pair,\\r\\n\\t * noting the highest number and a string with cow names on the award.\\r\\n\\t */\\r\\n\\tpair<int, string> winner;\\r\\n\\twinner.first = 7;\\r\\n\\t/*\\r\\n\\t * Using a string, we can efficiently store current winners\\r\\n\\t * and easily compare them to past winners.\\r\\n\\t */\\r\\n\\twinner.second = \\\"BessieElsieMildred\\\";\\r\\n\\t// Variable that will detect how many times the display changes\\r\\n\\tint display_changes = 0;\\r\\n\\t/*\\r\\n\\t * Iterate through number of entries in list.\\r\\n\\t * Remember, list was sorted earlier,\\r\\n\\t * meaning we don't need to worry about order of events.\\r\\n\\t */\\r\\n\\tfor (int i = 0; i < num_of_inputs; i++)\\r\\n\\t{\\r\\n\\t\\t// Change production values based on input as mentioned previously.\\r\\n\\t\\tcows[get<1>(list[i])] += get<2>(list[i]);\\r\\n\\t\\tif (get<1>(list[i]) == \\\"Bessie\\\")\\r\\n\\t\\t{\\r\\n\\t\\t\\tcows[\\\"Bessie\\\"] += get<2>(list[i]);\\r\\n\\t\\t}\\r\\n\\t\\telse if (get<1>(list[i]) == \\\"Mildred\\\")\\r\\n\\t\\t{\\r\\n\\t\\t\\tcows[\\\"Mildred\\\"] += get<2>(list[i]);\\r\\n\\t\\t}\\r\\n\\t\\telse if (get<1>(list[i]) == \\\"Elsie\\\")\\r\\n\\t\\t{\\r\\n\\t\\t\\tcows[\\\"Elsie\\\"] += get<2>(list[i]);\\r\\n\\t\\t}\\r\\n\\t\\t// Saving older values to compare them to new ones later\\r\\n\\t\\tpair<int, string> original;\\r\\n\\t\\toriginal.first = winner.first;\\r\\n\\t\\toriginal.second = winner.second;\\r\\n\\t\\twinner.second = \\\"\\\";\\r\\n\\t\\t// By wrapping each of the function inputs inside of brackets, we can include more than 2 function inputs for the max function.\\r\\n\\t\\twinner.first = max({cows[\\\"Bessie\\\"], cows[\\\"Mildred\\\"], cows[\\\"Elsie\\\"]});\\r\\n\\t\\t/*\\r\\n\\t\\t * Adjust the winner string to see who the new winner is.\\r\\n\\t\\t * Because multiple cows are stored in winner.second, no to worry about ties.\\r\\n\\t\\t */\\r\\n\\t\\tif (cows[\\\"Bessie\\\"] == winner.first)\\r\\n\\t\\t{\\r\\n\\t\\t\\twinner.second += \\\"Bessie\\\";\\r\\n\\t\\t}\\r\\n\\t\\tif (cows[\\\"Elsie\\\"] == winner.first)\\r\\n\\t\\t{\\r\\n\\t\\t\\twinner.second += \\\"Elsie\\\";\\r\\n\\t\\t}\\r\\n\\t\\tif (cows[\\\"Mildred\\\"] == winner.first)\\r\\n\\t\\t{\\r\\n\\t\\t\\twinner.second += \\\"Mildred\\\";\\r\\n\\t\\t}\\r\\n\\t\\t// Check if old winner is same as new winner.\\r\\n\\t\\tif (original.second != winner.second)\\r\\n\\t\\t{\\r\\n\\t\\t\\tdisplay_changes++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << display_changes << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\nsys.stdin = open('measurement.in', 'r')\\r\\nsys.stdout = open('measurement.out', 'w')\\r\\n\\r\\nn = int(input())\\r\\nINIT_MILK = 7\\r\\nlogs = []\\r\\n# Every cow starts off producing 7 gallons of milk each.\\r\\nbessie, elsie, mildred = INIT_MILK, INIT_MILK, INIT_MILK\\r\\n\\r\\n\\\"\\\"\\\"\\r\\nSince all cows produce the same amount of milk,\\r\\nthey'll all be on the display at the beginning.\\r\\n\\\"\\\"\\\"\\r\\ndisplay = {'b', 'e', 'm'}\\r\\n\\r\\n\\\"\\\"\\\"\\r\\nThis will store the past display,\\r\\nso we can judge whether FJ needs to change his display.\\r\\n\\\"\\\"\\\"\\r\\ntmp_display = {}\\r\\nans = 0\\r\\nfor _ in range(n):\\r\\n\\ttime, name, addition = input().split()\\r\\n\\tlogs.append([int(time), name, int(addition)])\\r\\n\\r\\nlogs.sort()\\r\\nfor i in logs:\\r\\n\\tif i[1] == 'Bessie':\\r\\n\\t\\tbessie += i[2]\\r\\n\\telif i[1] == 'Elsie':\\r\\n\\t\\telsie += i[2]\\r\\n\\telif i[1] == \\\"Mildred\\\":\\r\\n\\t\\tmildred += i[2]\\r\\n\\t# Find the maximum amount of milk that's being produced.\\r\\n\\tcurmax = max(bessie, max(elsie, mildred))\\r\\n\\r\\n\\t# Duplicate the current display, this will be used to\\r\\n\\t# see whether the top cows stay the same.\\r\\n\\ttmp_display = display.copy()\\r\\n\\r\\n\\t# If Bessie is producing the maximum,\\r\\n\\tif bessie == curmax:\\r\\n\\t# add her to the display.\\r\\n\\t\\tdisplay.add('b')\\r\\n\\telif 'b' in display:\\r\\n\\t\\t# If she isn't producing the maximum and she's currently\\r\\n\\t\\t# in the display, remove her.\\r\\n\\t\\tdisplay.remove('b')\\r\\n\\r\\n\\t# Same for Elsie.\\r\\n\\tif elsie == curmax:\\r\\n\\t\\tdisplay.add('e')\\r\\n\\telif 'e' in display:\\r\\n\\t\\tdisplay.remove('e')\\r\\n\\r\\n\\t# Same for Mildred.\\r\\n\\tif mildred == curmax:\\r\\n\\t\\tdisplay.add('m')\\r\\n\\telif 'm' in display:\\r\\n\\t\\tdisplay.remove('m')\\r\\n\\r\\n\\t# If the display has changed, FJ needs to update it.\\r\\n\\tif sorted(list(display)) != sorted(list(tmp_display)):\\r\\n\\t\\tans += 1\\r\\nprint(ans)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-761","source":"USACO Bronze 2017 December","title":"Milk Measurement","author":"Ryan Chou, Mithil Srungarapu"},"parent":{"name":"usaco-761","relativePath":"usaco-761.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"simulation","title":"Simulation"}}}}]},"problemInfo":{"uniqueId":"usaco-761","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=761"}},"pageContext":{"id":"usaco-761"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}