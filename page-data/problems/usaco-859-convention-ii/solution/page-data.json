{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-859-convention-ii/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-859\", source = \"USACO Silver 2018 December\", title = \"Convention II\", author = \"Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_convention2_silver_dec18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Due to the low bounds on \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \", we can naively simulate the events. We'll sort by arrival time to process the cows in order.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <cstdio>\\r\\n#include <algorithm>\\r\\n#include <vector>\\r\\n#include <set>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"convention2.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"convention2.out\\\", \\\"w\\\", stdout);\\r\\n\\t\\r\\n\\tint n;\\r\\n\\tvector<vector<int>> cows;\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tint start, duration;\\r\\n\\t\\tcin >> start >> duration;\\r\\n\\t\\tcows.push_back({i, start, duration});\\r\\n\\t}\\r\\n\\t// sort by arrival time.\\r\\n\\tsort(cows.begin(), cows.end(), [](const vector<int> &a, const vector<int> &b) {\\r\\n\\t\\treturn a[1] < b[1];\\r\\n\\t});\\r\\n\\r\\n\\tint time = 0, cur = 0, ans = 0;\\r\\n\\t\\r\\n\\t// sorted by priority so that the highest seniority starts eating first\\r\\n\\tset<vector<int>> waiting;\\r\\n\\t// as long as we haven't processed all cows or there are still cows waiting\\r\\n\\twhile (cur < n || waiting.size() > 0) {\\r\\n\\t\\t// this cow can be processed.\\r\\n\\t\\tif (cur < n && cows[cur][1] <= time) {\\r\\n\\t\\t\\twaiting.insert(cows[cur]);\\r\\n\\t\\t\\tcur++;\\r\\n\\t\\t// no cow waiting, skip to the next cow.\\r\\n\\t\\t} else if (waiting.size() == 0) {\\r\\n\\t\\t\\t// set time to the ending time of the next cow.\\r\\n\\t\\t\\ttime = cows[cur][1] + cows[cur][2];\\r\\n\\t\\t\\tcur++;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// process the next cow\\r\\n\\t\\t\\tvector<int> next = *waiting.begin();\\r\\n\\t\\t\\tans = max(ans, time - next[1]);\\r\\n\\r\\n\\t\\t\\t// set the time to when this cow finishes.\\r\\n\\t\\t\\ttime += next[2];\\r\\n\\t\\t\\twaiting.erase(waiting.begin());\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << ans << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-859","source":"USACO Silver 2018 December","title":"Convention II","author":"Ryan Chou"},"parent":{"name":"usaco-859","relativePath":"usaco-859.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorted-sets","title":"More Operations on Sorted Sets"}}}}]},"problemInfo":{"uniqueId":"usaco-859","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=859"}},"pageContext":{"id":"usaco-859"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}