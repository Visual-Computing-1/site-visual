{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/apio-2018duathlon/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"apio-18-duathlon\", source = \"APIO 2018\", title = \"Duathlon\", author = \"Andi Qu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"tldr\",\n      children: [_jsx(_components.a, {\n        href: \"#tldr\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"TL;DR\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Split the graph into its biconnected components. Then use complementary counting\\r\\nand subtract the number of bad triples from the total.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"intuition\",\n      children: [_jsx(_components.a, {\n        href: \"#intuition\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Intuition\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instead of finding the number of good triples, find the number of bad triples\\r\\nand subtract that from the number of all triples. This is called \", _jsx(_components.strong, {\n        children: \"complementary\\r\\ncounting\"\n      }), \" and is useful in many counting problems.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"What makes a bad triple? A triple \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(S, C, F)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>S</mi><mo separator=\\\"true\\\">,</mo><mi>C</mi><mo separator=\\\"true\\\">,</mo><mi>F</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(S, C, F)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">F</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" is bad if the paths from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"S\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n      }), \" to\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"C\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\\\"application/x-tex\\\">C</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"C\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\\\"application/x-tex\\\">C</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"F\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\\\"application/x-tex\\\">F</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">F</span></span></span></span>\"\n      }), \" both pass through some bottleneck.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This suggests that our solution will involve articulation points. Since this\\r\\nproblem is about reachability, we'll probably use biconnected components as\\r\\nwell.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"splitting-into-bccs\",\n      children: [_jsx(_components.a, {\n        href: \"#splitting-into-bccs\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Splitting into BCCs\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Imagine we have a second graph where:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Each biconnected component is also a node.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Each node in the original graph has an edge going to all biconnected\\r\\ncomponents it's a part of.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"There are no other edges.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Notice how this graph is a tree - if there is a cycle, then the biconnected\\r\\ncomponents that are part of that cycle form a larger biconnected component by\\r\\ndefinition.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"counting-the-bad-triples\",\n      children: [_jsx(_components.a, {\n        href: \"#counting-the-bad-triples\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Counting the Bad Triples\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Consider some articulation point \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n      }), \" that is part of some BCC \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we remove \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n      }), \" from the graph, we are left with the smaller tree containing\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \" and several other smaller trees.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"S\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"F\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\\\"application/x-tex\\\">F</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">F</span></span></span></span>\"\n      }), \" are both in the same smaller tree that doesn't contain \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \", then\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"C\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\\\"application/x-tex\\\">C</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span></span></span></span>\"\n      }), \" can't be in the smaller tree containing \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The sum of such pairs \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(S, F)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>S</mi><mo separator=\\\"true\\\">,</mo><mi>F</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(S, F)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">F</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" is thus the number of bad triples each pair\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(B, P)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>B</mi><mo separator=\\\"true\\\">,</mo><mi>P</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(B, P)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" contributes to the total number of bad triples.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can do a DFS to count these pairs.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"complexity\",\n      children: [_jsx(_components.a, {\n        href: \"#complexity\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Complexity\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Time: \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N + M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N + M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Memory: \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N + M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N + M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\n#define FOR(i, x, y) for (int i = x; i < y; i++)\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nll n, m, N, ans, sz[200001];\\r\\nvector<int> graph[100001], bcc_graph[200001], stck;\\r\\nint low[100001], tin[100001], timer = 1, bccs = 1;\\r\\n\\r\\nvoid dfs(int node, int parent = 0) {\\r\\n\\tlow[node] = tin[node] = timer++;\\r\\n\\tstck.push_back(node);\\r\\n\\tN++;\\r\\n\\tfor (int i : graph[node]) if (i != parent) {\\r\\n\\t\\tif (tin[i]) low[node] = min(low[node], tin[i]);\\r\\n\\t\\telse {\\r\\n\\t\\t\\tdfs(i, node);\\r\\n\\t\\t\\tlow[node] = min(low[node], low[i]);\\r\\n\\t\\t\\tif (low[i] >= tin[node]) {\\r\\n\\t\\t\\t\\tbcc_graph[node].push_back(n + bccs);\\r\\n\\t\\t\\t\\twhile (!bcc_graph[n + bccs].size() || bcc_graph[n + bccs].back() != i) {\\r\\n\\t\\t\\t\\t\\tbcc_graph[n + bccs].push_back(stck.back());\\r\\n\\t\\t\\t\\t\\tstck.pop_back();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbccs++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid dfs2(int node) {\\r\\n\\tsz[node] = (node <= n);\\r\\n\\tfor (int i : bcc_graph[node]) {\\r\\n\\t\\tdfs2(i);\\r\\n\\t\\tsz[node] += sz[i];\\r\\n\\t\\tif (node > n) ans -= bcc_graph[node].size() * sz[i] * (sz[i] - 1);\\r\\n\\t}\\r\\n\\tif (node > n) ans -= bcc_graph[node].size() * (N - sz[node]) * (N - sz[node] - 1);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\tcin >> n >> m;\\r\\n\\twhile (m--) {\\r\\n\\t\\tint u, v;\\r\\n\\t\\tcin >> u >> v;\\r\\n\\t\\tgraph[u].push_back(v);\\r\\n\\t\\tgraph[v].push_back(u);\\r\\n\\t}\\r\\n\\tFOR(i, 1, n + 1) if (!tin[i]) {\\r\\n\\t\\tN = 0;\\r\\n\\t\\tdfs(i);\\r\\n\\t\\tans += N * (N - 1) * (N - 2);\\r\\n\\t\\tdfs2(i);\\r\\n\\t}\\r\\n\\tcout << ans;\\r\\n\\treturn 0;\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"apio-18-duathlon","source":"APIO 2018","title":"Duathlon","author":"Andi Qu"},"parent":{"name":"apio-18-duathlon","relativePath":"apio-18-duathlon.mdx"},"toc":{"cpp":[{"depth":2,"value":"TL;DR","slug":"tldr"},{"depth":2,"value":"Intuition","slug":"intuition"},{"depth":2,"value":"Splitting into BCCs","slug":"splitting-into-bccs"},{"depth":2,"value":"Counting the Bad Triples","slug":"counting-the-bad-triples"},{"depth":2,"value":"Complexity","slug":"complexity"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"TL;DR","slug":"tldr"},{"depth":2,"value":"Intuition","slug":"intuition"},{"depth":2,"value":"Splitting into BCCs","slug":"splitting-into-bccs"},{"depth":2,"value":"Counting the Bad Triples","slug":"counting-the-bad-triples"},{"depth":2,"value":"Complexity","slug":"complexity"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"TL;DR","slug":"tldr"},{"depth":2,"value":"Intuition","slug":"intuition"},{"depth":2,"value":"Splitting into BCCs","slug":"splitting-into-bccs"},{"depth":2,"value":"Counting the Bad Triples","slug":"counting-the-bad-triples"},{"depth":2,"value":"Complexity","slug":"complexity"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"BCC-2CC","title":"BCCs and 2CCs"}}}}]},"problemInfo":{"uniqueId":"apio-18-duathlon","url":"https://oj.uz/problem/view/APIO18_duathlon"}},"pageContext":{"id":"apio-18-duathlon"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}