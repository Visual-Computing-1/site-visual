{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-santas-bot/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1279D\", source = \"CF\", title = \"Santa's Bot\", author = \"Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Info: _missingComponent(\"Info\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, Info, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/72577\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Clarification: The optimization the author uses is this property of fractions\\r\\nmodulo \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"998244353\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>998244353</mn></mrow><annotation encoding=\\\"application/x-tex\\\">998244353</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">998244353</span></span></span></span>\"\n      }), \" is this:\"]\n    }), \"\\n\", _jsx(Info, {\n      children: _jsxs(_components.p, {\n        children: [\"Say we had two fractions \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x=\\\\frac{a}{b}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mi>a</mi><mi>b</mi></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">x=\\\\frac{a}{b}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0404em;vertical-align:-0.345em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.6954em;\\\"><span style=\\\"top:-2.655em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">b</span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">a</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"y=\\\\frac{c}{d}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mi>c</mi><mi>d</mi></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">y=\\\\frac{c}{d}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0404em;vertical-align:-0.345em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.6954em;\\\"><span style=\\\"top:-2.655em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">d</span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">c</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>\"\n        }), \". Let \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"f\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\\\"application/x-tex\\\">f</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span></span></span></span>\"\n        }), \" be a\\r\\nfunction that calculates the \\\"total\\\" of a fraction (that is, the numerator times\\r\\nthe modular inverse of the denominator). To find \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"f(x + y)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>f</mi><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">f(x + y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \", we can simply\\r\\ncalculate \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"f(x) + f(y)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>f</mi><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo stretchy=\\\"false\\\">)</mo><mo>+</mo><mi>f</mi><mo stretchy=\\\"false\\\">(</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">f(x) + f(y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \". Thus, to find the total of the overall probability, we\\r\\ncan just add up all the totals of all the smaller probabilities, keeping a\\r\\nrunning sum as we go.\"]\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <unordered_map>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nconstexpr int MOD = 998244353;\\r\\n\\r\\n// sauce: /gold/modular\\r\\nlong long pow_mod(long long base, long long exp) {\\r\\n\\tbase %= MOD;\\r\\n\\tlong long result = 1;\\r\\n\\twhile (exp > 0) {\\r\\n\\t\\tif (exp % 2 == 1) //if n is odd\\r\\n\\t\\t\\tresult = result * base % MOD;\\r\\n\\t\\tbase = base * base % MOD;\\r\\n\\t\\texp /= 2; //divide by two\\r\\n\\t}\\r\\n\\treturn result;\\r\\n}\\r\\n\\r\\nlong long mod_inv(long long n) {  // sauce is same as above\\r\\n\\treturn pow_mod(n, MOD - 2);\\r\\n}\\r\\n\\r\\nlong long frac_total(long long num, long long denom) {\\r\\n\\treturn ((num % MOD) * mod_inv(denom)) % MOD;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint child_num;\\r\\n\\tstd::cin >> child_num;\\r\\n\\tvector<vector<int>> children(child_num);\\r\\n\\tstd::unordered_map<int, int> wanter_nums;\\r\\n\\tfor (int c = 0; c < child_num; c++) {\\r\\n\\t\\tint wanted_num;\\r\\n\\t\\tstd::cin >> wanted_num;\\r\\n\\t\\tfor (int i = 0; i < wanted_num; i++) {\\r\\n\\t\\t\\tint item;\\r\\n\\t\\t\\tstd::cin >> item;\\r\\n\\t\\t\\twanter_nums[item]++;\\r\\n\\t\\t\\tchildren[c].push_back(item);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tlong long prob = 0;\\r\\n\\tfor (const vector<int>& c : children) {\\r\\n\\t\\tfor (const int& i : c) {\\r\\n\\t\\t\\tint num = 1 * 1 * wanter_nums[i];\\r\\n\\t\\t\\tlong long denom = child_num * c.size() * child_num;\\r\\n\\t\\t\\tprob = (prob + frac_total(num, denom)) % MOD;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << prob << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.BufferedReader;\\r\\nimport java.io.IOException;\\r\\nimport java.io.InputStreamReader;\\r\\nimport java.util.Arrays;\\r\\nimport java.util.HashMap;\\r\\n\\r\\n/**\\r\\n * https://codeforces.com/problemset/problem/1279/D\\r\\n * 2\\r\\n * 2 2 1\\r\\n * 1 1 should output 124780545\\r\\n */\\r\\npublic class SantaBot {\\r\\n\\tprivate static final int MOD = 998244353;\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tint childNum = Integer.parseInt(read.readLine());\\r\\n\\r\\n\\t\\tint[][] children = new int[childNum][];\\r\\n\\t\\tHashMap<Integer, Integer> wanterNum = new HashMap<>();\\r\\n\\t\\tfor (int c = 0; c < childNum; c++) {\\r\\n\\t\\t\\tint[] raw = Arrays.stream(read.readLine().split(\\\" \\\")).mapToInt(Integer::parseInt).toArray();\\r\\n\\t\\t\\tchildren[c] = Arrays.copyOfRange(raw, 1, raw.length);\\r\\n\\t\\t\\tfor (int i : children[c]) {\\r\\n\\t\\t\\t\\twanterNum.put(i, wanterNum.getOrDefault(i, 0) + 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlong probTotal = 0;\\r\\n\\t\\tfor (int[] c : children) {\\r\\n\\t\\t\\tlong denom = (long) childNum * c.length * childNum;\\r\\n\\t\\t\\tfor (int i : c) {\\r\\n\\t\\t\\t\\tint num = wanterNum.get(i);\\r\\n\\t\\t\\t\\tprobTotal = (probTotal + fracTotal(num, denom)) % MOD;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(probTotal);\\r\\n\\t}\\r\\n\\r\\n\\tprivate static long fracTotal(long num, long denom) {\\r\\n\\t\\treturn ((num % MOD) * modInv(denom)) % MOD;\\r\\n\\t}\\r\\n\\r\\n\\tprivate static long modInv(long n) {\\r\\n\\t\\treturn pow(n, MOD - 2);\\r\\n\\t}\\r\\n\\r\\n\\t// copied from the cses exponentiation solution here: /gold/modular\\r\\n\\tprivate static long pow(long base, long exp) {\\r\\n\\t\\tif (exp < 0) {\\r\\n\\t\\t\\tthrow new IllegalArgumentException(\\\"sorry i can't take exponents lower than 0\\\");\\r\\n\\t\\t}\\r\\n\\t\\tbase %= MOD;\\r\\n\\t\\tlong res = 1;\\r\\n\\t\\twhile (exp > 0) {\\r\\n\\t\\t\\tif (exp % 2 == 1) {\\r\\n\\t\\t\\t\\tres = res * base % MOD;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tbase = base * base % MOD;\\r\\n\\t\\t\\texp /= 2;\\r\\n\\t\\t}\\r\\n\\t\\treturn res;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1279D","source":"CF","title":"Santa's Bot","author":"Kevin Sheng"},"parent":{"name":"cf-1279D","relativePath":"cf-1279D.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"modular","title":"Modular Arithmetic"}}}}]},"problemInfo":{"uniqueId":"cf-1279D","url":"https://codeforces.com/contest/1279/problem/D"}},"pageContext":{"id":"cf-1279D"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}