{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-760-the-bovine-shuffle/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-760\", source = \"USACO Bronze 2017 December\", title = \"The Bovine Shuffle\", author = \"Sathvik Chundru, Jesse Choe, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, PySection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_shuffle_bronze_dec17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++ and Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \"th cow moves to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">a_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" after one shuffle, then the cow at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">a_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" was at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" one shuffle ago.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\n\\r\\nsys.stdin = open(\\\"shuffle.in\\\", 'r')\\r\\nsys.stdout = open(\\\"shuffle.out\\\", 'w')\\r\\n\\r\\nn = int(input())\\r\\nshuffle = list(map(int, input().split()))\\r\\nids = list(map(int, input().split()))\\r\\npast_order = [0] * n\\r\\n\\r\\n# three shuffles.\\r\\nfor _ in range(3):\\r\\n\\tfor i in range(n):\\r\\n\\t\\tpast_order[i] = ids[shuffle[i] - 1]\\r\\n\\tids = past_order.copy()\\r\\n\\t\\r\\nfor i in past_order:\\r\\n\\tprint(i)\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\nconst int MAX_N = 100;\\r\\n\\r\\n// Instantiating swapOrder array as global for easy access for custom find function \\r\\nint swapOrder[MAX_N];\\r\\nint cowID[MAX_N];\\r\\n\\r\\n/*\\r\\n * Returns the index of the element that contains j from the swapOrder array.\\r\\n * We need the index to know where the j-th cow came from while we work backwards.\\r\\n */\\r\\nint find(int n, int x) {\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tif (swapOrder[i] == x)\\r\\n\\t\\t\\treturn i;\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"shuffle.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"shuffle.out\\\", \\\"w\\\", stdout);\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n; i++) \\r\\n\\t\\tcin >> swapOrder[i];\\r\\n\\tfor (int i = 0; i < n; i++) \\r\\n\\t\\tcin >> cowID[i];\\r\\n\\r\\n\\t/* \\r\\n\\t * For loop iterates 3 times and simulates \\r\\n\\t * each swap backwards during every iteration\\r\\n\\t */\\r\\n\\tfor (int i = 0; i < 3; i++) {\\r\\n\\t\\t/* \\r\\n\\t\\t * Temporary array to assist with the swapping \\r\\n\\t\\t * as not to change the values of the cowID array.\\r\\n\\t\\t */\\r\\n\\t\\tint temp[MAX_N];\\r\\n\\t\\tfor (int j = 1; j <= n; j++) {\\r\\n\\t\\t\\tint e = find(n, j);\\r\\n\\t\\t\\t/* \\r\\n\\t\\t\\t * Once we find the element that the j-th cow came from, all we need \\r\\n\\t\\t\\t * to do is simulate the swap by placing the cowID into the temp array \\r\\n\\t\\t\\t * at the index that the j-th cow came from, essentially \\\"undo-ing\\\" the swap.\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\ttemp[e] = cowID[j - 1];\\r\\n\\t\\t}\\r\\n\\t\\t// Change all the values of cowID array to get ready for the next iteration\\r\\n\\t\\tfor (int j = 0; j < n; j++) \\r\\n\\t\\t\\tcowID[j] = temp[j]; \\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) \\r\\n\\t\\tcout << cowID[i] << '\\\\n'; \\r\\n}\\r\\n\\t\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-760","source":"USACO Bronze 2017 December","title":"The Bovine Shuffle","author":"Sathvik Chundru, Jesse Choe, Ryan Chou"},"parent":{"name":"usaco-760","relativePath":"usaco-760.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"simulation","title":"Simulation"}}}}]},"problemInfo":{"uniqueId":"usaco-760","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=760"}},"pageContext":{"id":"usaco-760"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}