{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-688-hoof-paper-scissors/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-688\", source = \"USACO Bronze 2017 January\", title = \"Hoof, Paper, Scissors\", author = \"Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution-1\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_hps_bronze_jan17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---generating-all-permutations\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---generating-all-permutations\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - Generating All Permutations\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can map the games to every possible permutation of the moves (hoof, paper, scissors) and find the sequence which gives us the maximum wins. This works because \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1 \\\\leq N \\\\leq 100\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1 \\\\leq N \\\\leq 100</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7804em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8193em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">100</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"from itertools import permutations\\r\\nimport sys\\r\\n\\r\\nsys.stdin = open('hps.in', 'r')\\r\\nsys.stdout = open('hps.out', 'w')\\r\\n\\r\\nn = int(input())\\r\\ngames = []\\r\\n\\r\\ngames = [list(map(int, input().split())) for _ in range(n)]\\r\\n\\r\\n# 1 = Hoof, 2 = Paper, 3 = Scissors\\r\\nchoices = [1, 2, 3]\\r\\n\\r\\n# in these cases, cow 1 wins\\r\\n# hoof -> scissors -> paper -> hoof\\r\\nscenarios = [[1, 3], [3, 2], [2, 1]]\\r\\n\\r\\n# generates all permutations\\r\\npers = list(permutations(choices, 3))\\r\\nmaxwins = 0\\r\\n\\t\\r\\n# for every permutation, we cycle through\\r\\n# each game and calculate the wins.\\r\\nfor j in pers:\\r\\n\\t# resetting the wins counter\\r\\n\\twins = 0\\r\\n\\tfor i in games:\\r\\n\\t\\tselection = [j[i[0] - 1], j[i[1] - 1]]\\r\\n\\t\\tif selection in scenarios:\\r\\n\\t\\t\\twins += 1\\r\\n\\t# refreshing the maximum\\r\\n\\tmaxwins = max(maxwins, wins)\\r\\n\\r\\nprint(maxwins)\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-688","source":"USACO Bronze 2017 January","title":"Hoof, Paper, Scissors","author":"Ryan Chou"},"parent":{"name":"usaco-688","relativePath":"usaco-688.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2 - Generating All Permutations","slug":"solution-2---generating-all-permutations"},{"depth":3,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2 - Generating All Permutations","slug":"solution-2---generating-all-permutations"},{"depth":3,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2 - Generating All Permutations","slug":"solution-2---generating-all-permutations"},{"depth":3,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":null}}]},"problemInfo":{"uniqueId":"usaco-688","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=688"}},"pageContext":{"id":"usaco-688"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}