{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-917-measuring-traffic/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-917\", source = \"USACO Bronze February 2019\", title = \"Measuring Traffic\", author = \"Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    Warning: _missingComponent(\"Warning\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, Warning, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_traffic_bronze_feb19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(JavaSection, {\n        children: [_jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [\"Using \", _jsx(_components.code, {\n              children: \"Integer.MIN_VALUE\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"INTEGER.MAX_VALUE\"\n            }), \" for the initial\\r\\nlow and high settings will cause integer overflow because the max\\r\\nand min will not necessarily execute first.\"]\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class MeasuringTraffic {\\r\\n\\tstatic final int infinity = 999999999;\\r\\n\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"traffic\\\");\\r\\n\\t\\tint numMiles = io.nextInt();\\r\\n\\t\\tString[] segmentType = new String[numMiles];\\r\\n\\t\\tint[] start = new int[numMiles];\\r\\n\\t\\tint[] end = new int[numMiles];\\r\\n\\r\\n\\t\\tfor (int x = 0; x < numMiles; x++) {\\r\\n\\t\\t\\tsegmentType[x] = io.next();\\r\\n\\t\\t\\tstart[x] = io.nextInt();\\r\\n\\t\\t\\tend[x] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// initially, set an extremely large range \\r\\n\\t\\tint low = -infinity;\\r\\n\\t\\tint high = infinity;\\r\\n\\r\\n\\t\\tfor (int i = numMiles - 1; i >= 0; i--) {\\r\\n\\t\\t\\tif (segmentType[i].equals(\\\"none\\\")) {\\r\\n\\t\\t\\t\\t// new range based on sensor\\r\\n\\t\\t\\t\\tlow = Math.max(low, start[i]);\\r\\n\\t\\t\\t\\thigh = Math.min(high, end[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (segmentType[i].equals(\\\"off\\\")) {\\r\\n\\t\\t\\t\\t// update range of possible traffic flows\\r\\n\\t\\t\\t\\tlow += start[i];\\r\\n\\t\\t\\t\\thigh += end[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (segmentType[i].equals(\\\"on\\\")) {\\r\\n\\t\\t\\t\\tlow -= end[i];\\r\\n\\t\\t\\t\\thigh -= start[i];\\r\\n\\t\\t\\t\\t// set to zero if low becomes negative\\r\\n\\t\\t\\t\\tlow = Math.max(0, low);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(low + \\\" \\\" + high);\\r\\n\\r\\n\\t\\tlow = -infinity;\\r\\n\\t\\thigh = infinity;\\r\\n\\r\\n\\t\\t// process again but this time scanning the other way\\r\\n\\t\\tfor (int i = 0; i < numMiles; i++) {\\r\\n\\t\\t\\tif (segmentType[i].equals(\\\"none\\\")) {\\r\\n\\t\\t\\t\\tlow = Math.max(low, start[i]);\\r\\n\\t\\t\\t\\thigh = Math.min(high, end[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (segmentType[i].equals(\\\"on\\\")) {\\r\\n\\t\\t\\t\\tlow += start[i];\\r\\n\\t\\t\\t\\thigh += end[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (segmentType[i].equals(\\\"off\\\")) {\\r\\n\\t\\t\\t\\tlow -= end[i];\\r\\n\\t\\t\\t\\thigh -= start[i];\\r\\n\\t\\t\\t\\tlow = Math.max(0, low);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(low + \\\" \\\" + high);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}  \\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-917","source":"USACO Bronze February 2019","title":"Measuring Traffic","author":"Brad Ma"},"parent":{"name":"usaco-917","relativePath":"usaco-917.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"simulation","title":"Simulation"}}}}]},"problemInfo":{"uniqueId":"usaco-917","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=917"}},"pageContext":{"id":"usaco-917"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}