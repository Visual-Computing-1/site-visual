{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-763-milk-measurement/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-763\", source = \"USACO Silver 2017 December\", title = \"Milk Measurement\", author = \"Qi Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_measurement_silver_dec17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"//Created by Qi Wang\\r\\nimport java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class measurement {\\r\\n\\tstatic int N, G, A;\\r\\n\\tstatic Log[] L;\\r\\n\\tstatic Map<Integer, Integer> ids = new HashMap<>();\\r\\n\\t//Sorting keys from greatest to least\\r\\n\\tstatic TreeMap<Integer, Integer> values = new TreeMap<>((o1, o2) -> o2-o1);\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tInputReader in = new InputReader(\\\"measurement.in\\\");\\r\\n\\t\\tN = in.nextInt(); G = in.nextInt(); L = new Log[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tint d, id, c;\\r\\n\\t\\t\\td = in.nextInt(); id = in.nextInt(); c =in.nextInt();\\r\\n\\t\\t\\tL[i] = new Log(d, id, c);\\r\\n\\t\\t\\tids.put(id, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tArrays.sort(L, Comparator.comparingInt(o -> o.d));\\r\\n\\t\\tvalues.put(0, N+1);\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tint change = ids.get(L[i].id);\\r\\n\\t\\t\\tboolean wasTop = change == values.firstKey();\\r\\n\\t\\t\\tint prevCnt = values.get(change);\\r\\n\\t\\t\\tvalues.put(change, values.get(change)-1);\\r\\n\\t\\t\\tif (values.get(change) == 0) values.remove(change);\\r\\n\\r\\n\\t\\t\\tchange += L[i].c;\\r\\n\\t\\t\\tids.put(L[i].id, change);\\r\\n\\t\\t\\tvalues.put(change, values.getOrDefault(change,0)+1);\\r\\n\\r\\n\\t\\t\\tboolean isTop = change == values.firstKey();\\r\\n\\t\\t\\tint curCnt = values.get(change);\\r\\n\\r\\n\\t\\t\\tif(wasTop){\\r\\n\\t\\t\\t\\tif(isTop && curCnt == prevCnt && curCnt == 1){\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t//If it was the highest and now its not or there are now multiple highest cows, we need to increment answer\\r\\n\\t\\t\\t\\tA++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if(isTop){\\r\\n\\t\\t\\t\\t//If it wasn't at the highest but now it is, then we need to increment answer\\r\\n\\t\\t\\t\\tA++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"measurement.out\\\")));\\r\\n\\t\\tout.println(A);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\tprivate static class Log{\\r\\n\\t\\tint d, id, c;\\r\\n\\t\\tpublic Log(int a, int b, int c){\\r\\n\\t\\t\\td = a;\\r\\n\\t\\t\\tid = b;\\r\\n\\t\\t\\tthis.c = c;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tprivate static class InputReader {\\r\\n\\t\\tpublic BufferedReader reader;\\r\\n\\t\\tpublic StringTokenizer tokenizer;\\r\\n\\r\\n\\t\\tpublic InputReader() {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new InputStreamReader(System.in), 32768);\\r\\n\\t\\t\\t} catch (Exception e) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Could not create input stream\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic InputReader(String fileName) {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new FileReader(new File(fileName)), 32768);\\r\\n\\t\\t\\t} catch (Exception ex) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Input file does not exist! Put it in the project folder.\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ttokenizer = null;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\ttokenizer = new StringTokenizer(reader.readLine());\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn tokenizer.nextToken();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic boolean hasNextInt() throws IOException { return reader.ready(); }\\r\\n\\r\\n\\t\\tpublic int nextInt() {\\r\\n\\t\\t\\treturn Integer.parseInt(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic double nextDouble() {\\r\\n\\t\\t\\treturn Double.parseDouble(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic long nextLong() {\\r\\n\\t\\t\\treturn Long.parseLong(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic char nextChar() {\\r\\n\\t\\t\\treturn next().charAt(0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * When you call next(), that entire line will be skipped.\\r\\n\\t\\t * No flushing buffers.\\r\\n\\t\\t * Doesn't work when you want to scan the remaining line.\\r\\n\\t\\t *\\r\\n\\t\\t * @return entire line\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tpublic String nextLine() {\\r\\n\\t\\t\\tString str = \\\"\\\";\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstr = reader.readLine();\\r\\n\\t\\t\\t\\ttokenizer = null;\\r\\n\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn str;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-763","source":"USACO Silver 2017 December","title":"Milk Measurement","author":"Qi Wang"},"parent":{"name":"usaco-763","relativePath":"usaco-763.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorted-sets","title":"More Operations on Sorted Sets"}}}}]},"problemInfo":{"uniqueId":"usaco-763","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=763"}},"pageContext":{"id":"usaco-763"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}