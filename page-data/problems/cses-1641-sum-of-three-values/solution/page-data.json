{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1641-sum-of-three-values/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1641\", source = \"CSES\", title = \"Sum of Three Values\", author = \"Andrew Wang, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This problem is an extension of the two sum problem except now with three\\r\\nvalues. We can set the third pointer to a certain value in the array and then\\r\\nthe problem becomes the two sum problem discussed earlier in this module.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First we'll sort the array. Then we'll loop through all possible values for the\\r\\nthird pointer and check if all three pointers add up to the target amount, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \",\\r\\nwhile having distinct positions. We can maintain the original positions of all\\r\\nvalues by storing the pairs \", _jsx(_components.code, {\n        children: \"{a[i],i}\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main(){\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tint n,x; cin >> n >> x;\\r\\n\\tvector<pair<int, int>> arr;\\r\\n\\tfor(int i = 1; i <= n; i++){\\r\\n\\t\\tint a; cin >> a;\\r\\n\\t\\tpair<int, int> p; p.first = a; p.second = i;\\r\\n\\t\\t// first in pair represents value, second represents index\\r\\n\\t\\tarr.push_back(p);\\r\\n\\t}\\r\\n\\tsort(begin(arr), end(arr));\\r\\n\\tfor(int i = 0; i < n; i++){\\r\\n\\t\\tint l, r; l = 0; r = n-1;\\r\\n\\t\\twhile(l != r){\\r\\n\\t\\t\\tint target; target = x - arr.at(i).first;\\r\\n\\t\\t\\tif(l != i && r != i && arr.at(l).first + arr.at(r).first == target){\\r\\n\\t\\t\\t\\tcout << arr.at(i).second << \\\" \\\" << arr.at(l).second\\r\\n\\t\\t\\t\\t\\t << \\\" \\\" << arr.at(r).second << endl;\\r\\n\\t\\t\\t\\treturn 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(arr.at(l).first + arr.at(r).first < target){\\r\\n\\t\\t\\t\\tl++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse{\\r\\n\\t\\t\\t\\tr--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << \\\"IMPOSSIBLE\\\" << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class SumOfThreeValues {\\r\\n\\tstatic class Group implements Comparable<Group> {\\r\\n\\t\\tint value, index;\\r\\n\\t\\t\\r\\n\\t\\tGroup (int value, int index) {\\r\\n\\t\\t\\tthis.value = value;\\r\\n\\t\\t\\tthis.index = index;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compareTo (Group other) {\\r\\n\\t\\t\\treturn Integer.compare(this.value, other.value);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main (String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint x = io.nextInt();\\r\\n\\t\\tGroup[] data = new Group[n];\\r\\n\\r\\n\\t\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\t\\t// store the input in a class that has a value and an index\\r\\n\\t\\t\\tint value = io.nextInt();\\r\\n\\t\\t\\tGroup group = new Group(value, i);\\r\\n\\r\\n\\t\\t\\tdata[i - 1] = group;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tArrays.sort(data);  // make the values in increasing order\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tint left = 0;\\r\\n\\t\\t\\tint right = n - 1;\\r\\n\\r\\n\\t\\t\\twhile (left != right) {\\r\\n\\t\\t\\t\\tint target = x - data[i].value;\\r\\n\\t\\t\\t\\t// if all three values sum up to the target and aren't from the same index,\\r\\n\\t\\t\\t\\t// we have found our answer\\r\\n\\t\\t\\t\\tif (left != i && right != i && data[left].value + data[right].value == target) {\\r\\n\\t\\t\\t\\t\\t// we have an answer, output it\\r\\n\\t\\t\\t\\t\\tio.println(data[i].index + \\\" \\\" + data[left].index + \\\" \\\" + data[right].index);\\r\\n\\r\\n\\t\\t\\t\\t\\tio.close();\\r\\n\\t\\t\\t\\t\\tSystem.exit(0);  // can end the program now\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// not equal to target, increase left if the sums are lower\\r\\n\\t\\t\\t\\tif (data[left].value + data[right].value < target) {\\r\\n\\t\\t\\t\\t\\tleft++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// not equal to target, decrease right if the sums\\r\\n\\t\\t\\t\\t// are greater than target\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tright--;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// output impossible if you reach the end with no answer\\r\\n\\t\\tio.println(\\\"IMPOSSIBLE\\\");\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1641","source":"CSES","title":"Sum of Three Values","author":"Andrew Wang, Brad Ma"},"parent":{"name":"cses-1641","relativePath":"cses-1641.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"two-pointers","title":"Two Pointers"}}}}]},"problemInfo":{"uniqueId":"cses-1641","url":"https://cses.fi/problemset/task/1641"}},"pageContext":{"id":"cses-1641"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}