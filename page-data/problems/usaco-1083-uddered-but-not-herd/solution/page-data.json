{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1083-uddered-but-not-herd/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1083\", source = \"USACO Bronze 2021 January\", title = \"Uddered but not Herd\", author = \"Ananth Kashyap, Trua Shamu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_prob1_bronze_jan21.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(|\\\\texttt{word}|)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi mathvariant=\\\"normal\\\">∣</mi><mtext mathvariant=\\\"monospace\\\">word</mtext><mi mathvariant=\\\"normal\\\">∣</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(|\\\\texttt{word}|)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">∣</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">word</span></span><span class=\\\"mord\\\">∣</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            children: \"# Take in the cowphabet and string as strings through standard Python input\\r\\ncowphabet = input()\\r\\nword = input()\\r\\n\\r\\n# For any string, we always have to look through the cowphabet at least once.\\r\\nnum_times = 1\\r\\n\\r\\nfor i in range(len(word) - 1):\\r\\n\\t# Check if next character in string appears before previous character\\r\\n\\tif cowphabet.index(word[i + 1]) <= cowphabet.index(word[i]):\\r\\n\\t\\tnum_times += 1\\r\\n\\r\\nprint(num_times)\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\n\\r\\npublic class UdderedButNotHerd {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tString cowphabet = input.readLine();\\r\\n\\t\\tchar[] word = input.readLine().toCharArray();\\r\\n\\r\\n\\t\\tint numTimes = 1;  // There must be at least one humming sequence.\\r\\n\\t\\tfor (int i = 0; i < word.length - 1; i++) {\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * Increment if the next letter appears at\\r\\n\\t\\t\\t * or earlier than the current letter in the alphabet\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tif (cowphabet.indexOf(word[i + 1]) <= cowphabet.indexOf(word[i])) {\\r\\n\\t\\t\\t\\tnumTimes++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(numTimes);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1083","source":"USACO Bronze 2021 January","title":"Uddered but not Herd","author":"Ananth Kashyap, Trua Shamu"},"parent":{"name":"usaco-1083","relativePath":"usaco-1083.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":null}}]},"problemInfo":{"uniqueId":"usaco-1083","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1083"}},"pageContext":{"id":"usaco-1083"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}