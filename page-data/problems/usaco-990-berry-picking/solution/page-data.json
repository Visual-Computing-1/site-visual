{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-990-berry-picking/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-990\", source = \"USACO Silver 2020 January\", title = \"Berry Picking\", author = \"Qi Wang (Java), Daniel Suh (C++)\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_berries_silver_jan20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(max(B_i) \\\\cdot N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\\\"false\\\">(</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy=\\\"false\\\">)</mo><mo>⋅</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(max(B_i) \\\\cdot N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//C++ Solution by Daniel Suh\\r\\n#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\ntypedef long long ll;\\r\\ntypedef long double ld;\\r\\n\\r\\n#define mpa make_pair\\r\\n#define pb push_back\\r\\n#define ins insert\\r\\n#define f first\\r\\n#define s second\\r\\n#define all(x) x.begin(), x.end()\\r\\n#define nl \\\"\\\\n\\\"\\r\\n\\r\\nvoid fileIO(string filename) {\\r\\n\\tfreopen((filename + \\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\tfreopen((filename + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n}\\r\\n\\r\\nint MOD = 1;\\r\\n\\r\\nbool cmp(int &a, int &b) {\\r\\n\\t//Sorts by the max mod, so Bessie can get the max amount of leftovers\\r\\n\\treturn (a % MOD) > (b % MOD);\\r\\n}\\r\\n\\r\\nvoid solve() {\\r\\n\\tint N, K;\\r\\n\\tcin >> N >> K;\\r\\n\\tvector<int> A(N);\\r\\n\\tint maxD = 0;\\r\\n\\tfor(int i = 0; i < N; i++) {\\r\\n\\t\\tcin >> A[i];\\r\\n\\t\\tmaxD = max(maxD, A[i]);\\r\\n\\t}\\r\\n\\tint mx = 0;\\r\\n\\tfor(int i = 1; i <= maxD; i++) {\\r\\n\\t\\tint amount = 0;\\r\\n\\t\\t//For loop calculates how many groups of \\\"i\\\" berries can be put into a basket\\r\\n\\t\\tfor(int j = 0; j < N; j++) {\\r\\n\\t\\t\\tamount += A[j] / i;\\r\\n\\t\\t}\\r\\n\\t\\t//If the amount is not enough for K / 2 baskets, it is not valid\\r\\n\\t\\tif(amount < K / 2) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif(amount >= K) {\\r\\n\\t\\t\\t//If there is greater than or equal to \\\"i\\\" sections for both Bessie and Ellie, then Bessie can collect (K / 2) * i berries\\r\\n\\t\\t\\tmx = max(mx, (K / 2) * i);\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tMOD = i;\\r\\n\\t\\tsort(all(A), cmp);\\r\\n\\t\\t//Gives the maximum amount of leftovers to Bessie\\r\\n\\t\\tint cur = (amount - K / 2) * i;\\r\\n\\t\\tfor(int j = 0; j < N && j + amount < K; j++) {\\r\\n\\t\\t\\tcur += A[j] % i;\\r\\n\\t\\t}\\r\\n\\t\\tmx = max(mx, cur);\\r\\n\\t}\\r\\n\\tcout << mx << nl;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tios::sync_with_stdio(false); cin.tie(nullptr);\\r\\n\\tfileIO(\\\"berries\\\");\\r\\n\\r\\n\\tsolve();\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"//Created by Qi Wang\\r\\nimport java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class berries {\\r\\n\\tstatic int N, K;\\r\\n\\tstatic int[] B;\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tInputReader in = new InputReader(\\\"berries.in\\\");\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"berries.out\\\")));\\r\\n\\t\\tN = in.nextInt(); K = in.nextInt(); B = new int[N];\\r\\n\\t\\tint max = -1;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tB[i] = in.nextInt();\\r\\n\\t\\t\\tmax = Math.max(max, B[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint res = -1;\\r\\n\\t\\tfor (int i = 1; i <= max; i++) {\\r\\n\\t\\t\\tint count = 0;\\r\\n\\t\\t\\tint[] leftOver = new int[N];\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tcount += B[j]/i;\\r\\n\\t\\t\\t\\tleftOver[j] = B[j]%i;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif(count >= K){\\r\\n\\t\\t\\t\\t//If count can account for both Bessie and Elsie, then we can just allocate K/2 * i to Bessie\\r\\n\\t\\t\\t\\tres = Math.max(res, K/2 * i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if(count >= K/2){\\r\\n\\t\\t\\t\\t//If count can only account for Elsie and some of Bessie, then we can take from the leftovers.\\r\\n\\t\\t\\t\\tint berries = 0;\\r\\n\\t\\t\\t\\tberries += (count - K/2) * i;\\r\\n\\t\\t\\t\\tArrays.sort(leftOver);\\r\\n\\t\\t\\t\\tint ix = leftOver.length-1;\\r\\n\\t\\t\\t\\tfor (int j = count - K/2; j < K/2; j++) {\\r\\n\\t\\t\\t\\t\\tif(ix < 0) continue;\\r\\n\\t\\t\\t\\t\\tberries += leftOver[ix--];\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tres = Math.max(res, berries);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tout.println(res);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class InputReader {\\r\\n\\t\\tpublic BufferedReader reader;\\r\\n\\t\\tpublic StringTokenizer tokenizer;\\r\\n\\r\\n\\t\\tpublic InputReader() {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new InputStreamReader(System.in), 32768);\\r\\n\\t\\t\\t} catch (Exception e) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Could not create input stream\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic InputReader(String fileName) {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new FileReader(new File(fileName)), 32768);\\r\\n\\t\\t\\t} catch (Exception ex) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Input file does not exist! Put it in the project folder.\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ttokenizer = null;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\ttokenizer = new StringTokenizer(reader.readLine());\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn tokenizer.nextToken();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic boolean hasNextInt() throws IOException { return reader.ready(); }\\r\\n\\r\\n\\t\\tpublic int nextInt() {\\r\\n\\t\\t\\treturn Integer.parseInt(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic double nextDouble() {\\r\\n\\t\\t\\treturn Double.parseDouble(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic long nextLong() {\\r\\n\\t\\t\\treturn Long.parseLong(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic char nextChar() {\\r\\n\\t\\t\\treturn next().charAt(0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * When you call next(), that entire line will be skipped.\\r\\n\\t\\t * No flushing buffers.\\r\\n\\t\\t * Doesn't work when you want to scan the remaining line.\\r\\n\\t\\t *\\r\\n\\t\\t * @return entire line\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tpublic String nextLine() {\\r\\n\\t\\t\\tString str = \\\"\\\";\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstr = reader.readLine();\\r\\n\\t\\t\\t\\ttokenizer = null;\\r\\n\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn str;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-990","source":"USACO Silver 2020 January","title":"Berry Picking","author":"Qi Wang (Java), Daniel Suh (C++)"},"parent":{"name":"usaco-990","relativePath":"usaco-990.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"greedy-sorting","title":"Greedy Algorithms with Sorting"}}}}]},"problemInfo":{"uniqueId":"usaco-990","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=990"}},"pageContext":{"id":"usaco-990"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}