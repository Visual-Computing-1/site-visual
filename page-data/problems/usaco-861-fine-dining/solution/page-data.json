{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-861-fine-dining/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-861\", source = \"USACO Gold 2018 December\", title = \"Fine Dining\", author = \"Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_dining_gold_dec18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(M\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>M</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(M\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class FineDining {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tScanner sc = new Scanner(new File(\\\"dining.in\\\"));\\r\\n\\t\\tPrintWriter out = new PrintWriter(\\\"dining.out\\\");\\r\\n\\t\\t\\r\\n\\t\\tint n = sc.nextInt();\\r\\n\\t\\tint m = sc.nextInt();\\r\\n\\t\\tint k = sc.nextInt();\\r\\n\\t\\tList<List<Edge>> adj = new ArrayList<>();\\r\\n\\t\\tfor (int i = 0; i < n; i++) adj.add(new ArrayList<>());\\r\\n\\t\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\t\\tint a = sc.nextInt() - 1;\\r\\n\\t\\t\\tint b = sc.nextInt() - 1;\\r\\n\\t\\t\\tint time = sc.nextInt();\\r\\n\\t\\t\\tadj.get(a).add(new Edge(b, time));\\r\\n\\t\\t\\tadj.get(b).add(new Edge(a, time));\\r\\n\\t\\t}\\r\\n\\t\\tint[] haybales = new int[n];\\r\\n\\t\\tArrays.fill(haybales, -1);\\r\\n\\t\\tfor (int i = 0; i < k; i++) {\\r\\n\\t\\t\\thaybales[sc.nextInt() - 1] = sc.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * dist[i][0] - the shortest distance from cow i to the barn given\\r\\n\\t\\t * that it doesn't eat any haybales.\\r\\n\\t\\t * \\r\\n\\t\\t * dist[i][1] - the shortest distance given that it eats one haybale.\\r\\n\\t\\t * This distance is subtracted by the yuminess of the haybale the cow\\r\\n\\t\\t * eats.\\r\\n\\t\\t */\\r\\n\\t\\tint[][] dist = new int[n][2];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tdist[i][0] = -1;\\r\\n\\t\\t\\tdist[i][1] = -1;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// run djiskstra's to find the shortest distances\\r\\n\\t\\tPriorityQueue<State> pq = new PriorityQueue<>();\\r\\n\\t\\tpq.add(new State(n - 1, 0, 0));\\r\\n\\t\\twhile (!pq.isEmpty()) {\\r\\n\\t\\t\\tState state = pq.remove();\\r\\n\\t\\t\\tif (dist[state.pos][state.eaten] != -1) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tdist[state.pos][state.eaten] = state.time;\\r\\n\\r\\n\\t\\t\\t// add all the neighbors\\r\\n\\t\\t\\tfor (Edge e : adj.get(state.pos)) {\\r\\n\\t\\t\\t\\tpq.add(new State(e.other, state.time + e.time, state.eaten));\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// if there's a haybale and the cow hasn't eaten any yet, eat the\\r\\n\\t\\t\\t// haybale and update the state accordingly\\r\\n\\t\\t\\tif (haybales[state.pos] != -1 && state.eaten == 0) {\\r\\n\\t\\t\\t\\tstate.time -= haybales[state.pos];\\r\\n\\t\\t\\t\\tpq.add(new State(state.pos, state.time, 1));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n - 1; i++) {\\r\\n\\t\\t\\t// output 1 if it's better for cow to eat haybale along its path\\r\\n\\t\\t\\tif (dist[i][1] <= dist[i][0]) {\\r\\n\\t\\t\\t\\tout.println(1);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tout.println(0);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class Edge {\\r\\n\\t\\tint other, time;\\r\\n\\r\\n\\t\\tEdge(int other, int time) {\\r\\n\\t\\t\\tthis.other = other;\\r\\n\\t\\t\\tthis.time = time;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tstatic class State implements Comparable<State> {\\r\\n\\t\\tint pos, time;\\r\\n\\t\\tint eaten;  // 1 if true, 0 if false\\r\\n\\r\\n\\t\\tState(int pos, int time, int eaten) {\\r\\n\\t\\t\\tthis.pos = pos;\\r\\n\\t\\t\\tthis.time = time;\\r\\n\\t\\t\\tthis.eaten = eaten;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compareTo(State other) {\\r\\n\\t\\t\\t// we have to prioritize cows that haven't eaten yet so that we\\r\\n\\t\\t\\t// calculate all of dist[i][0] before calculating dist[i][1]\\r\\n\\t\\t\\tif (this.eaten != other.eaten) {\\r\\n\\t\\t\\t\\treturn this.eaten - other.eaten;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn this.time - other.time;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-861","source":"USACO Gold 2018 December","title":"Fine Dining","author":"Nathan Gong"},"parent":{"name":"usaco-861","relativePath":"usaco-861.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"shortest-paths","title":"Shortest Paths with Non-Negative Edge Weights"}}}}]},"problemInfo":{"uniqueId":"usaco-861","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=861"}},"pageContext":{"id":"usaco-861"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}