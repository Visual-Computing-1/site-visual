{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-695-cow-navigation/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*(Ben - equivalent to existing editorial)*/\n/*You can change it, but keep the section on making modifications to graphs before. Maybe replace with a problem w/o a good editorial?*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-695\", source = \"USACO Gold 2017 January\", title = \"Cow Navigation\", author = \"Michael Cao\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Warning: _missingComponent(\"Warning\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, Warning, HeaderLink, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In this problem, Bessie stands on a grid and wants to go from the lower left\\r\\ncorner to upper-right corner in as few moves as possible. An initial idea could\\r\\nbe to model the grid as a graph, where adjacent cells are connected by edges,\\r\\nand run a BFS to find the shortest path.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, two additional constraints play a role in this problem: Bessie must be\\r\\nable to reach the destination regardless of which direction she starts in, and\\r\\nshe can only move in the direction she is facing.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's imagine now that there are two cows standing on the cell \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(1, 1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(1, 1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", and\\r\\nboth of them move the same way on each operation. Since \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N \\\\leq 20\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>≤</mo><mn>20</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N \\\\leq 20</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8193em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">20</span></span></span></span>\"\n      }), \", we can\\r\\nmodify the original graph to support this new problem. Let's create a new graph\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G'\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>G</mi><mo mathvariant=\\\"normal\\\" lspace=\\\"0em\\\" rspace=\\\"0em\\\">′</mo></msup></mrow><annotation encoding=\\\"application/x-tex\\\">G&#x27;</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7519em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7519em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">′</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" as follows:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For each pair of cells in the grid, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x_2, y_2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x_2, y_2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", add \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"16\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>16</mn></mrow><annotation encoding=\\\"application/x-tex\\\">16</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">16</span></span></span></span>\"\n      }), \" nodes in\\r\\nthe graph storing six parameters each:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \" coordinate of cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"y\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n        }), \" coordinate of cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \" coordinate of cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"y\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n        }), \" coordinate of cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"direction of cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"direction of cow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"for all \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"4 ^ 2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>4</mn><mn>2</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">4 ^ 2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">4</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" directions each cow could be facing.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Given this new graph, we add edges between two \\\"states\\\" which are reachable from\\r\\neach other. For example, if we apply the \\\"turn left\\\" operation, we add an edge\\r\\nto the state where both cows directions turn left.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On this new graph, we can directly run a BFS, and retrieve the answer at the\\r\\nstate \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\{N, N, N, N, x, y\\\\}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">{</mo><mi>N</mi><mo separator=\\\"true\\\">,</mo><mi>N</mi><mo separator=\\\"true\\\">,</mo><mi>N</mi><mo separator=\\\"true\\\">,</mo><mi>N</mi><mo separator=\\\"true\\\">,</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">}</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\{N, N, N, N, x, y\\\\}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">}</span></span></span></span>\"\n      }), \" where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"y\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n      }), \" represent directions.\"]\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsx(_components.p, {\n        children: \"Don't forget that once Bessie reaches the goal, she will ignore further\\r\\ncommands. In the modified problem, if one of the two cows is at the goal, stop\\r\\napplying commands to her.\"\n      })\n    }), \"\\n\", \"\\n\", \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//created by Oleksandr Gorpynich\\r\\n#include<bits/stdc++.h>\\r\\nusing ll = long long;\\r\\nusing namespace std;\\r\\nint n;\\r\\nstruct state{\\r\\n\\tint x1;\\r\\n\\tint y1;\\r\\n\\tint x2;\\r\\n\\tint y2;\\r\\n\\tint dir;\\r\\n\\tint dist;\\r\\n};\\r\\nchar arr[21][21];\\r\\nint visited[21][21][21][21][4];\\r\\n//x1, y1, x2, y2, dir\\r\\nint dx[4] = {-1, 0, 1, 0};\\r\\nint dy[4] = {0, 1, 0, -1};\\r\\n//up, left, down, right\\r\\n//test if a cell is possible to visit\\r\\nbool inside(int x, int y){\\r\\n\\tif (x >= 0 && x < n && y >= 0 && y < n){\\r\\n\\t\\tif (arr[x][y] != 'H'){\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false;\\r\\n}\\r\\n//set a state as visited\\r\\nbool setvisited(state cur){\\r\\n\\tvisited[cur.x1][cur.y1][cur.x2][cur.y2][cur.dir] = 1;\\r\\n}\\r\\n//check if a state has been visited\\r\\nbool free(state cur){\\r\\n\\tif (visited[cur.x1][cur.y1][cur.x2][cur.y2][cur.dir] == -1){\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\treturn false;\\r\\n}\\r\\nint main(){\\r\\n\\tifstream in(\\\"cownav.in\\\");\\r\\n\\tofstream out(\\\"cownav.out\\\");\\r\\n\\tin >> n;\\r\\n\\tfor (int x = 0; x < n; x++){\\r\\n\\t\\tfor (int y = 0; y < n; y++){\\r\\n\\t\\t\\tin >> arr[x][y];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tmemset(visited, -1, sizeof visited);\\r\\n\\tqueue<state> q;\\r\\n\\tq.push({n - 1, 0, n - 1, 0});\\r\\n\\twhile(q.size() > 0){\\r\\n\\t\\tstate cur = q.front();\\r\\n\\t\\tq.pop();\\r\\n\\t\\tstate ncur = cur;\\r\\n\\t\\tbool reachedend1 = false;\\r\\n\\t\\tbool reachedend2 = false;\\r\\n\\t\\t//check if reached the end\\r\\n\\t\\tif (cur.x1 == 0 && cur.y1 == n - 1){\\r\\n\\t\\t\\treachedend1 = true;\\r\\n\\t\\t}\\r\\n\\t\\tif (cur.x2 == 0 && cur.y2 == n - 1){\\r\\n\\t\\t\\treachedend2 = true;\\r\\n\\t\\t}\\r\\n\\t\\tif (reachedend1 && reachedend2){\\r\\n\\t\\t\\tout << ncur.dist << \\\"\\\\n\\\";\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t\\t//turn clockwise\\r\\n\\t\\tncur = cur;\\r\\n\\r\\n\\t\\tncur.dir = (cur.dir + 1) % 4;\\r\\n\\t\\tncur.dist += 1;\\r\\n\\t\\tif (free(ncur)){\\r\\n\\t\\t\\tsetvisited(ncur);\\r\\n\\t\\t\\tq.push(ncur);\\r\\n\\t\\t}\\r\\n\\t\\t//turn counter clockwise\\r\\n\\t\\tncur = cur;\\r\\n\\t\\tncur.dir = (cur.dir - 1) == -1?3:(cur.dir - 1);\\r\\n\\t\\tncur.dist += 1;\\r\\n\\t\\tif (free(ncur)){\\r\\n\\t\\t\\tsetvisited(ncur);\\r\\n\\t\\t\\tq.push(ncur);\\r\\n\\t\\t}\\r\\n\\t\\t//go forward\\r\\n\\t\\tncur = cur;\\r\\n\\t\\tif (inside(ncur.x1 + dx[ncur.dir], ncur.y1 + dy[ncur.dir]) && !reachedend1){\\r\\n\\t\\t\\tncur.x1 += dx[ncur.dir];\\r\\n\\t\\t\\tncur.y1 += dy[ncur.dir];\\r\\n\\t\\t}\\r\\n\\t\\tif (inside(ncur.x2 + dx[(ncur.dir + 1) % 4], ncur.y2 + dy[(ncur.dir + 1) % 4]) && !reachedend2){\\r\\n\\t\\t\\tncur.x2 += dx[(ncur.dir + 1) % 4];\\r\\n\\t\\t\\tncur.y2 += dy[(ncur.dir + 1) % 4];\\r\\n\\t\\t}\\r\\n\\t\\tncur.dist += 1;\\r\\n\\t\\tif (free(ncur)){\\r\\n\\t\\t\\tsetvisited(ncur);\\r\\n\\t\\t\\tq.push(ncur);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tout << -1 << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-695","source":"USACO Gold 2017 January","title":"Cow Navigation","author":"Michael Cao"},"parent":{"name":"usaco-695","relativePath":"usaco-695.mdx"},"toc":{"cpp":[{"depth":3,"value":"Implementation","slug":"implementation"}],"java":[{"depth":3,"value":"Implementation","slug":"implementation"}],"py":[{"depth":3,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"bfs","title":"Breadth First Search (BFS)"}}}}]},"problemInfo":{"uniqueId":"usaco-695","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=695"}},"pageContext":{"id":"usaco-695"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}