{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1632-movie-festival-ii/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1632\", source = \"CSES\", title = \"Movie Festival II\", author = \"Shreyas Thumathy, Benjamin Qi, Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    Warning: _missingComponent(\"Warning\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, Warning, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first step is the same as that of\\r\\n\", _jsx(_components.a, {\n        href: \"/silver/greedy-sorting#example---the-scheduling-problem\",\n        children: \"Movie Festival\"\n      }), \"; sort\\r\\nthe movies in increasing order of end time. For each movie in order, we will\\r\\nassign it to one of the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \" members to watch (or none of them).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Keep track of the time each member finishes watching all of his currently\\r\\nassigned movies in an ordered multiset\\r\\n(\", _jsx(_components.a, {\n        href: \"/silver/intro-sorted-sets/#multisets\",\n        children: \"represented\"\n      }), \" by\\r\\na \", _jsx(_components.code, {\n        children: \"TreeMap\"\n      }), \" in Java or a \", _jsx(_components.code, {\n        children: \"multiset\"\n      }), \" in C++). Initially, the collection consists of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \" zeroes.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For each movie in order, we can assign a member to watch it if there exists an\\r\\nelement in the sorted collection less than or equal to the start time of the\\r\\nmovie. If there are multiple such elements, choose the greatest one (the member\\r\\nwho finished watching his assigned movies the latest). Assign the member to\\r\\nwatch this movie by incrementing the answer and updating the collection\\r\\naccordingly.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n\\\\log k)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>‚Å°</mo><mi>k</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n\\\\log k)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <set>\\r\\n#include <algorithm>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint n, k; cin >> n >> k;\\r\\n\\tvector<pair<int, int>> v(n);\\r\\n\\tfor (int i = 0; i < n; i++) // read start time, end time\\r\\n\\t\\tcin >> v[i].second >> v[i].first;\\r\\n\\tsort(begin(v), end(v)); // sort by end time\\r\\n\\r\\n\\tint maxMovies = 0;\\r\\n\\tmultiset<int> end_times; // times when members will finish watching movies\\r\\n\\tfor (int i = 0; i < k; ++i)\\r\\n\\t\\tend_times.insert(0);\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tauto it = end_times.upper_bound(v[i].second);\\r\\n\\t\\tif (it == begin(end_times)) continue;\\r\\n\\t\\t// assign movie to be watched by member in multiset who finishes at time *prev(it)\\r\\n\\t\\tend_times.erase(--it);\\r\\n\\t\\t// member now finishes watching at time v[i].first\\r\\n\\t\\tend_times.insert(v[i].first);\\r\\n\\t\\t++maxMovies;\\r\\n\\t}\\r\\n\\r\\n\\tcout << maxMovies;\\r\\n}\\n\"\n          })\n        })\n      }), _jsxs(JavaSection, {\n        children: [_jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [\"Input classes like \", _jsx(_components.code, {\n              children: \"Scanner\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"BufferedReader\"\n            }), \" are too slow for this problem,\\r\\nso we have to use \", _jsx(_components.a, {\n              href: \"/general/fast-io?lang=java#method-5---inputstream\",\n              children: _jsx(_components.code, {\n                children: \"FastIO\"\n              })\n            }), \" (which reads bytes directly from an input stream) instead.\"]\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class MovieFestival2 {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tFastIO io = new FastIO();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint k = io.nextInt();\\r\\n\\r\\n\\t\\tInterval[] movies = new Interval[n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tmovies[i] = new Interval(io.nextInt(), io.nextInt());\\r\\n\\t\\t}\\r\\n\\t\\t// sort movies based on end time\\r\\n\\t\\tArrays.sort(movies, Comparator.comparingInt(movie -> movie.end));\\r\\n\\r\\n\\t\\tint maxMovies = 0;\\r\\n\\t\\t// times when members will finish watching their movies\\r\\n\\t\\tTreeMap<Integer, Integer> endTimes = new TreeMap<>();\\r\\n\\t\\tendTimes.put(0, k);  // initialize all members at time 0\\r\\n\\r\\n\\t\\tfor (Interval movie : movies) {\\r\\n\\t\\t\\t// find member who finished watching their assigned movies the\\r\\n\\t\\t\\t// latest before movie.start\\r\\n\\t\\t\\tInteger lower = endTimes.floorKey(movie.start);\\r\\n\\r\\n\\t\\t\\t// if such member exists, assign the member to the current movie\\r\\n\\t\\t\\tif (lower != null) {\\r\\n\\t\\t\\t\\tmaxMovies++;\\r\\n\\t\\t\\t\\tint lowerValue = endTimes.get(lower);\\r\\n\\t\\t\\t\\t// remove the original time in which member finishes movie\\r\\n\\t\\t\\t\\tif (lowerValue - 1 == 0) {\\r\\n\\t\\t\\t\\t\\tendTimes.remove(lower);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tendTimes.put(lower, lowerValue - 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// member now finishes watching at time movie.end\\r\\n\\t\\t\\t\\tendTimes.put(movie.end, endTimes.getOrDefault(movie.end, 0) + 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(maxMovies);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class Interval {\\r\\n\\t\\tint start, end;\\r\\n\\r\\n\\t\\tInterval(int start, int end) {\\r\\n\\t\\t\\tthis.start = start;\\r\\n\\t\\t\\tthis.end = end;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// BeginCodeSnip{FastIO}\\r\\n\\tstatic class FastIO extends PrintWriter {\\r\\n\\t\\tprivate InputStream stream;\\r\\n\\t\\tprivate byte[] buf = new byte[1<<16];\\r\\n\\t\\tprivate int curChar, numChars;\\r\\n\\r\\n\\t\\t// standard input\\r\\n\\t\\tpublic FastIO() { this(System.in,System.out); }\\r\\n\\t\\tpublic FastIO(InputStream i, OutputStream o) {\\r\\n\\t\\t\\tsuper(o);\\r\\n\\t\\t\\tstream = i;\\r\\n\\t\\t}\\r\\n\\t\\t// file input\\r\\n\\t\\tpublic FastIO(String i, String o) throws IOException {\\r\\n\\t\\t\\tsuper(new FileWriter(o));\\r\\n\\t\\t\\tstream = new FileInputStream(i);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// throws InputMismatchException() if previously detected end of file\\r\\n\\t\\tprivate int nextByte() {\\r\\n\\t\\t\\tif (numChars == -1) throw new InputMismatchException();\\r\\n\\t\\t\\tif (curChar >= numChars) {\\r\\n\\t\\t\\t\\tcurChar = 0;\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\tnumChars = stream.read(buf);\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (numChars == -1) return -1; // end of file\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn buf[curChar++];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// to read in entire lines, replace c <= ' '\\r\\n\\t\\t// with a function that checks whether c is a line break\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\tint c; do { c = nextByte(); } while (c <= ' ');\\r\\n\\t\\t\\tStringBuilder res = new StringBuilder();\\r\\n\\t\\t\\tdo { res.appendCodePoint(c); c = nextByte(); } while (c > ' ');\\r\\n\\t\\t\\treturn res.toString();\\r\\n\\t\\t}\\r\\n\\t\\tpublic int nextInt() { // nextLong() would be implemented similarly\\r\\n\\t\\t\\tint c; do { c = nextByte(); } while (c <= ' ');\\r\\n\\t\\t\\tint sgn = 1; if (c == '-') { sgn = -1; c = nextByte(); }\\r\\n\\t\\t\\tint res = 0;\\r\\n\\t\\t\\tdo {\\r\\n\\t\\t\\t\\tif (c < '0' || c > '9')\\r\\n\\t\\t\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t\\t\\tres = 10*res+c-'0';\\r\\n\\t\\t\\t\\tc = nextByte();\\r\\n\\t\\t\\t} while (c > ' ');\\r\\n\\t\\t\\treturn res * sgn;\\r\\n\\t\\t}\\r\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\r\\n\\t}\\r\\n\\t// EndCodeSnip{FastIO}\\r\\n}\\n\"\n          })\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1632","source":"CSES","title":"Movie Festival II","author":"Shreyas Thumathy, Benjamin Qi, Nathan Gong"},"parent":{"name":"cses-1632","relativePath":"cses-1632.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"greedy-sorting","title":"Greedy Algorithms with Sorting"}}}}]},"problemInfo":{"uniqueId":"cses-1632","url":"https://cses.fi/problemset/task/1632"}},"pageContext":{"id":"cses-1632"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}