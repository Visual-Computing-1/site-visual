{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-sloth-naptime/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cfgym-102694C\", source = \"CF\", title = \"Sloth Naptime\", author = \"Sofia Yang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/81527\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Announcement With Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Basically the problem statement asks if given a path from a start node to an end\\r\\nnode on a tree, how far the sloth will travel if it has a set amount of energy,\\r\\nand each edge on the path has an energy cost.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We know that the sloth will always try to move upwards from the start node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{st}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">st</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{st}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5536em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">st</span></span></span></span></span>\"\n      }), \" to\\r\\nthe least common ancestor of the start and end nodes \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{lca}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lca</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lca}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lca</span></span></span></span></span>\"\n      }), \", and then\\r\\nmove downwards from the least common ancestor towards the end node\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{end}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">end</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{end}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">end</span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist}(i, j)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist</mtext><mo stretchy=\\\"false\\\">(</mo><mi>i</mi><mo separator=\\\"true\\\">,</mo><mi>j</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist}(i, j)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist</span></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" be the distance from node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" to node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So if the sloth has energy amount \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"e\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\\\"application/x-tex\\\">e</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span></span></span></span>\"\n      }), \", there are 3 separate cases:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"e \\\\geq \\\\texttt{dist}(dist(\\\\texttt{st}, \\\\texttt{end})\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>e</mi><mo>≥</mo><mtext mathvariant=\\\"monospace\\\">dist</mtext><mo stretchy=\\\"false\\\">(</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">st</mtext><mo separator=\\\"true\\\">,</mo><mtext mathvariant=\\\"monospace\\\">end</mtext><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">e \\\\geq \\\\texttt{dist}(dist(\\\\texttt{st}, \\\\texttt{end})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist</span></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">st</span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">end</span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \". In this case the result will be the sloth reaching the end.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"e < \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{end})}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>e</mi><mo>&lt;</mo><mrow><mtext mathvariant=\\\"monospace\\\">dist(st,</mtext><mtext> </mtext><mtext mathvariant=\\\"monospace\\\">end)</mtext></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">e &lt; \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{end})}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.1389em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">st</span></span><span class=\\\"mord texttt\\\">, </span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">end</span></span><span class=\\\"mord texttt\\\">)</span></span></span></span></span>\"\n          }), \" and\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"e < \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{lca})}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>e</mi><mo>&lt;</mo><mrow><mtext mathvariant=\\\"monospace\\\">dist(st,</mtext><mtext> </mtext><mtext mathvariant=\\\"monospace\\\">lca)</mtext></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">e &lt; \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{lca})}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.1389em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">st</span></span><span class=\\\"mord texttt\\\">, </span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lca</span></span><span class=\\\"mord texttt\\\">)</span></span></span></span></span>\"\n          }), \" in which the result will be the\\r\\nsloth reaching the \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"e\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\\\"application/x-tex\\\">e</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span></span></span></span>\"\n          }), \"th parent of \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\texttt{st}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">st</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{st}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5536em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">st</span></span></span></span></span>\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"e < \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{end})}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>e</mi><mo>&lt;</mo><mrow><mtext mathvariant=\\\"monospace\\\">dist(st,</mtext><mtext> </mtext><mtext mathvariant=\\\"monospace\\\">end)</mtext></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">e &lt; \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{end})}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.1389em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">st</span></span><span class=\\\"mord texttt\\\">, </span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">end</span></span><span class=\\\"mord texttt\\\">)</span></span></span></span></span>\"\n          }), \" and\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"e \\\\geq \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{lca})}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>e</mi><mo>≥</mo><mrow><mtext mathvariant=\\\"monospace\\\">dist(st,</mtext><mtext> </mtext><mtext mathvariant=\\\"monospace\\\">lca)</mtext></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">e \\\\geq \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{lca})}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.1389em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">st</span></span><span class=\\\"mord texttt\\\">, </span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lca</span></span><span class=\\\"mord texttt\\\">)</span></span></span></span></span>\"\n          }), \" in which the result will be\\r\\nthe sloth reaching the \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"(e - \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{lca}))}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>e</mi><mo>−</mo><mrow><mtext mathvariant=\\\"monospace\\\">dist(st,</mtext><mtext> </mtext><mtext mathvariant=\\\"monospace\\\">lca))</mtext></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">(e - \\\\texttt{dist(\\\\texttt{st}, \\\\texttt{lca}))}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.1389em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">st</span></span><span class=\\\"mord texttt\\\">, </span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lca</span></span><span class=\\\"mord texttt\\\">))</span></span></span></span></span>\"\n          }), \"th\\r\\nparent of \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\texttt{end}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">end</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{end}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">end</span></span></span></span></span>\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So first, we can can run DFS once to find the depth of every node.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then we can create a matrix \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{anc}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">anc</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{anc}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">anc</span></span></span></span></span>\"\n      }), \" to store the ancestors of each node, where\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{anc[i][j]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">anc[i][j]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{anc[i][j]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.9167em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">anc[i][j]</span></span></span></span></span>\"\n      }), \" is the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2^j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mi>j</mi></msup></mrow><annotation encoding=\\\"application/x-tex\\\">2^j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8247em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8247em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \"th ancestor of node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After that, we can use binary lifting to answer each query by finding the least\\r\\ncommon ancestor of the start and end nodes, and then finding the right node that\\r\\nthe sloth will reach.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\npublic class SlothNaptime {\\r\\n\\tpublic static final int MAXN = (int) 3e5 + 5;\\r\\n\\tpublic static final int LOGN = (int) (Math.log(MAXN) / Math.log(2)) + 1;\\r\\n\\tpublic static ArrayList<Integer>[] adj = new ArrayList[MAXN];\\r\\n\\t// anc[i][j] is the 2^j-th parent of i.\\r\\n\\tpublic static int[][] anc = new int[MAXN][LOGN];\\r\\n\\tpublic static int[] depth = new int[MAXN];\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tfor (int i = 0; i < MAXN; i++) {\\r\\n\\t\\t\\tadj[i] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < N-1; i++) {\\r\\n\\t\\t\\tint a = io.nextInt() - 1;\\r\\n\\t\\t\\tint b = io.nextInt() - 1;\\r\\n\\t\\t\\tadj[a].add(b);\\r\\n\\t\\t\\tadj[b].add(a);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdfs(0, 0);\\r\\n\\t\\tint Q = io.nextInt();\\r\\n\\t\\tfor (int i = 1; i <= Q; i++) {\\r\\n\\t\\t\\tint start = io.nextInt() - 1;\\r\\n\\t\\t\\tint end = io.nextInt() - 1;\\r\\n\\t\\t\\tint energy = io.nextInt();\\r\\n\\t\\t\\tint lca = LCA(start, end);\\r\\n\\t\\t\\tint moveUpLen = depth[start] - depth[lca];\\r\\n\\t\\t\\tint moveDownLen = depth[end] - depth[lca];\\r\\n\\t\\t\\tint result;\\r\\n\\t\\t\\tif (energy <= moveUpLen) {\\r\\n\\t\\t\\t\\t// moves up from start towards the lca.\\r\\n\\t\\t\\t\\tresult = jump(start, energy) + 1;\\r\\n\\t\\t\\t} else if (energy <= moveUpLen + moveDownLen) {\\r\\n\\t\\t\\t\\t// moves up from start to the lca, then goes down towards end.\\r\\n\\t\\t\\t\\tresult = jump(end, moveDownLen - (energy - moveUpLen)) + 1;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// reaches the end.\\r\\n\\t\\t\\t\\tresult = end + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tSystem.out.println(result);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void dfs(int node, int par) {\\r\\n\\t\\tanc[node][0] = par;\\r\\n\\t\\tdepth[node] = depth[anc[node][0]] + 1;\\r\\n\\r\\n\\t\\t// initializes binary jumping for the current node.\\r\\n\\t\\tfor (int lvl = 1; lvl < LOGN; lvl++) {\\r\\n\\t\\t\\tanc[node][lvl] = anc[anc[node][lvl - 1]][lvl - 1];\\r\\n\\t\\t}\\r\\n\\t\\tfor (int next : adj[node]) {\\r\\n\\t\\t\\tif (next != par) dfs(next, node);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// jump(i, j) returns jth ancestor of node i.\\r\\n\\tpublic static int jump(int node, int level) {\\r\\n\\t\\tfor (int i = 0; i < LOGN; i++) {\\r\\n\\t\\t\\tif ((level & (1 << i)) > 0) {\\r\\n\\t\\t\\t\\tnode = anc[node][i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn (node > -1) ? node : 0;\\r\\n\\t}\\r\\n\\r\\n\\t// lca(i, j) returns least common ancestor of nodes i and j.\\r\\n\\tpublic static int LCA(int a, int b) {\\r\\n\\t\\tif (depth[a] < depth[b]) {\\r\\n\\t\\t\\tint tempA = a;\\r\\n\\t\\t\\ta = b;\\r\\n\\t\\t\\tb = tempA;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ta = jump(a, depth[a] - depth[b]);\\r\\n\\t\\tif (a == b) {\\r\\n\\t\\t\\treturn a;\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = LOGN - 1; i >= 0; i--) {\\r\\n\\t\\t\\tint newA = anc[a][i];\\r\\n\\t\\t\\tint newB = anc[b][i];\\r\\n\\t\\t\\tif (newA != newB) {\\r\\n\\t\\t\\t\\ta = newA;\\r\\n\\t\\t\\t\\tb = newB;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn anc[a][0];\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAXN = 3e5 + 5;\\r\\nconst int LOGN = log2(MAXN) + 1;\\r\\n\\r\\nint depth[MAXN];\\r\\n// anc[i][j] is the 2^j-th parent of i.\\r\\nint anc[MAXN][LOGN];\\r\\nvector<int> adj[MAXN];\\r\\n\\r\\nvoid dfs(int node, int par) {\\r\\n\\tanc[node][0] = par;\\r\\n\\tdepth[node] = depth[anc[node][0]] + 1;\\r\\n\\t// initializes binary jumping for the current node.\\r\\n\\tfor (int i = 1; i < LOGN; i++) {\\r\\n\\t\\tanc[node][i] = anc[anc[node][i - 1]][i - 1];\\r\\n\\t}\\r\\n\\tfor (int next : adj[node]) {\\r\\n\\t\\tif (next != par) {\\r\\n\\t\\t\\tdfs(next, node);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// jump(i, j) returns jth ancestor of node i\\r\\nint jump(int node, int level) {\\r\\n\\tfor (int i = 0; i < LOGN; i++) {\\r\\n\\t\\tif (level & (1 << i)) {\\r\\n\\t\\t\\tnode = anc[node][i];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn (node > -1) ? node : 0;\\r\\n}\\r\\n\\r\\n// lca(i, j) returns least common ancestor of nodes i and j.\\r\\nint LCA(int a, int b) {\\r\\n\\tif (depth[a] < depth[b]) {\\r\\n\\t\\tswap(a, b);\\r\\n\\t}\\r\\n\\ta = jump(a, depth[a] - depth[b]);\\r\\n\\tif (a == b) {\\r\\n\\t\\treturn a;\\r\\n\\t}\\r\\n\\tfor (int i = LOGN - 1; i >= 0; i--) {\\r\\n\\t\\tint newA = anc[a][i];\\r\\n\\t\\tint newB = anc[b][i];\\r\\n\\t\\tif (newA != newB) {\\r\\n\\t\\t\\ta = newA, b = newB;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn anc[a][0];\\r\\n}\\r\\n\\r\\n\\r\\nint main() {\\r\\n\\tint N; int Q;\\r\\n\\tcin >> N;\\r\\n\\tfor (int i = 0; i < N - 1; i++) {\\r\\n\\t\\tint a; int b;\\r\\n\\t\\tcin >> a >> b;\\r\\n\\t\\ta--;\\r\\n\\t\\tb--;\\r\\n\\t\\tadj[a].push_back(b);\\r\\n\\t\\tadj[b].push_back(a);\\r\\n\\t}\\r\\n\\r\\n\\tdfs(0, 0);\\r\\n\\tcin >> Q;\\r\\n\\tfor (int i = 1; i <= Q; i++) {\\r\\n\\t\\tint start, end, energy;\\r\\n\\t\\tcin >> start >> end >> energy;\\r\\n\\t\\tstart--;\\r\\n\\t\\tend--;\\r\\n\\t\\tint lca = LCA(start, end);\\r\\n\\t\\tint path1 = depth[start] - depth[lca];\\r\\n\\t\\tint path2 = depth[end] - depth[lca];\\r\\n\\t\\tint result;\\r\\n\\t\\tif (energy <= path1) {\\r\\n\\t\\t\\t// moves up from start towards the lca.\\r\\n\\t\\t\\tresult = jump(start, energy) + 1;\\r\\n\\t\\t} else if (energy <= path1 + path2) {\\r\\n\\t\\t\\t// moves up from start to the lca, then goes down towards end.\\r\\n\\t\\t\\tresult = jump(end, path2 - (energy - path1)) + 1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// reaches the end.\\r\\n\\t\\t\\tresult = end + 1;\\r\\n\\t\\t}\\r\\n\\t\\tcout << result << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cfgym-102694C","source":"CF","title":"Sloth Naptime","author":"Sofia Yang"},"parent":{"name":"cfgym-102694C","relativePath":"cfgym-102694C.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"binary-jump","title":"Binary Jumping"}}}}]},"problemInfo":{"uniqueId":"cfgym-102694C","url":"https://codeforces.com/gym/102694/problem/C"}},"pageContext":{"id":"cfgym-102694C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}