{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/joi-2013synchronization/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"joi-13-synchronization\", source = \"JOI 2013\", title = \"Synchronization\", author = \"Benjamin Qi\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"method-1---\",\n      children: [_jsx(_components.a, {\n        href: \"#method-1---\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Method 1 - ?\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When deleting an edge, remember how many systems that edge was used to\\r\\nsynchronize. Also, each moment there is a connected component, all computers in\\r\\nthe component have the same value.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://bits-and-bytes.me/2020/01/05/JOI-2013-Synchronisation/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Andi Qu\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"^ This is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log^2N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log^2N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" I think\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we use HLD or LCT then it's \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"method-2---centroid-decomposition\",\n      children: [_jsx(_components.a, {\n        href: \"#method-2---centroid-decomposition\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Method 2 - Centroid Decomposition\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Looks like \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log^3 N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>3</mn></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log^3 N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" is very fast!\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\nusing ld = long double;\\r\\nusing db = double;\\r\\nusing str = string; // yay python!\\r\\n\\r\\nusing pi = pair<int,int>;\\r\\nusing pl = pair<ll,ll>;\\r\\nusing pd = pair<db,db>;\\r\\n\\r\\nusing vi = vector<int>;\\r\\nusing vb = vector<bool>;\\r\\nusing vl = vector<ll>;\\r\\nusing vd = vector<db>;\\r\\nusing vs = vector<str>;\\r\\nusing vpi = vector<pi>;\\r\\nusing vpl = vector<pl>;\\r\\nusing vpd = vector<pd>;\\r\\n\\r\\n#define tcT template<class T\\r\\n#define tcTU tcT, class U\\r\\n// ^ lol this makes everything look weird but I'll try it\\r\\ntcT> using V = vector<T>;\\r\\ntcT, size_t SZ> using AR = array<T,SZ>;\\r\\ntcT> using PR = pair<T,T>;\\r\\n\\r\\n// pairs\\r\\n#define mp make_pair\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\n// vectors\\r\\n// oops size(x), rbegin(x), rend(x) need C++17\\r\\n#define sz(x) int((x).size())\\r\\n#define bg(x) begin(x)\\r\\n#define all(x) bg(x), end(x)\\r\\n#define rall(x) x.rbegin(), x.rend()\\r\\n#define sor(x) sort(all(x))\\r\\n#define rsz resize\\r\\n#define ins insert\\r\\n#define ft front()\\r\\n#define bk back()\\r\\n#define pb push_back\\r\\n#define eb emplace_back\\r\\n#define pf push_front\\r\\n\\r\\n#define lb lower_bound\\r\\n#define ub upper_bound\\r\\ntcT> int lwb(V<T>& a, const T& b) { return int(lb(all(a),b)-bg(a)); }\\r\\n\\r\\n// loops\\r\\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\\r\\n#define F0R(i,a) FOR(i,0,a)\\r\\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\\r\\n#define R0F(i,a) ROF(i,0,a)\\r\\n#define trav(a,x) for (auto& a: x)\\r\\n\\r\\nconst int MOD = 1e9+7; // 998244353;\\r\\nconst int MX = 2e5+5;\\r\\nconst ll INF = 1e18; // not too close to LLONG_MAX\\r\\nconst ld PI = acos((ld)-1);\\r\\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\\r\\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());\\r\\ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\\r\\n\\r\\n// bitwise ops\\r\\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\\r\\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\\r\\nconstexpr int bits(int x) { // assert(x >= 0); // make C++11 compatible until USACO updates ...\\r\\n\\treturn x == 0 ? 0 : 31-__builtin_clz(x); } // floor(log2(x))\\r\\nconstexpr int p2(int x) { return 1<<x; }\\r\\nconstexpr int msk2(int x) { return p2(x)-1; }\\r\\n\\r\\nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\\r\\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\\r\\n\\r\\ntcT> bool ckmin(T& a, const T& b) {\\r\\n\\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\\r\\ntcT> bool ckmax(T& a, const T& b) {\\r\\n\\treturn a < b ? a = b, 1 : 0; }\\r\\n\\r\\ntcTU> T fstTrue(T lo, T hi, U f) {\\r\\n\\thi ++; assert(lo <= hi); // assuming f is increasing\\r\\n\\twhile (lo < hi) { // find first index such that f is true\\r\\n\\t\\tT mid = lo+(hi-lo)/2;\\r\\n\\t\\tf(mid) ? hi = mid : lo = mid+1;\\r\\n\\t}\\r\\n\\treturn lo;\\r\\n}\\r\\ntcTU> T lstTrue(T lo, T hi, U f) {\\r\\n\\tlo --; assert(lo <= hi); // assuming f is decreasing\\r\\n\\twhile (lo < hi) { // find first index such that f is true\\r\\n\\t\\tT mid = lo+(hi-lo+1)/2;\\r\\n\\t\\tf(mid) ? lo = mid : hi = mid-1;\\r\\n\\t}\\r\\n\\treturn lo;\\r\\n}\\r\\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\\r\\n\\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\\r\\ntcTU> void erase(T& t, const U& u) { // don't erase\\r\\n\\tauto it = t.find(u); assert(it != end(t));\\r\\n\\tt.erase(it); } // element that doesn't exist from (multi)set\\r\\n\\r\\n// INPUT\\r\\n#define tcTUU tcT, class ...U\\r\\ntcT> void re(complex<T>& c);\\r\\ntcTU> void re(pair<T,U>& p);\\r\\ntcT> void re(V<T>& v);\\r\\ntcT, size_t SZ> void re(AR<T,SZ>& a);\\r\\n\\r\\ntcT> void re(T& x) { cin >> x; }\\r\\nvoid re(db& d) { str t; re(t); d = stod(t); }\\r\\nvoid re(ld& d) { str t; re(t); d = stold(t); }\\r\\ntcTUU> void re(T& t, U&... u) { re(t); re(u...); }\\r\\n\\r\\ntcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; }\\r\\ntcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\\r\\ntcT> void re(V<T>& x) { trav(a,x) re(a); }\\r\\ntcT, size_t SZ> void re(AR<T,SZ>& x) { trav(a,x) re(a); }\\r\\ntcT> void rv(int n, V<T>& x) { x.rsz(n); re(x); }\\r\\n\\r\\n// TO_STRING\\r\\n#define ts to_string\\r\\nstr ts(char c) { return str(1,c); }\\r\\nstr ts(const char* s) { return (str)s; }\\r\\nstr ts(str s) { return s; }\\r\\nstr ts(bool b) {\\r\\n\\t#ifdef LOCAL\\r\\n\\t\\treturn b ? \\\"true\\\" : \\\"false\\\";\\r\\n\\t#else\\r\\n\\t\\treturn ts((int)b);\\r\\n\\t#endif\\r\\n}\\r\\ntcT> str ts(complex<T> c) {\\r\\n\\tstringstream ss; ss << c; return ss.str(); }\\r\\nstr ts(V<bool> v) {\\r\\n\\tstr res = \\\"{\\\"; F0R(i,sz(v)) res += char('0'+v[i]);\\r\\n\\tres += \\\"}\\\"; return res; }\\r\\ntemplate<size_t SZ> str ts(bitset<SZ> b) {\\r\\n\\tstr res = \\\"\\\"; F0R(i,SZ) res += char('0'+b[i]);\\r\\n\\treturn res; }\\r\\ntcTU> str ts(pair<T,U> p);\\r\\ntcT> str ts(T v) { // containers with begin(), end()\\r\\n\\t#ifdef LOCAL\\r\\n\\t\\tbool fst = 1; str res = \\\"{\\\";\\r\\n\\t\\tfor (const auto& x: v) {\\r\\n\\t\\t\\tif (!fst) res += \\\", \\\";\\r\\n\\t\\t\\tfst = 0; res += ts(x);\\r\\n\\t\\t}\\r\\n\\t\\tres += \\\"}\\\"; return res;\\r\\n\\t#else\\r\\n\\t\\tbool fst = 1; str res = \\\"\\\";\\r\\n\\t\\tfor (const auto& x: v) {\\r\\n\\t\\t\\tif (!fst) res += \\\" \\\";\\r\\n\\t\\t\\tfst = 0; res += ts(x);\\r\\n\\t\\t}\\r\\n\\t\\treturn res;\\r\\n\\r\\n\\t#endif\\r\\n}\\r\\ntcTU> str ts(pair<T,U> p) {\\r\\n\\t#ifdef LOCAL\\r\\n\\t\\treturn \\\"(\\\"+ts(p.f)+\\\", \\\"+ts(p.s)+\\\")\\\";\\r\\n\\t#else\\r\\n\\t\\treturn ts(p.f)+\\\" \\\"+ts(p.s);\\r\\n\\t#endif\\r\\n}\\r\\n\\r\\n// OUTPUT\\r\\ntcT> void pr(T x) { cout << ts(x); }\\r\\ntcTUU> void pr(const T& t, const U&... u) {\\r\\n\\tpr(t); pr(u...); }\\r\\nvoid ps() { pr(\\\"\\\\n\\\"); } // print w/ spaces\\r\\ntcTUU> void ps(const T& t, const U&... u) {\\r\\n\\tpr(t); if (sizeof...(u)) pr(\\\" \\\"); ps(u...); }\\r\\n\\r\\n// DEBUG\\r\\nvoid DBG() { cerr << \\\"]\\\" << endl; }\\r\\ntcTUU> void DBG(const T& t, const U&... u) {\\r\\n\\tcerr << ts(t); if (sizeof...(u)) cerr << \\\", \\\";\\r\\n\\tDBG(u...); }\\r\\n#ifdef LOCAL // compile with -DLOCAL, chk -> fake assert\\r\\n\\t#define dbg(...) cerr << \\\"Line(\\\" << __LINE__ << \\\") -> [\\\" << #__VA_ARGS__ << \\\"]: [\\\", DBG(__VA_ARGS__)\\r\\n\\t#define chk(...) if (!(__VA_ARGS__)) cerr << \\\"Line(\\\" << __LINE__ << \\\") -> function(\\\" \\\\\\r\\n\\t\\t << __FUNCTION__  << \\\") -> CHK FAILED: (\\\" << #__VA_ARGS__ << \\\")\\\" << \\\"\\\\n\\\", exit(0);\\r\\n#else\\r\\n\\t#define dbg(...) 0\\r\\n\\t#define chk(...) 0\\r\\n#endif\\r\\n\\r\\nvoid setPrec() { cout << fixed << setprecision(15); }\\r\\nvoid unsyncIO() { cin.tie(0)->sync_with_stdio(0); }\\r\\n// FILE I/O\\r\\nvoid setIn(str s) { freopen(s.c_str(),\\\"r\\\",stdin); }\\r\\nvoid setOut(str s) { freopen(s.c_str(),\\\"w\\\",stdout); }\\r\\nvoid setIO(str s = \\\"\\\") {\\r\\n\\tunsyncIO(); setPrec();\\r\\n\\t// cin.exceptions(cin.failbit);\\r\\n\\t// throws exception when do smth illegal\\r\\n\\t// ex. try to read letter into int\\r\\n\\tif (sz(s)) setIn(s+\\\".in\\\"), setOut(s+\\\".out\\\"); // for USACO\\r\\n}\\r\\n\\r\\nvpi adj[MX];\\r\\nint N,M,Q,ans[MX];\\r\\nvi change[MX];\\r\\nvpi bad[MX];\\r\\n\\r\\nbool done[MX]; // processed as centroid yet\\r\\nint sub[MX],cen[MX]; // subtree size, centroid anc\\r\\nmap<int,list<int>> to[MX], from[MX];\\r\\nvoid dfs(int x, int p) { sub[x] = 1;\\r\\n\\ttrav(y,adj[x]) if (!done[y.f] && y.f != p)\\r\\n\\t\\tdfs(y.f,x), sub[x] += sub[y.f];\\r\\n}\\r\\nint centroid(int x) {\\r\\n\\tdfs(x,-1);\\r\\n\\tfor (int sz = sub[x];;) {\\r\\n\\t\\tpi mx = {0,0};\\r\\n\\t\\ttrav(y,adj[x]) if (!done[y.f] && sub[y.f] < sub[x])\\r\\n\\t\\t\\tckmax(mx,{sub[y.f],y.f});\\r\\n\\t\\tif (mx.f*2 <= sz) return x;\\r\\n\\t\\tx = mx.s;\\r\\n\\t}\\r\\n}\\r\\nvoid ad(list<int>& a, list<int>& b) {\\r\\n\\ta.splice(end(a),b); assert(!sz(b));\\r\\n}\\r\\nvoid merge(map<int,list<int>>& a, map<int,list<int>>& b) {\\r\\n\\tif (sz(a) < sz(b)) swap(a,b);\\r\\n\\ttrav(t,b) ad(a[t.f],t.s);\\r\\n\\tb.clear();\\r\\n}\\r\\n\\r\\nvoid getAll(list<int>& x, map<int,list<int>>& a, pi p) {\\r\\n\\twhile (1) {\\r\\n\\t\\tauto it = a.ub(p.f);\\r\\n\\t\\tif (it == end(a) || it->f >= p.s) break;\\r\\n\\t\\tad(x,it->s); a.erase(it);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid oops(int a, int b) {\\r\\n\\ttrav(t,adj[a]) if (!done[t.f] && t.f != b) {\\r\\n\\t\\toops(t.f,a);\\r\\n\\t\\ttrav(z,bad[t.s]) {\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tlist<int> x; getAll(x,to[t.f],z);\\r\\n\\t\\t\\t\\tif (sz(x)) ad(to[t.f][z.f],x);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tlist<int> x; getAll(x,from[t.f],z);\\r\\n\\t\\t\\t\\tif (sz(x)) ad(from[t.f][z.s],x);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tmerge(to[a],to[t.f]), merge(from[a],from[t.f]);\\r\\n\\t}\\r\\n\\tto[a][M+1].pb(a); from[a][0].pb(a);\\r\\n}\\r\\n\\r\\nint comp[MX];\\r\\n\\r\\nvoid makeLabel(int a, int b, int cnt) {\\r\\n\\tcomp[a] = cnt;\\r\\n\\ttrav(t,adj[a]) if (!done[t.f] && t.f != b) makeLabel(t.f,a,cnt);\\r\\n}\\r\\n\\r\\nint genLabel(int x) {\\r\\n\\tcomp[x] = 0; int cnt = 1;\\r\\n\\ttrav(y,adj[x]) if (!done[y.f]) {\\r\\n\\t\\tmakeLabel(y.f,x,cnt++);\\r\\n\\t}\\r\\n\\treturn cnt;\\r\\n}\\r\\n\\r\\nvoid gen(int CEN, int _x) { // CEN = centroid above x\\r\\n\\tint x = centroid(_x); done[x] = 1; cen[x] = CEN;\\r\\n\\tsub[x] = sub[_x];\\r\\n\\tint num = genLabel(x);\\r\\n\\toops(x,-1);\\r\\n\\tvi cnt(num);\\r\\n\\tvector<pair<int,list<int>>> TO(all(to[x]));\\r\\n\\tvector<pair<int,list<int>>> FROM(all(from[x]));\\r\\n\\tint ind = 0, sum = 0;\\r\\n\\ttrav(t,TO) {\\r\\n\\t\\twhile (ind < sz(FROM) && FROM[ind].f <= t.f) {\\r\\n\\t\\t\\ttrav(u,FROM[ind].s) cnt[comp[u]] ++, sum ++;\\r\\n\\t\\t\\tind ++;\\r\\n\\t\\t}\\r\\n\\t\\ttrav(u,t.s) {\\r\\n\\t\\t\\tans[u] += sum;\\r\\n\\t\\t\\tif (comp[u]) ans[u] -= cnt[comp[u]];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tto[x].clear(), from[x].clear();\\r\\n\\ttrav(y,adj[x]) if (!done[y.f]) gen(x,y.f);\\r\\n}\\r\\n\\r\\nvoid init(int _N) { N = _N; FOR(i,1,N+1) done[i] = 0;\\r\\n\\tgen(-1,1); } // start at vert 1\\r\\n\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(); re(N,M,Q);\\r\\n\\tF0R(i,N-1) {\\r\\n\\t\\tint X,Y; re(X,Y);\\r\\n\\t\\tadj[X].pb({Y,i}), adj[Y].pb({X,i});\\r\\n\\t}\\r\\n\\tF0R(i,N-1) change[i].pb(-5);\\r\\n\\tFOR(i,1,M+1) {\\r\\n\\t\\tint D; re(D); D --;\\r\\n\\t\\tchange[D].pb(i);\\r\\n\\t}\\r\\n\\tF0R(i,N-1) {\\r\\n\\t\\tif (sz(change[i])&1) change[i].pb(M+5);\\r\\n\\t\\tfor (int j = 0; j < sz(change[i]); j += 2)\\r\\n\\t\\t\\tbad[i].pb({change[i][j],change[i][j+1]});\\r\\n\\t}\\r\\n\\tinit(N);\\r\\n\\tF0R(i,Q) {\\r\\n\\t\\tint c; re(c);\\r\\n\\t\\tps(ans[c]);\\r\\n\\t}\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"joi-13-synchronization","source":"JOI 2013","title":"Synchronization","author":"Benjamin Qi"},"parent":{"name":"joi-13-synchronization","relativePath":"joi-13-synchronization.mdx"},"toc":{"cpp":[{"depth":2,"value":"Method 1 - ?","slug":"method-1---"},{"depth":2,"value":"Method 2 - Centroid Decomposition","slug":"method-2---centroid-decomposition"}],"java":[{"depth":2,"value":"Method 1 - ?","slug":"method-1---"},{"depth":2,"value":"Method 2 - Centroid Decomposition","slug":"method-2---centroid-decomposition"}],"py":[{"depth":2,"value":"Method 1 - ?","slug":"method-1---"},{"depth":2,"value":"Method 2 - Centroid Decomposition","slug":"method-2---centroid-decomposition"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"centroid","title":"Centroid Decomposition"}}}},{"node":{"module":{"frontmatter":{"id":"hld","title":"Heavy-Light Decomposition"}}}}]},"problemInfo":{"uniqueId":"joi-13-synchronization","url":"https://oj.uz/problem/view/JOI13_synchronization"}},"pageContext":{"id":"joi-13-synchronization"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}