{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-643-diamond-collector/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-643\", source = \"USACO Silver 2016 Open\", title = \"Diamond Collector\", author = \"Nathan Wang, Albert Ye\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_diamond_silver_open16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"diamond.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"diamond.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tint n, k; cin >> n >> k;\\r\\n\\tint A[n];\\r\\n\\tfor (int i = 0; i < n; i++) cin >> A[i];\\r\\n\\r\\n\\tsort(A, A+n);\\r\\n\\r\\n\\t// how many diamonds we can take\\r\\n\\t// assuming i is the leftmost diamond\\r\\n\\tint canTakeLeft[n];\\r\\n\\tint l = 0, r = 0;\\r\\n\\tfor (; l < n; l++) {\\r\\n\\t\\twhile (r < n && A[r] - A[l] <= k) r++;\\r\\n\\t\\tcanTakeLeft[l] = r - l;\\r\\n\\t}\\r\\n\\r\\n\\t// maxValAfterI[i] = max value of canTakeLeft[x] for some x >= i.\\r\\n\\tint maxValAfterI[n+1];\\r\\n\\tmaxValAfterI[n] = 0;\\r\\n\\tfor (int i = n-1; i >= 0; i--) {\\r\\n\\t\\tmaxValAfterI[i] = max(maxValAfterI[i+1], canTakeLeft[i]);\\r\\n\\t}\\r\\n\\r\\n\\tint ans = 0;\\r\\n\\tfor (int l = 0; l < n; l++) {\\r\\n\\t\\tans = max(ans, canTakeLeft[l] + maxValAfterI[l + canTakeLeft[l]]);\\r\\n\\t}\\r\\n\\tcout << ans << endl;\\r\\n\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation-1\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.p, {\n          children: \"Source: Nick Wu, from the official USACO editorial\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\npublic class diamondS {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new FileReader(\\\"diamond.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\\\"diamond.out\\\")));\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tint n = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint k = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint[] list = new int[n];\\r\\n\\t\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\t\\tlist[i] = Integer.parseInt(br.readLine());\\r\\n\\t\\t}\\r\\n\\t\\tArrays.sort(list);\\r\\n\\t\\t// leftmostIndex[i] stores the index of the smallest diamond that can be included given that\\r\\n\\t\\t// the largest diamond in the case has size list[i].\\r\\n\\t\\tint[] leftmostIndex = getLeftmost(list, k);\\r\\n\\t\\t// leftSize[i] stores the maximum number of diamonds given that all diamonds have size at most list[i].\\r\\n\\t\\tint[] leftSize = new int[n];\\r\\n\\t\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\t\\tleftSize[i] = i - leftmostIndex[i] + 1;\\r\\n\\t\\t\\tif(i > 0) {\\r\\n\\t\\t\\t\\tleftSize[i] = Math.max(leftSize[i], leftSize[i-1]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// rightmostIndex[i] stores the index of the smallest diamond that can be included given that\\r\\n\\t\\t// the smallest diamond in the case has size list[i].\\r\\n\\t\\tint[] rightmostIndex = getRightmost(list, k);\\r\\n\\t\\t// leftSize[i] stores the maximum number of diamonds given that all diamonds have size at least list[i].\\r\\n\\t\\tint[] rightSize = new int[n];\\r\\n\\t\\tfor(int i = n-1; i >= 0; i--) {\\r\\n\\t\\t\\trightSize[i] = rightmostIndex[i] - i + 1;\\r\\n\\t\\t\\tif(i < n-1) {\\r\\n\\t\\t\\t\\trightSize[i] = Math.max(rightSize[i], rightSize[i+1]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tint ret = 0;\\r\\n\\t\\tfor(int i = 0; i < n-1; i++) {\\r\\n\\t\\t\\tret = Math.max(ret, leftSize[i] + rightSize[i+1]);\\r\\n\\t\\t}\\r\\n\\t\\tpw.println(ret);\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n\\r\\n\\tpublic static int[] getRightmost(int[] list, int k) {\\r\\n\\t\\tint[] ret = new int[list.length];\\r\\n\\t\\tint j = list.length-1;\\r\\n\\t\\tfor(int i = list.length-1; i >= 0; i--) {\\r\\n\\t\\t\\twhile(j >= 0 && list[j] - list[i] > k) {\\r\\n\\t\\t\\t\\tj--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tret[i] = j;\\r\\n\\t\\t}\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n\\r\\n\\tpublic static int[] getLeftmost(int[] list, int k) {\\r\\n\\t\\tint[] ret = new int[list.length];\\r\\n\\t\\tint j = 0;\\r\\n\\t\\tfor(int i = 0; i < list.length; i++) {\\r\\n\\t\\t\\twhile(j < list.length && list[i] - list[j] > k) {\\r\\n\\t\\t\\t\\tj++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tret[i] = j;\\r\\n\\t\\t}\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n\\r\\n}\\n\"\n          })\n        })]\n      }), _jsxs(PySection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation-2\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation-2\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            children: \"import sys\\r\\n\\r\\nsys.stdin = open(\\\"diamond.in\\\", \\\"r\\\")\\r\\nsys.stdout = open(\\\"diamond.out\\\", \\\"w\\\")\\r\\n\\r\\nn, k = map(int,input().split())\\r\\na = sorted([int(input()) for i in range(n)])\\r\\n\\r\\nmx = [0]*(n+1) # maximum number of diamonds assuming i is the smallest diamond\\r\\nj = 0\\r\\nfor i in range(n) :\\r\\n\\twhile j < n and a[j]-a[i] <= k :\\r\\n\\t\\tj += 1\\r\\n\\tj -= 1\\r\\n\\tmx[i] = j-i+1\\r\\n\\r\\nsmx = [0 for i in range(n+1)] # suffix maximum\\r\\nsmx[n-1] = mx[n-1]\\r\\nfor i in range(n-2, -1, -1) :\\r\\n\\tsmx[i] = max(mx[i], smx[i+1])\\r\\n\\r\\nans = 0\\r\\nfor i in range(n) :\\r\\n\\tans = max(ans, mx[i] + smx[i+mx[i]])\\r\\nprint(ans)\\n\"\n          })\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-643","source":"USACO Silver 2016 Open","title":"Diamond Collector","author":"Nathan Wang, Albert Ye"},"parent":{"name":"usaco-643","relativePath":"usaco-643.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation-1"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation-2"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"two-pointers","title":"Two Pointers"}}}}]},"problemInfo":{"uniqueId":"usaco-643","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=643"}},"pageContext":{"id":"usaco-643"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}