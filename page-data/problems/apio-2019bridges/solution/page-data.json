{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/apio-2019bridges/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"apio-19-bridges\", source = \"APIO 2019\", title = \"Bridges\", author = \"Andi Qu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {MATHSPAN, HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The main idea in this problem is to use square-root decomposition on queries.\\r\\nFor convenience, call type 1 queries \", _jsx(_components.strong, {\n        children: \"updates\"\n      }), \" and type 2 queries\\r\\n\", _jsx(_components.strong, {\n        children: \"calculations\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, split the queries into blocks of about \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\sqrt N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\sqrt N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.04em;vertical-align:-0.1133em;\\\"></span><span class=\\\"mord sqrt\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.9267em;\\\"><span class=\\\"svg-align\\\" style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;padding-left:0.833em;\\\">N</span></span><span style=\\\"top:-2.8867em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"hide-tail\\\" style=\\\"min-width:0.853em;height:1.08em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\\nc69,-144,104.5,-217.7,106.5,-221\\nl0 -0\\nc5.3,-9.3,12,-14,20,-14\\nH400000v40H845.2724\\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1133em;\\\"><span></span></span></span></span></span></span></span></span>\"\n      }), \" queries. In each block,\\r\\nthere are \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\sqrt N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msqrt><mi>N</mi></msqrt><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\sqrt N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1767em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord sqrt\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.9267em;\\\"><span class=\\\"svg-align\\\" style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;padding-left:0.833em;\\\">N</span></span><span style=\\\"top:-2.8867em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"hide-tail\\\" style=\\\"min-width:0.853em;height:1.08em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\\nc69,-144,104.5,-217.7,106.5,-221\\nl0 -0\\nc5.3,-9.3,12,-14,20,-14\\nH400000v40H845.2724\\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1133em;\\\"><span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" updates or calculations. For each block:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Split the bridges into two groups: \", _jsx(_components.strong, {\n          children: \"changed\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"unchanged\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If we sort the calculations and unchanged bridges in decreasing order of\\r\\nweight, we can simply use DSU to find which nodes are connected from those\\r\\nbridges alone.\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"These connected nodes are constant for all calculations in the current block\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To handle the updates:\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Iterate over the queries in the current block (without sorting)\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"If the query is an update, simply update the bridge's weight\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"If the query is a calculation, iterate through each changed bridge and\\r\\nconnect the nodes if the weight limit is above the query's weight limit\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: \"This works because this means the answer for the current query is\\r\\ndependent only on previous updates\"\n              }), \"\\n\", _jsx(_components.li, {\n                children: \"The key thing here is that we need a way to roll back DSU unions, since\\r\\nthe set of \\\"good\\\" bridges may differ from query to query\"\n              }), \"\\n\", _jsx(_components.li, {\n                children: \"To achieve this, we simply use DSU with path balancing only and keep a\\r\\nstack of previous DSU operations\"\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The complexity of this algorithm is thus \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((Q + M) \\\\sqrt Q)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>Q</mi><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo><msqrt><mi>Q</mi></msqrt><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((Q + M) \\\\sqrt Q)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0794em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord sqrt\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8294em;\\\"><span class=\\\"svg-align\\\" style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"padding-left:0.833em;\\\">Q</span></span><span style=\\\"top:-2.7894em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"hide-tail\\\" style=\\\"min-width:0.853em;height:1.08em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\\nc69,-144,104.5,-217.7,106.5,-221\\nl0 -0\\nc5.3,-9.3,12,-14,20,-14\\nH400000v40H845.2724\\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2106em;\\\"><span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". Some\\r\\nconstant-factor optimization may be needed to get this to run in time though.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\n#define FOR(i, x, y) for (int i = x; i < y; i++)\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nconst int B = 1000;\\r\\n\\r\\nint n, m, q;\\r\\n\\r\\nstack<int> stck;\\r\\nint sz[100001], cmp[100001];\\r\\n\\r\\nvoid reset() {\\r\\n\\tiota(cmp + 1, cmp + 1 + n, 1);\\r\\n\\tfill(sz + 1, sz + n + 1, 1);\\r\\n}\\r\\n\\r\\ninline int find(int a) {\\r\\n\\twhile (cmp[a] != a) a = cmp[a];\\r\\n\\treturn a;\\r\\n}\\r\\n\\r\\nvoid onion(int a, int b) {\\r\\n\\ta = find(a), b = find(b);\\r\\n\\tif (a == b) return;\\r\\n\\tif (sz[a] > sz[b]) swap(a, b);\\r\\n\\tstck.push(a);\\r\\n\\tsz[b] += sz[a];\\r\\n\\tcmp[a] = cmp[b];\\r\\n}\\r\\n\\r\\nvoid rollback(int x) {\\r\\n\\twhile (stck.size() > x) {\\r\\n\\t\\tint k = stck.top();\\r\\n\\t\\tstck.pop();\\r\\n\\t\\tsz[cmp[k]] -= sz[k];\\r\\n\\t\\tcmp[k] = k;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint u[100001], v[100001], w[100001];\\r\\nint t[100001], x[100001], y[100001];\\r\\nbool changed[100001];\\r\\nvector<int> to_join[B];\\r\\nint ans[100001];\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\tcin >> n >> m;\\r\\n\\tFOR(i, 1, m + 1) cin >> u[i] >> v[i] >> w[i];\\r\\n\\tcin >> q;\\r\\n\\tFOR(i, 1, q + 1) cin >> t[i] >> x[i] >> y[i];\\r\\n\\r\\n\\tfor (int l = 1; l <= q; l += B) {\\r\\n\\t\\tint r = min(q + 1, l + B);\\r\\n\\t\\treset();\\r\\n\\t\\tfill(changed + 1, changed + m + 1, false);\\r\\n\\r\\n\\t\\tvector<int> ask, upd, unchanged;\\r\\n\\t\\tFOR(i, l, r) {\\r\\n\\t\\t\\tif (t[i] == 1) {\\r\\n\\t\\t\\t\\tchanged[x[i]] = true;\\r\\n\\t\\t\\t\\tupd.push_back(i);\\r\\n\\t\\t\\t} else ask.push_back(i);\\r\\n\\t\\t}\\r\\n\\t\\tFOR(i, 1, m + 1) if (!changed[i]) unchanged.push_back(i);\\r\\n\\r\\n\\t\\tFOR(i, l, r) {\\r\\n\\t\\t\\tif (t[i] == 1) w[x[i]] = y[i];\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tto_join[i - l].clear();\\r\\n\\t\\t\\t\\tfor (int j : upd) if (w[x[j]] >= y[i]) to_join[i - l].push_back(x[j]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsort(ask.begin(), ask.end(), [&](int a, int b) { return y[a] > y[b]; });\\r\\n\\t\\tsort(unchanged.begin(), unchanged.end(), [&](int a, int b) { return w[a] > w[b]; });\\r\\n\\r\\n\\t\\tint ptr = 0;\\r\\n\\t\\tfor (int i : ask) {\\r\\n\\t\\t\\twhile (ptr < unchanged.size() && w[unchanged[ptr]] >= y[i]) {\\r\\n\\t\\t\\t\\tonion(u[unchanged[ptr]], v[unchanged[ptr]]);\\r\\n\\t\\t\\t\\tptr++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tint prev_size = stck.size();\\r\\n\\t\\t\\tfor (int j : to_join[i - l]) onion(u[j], v[j]);\\r\\n\\t\\t\\tans[i] = sz[find(x[i])];\\r\\n\\t\\t\\trollback(prev_size);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tFOR(i, 1, q + 1) if (t[i] == 2) cout << ans[i] << '\\\\n';\\r\\n\\treturn 0;\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"apio-19-bridges","source":"APIO 2019","title":"Bridges","author":"Andi Qu"},"parent":{"name":"apio-19-bridges","relativePath":"apio-19-bridges.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sqrt","title":"Square Root Decomposition"}}}}]},"problemInfo":{"uniqueId":"apio-19-bridges","url":"https://oj.uz/problem/view/APIO19_bridges"}},"pageContext":{"id":"apio-19-bridges"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}