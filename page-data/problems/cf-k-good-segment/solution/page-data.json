{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-k-good-segment/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-616D\", source = \"CF\", title = \"Longest k-Good Segment\", author = \"Sofia Yang, Mohammad Nour Massri, Neo Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/22712\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can binary search for the largest valid segment size. If this segment is\\r\\nvalid, update the current value of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ret}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ret</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ret}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5536em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ret</span></span></span></span></span>\"\n      }), \" with our indices \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \".\\r\\nRather than using a \", _jsx(_components.code, {\n        children: \"map\"\n      }), \", we instead opt to use a presized\\r\\n\", _jsx(_components.a, {\n        href: \"/gold/faster-hashmap\",\n        children: \"HashTable\"\n      }), \" for faster \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \"\\r\\nquery operations.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\n//BeginCodeSnip{HashTable}\\r\\n\\r\\n/**\\r\\n * Description: Hash map with the same API as unordered\\\\_map, but \\\\tilde 3x faster.\\r\\n\\t * Initial capacity must be a power of 2 if provided.\\r\\n * Source: KACTL\\r\\n * Usage: ht<int,int> h({},{},{},{},{1<<16});\\r\\n */\\r\\n\\r\\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); \\r\\nconst long double PI = acos((long double)-1);\\r\\n\\r\\n#include <ext/pb_ds/assoc_container.hpp>\\r\\nusing namespace __gnu_pbds;\\r\\nstruct chash { /// use most bits rather than just the lowest ones\\r\\n\\tconst uint64_t C = ll(2e18 * PI) + 71; // large odd number\\r\\n\\tconst int RANDOM = rng();\\r\\n\\tll operator()(ll x) const { /// https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\\r\\n\\t\\treturn __builtin_bswap64((x^RANDOM)*C); }\\r\\n};\\r\\ntemplate<class K, class V> using um = unordered_map<K, V, chash>;\\r\\ntemplate<class K, class V> using ht = gp_hash_table<K, V, chash>;\\r\\ntemplate<class K, class V> V get(ht<K, V>& u, K x) {\\r\\n\\tauto it = u.find(x); return it == end(u) ? 0 : it -> s; }\\r\\n\\r\\n//EndCodeSnip{HashTable}\\r\\n\\r\\nconst int mx = 5e5+1;\\r\\n\\r\\nint n, k; int v[mx]; pi ret;\\r\\n\\r\\nint lowest = 0;\\r\\n\\r\\nbool check(int x) { \\r\\n\\tif(x > n) return 0;\\r\\n\\tht<int, int> s({},{},{},{},{1 << 19});\\r\\n\\tint j = 0;\\r\\n\\ts[v[0]]++;\\r\\n\\r\\n\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\t// constructs sliding window of size x\\r\\n\\t\\twhile(j < n - 1 && j < i + x - 1) {\\r\\n\\t\\t\\tj++;\\r\\n\\t\\t\\ts[v[j]]++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// checks for a new window\\r\\n\\t\\tif(sz(s) <= k && j - i == x - 1) {\\r\\n\\t\\t\\tif(x > lowest) {\\r\\n\\t\\t\\t\\tret = {i, j};\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn 1;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ts[v[i]]--;\\r\\n\\t\\tif(s[v[i]] <= 0) s.erase(v[i]);\\r\\n\\t}\\r\\n\\r\\n\\treturn 0;\\r\\n}\\r\\n\\r\\nint main() { setIO();\\r\\n\\r\\n\\tcin >> n >> k;\\r\\n\\tfor(int i = 0; i < n; i++) cin >> v[i];\\r\\n\\r\\n\\tint lo = 1, hi = n;\\r\\n\\tlo--; assert(lo <= hi); // assuming f is decreasing\\r\\n\\twhile (lo < hi) { // find first index such that f is true\\r\\n\\t\\tint mid = lo+(hi-lo+1)/2;\\r\\n\\t\\tcheck(mid) ? lo = mid : hi = mid - 1;\\r\\n\\t}\\r\\n\\r\\n\\tcout << ret.f + 1 << \\\" \\\" << ret.s + 1;\\r\\n}\\r\\n\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"\\r\\n#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\nconst int N = 5e5+9,MAX_Ai = 1e6+9;\\r\\nint n,k;\\r\\nint a[N];\\r\\nint frequency[MAX_Ai];//frequency of each number in the window\\r\\nint maxSegment,leftMaxSegment,rightMaxSegment;//max size of the segment and its ends\\r\\n\\r\\nint main(){\\r\\n\\tscanf(\\\"%d%d\\\",&n,&k);//large input data use scanf/printf instead of cin/cout\\r\\n\\tfor(int i=0;i<n;i++)\\r\\n\\t\\tscanf(\\\"%d\\\",a+i);\\r\\n\\r\\n\\tint r=-1;//the right end of the current window\\r\\n\\tint cntDifVal = 0;//the number of different values in the window\\r\\n\\r\\n\\t//if frequency[val] == 0 then adding val to the window will result in\\r\\n\\t//adding a new different element which increases the number of different\\r\\n\\t//values by 1\\r\\n\\r\\n\\tfor(int l=0;l<n;l++){//l is the left end of the window\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\twe can expand the window [l,r] to [l,r+1] if these 2 conditions hold:\\r\\n\\t\\t1. r < n-1 making sure we don't go beyond the array's boundaries\\r\\n\\t\\t2. adding the value a[r+1] to the window does not increase the\\r\\n\\t\\tnumber of different values in the window to be larger than k\\r\\n\\t\\t*/\\r\\n\\r\\n\\t\\twhile(r<n-1 && cntDifVal+(frequency[a[r+1]]==0) <= k){\\r\\n\\t\\t\\tcntDifVal += frequency[a[r+1]]==0;//update the number of different values\\r\\n\\t\\t\\tfrequency[a[r+1]]++;//update the frequency array\\r\\n\\t\\t\\tr++;//update the right end of the current window\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//update the answer if we find a larger segment\\r\\n\\t\\tif(r-l+1 > maxSegment){\\r\\n\\t\\t\\tmaxSegment = r-l+1;\\r\\n\\t\\t\\tleftMaxSegment = l;\\r\\n\\t\\t\\trightMaxSegment = r;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//here we discard the first element a[l] making the current segment [l+1,r]\\r\\n\\t\\tfrequency[a[l]]--;//update the frequency\\r\\n\\t\\tcntDifVal -= frequency[a[l]] == 0;//update the number of different values\\r\\n\\t}\\r\\n\\t//we add one because the answer should be 1-indexed\\r\\n\\tprintf(\\\"%d %d\\\\n\\\",leftMaxSegment+1,rightMaxSegment+1);\\r\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\npublic class KGood {\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tint K = io.nextInt();\\r\\n\\t\\tint difVal = 0;  // Number of different values in the window.\\r\\n\\t\\tint left = 0;\\r\\n\\t\\tint maxLen = 0;\\r\\n\\t\\tint maxL = 0;\\r\\n\\t\\tint maxR = 0;\\r\\n\\t\\tint[] arr = new int[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tarr[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint max = Arrays.stream(arr).max().getAsInt();\\r\\n\\t\\tint[] freq = new int[max + 1];  // Frequency of each number in the window.\\r\\n\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tint x = arr[i];\\r\\n\\t\\t\\t// Increment the frequency of the number.\\r\\n\\t\\t\\tif (freq[x] == 0) {\\r\\n\\t\\t\\t\\tfreq[x] = 1;\\r\\n\\t\\t\\t\\tdifVal++;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tfreq[x]++;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// If the window isn't valid, shift the left bound rightwards.\\r\\n\\t\\t\\twhile (difVal > K) {\\r\\n\\t\\t\\t\\tfreq[arr[left]]--;\\r\\n\\t\\t\\t\\tif (freq[arr[left]] == 0) {\\r\\n\\t\\t\\t\\t\\tdifVal--;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tleft++;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Update the window length.\\r\\n\\t\\t\\tint curLen = i - left + 1;\\r\\n\\t\\t\\tif (curLen > maxLen) {\\r\\n\\t\\t\\t\\tmaxLen = curLen;\\r\\n\\t\\t\\t\\tmaxL = left;\\r\\n\\t\\t\\t\\tmaxR = i;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.printf(\\\"%d %d%n\\\", maxL + 1, maxR + 1);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n}\\r\\n\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-616D","source":"CF","title":"Longest k-Good Segment","author":"Sofia Yang, Mohammad Nour Massri, Neo Wang"},"parent":{"name":"cf-616D","relativePath":"cf-616D.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Implementation","slug":"implementation-1"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Implementation","slug":"implementation-1"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Implementation","slug":"implementation-1"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sliding-window","title":"Sliding Window"}}}}]},"problemInfo":{"uniqueId":"cf-616D","url":"https://codeforces.com/contest/616/problem/D"}},"pageContext":{"id":"cf-616D"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}