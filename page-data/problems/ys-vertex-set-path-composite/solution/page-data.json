{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/ys-vertex-set-path-composite/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"ys-VertexSetPathComposite\", source = \"YS\", title = \"Vertex Set Path Composite\", author = \"Andrew Cheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log^2 N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>‚Å°</mo></mrow><mn>2</mn></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log^2 N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" from HLD\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Main Idea:\"\n      }), \"\\r\\nDifferent from a classic HLD problem, the nesting of functions does not follow the commutative property.\\r\\nIn other words, the answer of the query \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" is different from the answer of the query \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To solve this problem, we can break down the path from node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \" to node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" into two paths: from node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"LCA(u,v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">LCA(u,v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" and from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"LCA(u,v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">LCA(u,v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" to node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \".\\r\\nThe path from node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"LCA(u,v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">LCA(u,v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" will decrease in depth, and the path from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"LCA(u,v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">LCA(u,v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" to node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" will increase in depth.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can then maintain two segment trees.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first segment tree will calculate the equivalent function that results from moving from node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"LCA(u,v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">LCA(u,v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". And the second segment tree\\r\\nwill calculate the equivalent function that results from moving from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"LCA(u,v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">LCA(u,v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" to node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \". After this we can plug in the given \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" into the two\\r\\nfunctions to get the answer of the query.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It should be mentioned that the function at node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"LCA(u,v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">LCA(u,v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" should only be calculated once. To avoid calculating the node twice, we can intentionally avoid \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"LCA(u,v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">LCA(u,v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" during\\r\\nexactly one of the two path queries.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The update queries can be implemented using segment tree point updates on both segment trees.\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"\\r\\n#include <bits/stdc++.h>\\r\\n#define fi first\\r\\n#define se second\\r\\n#define pb push_back\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\nusing pi = pair<ll,ll>;\\r\\n\\r\\nconst int maxN = 2e5+5;\\r\\nconst int height = 25;\\r\\nconst int MOD = 998244353;\\r\\n\\r\\nint N,Q;\\r\\nvector<int> adj[maxN];\\r\\nint dep[maxN];\\r\\nint top[maxN];\\r\\nint sz[maxN];\\r\\nint son[maxN];\\r\\nint fa[maxN];\\r\\nint dfn[maxN];\\r\\nint dp[maxN][height];\\r\\npi ori [maxN];\\r\\npi val [maxN];\\r\\nint cnt;\\r\\n\\r\\n//LCA\\r\\nint LCA(int x, int y){\\r\\n\\tif(dep[x] < dep[y])swap(x,y);\\r\\n\\tfor(int i = height-1; i >= 0; --i){\\r\\n\\t\\tif(dep[x] - (1<<i) >= dep[y]){\\r\\n\\t\\t\\tx = dp[x][i];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif(x == y)return x;\\r\\n\\tfor(int i = height-1; i >= 0; --i){\\r\\n\\t\\tif(dp[x][i] != dp[y][i]){\\r\\n\\t\\t\\tx = dp[x][i];\\r\\n\\t\\t\\ty = dp[y][i];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn dp[x][0];\\r\\n}\\r\\n\\r\\n//Segment Tree\\r\\n\\r\\n#define lc p<<1\\r\\n#define rc (p<<1)+1\\r\\n\\r\\npi tree[maxN<<2]; //Going up\\r\\npi tree2[maxN<<2]; //Going down\\r\\n\\r\\npi merge(pi x, pi y){\\r\\n\\t//f(x) = ax + b; g(x) = cx + d\\r\\n\\t//Then f(g(x)) = a(cx+d) + b = ac*x + b + ad\\r\\n\\tpi k;\\r\\n\\tk.fi = (x.fi * y.fi)%MOD;\\r\\n\\tk.se = ((x.fi * y.se)%MOD + x.se)%MOD;\\r\\n\\treturn k;\\r\\n}\\r\\n\\r\\nvoid pushup(int p){\\r\\n\\ttree[p] = merge(tree[lc],tree[rc]);\\r\\n\\ttree2[p] = merge(tree2[rc],tree2[lc]);\\r\\n}\\r\\n\\r\\nvoid build(int p, int l, int r){\\r\\n\\tif(l == r){\\r\\n\\t\\ttree[p] = tree2[p] = val[l];\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tint mid = (l+r)>>1;\\r\\n\\tbuild(lc,l,mid);\\r\\n\\tbuild(rc,mid+1,r);\\r\\n\\tpushup(p);\\r\\n}\\r\\n\\r\\nvoid update(int p, int l, int r, int a, int b){\\r\\n\\tif(a > r || b < l)return;\\r\\n\\tif(a <= l && r <= b){\\r\\n\\t\\ttree[p] = tree2[p] = val[l];\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tint mid = (l+r)>>1;\\r\\n\\tupdate(lc,l,mid,a,b);\\r\\n\\tupdate(rc,mid+1,r,a,b);\\r\\n\\tpushup(p);\\r\\n}\\r\\n\\r\\npi query1(int p, int l, int r, int a, int b){ //Used to query tree\\r\\n\\tif(a > r || b < l)return {1,0};\\r\\n\\tif(a <= l && r <= b)return tree[p];\\r\\n\\tint mid = (l+r)>>1;\\r\\n\\tpi left = query1(lc,l,mid,a,b);\\r\\n\\tpi right = query1(rc,mid+1,r,a,b);\\r\\n\\treturn merge(left,right);\\r\\n}\\r\\n\\r\\npi query2(int p, int l, int r, int a, int b){ //Used to query tree2\\r\\n\\tif(a > r || b < l)return {1,0};\\r\\n\\tif(a <= l && r <= b)return tree2[p];\\r\\n\\tint mid = (l+r)>>1;\\r\\n\\tpi left = query2(lc,l,mid,a,b);\\r\\n\\tpi right = query2(rc,mid+1,r,a,b);\\r\\n\\treturn merge(right,left);\\r\\n}\\r\\n\\r\\n#undef lc\\r\\n#undef rc\\r\\n\\r\\n//Heavy Light Decomposition\\r\\n\\r\\nvoid dfs1(int x, int par, int depth){\\r\\n\\tdp[x][0] = par;\\r\\n\\tdep[x] = depth;\\r\\n\\tfa[x] = par;\\r\\n\\tsz[x] = 1;\\r\\n\\tfor(int i = 1; i < height; ++i){\\r\\n\\t\\tdp[x][i] = dp[dp[x][i-1]][i-1];\\r\\n\\t}\\r\\n\\tint maxSon = -1;\\r\\n\\tfor(int i = 0; i < adj[x].size(); ++i){\\r\\n\\t\\tint c = adj[x][i];\\r\\n\\t\\tif(c == par)continue;\\r\\n\\t\\tdfs1(c,x,depth+1);\\r\\n\\t\\tsz[x] += sz[c];\\r\\n\\t\\tif(sz[c] > maxSon){\\r\\n\\t\\t\\tmaxSon = sz[c];\\r\\n\\t\\t\\tson[x] = c;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid dfs2(int x, int par, int topf){\\r\\n\\tdfn[x] = ++cnt;\\r\\n\\tval[dfn[x]] = ori[x];\\r\\n\\ttop[x] = topf;\\r\\n\\tif(son[x] != 0)dfs2(son[x],x,topf);\\r\\n\\tfor(int i = 0; i < adj[x].size(); ++i){\\r\\n\\t\\tint c = adj[x][i];\\r\\n\\t\\tif(c == par || c == son[x])continue;\\r\\n\\t\\tdfs2(c,x,c);\\r\\n\\t}\\r\\n}\\r\\n\\r\\npi pathQuery1(int x, int y){\\r\\n\\tpi res{1,0};\\r\\n\\twhile(top[x] != top[y]){\\r\\n\\t\\tif(dep[top[x]] < dep[top[y]])swap(x,y);\\r\\n\\t\\tpi k = query1(1,1,N,dfn[top[x]],dfn[x]);\\r\\n\\t\\tres = merge(k,res);\\r\\n\\t\\tx = fa[top[x]];\\r\\n\\t}\\r\\n\\tif(dep[x] > dep[y])swap(x,y);\\r\\n\\tpi k = query1(1,1,N,dfn[x]+1,dfn[y]);\\r\\n\\tres = merge(k,res);\\r\\n\\treturn res;\\r\\n}\\r\\n\\r\\npi pathQuery2(int x, int y){\\r\\n\\tpi res{1,0};\\r\\n\\twhile(top[x] != top[y]){\\r\\n\\t\\tif(dep[top[x]] < dep[top[y]])swap(x,y);\\r\\n\\t\\tpi k = query2(1,1,N,dfn[top[x]],dfn[x]);\\r\\n\\t\\tres = merge(res,k);\\r\\n\\t\\tx = fa[top[x]];\\r\\n\\t}\\r\\n\\tif(dep[x] > dep[y])swap(x,y);\\r\\n\\tpi k = query2(1,1,N,dfn[x],dfn[y]);\\r\\n\\tres = merge(res,k);\\r\\n\\treturn res;\\r\\n}\\r\\n\\r\\nsigned main() {\\r\\n\\tios_base::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\tcin >> N >> Q;\\r\\n\\tfor (int i = 1; i <= N; ++i) {\\r\\n\\t\\tcin >> ori[i].fi >> ori[i].se;\\r\\n\\t}\\r\\n\\tfor (int i = 1; i < N; ++i) {\\r\\n\\t\\tint a, b;\\r\\n\\t\\tcin >> a >> b;\\r\\n\\t\\t++a;\\r\\n\\t\\t++b; //Change coordinates from [0,N) to [1,N]\\r\\n\\t\\tadj[a].pb(b);\\r\\n\\t\\tadj[b].pb(a);\\r\\n\\t}\\r\\n\\tdfs1(1, 0, 1);\\r\\n\\tdfs2(1, 0, 1);\\r\\n\\tbuild(1, 1, N);\\r\\n\\tfor (int i = 1; i <= Q; ++i) {\\r\\n\\t\\tint k;\\r\\n\\t\\tcin >> k;\\r\\n\\t\\tif (k == 0) {\\r\\n\\t\\t\\tint p, c, d;\\r\\n\\t\\t\\tcin >> p >> c >> d; ++p;\\r\\n\\t\\t\\tval[dfn[p]].fi = c;\\r\\n\\t\\t\\tval[dfn[p]].se = d; //Potential Problem\\r\\n\\t\\t\\tupdate(1, 1, N, dfn[p], dfn[p]);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tint u, v, x;\\r\\n\\t\\t\\tcin >> u >> v >> x;\\r\\n\\t\\t\\t++u;\\r\\n\\t\\t\\t++v;\\r\\n\\t\\t\\tint t = LCA(u, v);\\r\\n\\t\\t\\tpi ansL = pathQuery1(u, t); //Excluding LCA going up\\r\\n\\t\\t\\tpi ansR = pathQuery2(t, v); //Including LCA going down\\r\\n\\t\\t\\tint res = ((ansL.fi * x) % MOD + ansL.se) % MOD;\\r\\n\\t\\t\\tres = ((ansR.fi * res) % MOD + ansR.se) % MOD;\\r\\n\\t\\t\\tcout << res << '\\\\n';\\r\\n\\t\\t\\tassert(res >= 0);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"ys-VertexSetPathComposite","source":"YS","title":"Vertex Set Path Composite","author":"Andrew Cheng"},"parent":{"name":"ys-VertexSetPathComposite","relativePath":"ys-VertexSetPathComposite.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"hld","title":"Heavy-Light Decomposition"}}}}]},"problemInfo":{"uniqueId":"ys-VertexSetPathComposite","url":"https://judge.yosupo.jp/problem/vertex_set_path_composite"}},"pageContext":{"id":"ys-VertexSetPathComposite"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}