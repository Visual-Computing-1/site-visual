{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/kattis-quantum-superposition/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"kattis-quantumsuperposition\", source = \"Kattis\", title = \"Quantum Superposition\", author = \"Andrew Wang, Benjamin Qi\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {MATHSPAN, HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\sum NM)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo>∑</mo><mi>N</mi><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\sum NM)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop op-symbol small-op\\\" style=\\\"position:relative;top:0em;\\\">∑</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">NM</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Main Idea:\"\n      }), \" Find all possible lengths of routes in both universes. Then we\\r\\ncan preprocess all possible sums of lengths to answer each query in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"finding-all-possible-lengths-of-routes\",\n      children: [_jsx(_components.a, {\n        href: \"#finding-all-possible-lengths-of-routes\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Finding All Possible Lengths of Routes\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For each node, store all possible lengths of a route that ends at it in a set.\\r\\nWe can do this via DP on the topological sort. When we consider a node, we can\\r\\nadd 1 to all the lengths reaching a previous node and insert them into the set\\r\\nfor the current node. Using a \", _jsx(_components.code, {\n        children: \"bitset\"\n      }), \" rather than a \", _jsx(_components.code, {\n        children: \"set\"\n      }), \" is faster (and gives\\r\\nslightly shorter code).\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can repeat this process for both universes to find the total lengths of all\\r\\npaths reaching the end node.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"finding-all-possible-sums\",\n      children: [_jsx(_components.a, {\n        href: \"#finding-all-possible-sums\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Finding All Possible Sums\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once we know all possible path lengths for each universe, we can find all\\r\\npossible sums of lengths. Just loop through both universe's route lengths and\\r\\nadd them together.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <queue>\\r\\n#include <bitset>\\r\\nusing namespace std;\\r\\n\\r\\nint n[2], m[2];\\r\\nvector<int> g[2][1001];\\r\\nvector<int> back[2][1001];\\r\\nbitset<2001> dp[2][1001];\\r\\n\\r\\nvoid gen(int x) {\\r\\n\\tint in_degree[1001] = {};\\r\\n\\tfor(int i = 0; i < m[x]; i++){\\r\\n\\t\\tint a, b; cin >> a >> b;\\r\\n\\t\\tg[x][a].push_back(b);\\r\\n\\t\\tback[x][b].push_back(a);\\r\\n\\t\\tin_degree[b]++;\\r\\n\\t}\\r\\n\\t//finding length of routes of first universe\\r\\n\\tqueue<int> q;\\r\\n\\tfor(int i = 0; i <= n[x]; i++){\\r\\n\\t\\tif(in_degree[i] == 0){\\r\\n\\t\\t\\tq.push(i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\twhile(!q.empty()){\\r\\n\\t\\tint node = q.front(); q.pop();\\r\\n\\t\\t//using dp while processing the nodes topologically\\r\\n\\t\\tif(back[x][node].empty()) dp[x][node][0] = 1;\\r\\n\\t\\tfor (int before : back[x][node])\\r\\n\\t\\t\\tdp[x][node] |= dp[x][before]<<1;\\r\\n\\t\\tfor(int next: g[x][node]){\\r\\n\\t\\t\\tin_degree[next]--;\\r\\n\\t\\t\\tif(in_degree[next] == 0) q.push(next);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main(){\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tcin >> n[0] >> n[1] >> m[0] >> m[1];\\r\\n\\tgen(0); gen(1);\\r\\n\\t//preprocessing all possible sums between the universes\\r\\n\\tbitset<2001> ans;\\r\\n\\tfor(int i = 0; i < 1001; i++) if (dp[0][n[0]][i])\\r\\n\\t\\tans |= dp[1][n[1]]<<i;\\r\\n\\tint Q; cin >> Q;\\r\\n\\tfor(int i = 0; i < Q; i++){\\r\\n\\t\\tint a; cin >> a;\\r\\n\\t\\tif(ans[a]){\\r\\n\\t\\t\\tcout << \\\"Yes\\\" << endl;\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\tcout << \\\"No\\\" << endl;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"kattis-quantumsuperposition","source":"Kattis","title":"Quantum Superposition","author":"Andrew Wang, Benjamin Qi"},"parent":{"name":"kattis-quantumsuperposition","relativePath":"kattis-quantumsuperposition.mdx"},"toc":{"cpp":[{"depth":2,"value":"Finding All Possible Lengths of Routes","slug":"finding-all-possible-lengths-of-routes"},{"depth":2,"value":"Finding All Possible Sums","slug":"finding-all-possible-sums"}],"java":[{"depth":2,"value":"Finding All Possible Lengths of Routes","slug":"finding-all-possible-lengths-of-routes"},{"depth":2,"value":"Finding All Possible Sums","slug":"finding-all-possible-sums"}],"py":[{"depth":2,"value":"Finding All Possible Lengths of Routes","slug":"finding-all-possible-lengths-of-routes"},{"depth":2,"value":"Finding All Possible Sums","slug":"finding-all-possible-sums"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"toposort","title":"Topological Sort"}}}}]},"problemInfo":{"uniqueId":"kattis-quantumsuperposition","url":"https://open.kattis.com/problems/quantumsuperposition"}},"pageContext":{"id":"kattis-quantumsuperposition"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}