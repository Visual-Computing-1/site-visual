{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-667-cities--states/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-667\", source = \"USACO Silver 2016 December\", title = \"Cities & States\", author = \"Benjamin Qi, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    strong: \"strong\",\n    pre: \"pre\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Info: _missingComponent(\"Info\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, Info, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_citystate_silver_dec16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As the editorial mentions, we can store the number of times a given four-letter\\r\\nstring appears in a \", _jsx(_components.code, {\n        children: \"map\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsx(Info, {\n          children: _jsxs(_components.p, {\n            children: [\"The time complexity of the below solution is actually\\r\\n\", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\mathcal{O}(N\\\\log N)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            }), \", since it uses \", _jsx(_components.code, {\n              children: \"map\"\n            }), \". Using \", _jsx(_components.code, {\n              children: \"unordered_map\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"vector\"\n            }), \" would bring the complexity back\\r\\ndown to \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\mathcal{O}(N)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            }), \".\"]\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tifstream read(\\\"citystate.in\\\");\\r\\n\\tint N;\\r\\n\\tread >> N;\\r\\n\\r\\n\\tvector<pair<string, string>> pairs;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tstring city;\\r\\n\\t\\tstring state;\\r\\n\\t\\tread >> city >> state;\\r\\n\\t\\tcity = city.substr(0, 2);  // We only care about the first two letters of the city\\r\\n\\t\\tpairs.push_back({city, state});\\r\\n\\t}\\r\\n\\r\\n\\tmap<string, int> seen;\\r\\n\\tlong long total = 0;\\r\\n\\tfor (const auto& [c, s] : pairs) {\\r\\n\\t\\tif (c != s) {\\r\\n\\t\\t\\ttotal += seen[s + c];\\r\\n\\t\\t}\\r\\n\\t\\tseen[c + s]++;\\r\\n\\t}\\r\\n\\r\\n\\tofstream (\\\"citystate.out\\\") << total << endl;\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class CityState {\\r\\n\\tstatic class Pair {\\r\\n\\t\\tpublic String city;\\r\\n\\t\\tpublic String state;\\r\\n\\t\\tpublic Pair(String city, String state) {\\r\\n\\t\\t\\tthis.city = city;\\r\\n\\t\\t\\tthis.state = state;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new FileReader(\\\"citystate.in\\\"));\\r\\n\\t\\tint pairNum = Integer.parseInt(read.readLine());\\r\\n\\t\\tPair[] pairs = new Pair[pairNum];\\r\\n\\t\\tfor (int p = 0; p < pairNum; p++) {\\r\\n\\t\\t\\tStringTokenizer cityState = new StringTokenizer(read.readLine());\\r\\n\\t\\t\\tString city = cityState.nextToken();\\r\\n\\t\\t\\tString state = cityState.nextToken();\\r\\n\\t\\t\\t// We only care about the first two letters of the city\\r\\n\\t\\t\\tcity = city.substring(0, 2);\\r\\n\\t\\t\\tpairs[p] = new Pair(city, state);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tMap<String, Integer> seen = new HashMap<>();\\r\\n\\t\\tlong total = 0;\\r\\n\\t\\tfor (Pair p : pairs) {\\r\\n\\t\\t\\tif (!p.city.equals(p.state)) {\\r\\n\\t\\t\\t\\ttotal += seen.getOrDefault(p.state + p.city, 0);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tseen.put(\\r\\n\\t\\t\\t\\tp.city + p.state,\\r\\n\\t\\t\\t\\tseen.getOrDefault(p.city + p.state, 0) + 1\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tPrintWriter out = new PrintWriter(\\\"citystate.out\\\");\\r\\n\\t\\tout.println(total);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"from collections import defaultdict\\r\\n\\r\\n\\r\\npairs = []\\r\\nwith open('citystate.in') as read:\\r\\n\\tfor _ in range(int(read.readline())):\\r\\n\\t\\tcity, state = read.readline().strip().split()\\r\\n\\t\\tcity = city[:2]  # We only care about the first two letters of the city\\r\\n\\t\\tpairs.append((city, state))\\r\\n\\r\\nseen = defaultdict(int)\\r\\ntotal = 0\\r\\nfor c, s in pairs:\\r\\n\\tif c != s:\\r\\n\\t\\ttotal += seen[s + c]\\r\\n\\tseen[c + s] += 1\\r\\n\\r\\nprint(total, file=open('citystate.out', 'w'))\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, note that we can optimize this by converting each string into an\\r\\ninteger and using an array instead of a map.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint index(string s) {\\r\\n\\tint ind = 0;\\r\\n\\tfor (char& c : s) {\\r\\n\\t\\tind = 26 * ind + (c - 'A');\\r\\n\\t}\\r\\n\\treturn ind;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tifstream read(\\\"citystate.in\\\");\\r\\n\\tint N;\\r\\n\\tread >> N;\\r\\n\\r\\n\\tvector<pair<string, string>> pairs;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tstring city;\\r\\n\\t\\tstring state;\\r\\n\\t\\tread >> city >> state;\\r\\n\\t\\tcity = city.substr(0, 2);  // We only care about the first two letters of the city\\r\\n\\t\\tpairs.push_back({city, state});\\r\\n\\t}\\r\\n\\r\\n\\tvector<int> seen(26 * 26 * 26 * 26);\\r\\n\\tlong long total = 0;\\r\\n\\tfor (const auto& [c, s] : pairs) {\\r\\n\\t\\tif (c != s) {\\r\\n\\t\\t\\ttotal += seen[index(s + c)];\\r\\n\\t\\t}\\r\\n\\t\\tseen[index(c + s)]++;\\r\\n\\t}\\r\\n\\r\\n\\tofstream(\\\"citystate.out\\\") << total << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class CityState {\\r\\n\\tstatic class Pair {\\r\\n\\t\\tpublic String city;\\r\\n\\t\\tpublic String state;\\r\\n\\t\\tpublic Pair(String city, String state) {\\r\\n\\t\\t\\tthis.city = city;\\r\\n\\t\\t\\tthis.state = state;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new FileReader(\\\"citystate.in\\\"));\\r\\n\\t\\tint pairNum = Integer.parseInt(read.readLine());\\r\\n\\t\\tPair[] pairs = new Pair[pairNum];\\r\\n\\t\\tfor (int p = 0; p < pairNum; p++) {\\r\\n\\t\\t\\tStringTokenizer cityState = new StringTokenizer(read.readLine());\\r\\n\\t\\t\\tString city = cityState.nextToken();\\r\\n\\t\\t\\tString state = cityState.nextToken();\\r\\n\\t\\t\\t// We only care about the first two letters of the city\\r\\n\\t\\t\\tcity = city.substring(0, 2);\\r\\n\\t\\t\\tpairs[p] = new Pair(city, state);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint[] seen = new int[(int) Math.pow(26, 4)];\\r\\n\\t\\tlong total = 0;\\r\\n\\t\\tfor (Pair p : pairs) {\\r\\n\\t\\t\\tif (!p.city.equals(p.state)) {\\r\\n\\t\\t\\t\\ttotal += seen[index(p.state + p.city)];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tseen[index(p.city + p.state)]++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tPrintWriter out = new PrintWriter(\\\"citystate.out\\\");\\r\\n\\t\\tout.println(total);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic int index(String s) {\\r\\n\\t\\tint ind = 0;\\r\\n\\t\\tfor (int i = 0; i < s.length(); i++) {\\r\\n\\t\\t\\tind = ind * 26 + (s.charAt(i) - 'A');\\r\\n\\t\\t}\\r\\n\\t\\treturn ind;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"def index(s: str) -> int:\\r\\n\\tind = 0\\r\\n\\tfor c in s:\\r\\n\\t\\tind = 26 * ind + (ord(c) - ord('A'))\\r\\n\\treturn ind\\r\\n\\r\\n\\r\\npairs = []\\r\\nwith open('citystate.in') as read:\\r\\n\\tfor _ in range(int(read.readline())):\\r\\n\\t\\tcity, state = read.readline().strip().split()\\r\\n\\t\\tcity = city[:2]  # We only care about the first two letters of the city\\r\\n\\t\\tpairs.append((city, state))\\r\\n\\r\\nseen = [0 for _ in range(26 ** 4)]\\r\\ntotal = 0\\r\\nfor c, s in pairs:\\r\\n\\tif c != s:\\r\\n\\t\\ttotal += seen[index(s + c)]\\r\\n\\tseen[index(c + s)] += 1\\r\\n\\r\\nprint(total, file=open('citystate.out', 'w'))\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-667","source":"USACO Silver 2016 December","title":"Cities & States","author":"Benjamin Qi, Kevin Sheng"},"parent":{"name":"usaco-667","relativePath":"usaco-667.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sets","title":"Introduction to Sets & Maps"}}}}]},"problemInfo":{"uniqueId":"usaco-667","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=667"}},"pageContext":{"id":"usaco-667"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}