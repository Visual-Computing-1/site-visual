{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/ac-subtree/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"ac-subtree\", source = \"AtCoder DP Contest\", title = \"Subtree\", author = \"Benjamin Qi, Andi Qu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    MATHDIV: _missingComponent(\"MATHDIV\")\n  }, _props.components), {HeaderLink, MATHSPAN, MATHDIV, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solving-for-one-root\",\n      children: [_jsx(_components.a, {\n        href: \"#solving-for-one-root\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solving For One Root\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's consider a simpler problem:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Assuming that node \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" is painted black, how many ways can we paint the tree?\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, root the tree at node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \". Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" be the number of ways that we can\\r\\npaint the subtree of node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" such that either node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" is colored black, or no\\r\\nnodes are colored black. Note that if \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" is a leaf, then \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[i]=2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">dp[i]=2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \" (we choose\\r\\nto color node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" black or not).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For each child \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n      }), \" of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \", there are \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[c]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>c</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[c]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" ways to paint its subtree if \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" is\\r\\npainted black. This means that we have the recurrence\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"dp[i]=1+\\\\prod_{c \\\\in \\\\text{Children of } i} dp[c]\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mn>1</mn><mo>+</mo><munder><mo>∏</mo><mrow><mi>c</mi><mo>∈</mo><mtext>Children of </mtext><mi>i</mi></mrow></munder><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>c</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[i]=1+\\\\prod_{c \\\\in \\\\text{Children of } i} dp[c]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.3795em;vertical-align:-1.3295em;\\\"></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.05em;\\\"><span style=\\\"top:-1.8479em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">c</span><span class=\\\"mrel mtight\\\">∈</span><span class=\\\"mord text mtight\\\"><span class=\\\"mord mtight\\\">Children of </span></span><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∏</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3295em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mclose\\\">]</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"where the product corresponds to painting node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" black and the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" corresponds\\r\\nto painting node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" white.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The answer to the simpler problem is thus \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[1]-1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">dp[1]-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \". Finding all \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" takes\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solving-for-all-roots\",\n      children: [_jsx(_components.a, {\n        href: \"#solving-for-all-roots\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solving For All Roots\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, root the tree arbitrarily and do a DFS to find all \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp2[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mn>2</mn><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp2[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" be the number of ways to colour the tree if we remove node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \"'s\\r\\nsubtree such that either the parent of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" is black, or no nodes are colored\\r\\nblack. Note that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp2[1]=1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mn>2</mn><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">dp2[1]=1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The number of ways to paint the tree if we know node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" is black is simply\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(dp[i]-1)\\\\cdot dp2[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo><mo>⋅</mo><mi>d</mi><mi>p</mi><mn>2</mn><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(dp[i]-1)\\\\cdot dp2[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". How can we find \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp2[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mn>2</mn><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp2[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" efficiently though?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The basic recurrence for computing \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp2[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mn>2</mn><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp2[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" is\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"dp2[i] = 1+dp2[\\\\text{Parent of } i] \\\\cdot \\\\prod_{s \\\\in \\\\text{Siblings of } i} dp[s]\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mn>2</mn><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mn>1</mn><mo>+</mo><mi>d</mi><mi>p</mi><mn>2</mn><mo stretchy=\\\"false\\\">[</mo><mtext>Parent of </mtext><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>⋅</mo><munder><mo>∏</mo><mrow><mi>s</mi><mo>∈</mo><mtext>Siblings of </mtext><mi>i</mi></mrow></munder><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp2[i] = 1+dp2[\\\\text{Parent of } i] \\\\cdot \\\\prod_{s \\\\in \\\\text{Siblings of } i} dp[s]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord text\\\"><span class=\\\"mord\\\">Parent of </span></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.4882em;vertical-align:-1.4382em;\\\"></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.05em;\\\"><span style=\\\"top:-1.8479em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">s</span><span class=\\\"mrel mtight\\\">∈</span><span class=\\\"mord text mtight\\\"><span class=\\\"mord mtight\\\">Siblings of </span></span><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∏</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.4382em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"where the product corresponds to painting the parent of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" black and the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \"\\r\\ncorresponds to painting the parent of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" white.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" isn't guaranteed to be prime though, we can't just find the product of\\r\\neach node's children and divide that product by each of its children's \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \"\\r\\n(since we can't find modular inverses easily).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, notice how if node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" is the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \"-th child of its parent, then we can\\r\\nuse prefix and suffix products to compute\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"\\\\prod_{s \\\\in \\\\text{Siblings of } i}dp[s]\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><munder><mo>∏</mo><mrow><mi>s</mi><mo>∈</mo><mtext>Siblings of </mtext><mi>i</mi></mrow></munder><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\prod_{s \\\\in \\\\text{Siblings of } i}dp[s]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.4882em;vertical-align:-1.4382em;\\\"></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.05em;\\\"><span style=\\\"top:-1.8479em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">s</span><span class=\\\"mrel mtight\\\">∈</span><span class=\\\"mord text mtight\\\"><span class=\\\"mord mtight\\\">Siblings of </span></span><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∏</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.4382em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"without using division. (i.e. We find the product of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[s]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[s]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" for the first to\\r\\nthe \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(k - 1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(k - 1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \"-th child of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \"'s parent, the product of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp[s]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[s]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" for the\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(k + 1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(k + 1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \"-th to the last child of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \"'s parent, and then multiply those\\r\\ntogether.)\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finding all \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp2[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mn>2</mn><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp2[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" takes \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time using a DFS, so the total\\r\\ncomplexity of this algorithm is thus \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"down\"\n      }), \" corresponds to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\\\"application/x-tex\\\">dp</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span></span></span></span>\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"up\"\n      }), \" corresponds to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">dp2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \". The code uses the\\r\\nexact same recurrences mentioned above.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"//BeginCodeSnip{Benq Template}\\n#include <bits/stdc++.h>\\nusing namespace std;\\n \\nusing ll = long long;\\nusing db = long double; // or double, if TL is tight\\nusing str = string; // yay python!\\n\\nusing pi = pair<int,int>;\\nusing pl = pair<ll,ll>;\\nusing pd = pair<db,db>;\\n\\nusing vi = vector<int>;\\nusing vb = vector<bool>;\\nusing vl = vector<ll>;\\nusing vd = vector<db>; \\nusing vs = vector<str>;\\nusing vpi = vector<pi>;\\nusing vpl = vector<pl>; \\nusing vpd = vector<pd>;\\n\\n#define tcT template<class T\\n#define tcTU tcT, class U\\n// ^ lol this makes everything look weird but I'll try it\\ntcT> using V = vector<T>; \\ntcT, size_t SZ> using AR = array<T,SZ>; \\ntcT> using PR = pair<T,T>;\\n\\n// pairs\\n#define mp make_pair\\n#define f first\\n#define s second\\n\\n// vectors\\n// oops size(x), rbegin(x), rend(x) need C++17\\n#define sz(x) int((x).size())\\n#define bg(x) begin(x)\\n#define all(x) bg(x), end(x)\\n#define rall(x) x.rbegin(), x.rend() \\n#define sor(x) sort(all(x)) \\n#define rsz resize\\n#define ins insert \\n#define ft front()\\n#define bk back()\\n#define pb push_back\\n#define eb emplace_back \\n#define pf push_front\\n#define rtn return\\n\\n#define lb lower_bound\\n#define ub upper_bound \\ntcT> int lwb(V<T>& a, const T& b) { return int(lb(all(a),b)-bg(a)); }\\n\\n// loops\\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\\n#define F0R(i,a) FOR(i,0,a)\\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\\n#define R0F(i,a) ROF(i,0,a)\\n#define rep(a) F0R(_,a)\\n#define each(a,x) for (auto& a: x)\\n\\nconst int MOD = 1e9+7; // 998244353;\\nconst int MX = 2e5+5;\\nconst ll INF = 1e18; // not too close to LLONG_MAX\\nconst db PI = acos((db)-1);\\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); \\ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\\n\\n// bitwise ops\\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\\nconstexpr int bits(int x) { // assert(x >= 0); // make C++11 compatible until USACO updates ...\\n\\treturn x == 0 ? 0 : 31-__builtin_clz(x); } // floor(log2(x)) \\nconstexpr int p2(int x) { return 1<<x; }\\nconstexpr int msk2(int x) { return p2(x)-1; }\\n\\nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\\n\\ntcT> bool ckmin(T& a, const T& b) {\\n\\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\\ntcT> bool ckmax(T& a, const T& b) {\\n\\treturn a < b ? a = b, 1 : 0; }\\n\\ntcTU> T fstTrue(T lo, T hi, U f) {\\n\\thi ++; assert(lo <= hi); // assuming f is increasing\\n\\twhile (lo < hi) { // find first index such that f is true \\n\\t\\tT mid = lo+(hi-lo)/2;\\n\\t\\tf(mid) ? hi = mid : lo = mid+1; \\n\\t} \\n\\treturn lo;\\n}\\ntcTU> T lstTrue(T lo, T hi, U f) {\\n\\tlo --; assert(lo <= hi); // assuming f is decreasing\\n\\twhile (lo < hi) { // find first index such that f is true \\n\\t\\tT mid = lo+(hi-lo+1)/2;\\n\\t\\tf(mid) ? lo = mid : hi = mid-1;\\n\\t} \\n\\treturn lo;\\n}\\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\\n\\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\\ntcTU> void erase(T& t, const U& u) { // don't erase\\n\\tauto it = t.find(u); assert(it != end(t));\\n\\tt.erase(it); } // element that doesn't exist from (multi)set\\n\\n#define tcTUU tcT, class ...U\\n\\ninline namespace Helpers {\\n\\t//////////// is_iterable\\n\\t// https://stackoverflow.com/questions/13830158/check-if-a-variable-type-is-iterable\\n\\t// this gets used only when we can call begin() and end() on that type\\n\\ttcT, class = void> struct is_iterable : false_type {};\\n\\ttcT> struct is_iterable<T, void_t<decltype(begin(declval<T>())),\\n\\t                                  decltype(end(declval<T>()))\\n\\t                                 >\\n\\t                       > : true_type {};\\n\\ttcT> constexpr bool is_iterable_v = is_iterable<T>::value;\\n\\n\\t//////////// is_readable\\n\\ttcT, class = void> struct is_readable : false_type {};\\n\\ttcT> struct is_readable<T,\\n\\t        typename std::enable_if_t<\\n\\t            is_same_v<decltype(cin >> declval<T&>()), istream&>\\n\\t        >\\n\\t    > : true_type {};\\n\\ttcT> constexpr bool is_readable_v = is_readable<T>::value;\\n\\n\\t//////////// is_printable\\n\\t// // https://nafe.es/posts/2020-02-29-is-printable/\\n\\ttcT, class = void> struct is_printable : false_type {};\\n\\ttcT> struct is_printable<T,\\n\\t        typename std::enable_if_t<\\n\\t            is_same_v<decltype(cout << declval<T>()), ostream&>\\n\\t        >\\n\\t    > : true_type {};\\n\\ttcT> constexpr bool is_printable_v = is_printable<T>::value;\\n}\\n\\ninline namespace Input {\\n\\ttcT> constexpr bool needs_input_v = !is_readable_v<T> && is_iterable_v<T>;\\n\\ttcTUU> void re(T& t, U&... u);\\n\\ttcTU> void re(pair<T,U>& p); // pairs\\n\\n\\t// re: read\\n\\ttcT> typename enable_if<is_readable_v<T>,void>::type re(T& x) { cin >> x; } // default\\n\\ttcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; } // complex\\n\\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i); // ex. vectors, arrays\\n\\ttcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\\n\\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i) {\\n\\t\\teach(x,i) re(x); }\\n\\ttcTUU> void re(T& t, U&... u) { re(t); re(u...); } // read multiple\\n\\n\\t// rv: resize and read vectors\\n\\tvoid rv(size_t) {}\\n\\ttcTUU> void rv(size_t N, V<T>& t, U&... u);\\n\\ttemplate<class...U> void rv(size_t, size_t N2, U&... u);\\n\\ttcTUU> void rv(size_t N, V<T>& t, U&... u) {\\n\\t\\tt.rsz(N); re(t);\\n\\t\\trv(N,u...); }\\n\\ttemplate<class...U> void rv(size_t, size_t N2, U&... u) {\\n\\t\\trv(N2,u...); }\\n\\n\\t// dumb shortcuts to read in ints\\n\\tvoid decrement() {} // subtract one from each\\n\\ttcTUU> void decrement(T& t, U&... u) { --t; decrement(u...); }\\n\\t#define ints(...) int __VA_ARGS__; re(__VA_ARGS__);\\n\\t#define int1(...) ints(__VA_ARGS__); decrement(__VA_ARGS__);\\n}\\n\\ninline namespace ToString {\\n\\ttcT> constexpr bool needs_output_v = !is_printable_v<T> && is_iterable_v<T>;\\n\\n\\t// ts: string representation to print\\n\\ttcT> typename enable_if<is_printable_v<T>,str>::type ts(T v) {\\n\\t\\tstringstream ss; ss << fixed << setprecision(15) << v;\\n\\t\\treturn ss.str(); } // default\\n\\ttcT> str bit_vec(T t) { // bit vector to string\\n\\t\\tstr res = \\\"{\\\"; F0R(i,sz(t)) res += ts(t[i]);\\n\\t\\tres += \\\"}\\\"; return res; }\\n\\tstr ts(V<bool> v) { return bit_vec(v); }\\n\\ttemplate<size_t SZ> str ts(bitset<SZ> b) { return bit_vec(b); } // bit vector\\n\\ttcTU> str ts(pair<T,U> p); // pairs\\n\\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v); // vectors, arrays\\n\\ttcTU> str ts(pair<T,U> p) { return \\\"(\\\"+ts(p.f)+\\\", \\\"+ts(p.s)+\\\")\\\"; }\\n\\ttcT> typename enable_if<is_iterable_v<T>,str>::type ts_sep(T v, str sep) {\\n\\t\\t// convert container to string w/ separator sep\\n\\t\\tbool fst = 1; str res = \\\"\\\";\\n\\t\\tfor (const auto& x: v) {\\n\\t\\t\\tif (!fst) res += sep;\\n\\t\\t\\tfst = 0; res += ts(x);\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n\\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v) {\\n\\t\\treturn \\\"{\\\"+ts_sep(v,\\\", \\\")+\\\"}\\\"; }\\n\\n\\t// for nested DS\\n\\ttemplate<int, class T> typename enable_if<!needs_output_v<T>,vs>::type \\n\\t  ts_lev(const T& v) { return {ts(v)}; }\\n\\ttemplate<int lev, class T> typename enable_if<needs_output_v<T>,vs>::type \\n\\t  ts_lev(const T& v) {\\n\\t\\tif (lev == 0 || !sz(v)) return {ts(v)};\\n\\t\\tvs res;\\n\\t\\tfor (const auto& t: v) {\\n\\t\\t\\tif (sz(res)) res.bk += \\\",\\\";\\n\\t\\t\\tvs tmp = ts_lev<lev-1>(t);\\n\\t\\t\\tres.ins(end(res),all(tmp));\\n\\t\\t}\\n\\t\\tF0R(i,sz(res)) {\\n\\t\\t\\tstr bef = \\\" \\\"; if (i == 0) bef = \\\"{\\\";\\n\\t\\t\\tres[i] = bef+res[i];\\n\\t\\t}\\n\\t\\tres.bk += \\\"}\\\";\\n\\t\\treturn res;\\n\\t}\\n}\\n\\ninline namespace Output {\\n\\ttemplate<class T> void pr_sep(ostream& os, str, const T& t) { os << ts(t); }\\n\\ttemplate<class T, class... U> void pr_sep(ostream& os, str sep, const T& t, const U&... u) {\\n\\t\\tpr_sep(os,sep,t); os << sep; pr_sep(os,sep,u...); }\\n\\t// print w/ no spaces\\n\\ttemplate<class ...T> void pr(const T&... t) { pr_sep(cout,\\\"\\\",t...); } \\n\\t// print w/ spaces, end with newline\\n\\tvoid ps() { cout << \\\"\\\\n\\\"; }\\n\\ttemplate<class ...T> void ps(const T&... t) { pr_sep(cout,\\\" \\\",t...); ps(); } \\n\\t// debug to cerr\\n\\ttemplate<class ...T> void dbg_out(const T&... t) {\\n\\t\\tpr_sep(cerr,\\\" | \\\",t...); cerr << endl; }\\n\\tvoid loc_info(int line, str names) {\\n\\t\\tcerr << \\\"Line(\\\" << line << \\\") -> [\\\" << names << \\\"]: \\\"; }\\n\\ttemplate<int lev, class T> void dbgl_out(const T& t) {\\n\\t\\tcerr << \\\"\\\\n\\\\n\\\" << ts_sep(ts_lev<lev>(t),\\\"\\\\n\\\") << \\\"\\\\n\\\" << endl; }\\n\\t#ifdef LOCAL\\n\\t\\t#define dbg(...) loc_info(__LINE__,#__VA_ARGS__), dbg_out(__VA_ARGS__)\\n\\t\\t#define dbgl(lev,x) loc_info(__LINE__,#x), dbgl_out<lev>(x)\\n\\t#else // don't actually submit with this\\n\\t\\t#define dbg(...) 0\\n\\t\\t#define dbgl(lev,x) 0\\n\\t#endif\\n}\\n\\ninline namespace FileIO {\\n\\tvoid setIn(str s)  { freopen(s.c_str(), \\\"r\\\", stdin); }\\n\\tvoid setOut(str s) { freopen(s.c_str(), \\\"w\\\", stdout); }\\n\\tvoid setIO(str s = \\\"\\\") {\\n\\t\\tcin.tie(0)->sync_with_stdio(0); // unsync C / C++ I/O streams\\n\\t\\t// cin.exceptions(cin.failbit);\\n\\t\\t// throws exception when do smth illegal\\n\\t\\t// ex. try to read letter into int\\n\\t\\tif (sz(s)) setIn(s+\\\".in\\\"), setOut(s+\\\".out\\\"); // for old USACO\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\n/**\\r\\n * Description: modular arithmetic operations\\r\\n */\\r\\n\\r\\ntemplate<int RT> struct mint {\\r\\n\\t// static const int mod = MOD;\\r\\n\\tstatic constexpr mint rt() { return RT; } // primitive root for FFT\\r\\n\\tint v; explicit operator int() const { return v; } // explicit -> don't silently convert to int\\r\\n\\tmint() { v = 0; }\\r\\n\\tmint(ll _v) { v = int((-MOD < _v && _v < MOD) ? _v : _v % MOD);\\r\\n\\t\\tif (v < 0) v += MOD; }\\r\\n\\tfriend bool operator==(const mint& a, const mint& b) {\\r\\n\\t\\treturn a.v == b.v; }\\r\\n\\tfriend bool operator!=(const mint& a, const mint& b) {\\r\\n\\t\\treturn !(a == b); }\\r\\n\\tfriend bool operator<(const mint& a, const mint& b) {\\r\\n\\t\\treturn a.v < b.v; }\\r\\n\\tfriend void re(mint& a) { ll x; re(x); a = mint(x); }\\r\\n\\tfriend str ts(mint a) { return ts(a.v); }\\r\\n\\r\\n\\tmint& operator+=(const mint& m) {\\r\\n\\t\\tif ((v += m.v) >= MOD) v -= MOD;\\r\\n\\t\\treturn *this; }\\r\\n\\tmint& operator-=(const mint& m) {\\r\\n\\t\\tif ((v -= m.v) < 0) v += MOD;\\r\\n\\t\\treturn *this; }\\r\\n\\tmint& operator*=(const mint& m) {\\r\\n\\t\\tv = (ll)v*m.v%MOD; return *this; }\\r\\n\\tmint& operator/=(const mint& m) { return (*this) *= inv(m); }\\r\\n\\tfriend mint pow(mint a, ll p) {\\r\\n\\t\\tmint ans = 1; assert(p >= 0);\\r\\n\\t\\tfor (; p; p /= 2, a *= a) if (p&1) ans *= a;\\r\\n\\t\\treturn ans; }\\r\\n\\tfriend mint inv(const mint& a) { assert(a.v != 0);\\r\\n\\t\\treturn pow(a,MOD-2); }\\r\\n\\r\\n\\tmint operator-() const { return mint(-v); }\\r\\n\\tmint& operator++() { return *this += 1; }\\r\\n\\tmint& operator--() { return *this -= 1; }\\r\\n\\tfriend mint operator+(mint a, const mint& b) { return a += b; }\\r\\n\\tfriend mint operator-(mint a, const mint& b) { return a -= b; }\\r\\n\\tfriend mint operator*(mint a, const mint& b) { return a *= b; }\\r\\n\\tfriend mint operator/(mint a, const mint& b) { return a /= b; }\\r\\n};\\r\\n\\r\\ntypedef mint<5> mi;\\r\\n\\r\\ntemplate<int SZ> struct SubtreeDP {\\r\\n\\tint par[SZ]; vi adj[SZ];\\r\\n\\tvoid ae(int a, int b) { adj[a].pb(b), adj[b].pb(a); }\\r\\n\\tstruct T {\\r\\n\\t\\tmi v = 1;\\r\\n\\t\\tT& operator+=(const T& b) { v *= b.v; return *this; }\\r\\n\\t\\tvoid tran() { ++v; }\\r\\n\\t};\\r\\n\\tT up[SZ], down[SZ];\\r\\n\\tvoid dfs(int x) {\\r\\n\\t\\ttrav(t,adj[x]) if (t != par[x]) {\\r\\n\\t\\t\\tpar[t] = x; dfs(t);\\r\\n\\t\\t\\tdown[x] += down[t];\\r\\n\\t\\t}\\r\\n\\t\\tdown[x].tran();\\r\\n\\t}\\r\\n\\tvoid dfs2(int x) {\\r\\n\\t\\t{\\r\\n\\t\\t\\tT pre = up[x]; // deal with prefixes\\r\\n\\t\\t\\tF0R(i,sz(adj[x])) {\\r\\n\\t\\t\\t\\tint c = adj[x][i]; if (c == par[x]) continue;\\r\\n\\t\\t\\t\\tup[c] += pre; pre += down[c];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t{\\r\\n\\t\\t\\tT pre; // deal with suffixes\\r\\n\\t\\t\\tR0F(i,sz(adj[x])) {\\r\\n\\t\\t\\t\\tint c = adj[x][i]; if (c == par[x]) continue;\\r\\n\\t\\t\\t\\tup[c] += pre; pre += down[c];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tF0R(i,sz(adj[x])) {\\r\\n\\t\\t\\tint c = adj[x][i]; if (c == par[x]) continue;\\r\\n\\t\\t\\tup[c].tran(); dfs2(c);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// T getSub(int x, int y) { return par[x] == y ? down[x] : up[y]; }\\r\\n    // get subtree of x excluding y\\r\\n\\tvoid init(int n) {\\r\\n\\t\\tpar[1] = 0; dfs(1); dfs2(1);\\r\\n\\t\\tFOR(i,1,n+1) ps((down[i].v-1)*up[i].v);\\r\\n        // FOR(i,1,n+1) { alternative method\\r\\n        //     T p = T(); trav(t,adj[i]) p += getSub(t,i);\\r\\n        //     ps(p.v);\\r\\n        // }\\r\\n\\t}\\r\\n};\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(); int n; re(n,MOD);\\r\\n\\tSubtreeDP<MX> S;\\r\\n\\tF0R(i,n-1) {\\r\\n\\t\\tint a,b; re(a,b);\\r\\n\\t\\tS.ae(a,b);\\r\\n\\t}\\r\\n\\tS.init(n);\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"ac-subtree","source":"AtCoder DP Contest","title":"Subtree","author":"Benjamin Qi, Andi Qu"},"parent":{"name":"ac-subtree","relativePath":"ac-subtree.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solving For One Root","slug":"solving-for-one-root"},{"depth":2,"value":"Solving For All Roots","slug":"solving-for-all-roots"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Solving For One Root","slug":"solving-for-one-root"},{"depth":2,"value":"Solving For All Roots","slug":"solving-for-all-roots"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Solving For One Root","slug":"solving-for-one-root"},{"depth":2,"value":"Solving For All Roots","slug":"solving-for-all-roots"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"all-roots","title":"DP on Trees - Solving For All Roots"}}}}]},"problemInfo":{"uniqueId":"ac-subtree","url":"https://atcoder.jp/contests/dp/tasks/dp_v"}},"pageContext":{"id":"ac-subtree"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}