{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1062-cowntagion/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1062\", source = \"USACO Silver 2020 December\", title = \"Cowntagion\", author = \"Kevin Sheng (Java, Python), Tanish Tyagi (C++), Melody Yu (Video)\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Youtube: _missingComponent(\"Youtube\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, Youtube, MATHSPAN, LanguageSection, JavaSection, PySection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_prob1_silver_dec20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"video-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#video-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Video Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: The video solution might not be the same as other solutions. Code in C++.\"\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"8gZY9ARwLVI\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-1---math\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1---math\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1 - Math\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \": \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Cowntagion {\\r\\n\\t@SuppressWarnings(\\\"unchecked\\\")  // don't worry, i totally know what i'm doing\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tint farmNum  = Integer.parseInt(read.readLine());\\r\\n\\t\\tList<Integer>[] neighbors = new ArrayList[farmNum];\\r\\n\\t\\tfor (int f = 0; f < farmNum; f++) {\\r\\n\\t\\t\\tneighbors[f] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < farmNum - 1; i++) {\\r\\n\\t\\t\\tStringTokenizer path = new StringTokenizer(read.readLine());\\r\\n\\t\\t\\tint farm1 = Integer.parseInt(path.nextToken()) - 1;\\r\\n\\t\\t\\tint farm2 = Integer.parseInt(path.nextToken()) - 1;\\r\\n\\t\\t\\tneighbors[farm1].add(farm2);\\r\\n\\t\\t\\tneighbors[farm2].add(farm1);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint minDays = 0;\\r\\n\\t\\tboolean[] visited = new boolean[farmNum];\\r\\n\\t\\tQueue<Integer> frontier = new ArrayDeque<>(Collections.singletonList(0));\\r\\n\\t\\tvisited[0] = true;\\r\\n\\t\\twhile (!frontier.isEmpty()) {\\r\\n\\t\\t\\tint current = frontier.poll();\\r\\n\\t\\t\\t// this stores all the farms that this farm should spread to for optimal spreading\\r\\n\\t\\t\\tint spreadTo = 0;\\r\\n\\t\\t\\tfor (int n : neighbors[current]) {\\r\\n\\t\\t\\t\\tif (!visited[n]) {\\r\\n\\t\\t\\t\\t\\tspreadTo++;\\r\\n\\t\\t\\t\\t\\tvisited[n] = true;\\r\\n\\t\\t\\t\\t\\tfrontier.add(n);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// the log base 2 is so enough superspreader events go around so that there are enough cows, and then we need to add the length of spreadTo so the cows can actually go to the other farms\\r\\n\\t\\t\\tminDays += ceilLog2(spreadTo + 1) + spreadTo;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tSystem.out.println(minDays);\\r\\n\\t}\\r\\n\\r\\n\\t// returns the smallest x such that 2^x >= n\\r\\n\\tprivate static int ceilLog2(int n) {\\r\\n\\t\\tint count = 0;\\r\\n\\t\\tint so_far = 1;\\r\\n\\t\\twhile (so_far < n) {\\r\\n\\t\\t\\tso_far *= 2;\\r\\n\\t\\t\\tcount++;\\r\\n\\t\\t}\\r\\n\\t\\treturn count;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"from collections import deque\\r\\n\\r\\n# straight from stackoverflow\\r\\ndef ceiLog2(x):  # returns the smallest n so that 2^n >= x\\r\\n\\treturn 1 if x == 0 else (x - 1).bit_length()\\r\\n\\r\\nfarmNum = int(input())\\r\\nneighbors = [[] for _ in range(farmNum)]\\r\\nfor _ in range(farmNum - 1):\\r\\n\\tstart, end = [int(i) - 1 for i in input().split()]\\r\\n\\tneighbors[start].append(end)\\r\\n\\tneighbors[end].append(start)\\r\\n\\r\\nminDays = 0\\r\\nvisited = [False for _ in range(farmNum)]\\r\\nfrontier = deque([0])\\r\\nvisited[0] = True\\r\\nwhile frontier:\\r\\n\\tcurr = frontier.popleft()\\r\\n\\t# this stores the number of neighboring farms this farm should spread to for optimal spreading\\r\\n\\tspreadTo = 0\\r\\n\\tfor n in neighbors[curr]:\\r\\n\\t\\tif not visited[n]:\\r\\n\\t\\t\\tspreadTo += 1\\r\\n\\t\\t\\tvisited[n] = True\\r\\n\\t\\t\\tfrontier.append(n)\\r\\n\\t# the log base 2 is so enough superspreader events go around so that there are enough cows, and then we need to add the length of spreadTo so the cows can actually go to the other farms\\r\\n\\tminDays += ceiLog2(spreadTo + 1) + spreadTo\\r\\n\\r\\nprint(minDays)\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---dfs\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---dfs\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - DFS\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \": \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\n#define maxn 100005\\r\\n\\r\\nint n;\\r\\nvector<int> adj[maxn];\\r\\n\\r\\nint dfs(int start, int parent) {\\r\\n\\tint ans = 0;\\r\\n\\tint cows = adj[start].size();\\r\\n\\tif (parent == -1) {\\r\\n\\t\\t//parent node is currently root node\\r\\n\\t\\tcows++;\\r\\n\\t}\\r\\n\\r\\n\\tint currCows = 1;\\r\\n\\tint days = 0;\\r\\n\\t//count the number of superspreader events needed\\r\\n\\twhile (currCows < cows) {\\r\\n\\t\\tdays++;\\r\\n\\t\\tcurrCows *= 2;\\r\\n\\t}\\r\\n\\t//send one cow to each adjacent farm without a sick cow\\r\\n\\tans += days;\\r\\n\\r\\n\\tfor (auto next : adj[start]) {\\r\\n\\t\\tif (next != parent) {\\r\\n\\t\\t\\tans += dfs(next, start) + 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn ans;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n-1; i++) {\\r\\n\\t\\tint a,b;\\r\\n\\t\\tcin >> a >> b;\\r\\n\\t\\ta--; b--;\\r\\n\\t\\tadj[a].push_back(b);\\r\\n\\t\\tadj[b].push_back(a);\\r\\n\\t}\\r\\n\\tcout << dfs(0, -1) << endl;\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1062","source":"USACO Silver 2020 December","title":"Cowntagion","author":"Kevin Sheng (Java, Python), Tanish Tyagi (C++), Melody Yu (Video)"},"parent":{"name":"usaco-1062","relativePath":"usaco-1062.mdx"},"toc":{"cpp":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Solution 1 - Math","slug":"solution-1---math"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - DFS","slug":"solution-2---dfs"},{"depth":2,"value":"Implementation","slug":"implementation-1"}],"java":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Solution 1 - Math","slug":"solution-1---math"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - DFS","slug":"solution-2---dfs"},{"depth":2,"value":"Implementation","slug":"implementation-1"}],"py":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Solution 1 - Math","slug":"solution-1---math"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2 - DFS","slug":"solution-2---dfs"},{"depth":2,"value":"Implementation","slug":"implementation-1"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-tree","title":"Introduction to Tree Algorithms"}}}}]},"problemInfo":{"uniqueId":"usaco-1062","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1062"}},"pageContext":{"id":"usaco-1062"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}