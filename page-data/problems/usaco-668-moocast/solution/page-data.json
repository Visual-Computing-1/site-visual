{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-668-moocast/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-668\", source = \"USACO Silver 2016 December\", title = \"Moocast\", author = \"Óscar Garries (C++), Dong Liu (Python), Owen Wang (Java)\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_moocast_silver_dec16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nbool isConnected[200][200];\\r\\nvector<bool> visited;\\r\\nint n;\\r\\n\\r\\nint dfs (int v) {\\r\\n\\tvisited[v] = true;\\r\\n\\tint cows = 0;\\r\\n\\r\\n\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\tif (visited[j] || !isConnected[v][j]) continue;\\r\\n\\t\\tvisited[j] = true;\\r\\n\\t\\tcows += dfs(j) + 1;\\r\\n\\t}\\r\\n\\treturn cows;\\r\\n}\\r\\n\\r\\nint main () {\\r\\n\\tfreopen(\\\"moocast.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"moocast.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tcin >> n;\\r\\n\\tvector<int> x(n), y(n), p(n);\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> x[i] >> y[i] >> p[i];\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\tint sumDist = (x[i] - x[j]) * (x[i] - x[j])\\r\\n\\t\\t\\t\\t\\t\\t  + (y[i] - y[j]) * (y[i] - y[j]);\\r\\n\\t\\t\\tint hip = p[i] * p[i];\\r\\n\\t\\t\\tif (sumDist <= hip) isConnected[i][j] = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tint sol = 0;\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tvisited.assign(n, false);\\r\\n\\t\\tint cowHear = dfs(i) + 1;\\r\\n\\t\\tsol = max(sol, cowHear);\\r\\n\\t}\\r\\n\\r\\n\\tcout << sol << '\\\\n';\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\n\\r\\nsys.stdin = open(\\\"moocast.in\\\", 'r')\\r\\nsys.stdout = open(\\\"moocast.out\\\", 'w')\\r\\n\\r\\ndef dfs(v):\\r\\n\\tvisited[v] = True\\r\\n\\tcount = 1\\r\\n\\tfor u in range(n):\\r\\n\\t\\tif visited[u] or not canReach[v][u]:\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\tcount += dfs(u)\\r\\n\\treturn count\\r\\n\\r\\nn = int(input())\\r\\nx = [0]*n\\r\\ny = [0]*n\\r\\np = [0]*n\\r\\nfor i in range(n):\\r\\n\\tx[i], y[i], p[i] = map(int, input().split())\\r\\n\\r\\ncanReach = [ [False]*n for _ in range(n) ]\\r\\n\\r\\nfor i in range(n):\\r\\n\\tfor j in range(n):\\r\\n\\t\\tsquaredDistance = (x[i]-x[j])**2 + (y[i]-y[j])**2\\r\\n\\t\\tsquaredRange = p[i]**2\\r\\n\\t\\tcanReach[i][j] = squaredDistance <= squaredRange\\r\\n\\r\\nans = 0\\r\\nfor i in range(n):\\r\\n\\tvisited = [0]*n\\r\\n\\tans = max(ans, dfs(i))\\r\\n\\r\\nprint(ans)\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class moocast {\\r\\n\\r\\n\\tstatic int N;\\r\\n\\tstatic Cow[] cows;\\r\\n\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new FileReader(\\\"moocast.in\\\"));\\r\\n\\t\\tPrintWriter out = new PrintWriter(\\\"moocast.out\\\");\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tN = Integer.parseInt(st.nextToken());\\r\\n\\t\\tcows = new Cow[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tint a = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint b = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint c = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tcows[i] = new Cow(i, a, b, c);\\r\\n\\t\\t}\\r\\n\\t\\tint max = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tmax = Math.max(max, transmit(cows[i]));\\r\\n\\t\\t}\\r\\n\\t\\tout.println(max);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tprivate static int transmit(Cow cow) {\\r\\n\\t\\tboolean[] visited = new boolean[N];\\r\\n\\t\\treturn transmit(cow, visited);\\r\\n\\t}\\r\\n\\r\\n\\tprivate static int transmit(Cow cow, boolean[] visited) {\\r\\n\\t\\tif (visited[cow.index]) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t\\tvisited[cow.index] = true;\\r\\n\\t\\tint count = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif (Math.sqrt(Math.pow(Math.abs(cows[i].x - cow.x), 2)\\r\\n\\t\\t\\t     + Math.pow(Math.abs(cows[i].y - cow.y), 2)) < cow.power) {\\r\\n\\t\\t\\t\\tcount += transmit(cows[i], visited);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn count + 1;\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class Cow {\\r\\n\\t\\tint x, y, power, index;\\r\\n\\t\\tpublic Cow(int index, int x, int y, int power) {\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\t\\t\\tthis.power = power;\\r\\n\\t\\t\\tthis.index = index;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-668","source":"USACO Silver 2016 December","title":"Moocast","author":"Óscar Garries (C++), Dong Liu (Python), Owen Wang (Java)"},"parent":{"name":"usaco-668","relativePath":"usaco-668.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dfs","title":"Depth First Search (DFS)"}}}}]},"problemInfo":{"uniqueId":"usaco-668","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=668"}},"pageContext":{"id":"usaco-668"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}