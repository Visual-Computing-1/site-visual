{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-663-square-pasture/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-663\", source = \"USACO Bronze 2016 December\", title = \"Square Pasture\", author = \"Maggie Liu, Dong Liu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_square_bronze_dec16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can first find the smallest rectangle that covers both pastures. This\\r\\nrectangle will need to cover the smaller of the left sides of both pastures and\\r\\nthe larger of the right sides of both pastures. It will also need to cover the\\r\\nsmaller of the bottom sides and the larger of the top sides of both pastures.\\r\\nThe smallest square has a side length equal to the longer side length of the\\r\\nrectangle.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <cstdio>\\r\\nusing namespace std;\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tfreopen(\\\"square.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"square.out\\\", \\\"w\\\", stdout);\\r\\n\\tint x1, y1, x2, y2;\\r\\n\\tint x3, y3, x4, y4;\\r\\n\\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\\r\\n\\tint left, right, top, bottom;\\r\\n\\t// find the sides of the smallest rectangle covering both pastures\\r\\n\\tleft = min(x1, x3);\\r\\n\\tright = max(x2, x4);\\r\\n\\tbottom = min(y1, y3);\\r\\n\\ttop = max(y2, y4);\\r\\n\\t/*\\r\\n\\t * the smallest square will need a side length\\r\\n\\t * that is the maximum of the side lengths of the rectangle\\r\\n\\t */\\r\\n\\tint side = max(right - left, top - bottom);\\r\\n\\tcout << side * side << endl;\\r\\n\\treturn 0;\\r\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Square\\r\\n{\\r\\n\\tpublic static void main(String[] args) throws IOException\\r\\n\\t{\\r\\n\\t\\tKattio io = new Kattio(\\\"square\\\");\\r\\n\\t\\tint x1 = io.nextInt(), y1 = io.nextInt();\\r\\n\\t\\tint x2 = io.nextInt(), y2 = io.nextInt();\\r\\n\\t\\tint x3 = io.nextInt(), y3 = io.nextInt();\\r\\n\\t\\tint x4 = io.nextInt(), y4 = io.nextInt();\\r\\n\\t\\t// find the sides of the smallest rectangle covering both pastures\\r\\n\\t\\tint left = Math.min(x1, x3);\\r\\n\\t\\tint right = Math.max(x2, x4);\\r\\n\\t\\tint bottom = Math.min(y1, y3);\\r\\n\\t\\tint top = Math.max(y2, y4);\\r\\n\\t\\t/*\\r\\n\\t\\t * the smallest square will need a side length\\r\\n\\t\\t * that is the maximum of the side lengths of the rectangle\\r\\n\\t\\t */\\r\\n\\t\\tint side = Math.max(right - left, top - bottom);\\r\\n\\t\\tio.println(side * side);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\nsys.stdin = open(\\\"square.in\\\", \\\"r\\\")\\r\\nsys.stdout = open(\\\"square.out\\\", \\\"w\\\")\\r\\n\\r\\nx1, y1, x2, y2 = map(int, input().split())\\r\\nx3, y3, x4, y4 = map(int, input().split())\\r\\n\\r\\n# find the sides of the smallest rectangle covering both pastures\\r\\nleft = min(x1, x3)\\r\\nright = max(x2, x4)\\r\\nbottom = min(y1, y3)\\r\\ntop = max(y2, y4)\\r\\n\\r\\n# the smallest square will need a side length\\r\\n# that is the maximum of the side lengths of the rectangle\\r\\nside = max(right - left, top - bottom)\\r\\nprint(side * side)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-663","source":"USACO Bronze 2016 December","title":"Square Pasture","author":"Maggie Liu, Dong Liu"},"parent":{"name":"usaco-663","relativePath":"usaco-663.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"rect-geo","title":"Rectangle Geometry"}}}}]},"problemInfo":{"uniqueId":"usaco-663","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=663"}},"pageContext":{"id":"usaco-663"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}