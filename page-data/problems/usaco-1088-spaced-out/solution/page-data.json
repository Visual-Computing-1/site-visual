{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1088-spaced-out/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1088\", source = \"USACO Silver 2021 January\", title = \"Spaced Out\", author = \"Melody Yu (Video), Tyler Xiao (Video), Maggie Liu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Youtube: _missingComponent(\"Youtube\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, Youtube, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://usaco.org/current/data/sol_prob3_silver_jan21.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"video-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#video-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Video Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: The video solution might not be the same as other solutions. Code in Java.\"\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"7eMHxpDQJEw\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <algorithm>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 1000;\\r\\nint grid[MAX_N][MAX_N];\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tfor (int j = 0; j < n; j++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tcin >> grid[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// max beauty if each row alternates between cow and no cow\\r\\n\\tint rows_alternate = 0;\\r\\n\\t// max beauty if each column alternates\\r\\n\\tint cols_alternate = 0;\\r\\n\\r\\n\\t// each row has an alternating pattern of cow and no cow\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tint sum[2]{};\\r\\n\\t\\t// there are two ways to alternate, odd index and even index\\r\\n\\t\\tfor (int j = 0; j < n; j++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tsum[j % 2] += grid[i][j];\\r\\n\\t\\t}\\r\\n\\t\\trows_alternate += max(sum[0], sum[1]);\\r\\n\\t}\\r\\n\\r\\n\\t// each column has an alternating pattern of cow and no cow\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t{\\r\\n\\t\\tint sum[2]{};\\r\\n\\t\\t// two ways to alternate\\r\\n\\t\\tfor (int j = 0; j < n; j++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tsum[j % 2] += grid[j][i];\\r\\n\\t\\t}\\r\\n\\t\\tcols_alternate += max(sum[0], sum[1]);\\r\\n\\t}\\r\\n\\t\\r\\n\\tcout << max(rows_alternate, cols_alternate) << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class SpacedOut\\r\\n{\\r\\n\\tpublic static void main(String[] args) throws IOException\\r\\n\\t{\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint[][] grid = new int[n][n];\\r\\n\\t\\tfor (int i = 0; i < n; i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tfor (int j = 0; j < n; j++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tgrid[i][j] = io.nextInt();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// max beauty if each row alternates between cow and no cow\\r\\n\\t\\tint rowsAlternate = 0;\\r\\n\\t\\t// max beauty if each column alternates\\r\\n\\t\\tint colsAlternate = 0;\\r\\n\\t\\t// each row has an alternating pattern of cow and no cow\\r\\n\\t\\tfor (int i = 0; i < n; i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tint[] sum = new int[2];\\r\\n\\t\\t\\t// there are two ways to alternate, odd index and even index\\r\\n\\t\\t\\tfor (int j = 0; j < n; j++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tsum[j % 2] += grid[i][j];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\trowsAlternate += Math.max(sum[0], sum[1]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// each column has an alternating pattern of cow and no cow\\r\\n\\t\\tfor (int i = 0; i < n; i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tint[] sum = new int[2];\\r\\n\\t\\t\\t// two ways to alternate\\r\\n\\t\\t\\tfor (int j = 0; j < n; j++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tsum[j % 2] += grid[j][i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcolsAlternate += Math.max(sum[0], sum[1]);\\r\\n\\t\\t}\\r\\n\\t\\tio.println(Math.max(rowsAlternate, colsAlternate));\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"n = int(input())\\r\\n# grid_by_rows[i] is the ith row\\r\\ngrid_by_rows = [list(map(int, input().split())) for _ in range(n)]\\r\\n# grid_by_cols[i] is the ith column\\r\\ngrid_by_cols = zip(*grid_by_rows)\\r\\n\\r\\nrows_alternate = 0  # max beauty if each row alternates between cow and no cow\\r\\ncols_alternate = 0  # max beauty if each column alternates\\r\\n\\r\\nfor i in range(n):\\r\\n\\t# each row has an alternating pattern of cow and no cow\\r\\n\\trow = grid_by_rows[i]  # the ith row\\r\\n\\t# row[::2] is a list of every other element, starting with index 0\\r\\n\\t# row[1::2] is a list of every other element, starting with index 1\\r\\n\\trows_alternate += max(sum(row[::2]), sum(row[1::2]))\\r\\n\\r\\n\\t# each column has an alternating pattern of cow and no cow\\r\\n\\tcol = next(grid_by_cols)  # the ith column\\r\\n\\tcols_alternate += max(sum(col[::2]), sum(col[1::2]))\\r\\n\\r\\nprint(max(rows_alternate, cols_alternate))\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1088","source":"USACO Silver 2021 January","title":"Spaced Out","author":"Melody Yu (Video), Tyler Xiao (Video), Maggie Liu"},"parent":{"name":"usaco-1088","relativePath":"usaco-1088.mdx"},"toc":{"cpp":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"ad-hoc","title":"Ad Hoc Problems"}}}}]},"problemInfo":{"uniqueId":"usaco-1088","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1088"}},"pageContext":{"id":"usaco-1088"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}