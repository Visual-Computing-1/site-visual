{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/joi-2018airline/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"joi-18-airline\", source = \"JOI 2018\", title = \"Airline Map\", author = \"Andi Qu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    Spoiler: _missingComponent(\"Spoiler\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {Spoiler, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(Spoiler, {\n      title: \"Hint 1\",\n      children: [_jsx(_components.p, {\n        children: \"There is no limit on the number of edges in the graph we send.\"\n      }), _jsx(_components.p, {\n        children: \"Since extracting edge data is so difficult, we probably want to send the\\r\\noriginal graph plus some extra vertices. Now, the main problem becomes\\r\\nidentifying the node numbers.\"\n      })]\n    }), \"\\n\", _jsx(Spoiler, {\n      title: \"Hint 2\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"2^{10} \\\\approx 1000\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup><mo>≈</mo><mn>1000</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2^{10} \\\\approx 1000</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">10</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1000</span></span></span></span>\"\n        }), \", so this suggests that we should encode bitwise data\\r\\nsomehow.\"]\n      })\n    }), \"\\n\", _jsx(Spoiler, {\n      title: \"Hint 3\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\frac{N}{2} > N - 512\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mfrac><mi>N</mi><mn>2</mn></mfrac><mo>&gt;</mo><mi>N</mi><mo>−</mo><mn>512</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{N}{2} &gt; N - 512</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.2173em;vertical-align:-0.345em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8723em;\\\"><span style=\\\"top:-2.655em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">512</span></span></span></span>\"\n        }), \" when \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"N \\\\leq 1000\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N \\\\leq 1000</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8193em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1000</span></span></span></span>\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsxs(_components.p, {\n        children: [\"In addition to the original graph, send 10 extra \\\"bit-nodes\\\", where bit-node \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \"\\r\\nand node \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n        }), \" are connected only if the \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \"-th bit of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n        }), \" is 1. If we can\\r\\nidentify these bit-nodes and their numbers, then we are done.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Connect bit-node \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" with bit-node \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i + 1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">i + 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7429em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" to form a \\\"chain\\\" so that we can\\r\\norder them if we can find them.\"]\n      }), _jsx(_components.p, {\n        children: \"We still have two extra nodes to send, so do the following:\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Connect the first extra node with each non-bit-node.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Connect the second extra node with the first extra node.\"\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"The degree of the first extra node will be \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"N + 1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N + 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" while the degree of the\\r\\nsecond extra node will be 1. This means that we can uniquely identify them and\\r\\nthus also the bit-nodes!\"]\n      }), _jsx(_components.p, {\n        children: \"We still need to be able to deduce which end of the bit-node \\\"chain\\\" is bit-node\\r\\n1 though. The key observation here is that bit-node 1 will always have a greater\\r\\ndegree than bit-node 10. We can thus identify both the bit-nodes and their\\r\\nnumbers.\"\n      }), _jsx(_components.p, {\n        children: \"This solution sends exactly 12 extra nodes.\"\n      }), _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"Anna.cpp\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <vector>\\r\\n#include \\\"Alicelib.h\\\"\\r\\n\\r\\nvoid Alice(int N, int M, int A[], int B[]) {\\r\\n\\tstd::vector<std::pair<int, int>> edges;\\r\\n\\t// Original graph\\r\\n\\tfor (int i = 0; i < M; i++) edges.push_back({A[i], B[i]});\\r\\n\\t// Bit nodes to find node numbers\\r\\n\\tfor (int i = 0; i < 10; i++) {\\r\\n\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\tif (j & (1 << i)) edges.push_back({N + i, j});\\r\\n\\t\\t}\\r\\n\\t\\tif (i < 9) edges.push_back({N + i, N + i + 1});\\r\\n\\t}\\r\\n\\t// Special vertex connected to all nodes but bit nodes\\r\\n\\tfor (int i = 0; i < N; i++) edges.push_back({N + 10, i});\\r\\n\\t// Other vertex to identify the special vertex\\r\\n\\tedges.push_back({N + 11, N + 10});\\r\\n\\t// Send the graph\\r\\n\\tInitG(N + 12, edges.size());\\r\\n\\tfor (int i = 0; i < edges.size(); i++)\\r\\n\\t\\tMakeG(i, edges[i].first, edges[i].second);\\r\\n}\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"Bob.cpp\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <vector>\\r\\n#include \\\"Boblib.h\\\"\\r\\n\\r\\nstd::vector<int> graph[1012];\\r\\nbool adj[1012][1012], is_bit[1012], visited[1012];\\r\\nint actual[1012];\\r\\n\\r\\nvoid Bob(int V, int U, int C[], int D[]) {\\r\\n\\tfor (int i = 0; i < U; i++) {\\r\\n\\t\\tgraph[C[i]].push_back(D[i]);\\r\\n\\t\\tgraph[D[i]].push_back(C[i]);\\r\\n\\t\\tadj[C[i]][D[i]] = adj[D[i]][C[i]] = true;\\r\\n\\t}\\r\\n\\t// Find the 2 special vertices\\r\\n\\tint special;\\r\\n\\tfor (int i = 0; i < V; i++) {\\r\\n\\t\\tif (graph[i].size() == 1 && graph[graph[i][0]].size() == V - 11) {\\r\\n\\t\\t\\tspecial = graph[i][0];\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tis_bit[special] = true;\\r\\n\\t// Identify the bit vertices\\r\\n\\tint last_bit = special;\\r\\n\\tfor (int i = 0; i < V; i++) {\\r\\n\\t\\tif (i != special && !adj[i][special]) {\\r\\n\\t\\t\\tis_bit[i] = true;\\r\\n\\t\\t\\tif (graph[i].size() <= graph[last_bit].size()) last_bit = i;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i = 9; ~i; i--) {\\r\\n\\t\\tvisited[last_bit] = true;\\r\\n\\t\\tfor (int j : graph[last_bit]) actual[j] += 1 << i;\\r\\n\\t\\tfor (int j : graph[last_bit]) if (is_bit[j] && !visited[j]) {\\r\\n\\t\\t\\tlast_bit = j;\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// Construct the graph again\\r\\n\\tstd::vector<std::pair<int, int>> edges;\\r\\n\\tfor (int i = 0; i < V; i++) for (int j = i + 1; j < V; j++) {\\r\\n\\t\\tif (adj[i][j] && !is_bit[i] && !is_bit[j]) edges.push_back({actual[i], actual[j]});\\r\\n\\t}\\r\\n\\tInitMap(V - 12, edges.size());\\r\\n\\tfor (std::pair<int, int> i : edges) MakeMap(i.first, i.second);\\r\\n}\\n\"\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"joi-18-airline","source":"JOI 2018","title":"Airline Map","author":"Andi Qu"},"parent":{"name":"joi-18-airline","relativePath":"joi-18-airline.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"interactive","title":"Interactive and Communication Problems"}}}}]},"problemInfo":{"uniqueId":"joi-18-airline","url":"https://oj.uz/problem/view/JOI18_airline"}},"pageContext":{"id":"joi-18-airline"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}