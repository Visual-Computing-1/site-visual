{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-firecrackers/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1468D\", source = \"CF\", title = \"Firecrackers\", author = \"Jesse Choe\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/85951\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can initially attempt this problem by figuring out which firecrackers should explode. Obviously, we should attempt to explode the firecrackers with a minimal\\r\\ndetonation time to increase the number of firecrackers exploded before eventually being caught. Also, observe that the firecrackers with a longer detonation\\r\\ntime should be dropped first.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To find the maximum number of firecrackers before the hooligan gets caught by the guard, sort the detonation times in increasing order and figure out the\\r\\nmaximum number of firecrackers to drop before getting caught by applying binary search.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If we can determine the amount of time before getting caught, then the binary search will be trivial.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are two cases which determine the amount of time before getting caught:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"It can be proven that if \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a < b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a &lt; b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        }), \", then the amount of time before getting caught is precisely \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"b - 1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">b - 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" seconds.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It can be proven that if \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a > b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a &gt; b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        }), \", then the amount of time before getting caught is precisely \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"n - b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n - b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        }), \" seconds.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Note: these times are computed by assuming that both the hooligan and guard act optimally.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After computing the amount of time before getting caught, we can simulate whether a particular firecracker will explode in time.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"c-implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#c-implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"C++ Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\nusing vl = vector<ll>;\\r\\n\\r\\nll corridor_size;\\r\\nll num_of_firecrackers;\\r\\nll hooligan_location; \\r\\nll guard_location; \\r\\nll max_firecrackers;\\r\\nll time_before_caught;\\r\\n\\r\\nbool works(vl exploding_times, ll firecrackers_exploded) {\\r\\n\\tint current_time = 1;\\r\\n\\tfor (int i = firecrackers_exploded - 1; i >= 0; i--) {\\r\\n\\t\\t/* Check whether a given firecracker could be exploded \\r\\n\\t\\t * before being caught by the guard. */\\r\\n\\t\\tif(current_time + exploding_times[i] > time_before_caught) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t++current_time;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true;\\r\\n}\\r\\n\\r\\nvoid solve() {\\r\\n\\tcin >> corridor_size >> num_of_firecrackers\\r\\n\\t\\t>> hooligan_location >> guard_location;\\r\\n\\tvl exploding_times(num_of_firecrackers);\\r\\n\\tfor (int i = 0; i < num_of_firecrackers; i++) {\\r\\n\\t\\tcin >> exploding_times[i];\\r\\n\\t}\\r\\n\\tsort(exploding_times.begin(), exploding_times.end());\\r\\n\\tmax_firecrackers = min(\\r\\n\\t\\tnum_of_firecrackers,\\r\\n\\t\\tabs(hooligan_location - guard_location) - 1\\r\\n\\t);\\r\\n\\t/* \\r\\n\\t * Compute the maximum time before the guard catches the\\r\\n\\t * hooligan given their initial positions.\\r\\n\\t */\\r\\n\\tif (hooligan_location < guard_location) {\\r\\n\\t\\ttime_before_caught = guard_location - 1;\\r\\n\\t} else if (hooligan_location > guard_location) {\\r\\n\\t\\ttime_before_caught = corridor_size - guard_location;\\r\\n\\t} else {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tll left = 0, right = max_firecrackers, max_exploded = 0;\\r\\n\\twhile (left <= right) {\\r\\n\\t\\tll mid = left + (right - left) / 2;\\r\\n\\t\\tif (works(exploding_times, mid)) {\\r\\n\\t\\t\\tmax_exploded = mid;\\r\\n\\t\\t\\tleft = mid + 1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tright = mid - 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << max_exploded << endl;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint t; cin >> t;\\r\\n\\tfor (int i = 0; i < t; i++) {\\r\\n\\t\\tsolve();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1468D","source":"CF","title":"Firecrackers","author":"Jesse Choe"},"parent":{"name":"cf-1468D","relativePath":"cf-1468D.mdx"},"toc":{"cpp":[{"depth":2,"value":"C++ Implementation","slug":"c-implementation"}],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"silver-conclusion","title":"Additional Practice for USACO Silver"}}}}]},"problemInfo":{"uniqueId":"cf-1468D","url":"https://codeforces.com/contest/1468/problem/D"}},"pageContext":{"id":"cf-1468D"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}