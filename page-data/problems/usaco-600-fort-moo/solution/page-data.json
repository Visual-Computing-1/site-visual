{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-600-fort-moo/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-600\", source = \"USACO Platinum 2016 January\", title = \"Fort Moo\", author = \"Kevin Sheng, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_fortmoo_platinum_jan16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By computing the \", _jsx(_components.a, {\n        href: \"/silver/more-prefix-sums/\",\n        children: \"2D Prefix Sum\"\n      }), \" for the grid, we can evaluate the usability of a frame in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Due to the low bounds on \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \", we can iterate through all possible pairs of columns and find the maximum area frame in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"O(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" with a sliding window.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^3)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^3)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"fortmoo.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"fortmoo.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tint n, m;\\r\\n\\tcin >> n >> m;\\r\\n\\r\\n\\tvector<vector<bool>> grid(n, vector<bool>(m));\\r\\n\\tvector<vector<int>> pref_sum(n + 1, vector<int>(m + 1));\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tstring s;\\r\\n\\t\\tcin >> s;\\r\\n\\r\\n\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\tgrid[i][j] = s[j] == 'X';\\r\\n\\r\\n\\t\\t\\t// build prefix sum\\r\\n\\t\\t\\tpref_sum[i + 1][j + 1] = pref_sum[i][j + 1] + pref_sum[i + 1][j];\\r\\n\\t\\t\\tpref_sum[i + 1][j + 1] -= pref_sum[i][j];\\r\\n\\t\\t\\tpref_sum[i + 1][j + 1] += grid[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tint max_area = 0;\\r\\n\\r\\n\\tfor (int c1 = 0; c1 < m; c1++) {\\r\\n\\t\\tfor (int c2 = 0; c2 < m; c2++) {\\r\\n\\t\\t\\tint prev = -1;\\r\\n\\r\\n\\t\\t\\tfor (int r = 0; r < n; r++) {\\r\\n\\t\\t\\t\\tbool emp = (pref_sum[r + 1][c2 + 1] - pref_sum[r][c2 + 1]\\r\\n\\t\\t\\t\\t\\t    - pref_sum[r + 1][c1] + pref_sum[r][c1]) == 0;\\r\\n\\r\\n\\t\\t\\t\\t// row only\\r\\n\\t\\t\\t\\tif (emp) {\\r\\n\\t\\t\\t\\t\\tmax_area = max(max_area, c2 - c1 + 1);\\r\\n\\t\\t\\t\\t} \\r\\n\\r\\n\\t\\t\\t\\t// we can continue off of a previous valid row\\r\\n\\t\\t\\t\\tif (emp && prev != -1) {\\r\\n\\t\\t\\t\\t\\t// update answer\\r\\n\\t\\t\\t\\t\\tmax_area = max(max_area, (r - prev + 1) * (c2 - c1 + 1));\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// reset prev\\r\\n\\t\\t\\t\\tif (grid[r][c1] || grid[r][c2]) {\\r\\n\\t\\t\\t\\t\\tprev = -1;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// set prev\\r\\n\\t\\t\\t\\tif (emp && prev == -1) {\\r\\n\\t\\t\\t\\t\\tprev = r;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tcout << max_area << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"alternate-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#alternate-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Alternate Solution\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"explanation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The approach here is a bit different from the official solution, using an adaption of 2D Kadane's algorithm instead.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Iterate through all possible pairs of columns. For each pair, we'll solve the problem with the restriction that the fort must be aligned along these two columns. For each row between these two columns, we will use prefix sums to check if the area between the two columns and in the row is clear.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We keep a running variable \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r_{start}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>r</mi><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\\\"application/x-tex\\\">r_{start}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2806em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">s</span><span class=\\\"mord mathnormal mtight\\\">t</span><span class=\\\"mord mathnormal mtight\\\">a</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal mtight\\\">t</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" which keeps track of the earliest row we can start the fort at and iterate through all possible row endings (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r_{end}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>r</mi><mrow><mi>e</mi><mi>n</mi><mi>d</mi></mrow></msub></mrow><annotation encoding=\\\"application/x-tex\\\">r_{end}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">e</span><span class=\\\"mord mathnormal mtight\\\">n</span><span class=\\\"mord mathnormal mtight\\\">d</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" in the code). Note that if a swampy area resides in one of the columns themselves, no fort can go through that row, so we must check for that and update \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r_{start}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>r</mi><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\\\"application/x-tex\\\">r_{start}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2806em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">s</span><span class=\\\"mord mathnormal mtight\\\">t</span><span class=\\\"mord mathnormal mtight\\\">a</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal mtight\\\">t</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" accordingly.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^3)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^3)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <fstream>\\r\\n#include <vector>\\r\\n#include <algorithm>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nconst char BAD = 'X';\\r\\n\\r\\n// 2016 jan plat\\r\\nint main() {\\r\\n\\tstd::ifstream read(\\\"fortmoo.in\\\");\\r\\n\\tint row_num;\\r\\n\\tint col_num;\\r\\n\\tread >> row_num >> col_num;\\r\\n\\r\\n\\tvector<vector<bool>> sturdy(row_num, vector<bool>(col_num));\\r\\n\\t// col_num + 1 because of how pref sums work\\r\\n\\tvector<vector<int>> row_bad_nums(row_num, vector<int>(col_num + 1));\\r\\n\\tfor (int r = 0; r < row_num; r++) {\\r\\n\\t\\tfor (int c = 0; c < col_num; c++) {\\r\\n\\t\\t\\tchar cell;\\r\\n\\t\\t\\tread >> cell;\\r\\n\\t\\t\\tsturdy[r][c] = cell != BAD;\\r\\n\\t\\t\\trow_bad_nums[r][c + 1] += row_bad_nums[r][c] + (cell == BAD);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tint max_area = 0;\\r\\n\\tfor (int c_start = 0; c_start < col_num; c_start++) {\\r\\n\\t\\tfor (int c_end = c_start + 1; c_end < col_num; c_end++) {\\r\\n\\t\\t\\tint r_start = 0;\\r\\n\\t\\t\\tfor (int r_end = 0; r_end < row_num; r_end++) {\\r\\n\\t\\t\\t\\tbool rowValid =\\r\\n\\t\\t\\t\\t\\t\\trow_bad_nums[r_end][c_end + 1]\\r\\n\\t\\t\\t\\t\\t\\t- row_bad_nums[r_end][c_start] == 0;\\r\\n\\t\\t\\t\\tif (r_end == r_start && !rowValid) {\\r\\n\\t\\t\\t\\t\\tr_start++;\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (!sturdy[r_end][c_start] || !sturdy[r_end][c_end]) {\\r\\n\\t\\t\\t\\t\\tr_start = r_end + 1;\\r\\n\\t\\t\\t\\t} else if (rowValid && r_start != r_end) {\\r\\n\\t\\t\\t\\t\\tmax_area = std::max(\\r\\n\\t\\t\\t\\t\\t\\tmax_area,\\r\\n\\t\\t\\t\\t\\t\\t(c_end - c_start + 1) * (r_end - r_start + 1)\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << max_area << endl;\\r\\n\\tstd::ofstream(\\\"fortmoo.out\\\") << max_area << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class FortMoo {\\r\\n\\tprivate static final char BAD = 'X';\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new FileReader(\\\"fortmoo.in\\\"));\\r\\n\\t\\tStringTokenizer initial = new StringTokenizer(read.readLine());\\r\\n\\t\\tint rowNum = Integer.parseInt(initial.nextToken());\\r\\n\\t\\tint colNum = Integer.parseInt(initial.nextToken());\\r\\n\\r\\n\\t\\tboolean[][] sturdy = new boolean[rowNum][colNum];\\r\\n\\t\\t// colNum + 1 because of how pref sums work\\r\\n\\t\\tint[][] rowBadNums = new int[rowNum][colNum + 1];\\r\\n\\t\\tfor (int r = 0; r < rowNum; r++) {\\r\\n\\t\\t\\tString row = read.readLine();\\r\\n\\t\\t\\tfor (int c = 0; c < colNum; c++) {\\r\\n\\t\\t\\t\\trowBadNums[r][c + 1] =\\r\\n\\t\\t\\t\\t\\t\\trowBadNums[r][c]\\r\\n\\t\\t\\t\\t\\t\\t+ (row.charAt(c) == BAD ? 1 : 0);\\r\\n\\t\\t\\t\\tsturdy[r][c] = row.charAt(c) != BAD;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint maxArea = 0;\\r\\n\\t\\tfor (int cStart = 0; cStart < colNum; cStart++) {\\r\\n\\t\\t\\tfor (int cEnd = cStart + 1; cEnd < colNum; cEnd++) {\\r\\n\\t\\t\\t\\tint rStart = 0;\\r\\n\\t\\t\\t\\tfor (int rEnd = 0; rEnd < rowNum; rEnd++) {\\r\\n\\t\\t\\t\\t\\tboolean rowValid =\\r\\n\\t\\t\\t\\t\\t\\t\\trowBadNums[rEnd][cEnd + 1]\\r\\n\\t\\t\\t\\t\\t\\t\\t- rowBadNums[rEnd][cStart] == 0;\\r\\n\\t\\t\\t\\t\\tif (rEnd == rStart && !rowValid) {\\r\\n\\t\\t\\t\\t\\t\\trStart++;\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tif (!sturdy[rEnd][cStart] || !sturdy[rEnd][cEnd]) {\\r\\n\\t\\t\\t\\t\\t\\trStart = rEnd + 1;\\r\\n\\t\\t\\t\\t\\t} else if (rowValid && rStart != rEnd) {\\r\\n\\t\\t\\t\\t\\t\\tmaxArea = Math.max(\\r\\n\\t\\t\\t\\t\\t\\t\\tmaxArea,\\r\\n\\t\\t\\t\\t\\t\\t\\t(cEnd - cStart + 1) * (rEnd - rStart + 1)\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tPrintWriter written = new PrintWriter(\\\"fortmoo.out\\\");\\r\\n\\t\\twritten.println(maxArea);\\r\\n\\t\\twritten.close();\\r\\n\\t\\tSystem.out.println(maxArea);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-600","source":"USACO Platinum 2016 January","title":"Fort Moo","author":"Kevin Sheng, Ryan Chou"},"parent":{"name":"usaco-600","relativePath":"usaco-600.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Alternate Solution","slug":"alternate-solution"},{"depth":3,"value":"Explanation","slug":"explanation-1"},{"depth":3,"value":"Implementation","slug":"implementation-1"}],"java":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Alternate Solution","slug":"alternate-solution"},{"depth":3,"value":"Explanation","slug":"explanation-1"},{"depth":3,"value":"Implementation","slug":"implementation-1"}],"py":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Alternate Solution","slug":"alternate-solution"},{"depth":3,"value":"Explanation","slug":"explanation-1"},{"depth":3,"value":"Implementation","slug":"implementation-1"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sliding-window","title":"Sliding Window"}}}}]},"problemInfo":{"uniqueId":"usaco-600","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=600"}},"pageContext":{"id":"usaco-600"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}