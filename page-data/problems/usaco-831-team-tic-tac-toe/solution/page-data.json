{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-831-team-tic-tac-toe/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-831\", source = \"USACO Bronze 2018 Open\", title = \"Team Tic Tac Toe\", author = \"Jesse Choe, Kevin Sheng, Benjamin Qi, Brad Ma, Qian Qian\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, LanguageSection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution-1\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_tttt_bronze_open18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class TeamTicTacToe {\\r\\n\\tstatic char[][] board = new char[3][3];\\r\\n\\r\\n\\t// Does 1 cow win?\\r\\n\\tstatic int cowWins(char ch) {\\r\\n\\t\\t// Check diagonals\\r\\n\\t\\tif (board[0][0] == ch && board[1][1] == ch && board[2][2] == ch) {\\r\\n\\t\\t\\treturn 1;\\r\\n\\t\\t}\\r\\n\\t\\tif (board[0][2] == ch && board[1][1] == ch && board[2][0] == ch) {\\r\\n\\t\\t\\treturn 1;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Check rows and columns\\r\\n\\t\\tfor (int i = 0; i < 3; i++) {\\r\\n\\t\\t\\tif (board[0][i] == ch && board[1][i] == ch && board[2][i] == ch) {\\r\\n\\t\\t\\t\\treturn 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (board[i][0] == ch && board[i][1] == ch && board[i][2] == ch) {\\r\\n\\t\\t\\t\\treturn 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\t// Test if a team wins based on 3 characters in a row, column, or diagonal\\r\\n\\tstatic boolean check3(char ch1, char ch2, char a, char b, char c) {\\r\\n\\t\\t// All 3 characters have to be either ch1 or ch2\\r\\n\\t\\tif (a != ch1 && a != ch2) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t\\tif (b != ch1 && b != ch2) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t\\tif (c != ch1 && c != ch2) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// ch1 and ch2 have to appear at least once each\\r\\n\\t\\tif (a != ch1 && b != ch1 && c != ch1) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t\\tif (a != ch2 && b != ch2 && c != ch2) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t// Does a team win?\\r\\n\\tstatic int teamWins(char ch1, char ch2) {\\r\\n\\t\\t// Check diagonals\\r\\n\\t\\tif (check3(ch1, ch2, board[0][0], board[1][1], board[2][2])) {\\r\\n\\t\\t\\treturn 1;\\r\\n\\t\\t}\\r\\n\\t\\tif (check3(ch1, ch2, board[0][2], board[1][1], board[2][0])) {\\r\\n\\t\\t\\treturn 1;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Check rows and columns\\r\\n\\t\\tfor (int i = 0; i < 3; i++) {\\r\\n\\t\\t\\tif (check3(ch1, ch2, board[0][i], board[1][i], board[2][i])) {\\r\\n\\t\\t\\t\\treturn 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (check3(ch1, ch2, board[i][0], board[i][1], board[i][2])) {\\r\\n\\t\\t\\t\\treturn 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"tttt\\\");\\r\\n\\r\\n\\t\\tfor (int i = 0; i < 3; i++) {\\r\\n\\t\\t\\tString line = io.next();\\r\\n\\t\\t\\tfor (int j = 0; j < 3; j++) {\\r\\n\\t\\t\\t\\tboard[i][j] = line.charAt(j);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint answer1 = 0;\\r\\n\\t\\tint answer2 = 0;\\r\\n\\t\\tfor (char ch = 'A'; ch <= 'Z'; ch++) {\\r\\n\\t\\t\\tanswer1 += cowWins(ch);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (char ch1 = 'A'; ch1 <= 'Z'; ch1++) {\\r\\n\\t\\t\\tfor (char ch2 = (char) ((int) ch1 + 1); ch2 <= 'Z'; ch2++) {\\r\\n\\t\\t\\t\\tanswer2 += teamWins(ch1, ch2);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(answer1 + \\\"\\\\n\\\" + answer2);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2---using-sets\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2---using-sets\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2 - Using Sets\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>  // may the c++ gods forgive me\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nconstexpr int WIDTH = 3;\\r\\n\\r\\nvector<string> board(WIDTH);\\r\\nset<set<char>> winners[WIDTH + 1];\\r\\n\\r\\nvoid insert(vector<pair<int, int>> coordinates) {\\r\\n\\tset<char> contained;\\r\\n\\tfor (const pair<int, int>& p: coordinates) {\\r\\n\\t\\tcontained.insert(board[p.first][p.second]);\\r\\n\\t}\\r\\n\\t// add the amount of cows who contributed to this to the winners count\\r\\n\\twinners[contained.size()].insert(contained);\\r\\n}\\r\\n\\r\\n// 2018 usopen bronze\\r\\nint main() {\\r\\n\\tifstream read(\\\"tttt.in\\\");\\r\\n\\tfor (int r = 0; r < WIDTH; r++) {\\r\\n\\t\\tread >> board[r];\\r\\n\\t}\\r\\n\\t// insert rows\\r\\n\\tfor (int i = 0; i < WIDTH; i++) {\\r\\n\\t\\tinsert({{i, 0}, {i, 1}, {i, 2}});\\r\\n\\t}\\r\\n\\t// insert columns\\r\\n\\tfor (int i = 0; i < WIDTH; i++) {\\r\\n\\t\\tinsert({{0, i}, {1, i}, {2, i}});\\r\\n\\t}\\r\\n\\t// insert the 2 diagonals\\r\\n\\tinsert({{0, 0}, {1, 1}, {2, 2}});\\r\\n\\tinsert({{2, 0}, {1, 1}, {0, 2}});\\r\\n\\r\\n\\tofstream written(\\\"tttt.out\\\");\\r\\n\\twritten << winners[1].size() << endl;\\r\\n\\twritten << winners[2].size() << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class TeamTicTacToe {\\r\\n\\tprivate static char[][] gameboard = new char[3][3];\\r\\n\\tprivate static Set<Character> singleCow = new TreeSet<>();\\r\\n\\tprivate static Set<String> teams = new TreeSet<>();\\r\\n\\t\\r\\n\\tprivate static void check(char first, char second, char third) {\\r\\n\\t\\t// Stores unique cows in a row/column/diagonal\\r\\n\\t\\tTreeSet<Character> contained = new TreeSet<>();\\r\\n\\t\\tcontained.add(first);\\r\\n\\t\\tcontained.add(second);\\r\\n\\t\\tcontained.add(third);\\r\\n\\t\\tif (contained.size() == 1) {\\r\\n\\t\\t\\t// There is only one unique cow\\r\\n\\t\\t\\tsingleCow.add(contained.first());\\r\\n\\t\\t} else if (contained.size() == 2) {\\r\\n\\t\\t\\t// There are two unique cows\\r\\n\\t\\t\\tteams.add(contained.first() + \\\"\\\" + contained.last());\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"tttt\\\");\\r\\n\\t\\t\\r\\n\\t\\tfor (int i = 0; i < gameboard.length; i++) {\\r\\n\\t\\t\\tString line = io.next();\\r\\n\\t\\t\\tgameboard[i][0] = line.charAt(0);\\r\\n\\t\\t\\tgameboard[i][1] = line.charAt(1);\\r\\n\\t\\t\\tgameboard[i][2] = line.charAt(2);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t// Check rows\\r\\n\\t\\tfor (int i = 0; i < gameboard.length; i++) {\\r\\n\\t\\t\\tcheck(gameboard[i][0], gameboard[i][1], gameboard[i][2]);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t// Check columns\\r\\n\\t\\tfor (int i = 0; i < gameboard.length; i++) {\\r\\n\\t\\t\\tcheck(gameboard[0][i], gameboard[1][i], gameboard[2][i]);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t// Check diagonals\\r\\n\\t\\tcheck(gameboard[0][0], gameboard[1][1], gameboard[2][2]);\\r\\n\\t\\tcheck(gameboard[0][2], gameboard[1][1], gameboard[2][0]);\\r\\n\\t\\t\\r\\n\\t\\tio.println(singleCow.size());\\r\\n\\t\\tio.println(teams.size());\\r\\n\\t\\t\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n\\t\\r\\n}\\r\\n\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-831","source":"USACO Bronze 2018 Open","title":"Team Tic Tac Toe","author":"Jesse Choe, Kevin Sheng, Benjamin Qi, Brad Ma, Qian Qian"},"parent":{"name":"usaco-831","relativePath":"usaco-831.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2 - Using Sets","slug":"solution-2---using-sets"}],"java":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2 - Using Sets","slug":"solution-2---using-sets"}],"py":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2 - Using Sets","slug":"solution-2---using-sets"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sets","title":"Introduction to Sets & Maps"}}}},{"node":{"module":{"frontmatter":{"id":"simulation","title":"Simulation"}}}}]},"problemInfo":{"uniqueId":"usaco-831","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=831"}},"pageContext":{"id":"usaco-831"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}