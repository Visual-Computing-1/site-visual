{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-895-icy-perimeter/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-895\", source = \"USACO Silver 2019 January\", title = \"Icy Perimeter\", author = \"Tanish Tyagi, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_perimeter_silver_jan19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class IcyPerimeter {\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"perimeter\\\");\\r\\n\\t\\tn = io.nextInt();\\r\\n\\t\\r\\n\\t\\t// we do n + 2 because there is an extra outer ring for flood fill\\r\\n\\t\\tnumberedMatrix = new int[n + 2][n + 2];\\r\\n\\r\\n\\t\\tfor (int x = 1; x <= n; x++) {  // read matrix\\r\\n\\t\\t\\tString line = io.next();\\r\\n\\t\\t\\tfor (int y = 1; y <= n; y++) {\\r\\n\\t\\t\\t\\tString character = Character.toString(line.charAt(y - 1));\\r\\n\\t\\t\\t\\tif (character.equals(\\\"#\\\")) {\\r\\n\\t\\t\\t\\t\\tnumberedMatrix[x][y] = -1;  // mark # as -1\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// mark each connected component with a different number\\r\\n\\t\\tint markNumber = 1;\\r\\n\\t\\tfor (int x = 1; x <= n; x++) {\\r\\n\\t\\t\\tfor (int y = 1; y <= n; y++) {\\r\\n\\t\\t\\t\\tif(numberedMatrix[x][y] == -1) {  // not visited\\r\\n\\t\\t\\t\\t\\tfloodfill(x, y, markNumber);\\r\\n\\t\\t\\t\\t\\tmarkNumber++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint[] rowMovement = {0, 1, 0, -1};  // dx dy arrays\\r\\n\\t\\tint[] columnMovement = {1, 0, -1, 0};\\r\\n\\r\\n\\t\\t// tracks the perimeter of each connected component\\r\\n\\t\\tint[] perimeters = new int[most]; \\r\\n\\r\\n\\t\\tfor (int x = 0; x < (n + 2); x++) {\\r\\n\\t\\t\\tfor (int y = 0; y < (n + 2); y++) {\\r\\n\\t\\t\\t\\t// if part of a connected component\\r\\n\\t\\t\\t\\tif (numberedMatrix[x][y] > 0) {\\r\\n\\t\\t\\t\\t\\tfor (int i = 0; i < 4; i++) {  // try all directions\\r\\n\\t\\t\\t\\t\\t\\t// no need to check for out of bounds because of our outer ring\\r\\n\\t\\t\\t\\t\\t\\t// if there is a zero, that means that we can add one to the perimeter\\r\\n\\t\\t\\t\\t\\t\\tif (numberedMatrix[x + rowMovement[i]][y + columnMovement[i]] == 0) {\\r\\n\\t\\t\\t\\t\\t\\t\\tperimeters[numberedMatrix[x][y]] += 1;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint largestArea = 0;\\r\\n\\t\\tint perimeterOfLargestArea = Integer.MAX_VALUE;\\r\\n\\r\\n\\t\\tfor (int x = 0; x < most; x++) {\\r\\n\\t\\t\\t// if they have the same area but the perimeter is smaller\\r\\n\\t\\t\\tif (areas[x] == largestArea && perimeters[x] < perimeterOfLargestArea) {\\r\\n\\t\\t\\t\\tlargestArea = areas[x];\\r\\n\\t\\t\\t\\tperimeterOfLargestArea = perimeters[x];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// the area is greater, then change largestArea\\r\\n\\t\\t\\telse if (areas[x] > largestArea) {\\r\\n\\t\\t\\t\\tlargestArea = areas[x];\\r\\n\\t\\t\\t\\tperimeterOfLargestArea = perimeters[x];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(largestArea + \\\" \\\" + perimeterOfLargestArea);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//created by Tanish Tyagi\\r\\n#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\n\\r\\nconst int MAXN = 1005;\\r\\n\\r\\nchar grid[MAXN][MAXN]; // the grid itself\\r\\nint n;\\r\\nbool visited[MAXN][MAXN]; // keeps track of which nodes have been visited\\r\\nll currA = 0; // keeps track of the current area of the current blob of ice cream\\r\\nll currP = 0; // keeps track of the current perimeter of the blob of ice cream\\r\\nll area = 0;\\r\\nll perimeter = 0;\\r\\n\\r\\nvoid setIO(string name) {\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tif (len(name)) {\\r\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid floodfill(int r, int c) {\\r\\n\\tif (r < 0 || r >= n || c < 0 || c >= n) {\\r\\n\\t\\tcurrP++;\\r\\n\\t\\treturn; // if outside grid\\r\\n\\t}\\r\\n\\tif (visited[r][c]) return; // already visited this square\\r\\n\\tif (grid[r][c] == '.') {\\r\\n\\t\\tcurrP++;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tvisited[r][c] = true; // mark current square as visited\\r\\n\\tif (grid[r][c] == '#') {\\r\\n\\t\\tcurrA++;\\r\\n\\t}\\r\\n\\t// recursively call floodfill for neighboring squares\\r\\n\\tfloodfill(r, c + 1);\\r\\n\\tfloodfill(r, c - 1);\\r\\n\\tfloodfill(r - 1, c);\\r\\n\\tfloodfill(r + 1, c);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"perimeter\\\");\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\tcin >> grid[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\tif (!visited[i][j] && grid[i][j] == '#') {\\r\\n\\t\\t\\t\\tfloodfill(i, j);\\r\\n\\t\\t\\t\\tif (area == currA) {\\r\\n\\t\\t\\t\\t\\tperimeter = min(perimeter, currP);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse if (currA > area) {\\r\\n\\t\\t\\t\\t\\tarea = currA;\\r\\n\\t\\t\\t\\t\\tperimeter = currP;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tcurrA = currP = 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << area << \\\" \\\" << perimeter << endl;\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-895","source":"USACO Silver 2019 January","title":"Icy Perimeter","author":"Tanish Tyagi, Brad Ma"},"parent":{"name":"usaco-895","relativePath":"usaco-895.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"flood-fill","title":"Flood Fill"}}}}]},"problemInfo":{"uniqueId":"usaco-895","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=895"}},"pageContext":{"id":"usaco-895"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}