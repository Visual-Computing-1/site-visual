{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1619-restaurant-customers/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1619\", source = \"CSES\", title = \"Restaurant Customers\", author = \"Michael Cao, Neo Wang, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    Warning: _missingComponent(\"Warning\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, CPPSection, JavaSection, Warning, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"In this problem, we're given \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" intervals with distinct start and end points,\\r\\nand we want to find the maximum number of intervals overlapping some point.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can use prefix sums to determine the number of intervals that cover any\\r\\nparticular point, and then find the maximum number in the sum.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A naïve approach is to create an array \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ctr}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ctr</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ctr}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5536em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ctr</span></span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ctr}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ctr</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ctr}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ctr</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \"\\r\\nis the number of intervals that cover each point \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \". We can do this by looping\\r\\nthrough each interval \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[a,b]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[a,b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" and increasing \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ctr}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ctr</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ctr}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ctr</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" for each\\r\\nindex in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a \\\\leq i \\\\leq b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a \\\\leq i \\\\leq b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7955em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This results in a \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(nV)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>V</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(nV)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">nV</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time complexity (where\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0 \\\\leq a \\\\leq b \\\\leq V\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi><mo>≤</mo><mi>b</mi><mo>≤</mo><mi>V</mi></mrow><annotation encoding=\\\"application/x-tex\\\">0 \\\\leq a \\\\leq b \\\\leq V</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7804em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8304em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span></span></span></span>\"\n      }), \"), which easily times out (think what happens when the\\r\\ninterval \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[0, V]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>0</mn><mo separator=\\\"true\\\">,</mo><mi>V</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[0, V]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" is queried \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" times).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can do better. It's easy to see that an increment of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" (before computation)\\r\\nin \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{arr}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">arr</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{arr}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">arr</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" causes all subsequent \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{prefix}[i...V]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">prefix</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mi mathvariant=\\\"normal\\\">.</mi><mi mathvariant=\\\"normal\\\">.</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>V</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{prefix}[i...V]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">prefix</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\">...</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" (after\\r\\ncomputation) to increase by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". We can also \\\"undo\\\" this operation by adding\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"-x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">-x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{arr}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">arr</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{arr}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">arr</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". This concept can be conceptualized through increment\\r\\nand decrement points. An increment point increases (and decrement decreases) all\\r\\nsubsequent cells. Note that our decrement point is located at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B+1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">B+1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" because the\\r\\ninterval is inclusive - decrementing at point \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \" turns the interval to\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[A, B)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>A</mi><mo separator=\\\"true\\\">,</mo><mi>B</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[A, B)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example 1\"\n      }), \": Add two to each point in the interval \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[2, 4]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>4</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[2, 4]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Our array after adding 2 at our increment (start) point (before computation)\"\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            className: \"bg-green-200 dark:bg-green-800\",\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Our prefix sum after adding 2 at our increment (start) point (and computing).\"\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            className: \"bg-green-200 dark:bg-green-800\",\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"2\"\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Our prefix sum after subtracting 2 at our decrement point (and computing).\"\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            className: \"bg-red-200 dark:bg-red-800\",\n            children: \"0\"\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Observe that this works for multiple intervals.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example 2\"\n      }), \": Add two to each point in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[2, 4]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>4</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[2, 4]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" and one to each point in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[1, 3]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>3</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[1, 3]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">3</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Adding interval \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[2, 4]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>4</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[2, 4]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" with increment point at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \" and decrement at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"4+1=5\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>4</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>5</mn></mrow><annotation encoding=\\\"application/x-tex\\\">4+1=5</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">5</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            className: \"bg-green-200 dark:bg-green-800\",\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            className: \"bg-red-200 dark:bg-red-800\",\n            children: \"-2\"\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Adding interval \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[1, 3]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>3</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[1, 3]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">3</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" with increment point at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and decrement at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"3+1=4\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3+1=4</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">3</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            className: \"bg-green-200 dark:bg-green-800\",\n            children: \"1\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            className: \"bg-red-200 dark:bg-red-800\",\n            children: \"-1\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"-2\"\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After computation\"\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"0\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"1\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"3\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"3\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"2\"\n          }), \"\\r\\n\", _jsx(\"td\", {\n            children: \"0\"\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this problem, our \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" is fixed at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \". As a result, when we encounter a\\r\\nstarting point, we can increment by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \", and for an endpoint, decrement by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \".\\r\\nWe actually cannot compute the prefix sum array directly since \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"V \\\\leq 10^9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>V</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">V \\\\leq 10^9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8193em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \",\\r\\nand we will run out of memory when creating an array of size \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"V\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\\\"application/x-tex\\\">V</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Instead, we can either coordinate compress and compute the prefix sum over\\r\\ninteresting intervals or sweep over the intervals while maintaining a running\\r\\nprefix sum.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation 1\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If we put the start and end points into a list and sort them, all we need to do\\r\\nis find the max sum of values over all prefixes of the list.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\n\\r\\nusing vi = vector<int>;\\r\\n#define pb push_back\\r\\n#define rsz resize\\r\\n#define all(x) begin(x), end(x)\\r\\n#define sz(x) (int)(x).size()\\r\\n\\r\\nusing pi = pair<int,int>;\\r\\n#define f first\\r\\n#define s second\\r\\n#define mp make_pair\\r\\n\\r\\nint main(){\\r\\n\\tios::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\r\\n\\tint n; cin >> n;\\r\\n\\tvector<pi> vals;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tint l, r;\\r\\n\\t\\tcin >> l >> r;\\r\\n\\t\\tvals.pb(mp(l, 1));\\r\\n\\t\\tvals.pb(mp(r, -1));\\r\\n\\t}\\r\\n\\r\\n\\tsort(all(vals));\\r\\n\\r\\n\\tint sum = 0;\\r\\n\\tint ans = 0;\\r\\n\\tfor (auto x : vals) {\\r\\n\\t\\tsum += x.s;\\r\\n\\t\\tans = max(ans, sum);\\r\\n\\t}\\r\\n\\tcout << ans << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      }), _jsxs(JavaSection, {\n        children: [_jsx(Warning, {\n          children: _jsx(_components.p, {\n            children: \"Java solutions using this implementation will TLE on test case #6.\"\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class RestaurantCustomers {\\r\\n\\tstatic class Customer {\\r\\n\\t\\tint time;\\r\\n\\t\\t// a type of 1 means that it is an arrival\\r\\n\\t\\t// and a type of -1 means that it is a departure\\r\\n\\t\\tint type;\\r\\n\\t}\\r\\n\\r\\n\\tstatic class CustomerComparator implements Comparator<Customer> {\\r\\n\\t\\tpublic int compare (Customer one, Customer two) {\\r\\n\\t\\t\\t// use Integer.compare to avoid writing if statements\\r\\n\\t\\t\\treturn Integer.compare(one.time, two.time);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tCustomer[] data = new Customer[2 * n];\\r\\n\\r\\n\\t\\tfor (int x = 0; x < n; x++) {\\r\\n\\t\\t\\tCustomer c1 = new Customer();\\r\\n\\t\\t\\tc1.time = io.nextInt();\\r\\n\\t\\t\\tc1.type = 1;\\r\\n\\r\\n\\t\\t\\tCustomer c2 = new Customer();\\r\\n\\t\\t\\tc2.time = io.nextInt();\\r\\n\\t\\t\\tc2.type = -1;\\r\\n\\r\\n\\t\\t\\tdata[2 * x] = c1;\\r\\n\\t\\t\\tdata[2 * x + 1] = c2;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tArrays.sort(data, new CustomerComparator());\\r\\n\\r\\n\\t\\tint sum = 0;\\r\\n\\t\\tint answer = 0;\\r\\n\\t\\tfor (Customer customer : data) {\\r\\n\\t\\t\\t// if it is an arrival, add 1\\r\\n\\t\\t\\t// if it is a departure, subtract 1\\r\\n\\t\\t\\tsum += customer.type;\\r\\n\\t\\t\\tanswer = Math.max(answer, sum);\\r\\n\\t\\t}\\r\\n\\t\\tio.println(answer);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\t\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation-2\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation 2\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Coordinate compress interval endpoints and only compute the prefix sum array for\\r\\ninteresting intervals.\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\r\\n\\tint N;\\r\\n\\tcin >> N;\\r\\n\\tvector<pair<int, int>> customers;\\r\\n\\tfor (int i = 0; i < N; ++i) {\\r\\n\\t\\tint a, b; cin >> a >> b;\\r\\n\\t\\tcustomers.push_back({a, 1});\\r\\n\\t\\tcustomers.push_back({b + 1, -1});\\r\\n\\t}\\r\\n\\r\\n\\tsort(customers.begin(), customers.end());\\r\\n\\r\\n\\tint curr = 0;\\r\\n\\tint l = 0;\\r\\n\\tvector<long long> pfx(2*N + 1); // prefix sum array\\r\\n\\tvector<int> arr(2*N);\\r\\n\\r\\n\\tfor (int i = 0; i < 2*N; ++i) { // coordinate compression\\r\\n\\t\\tif(i == 0) { customers[i].first = 0; }\\r\\n\\t\\telse if(customers[i].first > curr) { l++; curr = customers[i].first; } // we move a pointer\\r\\n\\t\\tarr[l+1] += customers[i].second;\\r\\n\\t\\t// pfx[l+1] += customers[i].second; implementation without arr, merges all interval end and starts here\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 1; i < 2*N + 1; ++i) {\\r\\n\\t\\tpfx[i] = arr[i] + pfx[i-1];\\r\\n\\t\\t// pfx[i] += pfx[i-1]; implementation without arr\\r\\n\\t}\\r\\n\\r\\n\\tlong long ret = 0;\\r\\n\\r\\n\\tfor (int i = 0; i < 2*N + 1; ++i)\\r\\n\\t\\tret = max(ret, pfx[i]); // find our maximum value\\r\\n\\tcout << ret << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1619","source":"CSES","title":"Restaurant Customers","author":"Michael Cao, Neo Wang, Brad Ma"},"parent":{"name":"cses-1619","relativePath":"cses-1619.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation 1","slug":"implementation-1"},{"depth":2,"value":"Implementation 2","slug":"implementation-2"}],"java":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation 1","slug":"implementation-1"},{"depth":2,"value":"Implementation 2","slug":"implementation-2"}],"py":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation 1","slug":"implementation-1"},{"depth":2,"value":"Implementation 2","slug":"implementation-2"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sorting-custom","title":"Custom Comparators and Coordinate Compression"}}}}]},"problemInfo":{"uniqueId":"cses-1619","url":"https://cses.fi/problemset/task/1619"}},"pageContext":{"id":"cses-1619"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}