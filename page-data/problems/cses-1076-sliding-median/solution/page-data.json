{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1076-sliding-median/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1076\", source = \"CSES\", title = \"Sliding Median\", author = \"Isaac Noel, Arpan Banerjee\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    MATHDIV: _missingComponent(\"MATHDIV\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, MATHDIV, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution-1-maintaining-two-multisets\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1-maintaining-two-multisets\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1: Maintaining two multisets\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To accomplish finding the sorted median of a sliding window, we can store the\\r\\nwindow within two sets: one containing the lower values of the window and the\\r\\nother containing the upper values. If we ensure that the size of the lower set\\r\\nis always greater than or equal to the size of the upper set, then the largest\\r\\nelement in the lower set will be the median. This works for all sizes of\\r\\nwindows. In odd windows, the size of the lower set will be one larger than the\\r\\nupper set, therefore its largest element will be the median. In even windows,\\r\\nthe problem calls for the smallest of the two centermost values so this strategy\\r\\nstill works.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To implement, we need a function that will handle inserting and removing\\r\\nelements in the window. For inserting, compare the incoming value to the current\\r\\nmedian and place it in the upper set if it is greater than the median, put it in\\r\\nthe lower set otherwise. If one set fills above its max size, transfer an\\r\\nelement to the other set. Erasing is more simple, just find the element and\\r\\nerase it.\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <set>\\r\\n#include <algorithm>\\r\\nusing namespace std;\\r\\n\\r\\nlong N, M;\\r\\nlong arr[200010];\\r\\nmultiset<long> up;\\r\\nmultiset<long> low;\\r\\n\\r\\nvoid ins(long val){ // insert val into sets\\r\\n\\tlong a = *low.rbegin(); // current median\\r\\n\\tif(a < val){\\r\\n\\t\\tup.insert(val);\\r\\n\\t\\tif(up.size() > M/2){\\r\\n\\t\\t\\tlow.insert(*up.begin());\\r\\n\\t\\t\\tup.erase(up.find(*up.begin()));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\tlow.insert(val);\\r\\n\\t\\tif(low.size() > (M + 1)/2){\\r\\n\\t\\t\\tup.insert(*low.rbegin());\\r\\n\\t\\t\\tlow.erase(low.find(*low.rbegin()));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid er(long val){ // erase from sets\\r\\n\\tif(up.find(val) != up.end()) up.erase(up.find(val));\\r\\n\\telse low.erase(low.find(val));\\r\\n\\tif(low.empty()){\\r\\n\\t\\tlow.insert(*up.begin());\\r\\n\\t\\tup.erase(up.find(*up.begin()));\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcin >> N >> M;\\r\\n\\tfor(int i = 0; i < N; i++) cin >> arr[i];\\r\\n\\tlow.insert(arr[0]); for(int i = 1; i < M; i++) ins(arr[i]);\\r\\n\\tcout << *low.rbegin() << \\\" \\\";\\r\\n\\tfor(long i = M; i < N; i++){\\r\\n\\t\\tif(M == 1){\\r\\n\\t\\t\\tins(arr[i]);\\r\\n\\t\\t\\ter(arr[i - M]);\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\ter(arr[i - M]);\\r\\n\\t\\t\\tins(arr[i]);\\r\\n\\t\\t}\\r\\n\\t\\tcout << *low.rbegin() << \\\" \\\";\\r\\n\\t}\\r\\n\\tcout << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2-fenwick-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2-fenwick-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2: Fenwick Tree\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use a \", _jsx(_components.a, {\n        href: \"/gold/PURS#binary-indexed-tree\",\n        children: \"Fenwick tree\"\n      }), \" to simulate an order statistic tree/indexed set.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Fenwick array (let's call it \", _jsx(_components.code, {\n        children: \"fa\"\n      }), \")can be treated as a frequency array. For example, if 5 is inserted into the window, \", _jsx(_components.code, {\n        children: \"fa[5] += 1\"\n      }), \". This enables us to binary search for an integer \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" such that\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"\\\\left(\\\\sum_{i=1}^{x} \\\\texttt{fa[i]}\\\\right)\\\\geq \\\\lceil k/2 \\\\rceil \\\\text{ and } \\\\left(\\\\sum_{i=1}^{x-1}\\\\texttt{fa[i]}\\\\right) <\\\\lceil k/2 \\\\rceil\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mrow><mo fence=\\\"true\\\">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></munderover><mtext mathvariant=\\\"monospace\\\">fa[i]</mtext><mo fence=\\\"true\\\">)</mo></mrow><mo>≥</mo><mo stretchy=\\\"false\\\">⌈</mo><mi>k</mi><mi mathvariant=\\\"normal\\\">/</mi><mn>2</mn><mo stretchy=\\\"false\\\">⌉</mo><mtext> and </mtext><mrow><mo fence=\\\"true\\\">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></munderover><mtext mathvariant=\\\"monospace\\\">fa[i]</mtext><mo fence=\\\"true\\\">)</mo></mrow><mo>&lt;</mo><mo stretchy=\\\"false\\\">⌈</mo><mi>k</mi><mi mathvariant=\\\"normal\\\">/</mi><mn>2</mn><mo stretchy=\\\"false\\\">⌉</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\left(\\\\sum_{i=1}^{x} \\\\texttt{fa[i]}\\\\right)\\\\geq \\\\lceil k/2 \\\\rceil \\\\text{ and } \\\\left(\\\\sum_{i=1}^{x-1}\\\\texttt{fa[i]}\\\\right) &lt;\\\\lceil k/2 \\\\rceil</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3.0277em;vertical-align:-1.2777em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">(</span></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.6514em;\\\"><span style=\\\"top:-1.8723em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mrel mtight\\\">=</span><span class=\\\"mord mtight\\\">1</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∑</span></span></span><span style=\\\"top:-4.3em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">x</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.2777em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">fa[i]</span></span><span class=\\\"mclose delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">)</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3.0788em;vertical-align:-1.2777em;\\\"></span><span class=\\\"mopen\\\">⌈</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord\\\">/2</span><span class=\\\"mclose\\\">⌉</span><span class=\\\"mord text\\\"><span class=\\\"mord\\\"> and </span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">(</span></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.8011em;\\\"><span style=\\\"top:-1.8723em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mrel mtight\\\">=</span><span class=\\\"mord mtight\\\">1</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∑</span></span></span><span style=\\\"top:-4.3em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">x</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.2777em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">fa[i]</span></span><span class=\\\"mclose delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">)</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">⌈</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord\\\">/2</span><span class=\\\"mclose\\\">⌉</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"and find \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \" from there. Clearly, the values of the array would need to be compressed, as an array of size \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" is infeasible. There will also be an extra \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\log\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>log</mi><mo>⁡</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\log</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span></span></span></span>\"\n      }), \" factor from using the Fenwick tree \", _jsx(_components.code, {\n        children: \"sum\"\n      }), \" operation, yielding a total time complexity of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n\\\\log^2{n})\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n\\\\log^2{n})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">n</span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". Note that a more precise upper bound is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((n-k+1) \\\\cdot \\\\log^2{k} + n \\\\log{n})\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo><mo>⋅</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>k</mi><mo>+</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((n-k+1) \\\\cdot \\\\log^2{k} + n \\\\log{n})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0929em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">n</span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" (there are \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(n-k+1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(n-k+1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" windows), but it's tricky to express the maximum value of this in terms of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \"; therefore, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n \\\\log^2{n})\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n \\\\log^2{n})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">n</span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" is better.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include<bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int sz = 200005;\\r\\nint fa[sz], a[sz], bit[sz], n, k;\\r\\nmap<int, int> compressed, decompress;\\r\\n\\r\\nint psum(int x, int sum = 0){\\r\\n\\tfor (; x > 0; x -= x & -x) sum += bit[x]; return sum;\\r\\n}\\r\\nvoid add(int x, int val){\\r\\n\\tfor (; x < sz; x += x & -x) bit[x] += val;\\r\\n}\\r\\n\\r\\nsigned main(){\\r\\n\\tcin >> n >> k;\\r\\n\\tfor (int i = 1; i <= n; i++){\\r\\n\\t\\tcin >> a[i];\\r\\n\\t\\tcompressed[a[i]] = 0;\\r\\n\\t}\\r\\n\\tint index = 1;\\r\\n\\tfor (auto& i : compressed){\\r\\n\\t\\ti.second = index++;\\r\\n\\t\\tdecompress[i.second] = i.first;\\r\\n\\t}\\r\\n\\tfor (int i = 1; i <= n; i++){\\r\\n\\t\\tadd(compressed[a[i]], 1);\\r\\n\\t\\tif (i >= k + 1) add(compressed[a[i - k]], -1);\\r\\n\\t\\tint mid = (k / 2) + (k & 1);\\r\\n\\t\\tif (i >= k){\\r\\n\\t\\t\\tint lo = 1, hi = 200003, ans = -1;\\r\\n\\t\\t\\twhile (lo <= hi){\\r\\n\\t\\t\\t\\tint m = (lo + hi) / 2;\\r\\n\\t\\t\\t\\tif (psum(m) >= mid && psum(m - 1) < mid){\\r\\n\\t\\t\\t\\t\\tans = m; break;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse if (psum(m) < mid) lo = m + 1;\\r\\n\\t\\t\\t\\telse hi = m - 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcout << decompress[ans] << endl;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"solution-3-order-statistic-tree\",\n          children: [_jsx(_components.a, {\n            href: \"#solution-3-order-statistic-tree\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Solution 3: Order Statistic Tree\"]\n        }), _jsxs(_components.p, {\n          children: [\"We can directly use an \", _jsx(_components.a, {\n            href: \"https://codeforces.com/blog/entry/11080\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"order statistic tree\"\n          }), \" (C++) to get the median while sliding the window across the array in \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(n\\\\log n)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \" time.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include<bits/stdc++.h>\\r\\n#include<ext/pb_ds/assoc_container.hpp>\\r\\n#include<ext/pb_ds/tree_policy.hpp>\\r\\nusing namespace std;\\r\\nusing namespace __gnu_pbds;\\r\\n \\r\\ntypedef tree <\\r\\n\\tpair<int, int>,\\r\\n\\tnull_type,\\r\\n\\tless<pair<int, int>>,\\r\\n\\trb_tree_tag,\\r\\n\\ttree_order_statistics_node_update> ordered_set;\\r\\n \\r\\nint n, k, t, a[200005];\\r\\n \\r\\nint main() {\\r\\n\\tcin >> n >> k;\\r\\n\\tordered_set oset;\\r\\n\\tfor (int i = 0; i < n; i++){\\r\\n\\t\\tint u; cin >> u; a[i] = u;\\r\\n\\t\\toset.insert({u, t++});\\r\\n\\t\\tif (i >= k){\\r\\n\\t\\t\\toset.erase(oset.lower_bound({a[i - k], 0}));\\r\\n\\t\\t}\\r\\n\\t\\tif (i >= k - 1){\\r\\n\\t\\t\\tcout << (*oset.find_by_order((k - 1) / 2)).first << endl;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1076","source":"CSES","title":"Sliding Median","author":"Isaac Noel, Arpan Banerjee"},"parent":{"name":"cses-1076","relativePath":"cses-1076.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1: Maintaining two multisets","slug":"solution-1-maintaining-two-multisets"},{"depth":2,"value":"Solution 2: Fenwick Tree","slug":"solution-2-fenwick-tree"},{"depth":2,"value":"Solution 3: Order Statistic Tree","slug":"solution-3-order-statistic-tree"}],"java":[{"depth":2,"value":"Solution 1: Maintaining two multisets","slug":"solution-1-maintaining-two-multisets"},{"depth":2,"value":"Solution 2: Fenwick Tree","slug":"solution-2-fenwick-tree"}],"py":[{"depth":2,"value":"Solution 1: Maintaining two multisets","slug":"solution-1-maintaining-two-multisets"},{"depth":2,"value":"Solution 2: Fenwick Tree","slug":"solution-2-fenwick-tree"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sliding-window","title":"Sliding Window"}}}}]},"problemInfo":{"uniqueId":"cses-1076","url":"https://cses.fi/problemset/task/1076"}},"pageContext":{"id":"cses-1076"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}