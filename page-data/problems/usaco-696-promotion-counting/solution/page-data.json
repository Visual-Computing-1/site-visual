{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-696-promotion-counting/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-696\", source = \"USACO Platinum 2017 January\", title = \"Promotion Counting\", author = \"Benjamin Qi, Timothy Gao\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, CPPSection, IncompleteSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_promote_platinum_jan17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-1-euler-tour\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1-euler-tour\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1: Euler Tour\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Recall from the \", _jsx(_components.a, {\n        href: \"/gold/tree-euler\",\n        children: \"Euler tour module\"\n      }), \" that each subtree is represented as a contiguous interval in its Euler tour. With this knowledge, we can compress the tree into an array. Now, the problem is reduced the following: for each node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \", we need to determine the number of elements that are less than \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{tour}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">tour</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{tour}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">tour</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{tout}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">tout</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{tout}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">tout</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{tout}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">tout</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{tout}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">tout</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" is the end of the subtree interval for node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \". By processing the nodes in decreasing order, this is a problem we can solve in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time with a binary-indexed tree.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class PromotionCounting {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new FileReader(\\\"promote.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\\\"promote.out\\\")));\\r\\n\\t \\r\\n\\t\\tint N = Integer.parseInt(br.readLine());\\r\\n\\t\\tint[][] ratings = new int[N][2];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tratings[i][0] = i;\\r\\n\\t\\t\\tratings[i][1] = Integer.parseInt(br.readLine());\\r\\n\\t\\t}\\r\\n\\t\\tList<Integer>[] adj = new List[N];\\r\\n\\t\\t\\r\\n\\t\\tfor (int i = 0; i < adj.length; i++) {\\r\\n\\t\\t\\tadj[i] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tfor (int i = 1; i < N; i++) {\\r\\n\\t\\t\\tint par = Integer.parseInt(br.readLine()) - 1;\\r\\n\\t\\t\\tadj[par].add(i);\\r\\n\\t\\t}\\r\\n\\t\\tint[] ret = new int[N];\\r\\n\\t\\tint[] tout = new int[N];\\r\\n\\t\\tint[] bac = new int[N];\\r\\n\\t\\tdfs(adj, tout, bac, 0, 0, -1);\\r\\n\\t\\tBIT bit = new BIT(N);\\r\\n\\t\\tArrays.sort(ratings, (int[] a, int[] b) -> b[1] - a[1]);\\r\\n\\t\\t\\r\\n\\t\\tfor (int i = 0; i < N;) {\\r\\n\\t\\t\\tint j = i;\\r\\n\\t\\t\\twhile (j < N && ratings[i][1] == ratings[j][1]) {\\r\\n\\t\\t\\t\\tint c = ratings[i][0];\\r\\n\\t\\t\\t\\tret[c] = bit.sum(tout[c]) - bit.sum(bac[c] - 1);\\r\\n\\t\\t\\t\\tj++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfor (int k = i; k < j; k++) {\\r\\n\\t\\t\\t\\tbit.update(tout[ratings[k][0]], 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ti = j;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i : ret) {\\r\\n\\t\\t\\tpw.println(i);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tpw.close();\\r\\n\\t\\tbr.close();\\r\\n\\t}\\r\\n\\t\\r\\n\\tstatic int dfs(List<Integer>[] adj, int[] tout, int[] left, int idx, int cur, int last){\\r\\n\\t\\tleft[cur] = idx;\\r\\n\\t\\tfor (int n : adj[cur]) {\\r\\n\\t\\t\\tif(n == last) continue;\\r\\n\\t\\t\\tidx = dfs(adj, t, l, idx, n, cur);\\r\\n\\t\\t}\\r\\n\\t\\ttout[cur] = idx;\\r\\n\\t\\treturn idx + 1;\\r\\n\\t}\\r\\n\\t\\r\\n\\tstatic class BIT {\\r\\n\\t\\tpublic int[] bit;\\r\\n\\t\\tpublic BIT(int N) {\\r\\n\\t\\t\\tbit = new int[N + 1];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic int sum(int r) {\\r\\n\\t\\t\\tr++;\\r\\n\\t\\t\\tint ret = 0;\\r\\n\\t\\t\\twhile (r > 0) {\\r\\n\\t\\t\\t\\tret += bit[r];\\r\\n\\t\\t\\t\\tr -= r & -r;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn ret;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic void update(int idx, int v) {\\r\\n\\t\\t\\tidx++;\\r\\n\\t\\t\\twhile (idx < bit.length) {\\r\\n\\t\\t\\t\\tbit[idx] += v;\\r\\n\\t\\t\\t\\tidx += idx & -idx;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2--merging-indexed-sets\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2--merging-indexed-sets\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2: ## Merging Indexed Sets\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log ^2N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log ^2N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n#include <ext/pb_ds/assoc_container.hpp>\\r\\n\\r\\nusing namespace std;\\r\\nusing namespace __gnu_pbds;\\r\\n\\r\\ntemplate<class T> using Tree = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;\\r\\n\\r\\nconst int MX = 1e5+5;\\r\\n#define sz(x) (int)(x).size()\\r\\n\\r\\nint N, a[MX], ind[MX], ans[MX], ret;\\r\\nvector<int> child[MX];\\r\\nTree<int> d[MX];\\r\\n\\r\\nvoid comb(int a, int b) {\\r\\n\\tif (sz(d[a]) < sz(d[b])) d[a].swap(d[b]);\\r\\n\\tfor (int i: d[b]) d[a].insert(i);\\r\\n}\\r\\n\\r\\nvoid dfs(int x) {\\r\\n\\tind[x] = x;\\r\\n\\tfor (int i: child[x]) {\\r\\n\\t\\tdfs(i);\\r\\n\\t\\tcomb(x,i);\\r\\n\\t}\\r\\n\\tans[x] = sz(d[x])-d[x].order_of_key(a[x]);\\r\\n\\td[x].insert(a[x]);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"promote.in\\\",\\\"r\\\",stdin);\\r\\n\\tfreopen(\\\"promote.out\\\",\\\"w\\\",stdout);\\r\\n\\tcin >> N; for (int i = 1; i <= N; ++i) cin >> a[i];\\r\\n\\tfor (int i = 2; i <= N; ++i) {\\r\\n\\t\\tint p; cin >> p;\\r\\n\\t\\tchild[p].push_back(i);\\r\\n\\t}\\r\\n\\tdfs(1);\\r\\n\\tfor (int i = 1; i <= N; ++i) cout << ans[i] << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Recall from the module that \", _jsx(_components.code, {\n        children: \"std::swap(d[a],d[b])\"\n      }), \" will be too slow. However,\\r\\nthe following does (overloading \", _jsx(_components.code, {\n        children: \"std::swap\"\n      }), \"):\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n#include <ext/pb_ds/assoc_container.hpp>\\r\\n\\r\\nusing namespace std;\\r\\nusing namespace __gnu_pbds;\\r\\n\\r\\ntemplate<class T> using Tree = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;\\r\\n\\r\\nconst int MX = 1e5+5;\\r\\n#define sz(x) (int)(x).size()\\r\\n\\r\\nint N, a[MX], ind[MX], ans[MX], ret;\\r\\nvector<int> child[MX];\\r\\nTree<int> d[MX];\\r\\n\\r\\nnamespace std {\\r\\n\\tvoid swap(Tree<int>& a, Tree<int>& b) { a.swap(b); }\\r\\n}\\r\\n\\r\\nvoid comb(int a, int b) {\\r\\n\\tif (sz(d[a]) < sz(d[b])) std::swap(d[a],d[b]);\\r\\n\\tfor (int i: d[b]) d[a].insert(i);\\r\\n}\\r\\n\\r\\nvoid dfs(int x) {\\r\\n\\tind[x] = x;\\r\\n\\tfor (int i: child[x]) {\\r\\n\\t\\tdfs(i);\\r\\n\\t\\tcomb(x,i);\\r\\n\\t}\\r\\n\\tans[x] = sz(d[x])-d[x].order_of_key(a[x]);\\r\\n\\td[x].insert(a[x]);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"promote.in\\\",\\\"r\\\",stdin);\\r\\n\\tfreopen(\\\"promote.out\\\",\\\"w\\\",stdout);\\r\\n\\tcin >> N; for (int i = 1; i <= N; ++i) cin >> a[i];\\r\\n\\tfor (int i = 2; i <= N; ++i) {\\r\\n\\t\\tint p; cin >> p;\\r\\n\\t\\tchild[p].push_back(i);\\r\\n\\t}\\r\\n\\tdfs(1);\\r\\n\\tfor (int i = 1; i <= N; ++i) cout << ans[i] << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(IncompleteSection, {\n      children: [_jsx(_components.p, {\n        children: \"Add Centroid Decomp/HLD Solution\"\n      }), _jsx(_components.p, {\n        children: \"Sort nodes from largest to smallest value, do path updates from itself the root.\"\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-696","source":"USACO Platinum 2017 January","title":"Promotion Counting","author":"Benjamin Qi, Timothy Gao"},"parent":{"name":"usaco-696","relativePath":"usaco-696.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1: Euler Tour","slug":"solution-1-euler-tour"},{"depth":2,"value":"Solution 2: ## Merging Indexed Sets","slug":"solution-2--merging-indexed-sets"}],"java":[{"depth":2,"value":"Solution 1: Euler Tour","slug":"solution-1-euler-tour"},{"depth":2,"value":"Solution 2: ## Merging Indexed Sets","slug":"solution-2--merging-indexed-sets"}],"py":[{"depth":2,"value":"Solution 1: Euler Tour","slug":"solution-1-euler-tour"},{"depth":2,"value":"Solution 2: ## Merging Indexed Sets","slug":"solution-2--merging-indexed-sets"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"tree-euler","title":"Euler Tour Technique"}}}},{"node":{"module":{"frontmatter":{"id":"merging","title":"Small-To-Large Merging"}}}}]},"problemInfo":{"uniqueId":"usaco-696","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=696"}},"pageContext":{"id":"usaco-696"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}