{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1682-flight-routes-check/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1682\", source = \"CSES\", title = \"Flight Routes Check\", author = \"Michael Cao, Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"In this problem, given a directed graph with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" nodes and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"m\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\\\"application/x-tex\\\">m</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span></span></span></span>\"\n      }), \" edges, we need to\\r\\nreturn \\\"YES\\\" if we can travel between all pairs of vertices \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u, v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u, v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" or \\\"NO\\\" and\\r\\ngive the pair of vertices we can't travel between otherwise.\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"main-idea\",\n      children: [_jsx(_components.a, {\n        href: \"#main-idea\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Main Idea\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The theorem used here is that if one vertex can both reach and \", _jsx(_components.strong, {\n        children: \"be reached\"\n      }), \" by\\r\\nall others, then every vertex in this graph can reach all others.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's say \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[u][v]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[u][v]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[u][v]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[u][v]</span></span></span></span></span>\"\n      }), \" is true if you can go from vertex \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \" to vertex\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" through a series of edges. Additionally, let's define the directed graph\\r\\ngiven in the statement as \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n      }), \" and the reverse of it (where an edge\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u \\\\rightarrow v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi><mo>→</mo><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u \\\\rightarrow v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" becomes \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v \\\\rightarrow u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi><mo>→</mo><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v \\\\rightarrow u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \") as \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G'\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>G</mi><mo mathvariant=\\\"normal\\\" lspace=\\\"0em\\\" rspace=\\\"0em\\\">′</mo></msup></mrow><annotation encoding=\\\"application/x-tex\\\">G&#x27;</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7519em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7519em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">′</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \". Then, if\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[1][x]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[1][x]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[1][x]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[1][x]</span></span></span></span></span>\"\n      }), \" for \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1 \\\\leq x \\\\leq n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">1 \\\\leq x \\\\leq n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7804em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" in both \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G'\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>G</mi><mo mathvariant=\\\"normal\\\" lspace=\\\"0em\\\" rspace=\\\"0em\\\">′</mo></msup></mrow><annotation encoding=\\\"application/x-tex\\\">G&#x27;</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7519em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7519em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">′</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \", the answer is\\r\\n\\\"YES\\\".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To compute \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[1][x]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[1][x]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[1][x]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[1][x]</span></span></span></span></span>\"\n      }), \", we can run a dfs from from vertex \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and check\\r\\nif you can reach vertex \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" for all \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1 \\\\leq x \\\\leq n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">1 \\\\leq x \\\\leq n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7804em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \". If we can't, then print\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" if you're running the DFS on \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" otherwise.\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"proof\",\n      children: [_jsx(_components.a, {\n        href: \"#proof\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Proof\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's do a proof by contradiction. Assume that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[1][x]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[1][x]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[1][x]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[1][x]</span></span></span></span></span>\"\n      }), \" is true for\\r\\nall vertices \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" in both \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G'\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>G</mi><mo mathvariant=\\\"normal\\\" lspace=\\\"0em\\\" rspace=\\\"0em\\\">′</mo></msup></mrow><annotation encoding=\\\"application/x-tex\\\">G&#x27;</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7519em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7519em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">′</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \", and there exists a pair of vertices\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u, v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u, v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" such that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[u][v]} = \\\\texttt{false}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[u][v]</mtext><mo>=</mo><mtext mathvariant=\\\"monospace\\\">false</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[u][v]} = \\\\texttt{false}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[u][v]</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">false</span></span></span></span></span>\"\n      }), \". Since\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[1][u]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[1][u]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[1][u]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[1][u]</span></span></span></span></span>\"\n      }), \" is true in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G'\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>G</mi><mo mathvariant=\\\"normal\\\" lspace=\\\"0em\\\" rspace=\\\"0em\\\">′</mo></msup></mrow><annotation encoding=\\\"application/x-tex\\\">G&#x27;</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7519em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7519em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">′</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \", then \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[u][1]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[u][1]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[u][1]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[u][1]</span></span></span></span></span>\"\n      }), \" must be true in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n      }), \". Additionally, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[1][v]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[1][v]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[1][v]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[1][v]</span></span></span></span></span>\"\n      }), \" must be true in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"G\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n      }), \". So, you can travel\\r\\nfrom \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u \\\\rightarrow 1 \\\\rightarrow v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi><mo>→</mo><mn>1</mn><mo>→</mo><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u \\\\rightarrow 1 \\\\rightarrow v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \", which contradicts the statement that\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[u][v]} = \\\\texttt{false}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[u][v]</mtext><mo>=</mo><mtext mathvariant=\\\"monospace\\\">false</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[u][v]} = \\\\texttt{false}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[u][v]</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">false</span></span></span></span></span>\"\n      }), \". Thus, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{can[u][v]}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">can[u][v]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{can[u][v]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">can[u][v]</span></span></span></span></span>\"\n      }), \" is true for\\r\\nall vertices \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u, v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u, v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h> // see C++ Tips & Tricks\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\n\\r\\nusing vi = vector<int>;\\r\\n#define pb push_back\\r\\n#define rsz resize\\r\\n#define all(x) begin(x), end(x)\\r\\n#define sz(x) (int)(x).size()\\r\\n\\r\\nusing pi = pair<int,int>;\\r\\n#define f first\\r\\n#define s second\\r\\n#define mp make_pair\\r\\n\\r\\nvoid setIO(string name = \\\"\\\") { // name is nonempty for USACO file I/O\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0); // see Fast Input & Output\\r\\n\\t// alternatively, cin.tie(0)->sync_with_stdio(0);\\r\\n\\tif (sz(name)) {\\r\\n\\t\\tfreopen((name+\\\".in\\\").c_str(), \\\"r\\\", stdin); // see Input & Output\\r\\n\\t\\tfreopen((name+\\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvi adj[100005][2]; bool vis[100005];\\r\\n\\r\\nvoid dfs(int v, int x) {\\r\\n\\tvis[v] = true;\\r\\n\\tfor (int to : adj[v][x]) {\\r\\n\\t\\tif (!vis[to]) {\\r\\n\\t\\t\\tdfs(to, x);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO();\\r\\n\\tint n, m; cin >> n >> m;\\r\\n\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\tint u, v; cin >> u >> v;\\r\\n\\t\\tu--, v--;\\r\\n\\t\\tadj[u][0].pb(v);\\r\\n\\t\\tadj[v][1].pb(u);\\r\\n\\t}\\r\\n\\tdfs(0, 0);\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tif (!vis[i]) {\\r\\n\\t\\t\\tcout << \\\"NO\\\" << '\\\\n';\\r\\n\\t\\t\\tcout << 1 << \\\" \\\" << i + 1 << '\\\\n';\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tmemset(vis, false, sizeof(vis)); //fill vis with false\\r\\n\\tdfs(0, 1);\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tif (!vis[i]) {\\r\\n\\t\\t\\tcout << \\\"NO\\\" << '\\\\n';\\r\\n\\t\\t\\tcout << i + 1 << \\\" \\\" << 1 << '\\\\n';\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << \\\"YES\\\" << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class FlightRoutesCheck {\\r\\n\\tstatic int n, m;\\r\\n\\tstatic boolean[] vis;\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tn = io.nextInt();\\r\\n\\t\\tm = io.nextInt();\\r\\n\\r\\n\\t\\t// Stores the graph we are given (or G)\\r\\n\\t\\tArrayList<ArrayList<Integer>> adj1 = new ArrayList<>();\\r\\n\\t\\t// Stores the reverse of the graph we are given (or G')\\r\\n\\t\\tArrayList<ArrayList<Integer>> adj2 = new ArrayList<>();\\r\\n\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tadj1.add(new ArrayList<>());\\r\\n\\t\\t\\tadj2.add(new ArrayList<>());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\t\\tint a = io.nextInt() - 1;\\r\\n\\t\\t\\tint b = io.nextInt() - 1;\\r\\n\\t\\t\\tadj1.get(a).add(b);\\r\\n\\t\\t\\tadj2.get(b).add(a);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Run dfs to check if you can reach all other vertices from vertex 1\\r\\n\\t\\tvis = new boolean[n];\\r\\n\\t\\tdfs(0, adj1);\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\t// If some vertex wasn't visited, that means that we cannot reach\\r\\n\\t\\t\\t// all other vertices, so we return NO\\r\\n\\t\\t\\tif (!vis[i]) {\\r\\n\\t\\t\\t\\tio.println(\\\"NO\\\");\\r\\n\\t\\t\\t\\tio.println(1 + \\\" \\\" + (i + 1));\\r\\n\\t\\t\\t\\tio.close();\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Run dfs to check if you can reach vertex 1 from all other vertices\\r\\n\\t\\tvis = new boolean[n];\\r\\n\\t\\tdfs(0, adj2);\\r\\n\\t\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\t\\t// If some vertex wasn't visited, that means vertex 1 cannot be\\r\\n\\t\\t\\t// reached from all other vertices, so we return NO\\r\\n\\t\\t\\tif (!vis[i]) {\\r\\n\\t\\t\\t\\tio.println(\\\"NO\\\");\\r\\n\\t\\t\\t\\tio.println((i + 1) + \\\" \\\" + 1);\\r\\n\\t\\t\\t\\tio.close();\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// If we haven't exited yet, that means the answer is YES\\r\\n\\t\\tio.println(\\\"YES\\\");\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic void dfs(int v, ArrayList<ArrayList<Integer>> adj) {\\r\\n\\t\\tvis[v] = true;\\r\\n\\t\\tfor (int to : adj.get(v)) {\\r\\n\\t\\t\\tif (!vis[to]) {\\r\\n\\t\\t\\t\\tdfs(to, adj);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The problem can also be solved using \", _jsx(_components.a, {\n        href: \"/adv/SCC\",\n        children: \"strongly connected components (SCC)\"\n      }), \".\"]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1682","source":"CSES","title":"Flight Routes Check","author":"Michael Cao, Nathan Gong"},"parent":{"name":"cses-1682","relativePath":"cses-1682.mdx"},"toc":{"cpp":[{"depth":1,"value":"Main Idea","slug":"main-idea"},{"depth":1,"value":"Proof","slug":"proof"},{"depth":1,"value":"Implementation","slug":"implementation"}],"java":[{"depth":1,"value":"Main Idea","slug":"main-idea"},{"depth":1,"value":"Proof","slug":"proof"},{"depth":1,"value":"Implementation","slug":"implementation"}],"py":[{"depth":1,"value":"Main Idea","slug":"main-idea"},{"depth":1,"value":"Proof","slug":"proof"},{"depth":1,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dfs","title":"Depth First Search (DFS)"}}}}]},"problemInfo":{"uniqueId":"cses-1682","url":"https://cses.fi/problemset/task/1682"}},"pageContext":{"id":"cses-1682"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}