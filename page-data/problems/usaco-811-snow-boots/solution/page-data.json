{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-811-snow-boots/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-811\", source = \"USACO Silver 2018 February\", title = \"Snow Boots\", author = \"Qi Wang, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_snowboots_silver_feb18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Due to the low bounds on \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \", we can run a \", _jsx(_components.a, {\n        href: \"/silver/dfs\",\n        children: \"DFS (Depth First Search)\"\n      }), \" on every possible location and boot size Farmer John could be wearing.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2B + NB^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mi>B</mi><mo>+</mo><mi>N</mi><msup><mi>B</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2B + NB^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <cstdio>\\r\\n#include <algorithm>\\r\\n#include <vector>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 250;\\r\\nint n;\\r\\nint m;\\r\\nvector<int> depths(MAX_N);\\r\\nvector<vector<bool>> vis(MAX_N, vector<bool>(MAX_N));\\r\\nvector<pair<int, int>> shoes(MAX_N);\\r\\n\\r\\nint ans = INT32_MAX;\\r\\n\\r\\nvoid dfs(int depth, int boot)  {\\r\\n\\t// already visited this path\\r\\n\\tif (vis[depth][boot]) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\t\\r\\n\\tvis[depth][boot] = true;\\r\\n\\r\\n\\t// reached the barn, update the answer\\r\\n\\tif (depth == n - 1) {\\r\\n\\t\\tans = min(boot, ans);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// test all possible steps\\r\\n\\tfor (int i = depth + 1; i <= depth + shoes[boot].second && i < n; i++) {\\r\\n\\t\\tif (depths[i] <= shoes[boot].first) {\\r\\n\\t\\t\\tdfs(i, boot);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// test all possible swaps\\r\\n\\tfor (int i = boot; i < m; i++) {\\r\\n\\t\\tif (depths[depth] <= shoes[i].first) {\\r\\n\\t\\t\\tdfs(depth, i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"snowboots.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"snowboots.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tcin >> n >> m;\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> depths[i];\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\tcin >> shoes[i].first >> shoes[i].second;\\r\\n\\t}\\r\\n\\r\\n\\tdfs(0, 0);\\r\\n\\r\\n\\tcout << ans << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class snowboot {\\r\\n\\tstatic List<Pair<Integer, Integer>> B = new ArrayList<>();\\r\\n\\tstatic int[] D;\\r\\n\\tstatic boolean[][] vist;\\r\\n\\tstatic int N, M, A=10000;\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tInputReader in = new InputReader(\\\"snowboots.in\\\");\\r\\n\\t\\tN = in.nextInt(); M = in.nextInt(); D = new int[N]; vist = new boolean[N+1][M+1];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tD[i] = in.nextInt();\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tint a,b; a = in.nextInt(); b = in.nextInt();\\r\\n\\t\\t\\tB.add(new Pair<>(a, b));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdfs(0,0);\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"snowboots.out\\\")));\\r\\n\\t\\tout.println(A);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tprivate static void dfs(int n, int t){\\r\\n\\t\\t//If we have explored that path then return out of it\\r\\n\\t\\tif(vist[n][t]) return ;\\r\\n\\t\\tvist[n][t] = true;\\r\\n\\r\\n\\t\\t//If it reaches the destination we want to take the minimum of what we have and what we got\\r\\n\\t\\tif(n == N-1) A = Math.min(A, t);\\r\\n\\r\\n\\t\\t//Trying to go the every farm it can with one boot\\r\\n\\t\\tfor (int i = n+1; i < N && i-n<=B.get(t).last(); i++) {\\r\\n\\t\\t\\tif(D[i] <= B.get(t).first) dfs(i, t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//Trying all boot switches at the current farm\\r\\n\\t\\tfor (int i = t+1; i < B.size(); i++) {\\r\\n\\t\\t\\tif(D[n] <= B.get(i).first) dfs(n, i);\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class InputReader {\\r\\n\\t\\tpublic BufferedReader reader;\\r\\n\\t\\tpublic StringTokenizer tokenizer;\\r\\n\\r\\n\\t\\tpublic InputReader() {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new InputStreamReader(System.in), 32768);\\r\\n\\t\\t\\t} catch (Exception e) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Could not create input stream\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic InputReader(String fileName) {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new FileReader(new File(fileName)), 32768);\\r\\n\\t\\t\\t} catch (Exception ex) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Input file does not exist! Put it in the project folder.\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ttokenizer = null;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\ttokenizer = new StringTokenizer(reader.readLine());\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn tokenizer.nextToken();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic boolean hasNextInt() throws IOException { return reader.ready(); }\\r\\n\\r\\n\\t\\tpublic int nextInt() {\\r\\n\\t\\t\\treturn Integer.parseInt(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic double nextDouble() {\\r\\n\\t\\t\\treturn Double.parseDouble(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic long nextLong() {\\r\\n\\t\\t\\treturn Long.parseLong(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic char nextChar() {\\r\\n\\t\\t\\treturn next().charAt(0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * When you call next(), that entire line will be skipped.\\r\\n\\t\\t * No flushing buffers.\\r\\n\\t\\t * Doesn't work when you want to scan the remaining line.\\r\\n\\t\\t *\\r\\n\\t\\t * @return entire line\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tpublic String nextLine() {\\r\\n\\t\\t\\tString str = \\\"\\\";\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstr = reader.readLine();\\r\\n\\t\\t\\t\\ttokenizer = null;\\r\\n\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn str;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class Pair<F, S> {\\r\\n\\t\\tF first;\\r\\n\\t\\tS second;\\r\\n\\r\\n\\t\\tpublic Pair(F a, S b) {\\r\\n\\t\\t\\tfirst = a;\\r\\n\\t\\t\\tsecond = b;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic F one() {\\r\\n\\t\\t\\treturn first;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic S last() {\\r\\n\\t\\t\\treturn second;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic String toString() {\\r\\n\\t\\t\\treturn \\\"[\\\" + first.toString() + \\\", \\\" + second.toString() + \\\"]\\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-811","source":"USACO Silver 2018 February","title":"Snow Boots","author":"Qi Wang, Ryan Chou"},"parent":{"name":"usaco-811","relativePath":"usaco-811.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"flood-fill","title":"Flood Fill"}}}}]},"problemInfo":{"uniqueId":"usaco-811","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=811"}},"pageContext":{"id":"usaco-811"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}