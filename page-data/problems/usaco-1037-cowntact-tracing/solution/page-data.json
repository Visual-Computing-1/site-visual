{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1037-cowntact-tracing/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1037\", source = \"USACO Bronze 2020 US Open\", title = \"Cowntact Tracing\", author = \"Brad Ma, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://usaco.org/current/data/sol_tracing_bronze_open20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By simulating handshakes for all values of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"K\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\\\"application/x-tex\\\">K</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span></span></span></span>\"\n      }), \", we can find the minimum, maximum, and number of possible values of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"K\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\\\"application/x-tex\\\">K</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span></span></span></span>\"\n      }), \" which are vaild.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N \\\\cdot T^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>⋅</mo><msup><mi>T</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\cdot T^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\n\\r\\nsys.stdin = open('tracing.in', 'r')\\r\\nsys.stdout = open('tracing.out', 'w')\\r\\n\\r\\nn, t = map(int, input().split())\\r\\n\\r\\ninfected = [int(i) for i in input().strip()]\\r\\nshakes = []\\r\\n\\r\\nfor _ in range(t):\\r\\n\\tshakes.append(list(map(int, input().split())))\\r\\n\\r\\n# sorts by the first element (time)\\r\\nshakes.sort()\\r\\n\\r\\nans_mink = float('inf')\\r\\nans_maxk = -float('inf')\\r\\nnum_possible = 0\\r\\n\\r\\ndef simulate(cow_zero):\\r\\n\\tmink = float('inf')\\r\\n\\tmaxk = -float('inf')\\r\\n\\tfor k in range(251):\\r\\n\\t\\tcur_infected = [False] * n\\r\\n\\t\\tcur_infected[cow_zero] = True\\r\\n\\t\\ttime = [0] * n\\r\\n\\t\\tfor i in range(len(shakes)):\\r\\n\\t\\t\\t# Subtract one for a zero-indexed index.\\r\\n\\t\\t\\tcow1, cow2 = shakes[i][1] - 1, shakes[i][2] - 1\\r\\n\\r\\n\\t\\t\\t# If any of the two cows are infected, increase their time infected by 1\\r\\n\\t\\t\\tif cur_infected[cow1]:\\r\\n\\t\\t\\t\\ttime[cow1] += 1\\r\\n\\t\\t\\tif cur_infected[cow2]:\\r\\n\\t\\t\\t\\ttime[cow2] += 1\\r\\n\\r\\n\\t\\t\\t# cow1 infects cow2\\r\\n\\t\\t\\tif cur_infected[cow1] and not cur_infected[cow2] and time[cow1] <= k:\\r\\n\\t\\t\\t\\tcur_infected[cow2] = True\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t# cow2 infects cow1\\r\\n\\t\\t\\tif cur_infected[cow2] and not cur_infected[cow1] and time[cow2] <= k:\\r\\n\\t\\t\\t\\tcur_infected[cow1] = True\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tDoes our resulting array of infected cows equal the one \\r\\n\\t\\tthat was given?\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tif infected == cur_infected:\\r\\n\\t\\t\\tmink = min(mink, k)\\r\\n\\t\\t\\tmaxk = max(maxk, k)\\r\\n\\treturn [mink, maxk]\\r\\n\\t\\t\\t\\r\\n\\r\\n\\t\\t\\t\\r\\nfor i in range(len(infected)):\\r\\n\\t\\\"\\\"\\\"\\r\\n\\tSince infected cows stay infected, only infected cows can \\r\\n\\tqualify as \\\"cow zero\\\"\\r\\n\\t\\\"\\\"\\\"\\r\\n\\tif infected[i]:\\r\\n\\t\\tresult = simulate(i)\\r\\n\\t\\t# At least one value of K worked.\\r\\n\\t\\tif result[0] != float('inf'):\\r\\n\\t\\t\\tans_mink = min(ans_mink, result[0])\\r\\n\\t\\t\\tans_maxk = max(ans_maxk, result[1])\\r\\n\\t\\t\\tnum_possible += 1\\r\\n\\r\\n# Worked for every possible value of K.\\r\\nif ans_maxk == 250:\\r\\n\\tans_maxk = 'Infinity'\\r\\n\\r\\nprint(num_possible, ans_mink, ans_maxk)\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class CowntactTracing {\\r\\n\\tstatic boolean[] cowEndsInfected;\\r\\n\\tstatic int n;\\r\\n\\tstatic int maxT = 250;\\r\\n\\tstatic int maxN = 100;\\r\\n\\tstatic int[] cowX = new int[maxT + 1];\\r\\n\\tstatic int[] cowY = new int[maxT + 1];\\r\\n\\r\\n\\t// this function simulates handshakes over time to see if data agrees\\r\\n\\t// with this choice of patient_zero and K\\r\\n\\tstatic boolean consistentWithData(int patientZero, int k) {\\r\\n\\t\\tboolean[] infected = new boolean[maxN + 1];\\r\\n\\t\\tint[] numHandshakes = new int[maxN + 1];\\r\\n\\r\\n\\t\\tinfected[patientZero] = true;\\r\\n\\r\\n\\t\\tfor (int t = 0; t <= maxT; t++) {\\r\\n\\t\\t\\tint x = cowX[t];\\r\\n\\t\\t\\tint y = cowY[t];\\r\\n\\r\\n\\t\\t\\tif (x > 0) {\\r\\n\\t\\t\\t\\tif (infected[x]) {\\r\\n\\t\\t\\t\\t\\tnumHandshakes[x]++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (infected[y]) {\\r\\n\\t\\t\\t\\t\\tnumHandshakes[y]++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (numHandshakes[x] <= k && infected[x]) {\\r\\n\\t\\t\\t\\t\\tinfected[y] = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (numHandshakes[y] <= k && infected[y]) {\\r\\n\\t\\t\\t\\t\\tinfected[x] = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\t\\tif (infected[i] != cowEndsInfected[i]) {\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true; // return true at the end\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"tracing\\\");\\r\\n\\r\\n\\t\\tn = io.nextInt();\\r\\n\\t\\tint T = io.nextInt();\\r\\n\\t\\tString s = io.next();\\r\\n\\t\\t\\r\\n\\t\\tcowEndsInfected = new boolean[n + 1];\\r\\n\\r\\n\\t\\tfor (int x = 1; x <= n; x++) {\\r\\n\\t\\t\\tcowEndsInfected[x] = (s.charAt(x - 1) == '1'); // marks infected cows as true\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < T; i++) { // read input and store into array\\r\\n\\t\\t\\tint t = io.nextInt();\\r\\n\\t\\t\\tcowX[t] = io.nextInt();\\r\\n\\t\\t\\tcowY[t] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tboolean[] possibleI = new boolean[maxN + 1];\\t\\r\\n\\t\\tboolean[] possibleK = new boolean[maxT + 2];\\r\\n\\r\\n\\t\\tfor (int i = 1; i <= n; i++) { // loop through each pair\\r\\n\\t\\t\\tfor (int k = 0; k <= 251; k++) {\\r\\n\\t\\t\\t\\tif (consistentWithData(i, k)) {\\r\\n\\t\\t\\t\\t\\tpossibleI[i] = true;\\r\\n\\t\\t\\t\\t\\tpossibleK[k] = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint lowerK = maxT + 1;\\r\\n\\t\\tint upperK = 0;\\r\\n\\t\\tint numPatientZero = 0;\\r\\n\\r\\n\\t\\tfor (int k = 0; k <= maxT + 1; k++) {\\r\\n\\t\\t\\tif (possibleK[k]) {\\r\\n\\t\\t\\t\\tupperK = k;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int k = maxT + 1; k >= 0; k--) { \\r\\n\\t\\t\\tif (possibleK[k]) {\\r\\n\\t\\t\\t\\tlowerK = k;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i <= n; i++) { // count number of patient zeros\\r\\n\\t\\t\\tif (possibleI[i]) {\\r\\n\\t\\t\\t\\tnumPatientZero++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.print(numPatientZero + \\\" \\\" + lowerK + \\\" \\\"); // possible patient zeros, minimum of K\\r\\n\\t\\tif (upperK == maxT + 1) {\\r\\n\\t\\t\\tio.println(\\\"Infinity\\\"); // infinity if K = T is possible\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tio.println(upperK);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}   \\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1037","source":"USACO Bronze 2020 US Open","title":"Cowntact Tracing","author":"Brad Ma, Ryan Chou"},"parent":{"name":"usaco-1037","relativePath":"usaco-1037.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-complete","title":"Basic Complete Search"}}}}]},"problemInfo":{"uniqueId":"usaco-1037","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1037"}},"pageContext":{"id":"usaco-1037"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}