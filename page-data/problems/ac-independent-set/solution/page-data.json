{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/ac-independent-set/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"ac-IndependentSet\", source = \"AtCoder DP Contest\", title = \"Independent Set\", author = \"Andrew Wang, Sofia Yang, Mohammad Nour Massri\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    MATHDIV: _missingComponent(\"MATHDIV\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, MATHDIV, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Root the tree at node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \", allowing us to define the subtree of each node. Let\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp_0[v]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>0</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>v</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp_0[v]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" represent the number of ways the subtree can be painted such that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \"\\r\\nis painted white. Similarily, let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp_1[v]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>v</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp_1[v]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" represent the number of ways the\\r\\nsubtree can be painted such that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" is painted black.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"painted-white\",\n      children: [_jsx(_components.a, {\n        href: \"#painted-white\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Painted White\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The number of ways to paint a subtree such that the root node is painted white\\r\\nis the product of the ways to paint the child subtrees. The number of ways to\\r\\npaint a child subtree is the sum of how to paint it white and how to paint it\\r\\nblack or, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dp_0[u] + dp_1[u]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>0</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>u</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>u</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp_0[u] + dp_1[u]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". So the transition is:\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"dp_0[v] = \\\\prod_{u \\\\in child(v)} \\\\left(dp_0[u]+ dp_1[u]\\\\right).\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>0</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>v</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><munder><mo>∏</mo><mrow><mi>u</mi><mo>∈</mo><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mo stretchy=\\\"false\\\">(</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow></munder><mrow><mo fence=\\\"true\\\">(</mo><mi>d</mi><msub><mi>p</mi><mn>0</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>u</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>u</mi><mo stretchy=\\\"false\\\">]</mo><mo fence=\\\"true\\\">)</mo></mrow><mi mathvariant=\\\"normal\\\">.</mi></mrow><annotation encoding=\\\"application/x-tex\\\">dp_0[v] = \\\\prod_{u \\\\in child(v)} \\\\left(dp_0[u]+ dp_1[u]\\\\right).</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.566em;vertical-align:-1.516em;\\\"></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.05em;\\\"><span style=\\\"top:-1.809em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">u</span><span class=\\\"mrel mtight\\\">∈</span><span class=\\\"mord mathnormal mtight\\\">c</span><span class=\\\"mord mathnormal mtight\\\">hi</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal mtight\\\">d</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose mtight\\\">)</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∏</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.516em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">]</span><span class=\\\"mclose delimcenter\\\" style=\\\"top:0em;\\\">)</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">.</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"painted-black\",\n      children: [_jsx(_components.a, {\n        href: \"#painted-black\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Painted Black\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since no two adjacent nodes can both be painted black, if the root node of the\\r\\nsubtree is painted black, none of its children can be painted black. This leads\\r\\nus to the conclusion that the number of ways to paint a subtree such that the\\r\\nroot node is painted black is the product of all the ways the child subtrees can\\r\\nbe painted white.\"\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"dp_1[v] = \\\\prod_{u \\\\in child(v)} dp_0[u].\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>v</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><munder><mo>∏</mo><mrow><mi>u</mi><mo>∈</mo><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mo stretchy=\\\"false\\\">(</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow></munder><mi>d</mi><msub><mi>p</mi><mn>0</mn></msub><mo stretchy=\\\"false\\\">[</mo><mi>u</mi><mo stretchy=\\\"false\\\">]</mo><mi mathvariant=\\\"normal\\\">.</mi></mrow><annotation encoding=\\\"application/x-tex\\\">dp_1[v] = \\\\prod_{u \\\\in child(v)} dp_0[u].</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.566em;vertical-align:-1.516em;\\\"></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.05em;\\\"><span style=\\\"top:-1.809em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">u</span><span class=\\\"mrel mtight\\\">∈</span><span class=\\\"mord mathnormal mtight\\\">c</span><span class=\\\"mord mathnormal mtight\\\">hi</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal mtight\\\">d</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose mtight\\\">)</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∏</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.516em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">]</span><span class=\\\"mord\\\">.</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\nusing namespace std;\\r\\n\\r\\nint MOD = 1000000007;\\r\\nlong dp[2][100000];\\r\\nvector<int> adj[100000];\\r\\nvoid dfs(int i, int p){\\r\\n\\tdp[0][i] = 1;\\r\\n\\tdp[1][i] = 1;\\r\\n\\tfor(int v : adj[i]){\\r\\n\\t\\tif(v != p){\\r\\n\\t\\t\\tdfs(v, i);\\r\\n\\t\\t\\tdp[0][i] = (dp[0][i] * (dp[0][v] + dp[1][v]))%MOD;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor(int v : adj[i]){\\r\\n\\t\\tif(v != p){\\r\\n\\t\\t\\tdp[1][i] = (dp[1][i] * dp[0][v]) % MOD;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0; i < n - 1; i++){\\r\\n\\t\\tint u, v;\\r\\n\\t\\tcin >> u >> v;\\r\\n\\t\\tu--, v--;\\r\\n\\t\\tadj[u].push_back(v), adj[v].push_back(u);\\r\\n\\t}\\r\\n\\tdfs(0, -1);\\r\\n\\tcout << (dp[0][0] + dp[1][0]) % MOD << '\\\\n';\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Main {\\r\\n\\tpublic static ArrayList<Integer>[] adj;\\r\\n\\tpublic static boolean[] visited;\\r\\n\\tpublic static long[][] dp;\\r\\n\\tpublic static final int MOD = (int) 1e9 + 7;\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tint N = Integer.parseInt(r.readLine());\\r\\n\\t\\tvisited = new boolean[N];\\r\\n\\t\\tadj = new ArrayList[N];\\r\\n\\t\\tdp = new long[2][N];\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tadj[i] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tfor (int i = 0; i < N - 1; i++) {\\r\\n\\t\\t\\tStringTokenizer st = new StringTokenizer(r.readLine());\\r\\n\\t\\t\\tint a = Integer.parseInt(st.nextToken()) - 1;\\r\\n\\t\\t\\tint b = Integer.parseInt(st.nextToken()) - 1;\\r\\n\\t\\t\\tadj[a].add(b);\\r\\n\\t\\t\\tadj[b].add(a);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdfs(0, -1);\\r\\n\\r\\n\\t\\t/* \\r\\n\\t\\t * Return the number of ways for the root to be black,\\r\\n\\t\\t * added to the number of ways for the root to be white.\\r\\n\\t\\t */\\r\\n\\t\\tSystem.out.println((dp[0][0] + dp[1][0]) % MOD);\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void dfs(int node, int par) {\\r\\n\\t\\tdp[0][node] = 1;\\r\\n\\t\\tdp[1][node] = 1;\\r\\n\\r\\n\\t\\t//The node is painted white.\\r\\n\\t\\tfor (int next : adj[node]) {\\r\\n\\t\\t\\tif (next != par) {\\r\\n\\t\\t\\t\\tdfs(next, node);\\r\\n\\t\\t\\t\\t//Number of ways to paint the subtree.\\r\\n\\t\\t\\t\\tlong subtree = (dp[0][next] + dp[1][next]);\\r\\n\\t\\t\\t\\tdp[0][node] = (dp[0][node] * subtree) % MOD;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//The node is painted black.\\r\\n\\t\\tfor (int next : adj[node]) {\\r\\n\\t\\t\\tif (next != par) {\\r\\n\\t\\t\\t\\t//If this node is black, none of the children can be black.\\r\\n\\t\\t\\t\\tdp[1][node] = (dp[1][node] * dp[0][next]) % MOD;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"# to solve Runtime Error problem with recursion in python\\r\\nfrom sys import setrecursionlimit\\r\\nsetrecursionlimit(10**9)\\r\\n\\r\\nn = int(input())\\r\\nMOD = 10**9 + 7\\r\\n\\r\\n# representing the tree in an adjacency list\\r\\nadj = [[] for i in range(n)]\\r\\n\\r\\nfor i in range(n-1):\\r\\n\\tx, y = map(int, input().split())\\r\\n\\tx -= 1\\r\\n\\ty -= 1\\r\\n\\tadj[x].append(y)\\r\\n\\tadj[y].append(x)\\r\\n\\r\\n# 0 is white\\r\\n# 1 is black\\r\\n\\r\\ndp = [[0] * 2 for i in range(n)]\\r\\n\\r\\ndef dfs(u, parent):\\r\\n\\tdp[u][0] = dp[u][1] = 1\\r\\n\\tfor v in adj[u]: # traversing the adjacency list of node u\\r\\n\\t\\tif v != parent: # v should be a child for u not its parent\\r\\n\\t\\t\\tdfs(v, u) # recursively calculate the dp values for child v \\r\\n\\t\\t\\t# accumulate the children dp values to the dp of node u \\r\\n\\t\\t\\t# don't forget to take the values MOD 1e9+7\\r\\n\\t\\t\\tdp[u][1] *= dp[v][0] \\r\\n\\t\\t\\tdp[u][1] %= MOD\\r\\n\\t\\t\\tdp[u][0] *= (dp[v][0] + dp[v][1]) % MOD\\r\\n\\t\\t\\tdp[u][0] %= MOD\\r\\n\\r\\ndfs(0, -1)\\r\\n\\r\\nans = (dp[0][0] + dp[0][1]) % MOD\\r\\nprint(ans)\\r\\n\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"ac-IndependentSet","source":"AtCoder DP Contest","title":"Independent Set","author":"Andrew Wang, Sofia Yang, Mohammad Nour Massri"},"parent":{"name":"ac-IndependentSet","relativePath":"ac-IndependentSet.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Painted White","slug":"painted-white"},{"depth":3,"value":"Painted Black","slug":"painted-black"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Painted White","slug":"painted-white"},{"depth":3,"value":"Painted Black","slug":"painted-black"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":3,"value":"Painted White","slug":"painted-white"},{"depth":3,"value":"Painted Black","slug":"painted-black"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dp-trees","title":"DP on Trees - Introduction"}}}}]},"problemInfo":{"uniqueId":"ac-IndependentSet","url":"https://atcoder.jp/contests/dp/tasks/dp_p"}},"pageContext":{"id":"ac-IndependentSet"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}