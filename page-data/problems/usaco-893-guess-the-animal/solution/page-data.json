{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-893-guess-the-animal/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-893\", source = \"USACO Bronze 2019 January\", title = \"Guess the Animal\", author = \"Brad Ma, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://usaco.org/current/data/sol_guess_bronze_jan19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <fstream>\\r\\n#include <string>\\r\\n#include <set>\\r\\n#include <vector>\\r\\n#include <algorithm>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\nusing std::set;\\r\\nusing std::string;\\r\\n\\r\\ntemplate <typename T>\\r\\nset<T> intersection(const set<T>& s1, const set<T>& s2) {\\r\\n\\tset<T> ret;\\r\\n\\tfor (const T& i : s1) {\\r\\n\\t\\tif (s2.count(i)) {\\r\\n\\t\\t\\tret.insert(i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn ret;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tstd::ifstream read(\\\"guess.in\\\");\\r\\n\\r\\n\\tint animal_num;\\r\\n\\tread >> animal_num;\\r\\n\\tvector<set<string>> animals(animal_num);\\r\\n\\tfor (int a = 0; a < animal_num; a++) {\\r\\n\\t\\tstring name;\\r\\n\\t\\tint attr_num;\\r\\n\\t\\tread >> name >> attr_num;\\r\\n\\t\\tfor (int ai = 0; ai < attr_num; ai++) {\\r\\n\\t\\t\\tstring attr;\\r\\n\\t\\t\\tread >> attr;\\r\\n\\t\\t\\tanimals[a].insert(attr);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tint max_yes = 0;\\r\\n\\tfor (int a1 = 0; a1 < animal_num; a1++) {\\r\\n\\t\\tfor (int a2 = a1 + 1; a2 < animal_num; a2++) {\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * If there's 2 animals that have a bunch of traits in common,\\r\\n\\t\\t\\t * Elsie can ask about all those traits.\\r\\n\\t\\t\\t * Then she can ask for the \\\"defining\\\" trait,\\r\\n\\t\\t\\t * resutling in the # of common traits + 1 \\\"yes\\\"es.\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tset<string> common = intersection(animals[a1], animals[a2]);\\r\\n\\t\\t\\tmax_yes = std::max(max_yes, (int) common.size() + 1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tstd::ofstream(\\\"guess.out\\\") << max_yes << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Guess {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new FileReader(\\\"guess.in\\\"));\\r\\n\\t\\tint animalNum = Integer.parseInt(read.readLine());\\r\\n\\t\\t\\r\\n\\t\\tHashSet<String>[] animals = new HashSet[animalNum];\\r\\n\\t\\tfor (int a = 0; a < animalNum; a++) {\\r\\n\\t\\t\\tStringTokenizer line = new StringTokenizer(read.readLine());\\r\\n\\t\\t\\tline.nextToken();\\r\\n\\t\\t\\tint attrNum = Integer.parseInt(line.nextToken());\\r\\n\\t\\t\\tanimals[a] = new HashSet<>();\\r\\n\\t\\t\\tfor (int attr = 0; attr < attrNum; attr++) {\\r\\n\\t\\t\\t\\tanimals[a].add(line.nextToken());\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint maxYes = 0;\\r\\n\\t\\tfor (int a1 = 0; a1 < animalNum; a1++) {\\r\\n\\t\\t\\tfor (int a2 = a1 + 1; a2 < animalNum; a2++) {\\r\\n\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t * If there's 2 animals that have a bunch of traits in common,\\r\\n\\t\\t\\t\\t * Elsie can ask about all those traits.\\r\\n\\t\\t\\t\\t * Then she can ask for the \\\"defining\\\" trait,\\r\\n\\t\\t\\t\\t * resutling in the # of common traits + 1 \\\"yes\\\"es.\\r\\n\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\tHashSet<String> a1Copy = new HashSet<>(animals[a1]);\\r\\n\\t\\t\\t\\ta1Copy.retainAll(animals[a2]);\\r\\n\\t\\t\\t\\tmaxYes = Math.max(maxYes, a1Copy.size() + 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tPrintWriter written = new PrintWriter(\\\"guess.out\\\");\\r\\n\\t\\twritten.println(maxYes);\\r\\n\\t\\twritten.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"animals = []\\r\\nwith open('guess.in') as read:\\r\\n\\tanimal_num = int(read.readline())\\r\\n\\tfor _ in range(animal_num):\\r\\n\\t\\tline = read.readline().split()\\r\\n\\t\\t# We don't care about the 1st or 2nd token.\\r\\n\\t\\tanimals.append(set(line[2:]))\\r\\n\\r\\nmax_yes = 0\\r\\nfor a1 in range(animal_num):\\r\\n\\tfor a2 in range(a1 + 1, animal_num):\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tIf there's 2 animals that have a bunch of traits in common,\\r\\n\\t\\tElsie can ask about all those traits.\\r\\n\\t\\tThen she can ask for the \\\"defining\\\" trait,\\r\\n\\t\\tresutling in the # of common traits + 1 \\\"yes\\\"es.\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tmax_yes = max(max_yes, len(animals[a1].intersection(animals[a2])) + 1)\\r\\n\\r\\nprint(max_yes, file=open('guess.out', 'w'))\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-893","source":"USACO Bronze 2019 January","title":"Guess the Animal","author":"Brad Ma, Kevin Sheng"},"parent":{"name":"usaco-893","relativePath":"usaco-893.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-complete","title":"Basic Complete Search"}}}}]},"problemInfo":{"uniqueId":"usaco-893","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=893"}},"pageContext":{"id":"usaco-893"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}