{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-944-fence-planning/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-944\", source = \"USACO Silver 2019 US Open\", title = \"Fence Planning\", author = \"Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_fenceplan_silver_open19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N + M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N + M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class FencePlan {\\r\\n\\tstatic Cow[] cows;\\r\\n\\tstatic List<Integer>[] graph;\\r\\n\\tstatic boolean[] visited;\\r\\n\\tstatic int lowX = Integer.MAX_VALUE;\\r\\n\\tstatic int highX = Integer.MIN_VALUE;\\r\\n\\tstatic int lowY = Integer.MAX_VALUE;\\r\\n\\tstatic int highY = Integer.MIN_VALUE;\\r\\n\\r\\n\\tstatic class Cow {  // class to keep track of the x and y\\r\\n\\t\\tint x;\\r\\n\\t\\tint y;\\r\\n\\t}\\r\\n\\r\\n\\tstatic void floodfill (int currentCow) {  // dfs flood fill\\r\\n\\t\\tvisited[currentCow] = true;  // mark as visited\\r\\n\\t\\tCow cow = cows[currentCow];\\r\\n\\r\\n\\t\\tlowX = Integer.min(lowX, cow.x);  // take minimum and maximums\\r\\n\\t\\thighX = Integer.max(highX, cow.x);\\r\\n\\t\\tlowY = Integer.min(lowY, cow.y);\\r\\n\\t\\thighY = Integer.max(highY, cow.y);\\r\\n\\r\\n\\t\\tfor (int connectedCow : graph[currentCow]) {  // for each connected cow\\r\\n\\t\\t\\tif (!visited[connectedCow]) {\\r\\n\\t\\t\\t\\tfloodfill(connectedCow);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"fenceplan\\\");\\r\\n\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint m = io.nextInt();\\r\\n\\t\\tvisited = new boolean[n + 1];  // one-indexed\\r\\n\\t\\tcows = new Cow[n + 1];\\r\\n\\r\\n\\t\\tfor (int x = 1; x <= n; x++) {  // read cow coordinates\\r\\n\\t\\t\\tCow cow = new Cow();\\r\\n\\t\\t\\tcow.x = io.nextInt();\\r\\n\\t\\t\\tcow.y = io.nextInt();\\r\\n\\t\\t\\tcows[x] = cow;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgraph = new ArrayList[n + 1];  // one indexed\\r\\n\\t\\tfor (int x = 0; x < graph.length; x++) {  // initialize\\r\\n\\t\\t\\tgraph[x] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int x = 0; x < m; x++) {  // read connections\\r\\n\\t\\t\\tint a = io.nextInt();\\r\\n\\t\\t\\tint b = io.nextInt();\\r\\n\\t\\t\\tgraph[a].add(b);  // add to the bi-directional unweighted graph\\r\\n\\t\\t\\tgraph[b].add(a);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint lowestPerimeter = Integer.MAX_VALUE;\\r\\n\\t\\tfor (int cow = 1; cow <= n; cow++) {  // go through each connected component\\r\\n\\t\\t\\tif (!visited[cow]) {\\r\\n\\t\\t\\t\\tfloodfill(cow);\\r\\n\\r\\n\\t\\t\\t\\t// calculate the perimeter\\r\\n\\t\\t\\t\\tint perimeter = ((highX - lowX) + (highY - lowY)) * 2; \\r\\n\\t\\t\\t\\tlowestPerimeter = Math.min(lowestPerimeter, perimeter);  // track lowest\\r\\n\\r\\n\\t\\t\\t\\tlowX = Integer.MAX_VALUE;  // reset values\\r\\n\\t\\t\\t\\thighX = Integer.MIN_VALUE;\\r\\n\\t\\t\\t\\tlowY = Integer.MAX_VALUE;\\r\\n\\t\\t\\t\\thighY = Integer.MIN_VALUE;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(lowestPerimeter);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\ntypedef long long ll;\\r\\n\\r\\nstruct Cow {\\r\\n\\tint x;\\r\\n\\tint y;\\r\\n\\tvector<int> adj;\\r\\n\\tbool visited;\\r\\n};\\r\\n\\r\\nvector<Cow> cows;\\r\\nvector<int> net;\\r\\n\\r\\nvoid dfs(int cur) {\\r\\n\\tcows[cur].visited = true;\\r\\n\\tnet.push_back(cur);\\r\\n\\tfor (int i : cows[cur].adj) {\\r\\n\\t\\tif (!cows[i].visited) { \\r\\n\\t\\t\\tdfs(i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tifstream fin(\\\"fenceplan.in\\\");\\r\\n\\tint N, M;\\r\\n\\tfin >> N >> M;\\r\\n\\tcows.resize(N);\\r\\n\\tfor (Cow& c : cows) {\\r\\n\\t\\tfin >> c.x >> c.y;\\r\\n\\t\\tc.visited = false;\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\tint a, b; \\r\\n\\t\\tfin >> a >> b;\\r\\n\\t\\tcows[a - 1].adj.push_back(b - 1);\\r\\n\\t\\tcows[b - 1].adj.push_back(a - 1);\\r\\n\\t}\\r\\n\\r\\n\\t// group cows into networks using dfs\\r\\n\\tvector<vector<int>> networks;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tif (!cows[i].visited) {\\r\\n\\t\\t\\tnet.clear();\\r\\n\\t\\t\\tdfs(i);\\r\\n\\t\\t\\tnetworks.push_back(net);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tint min_perimeter = INT32_MAX;\\r\\n\\tfor (vector<int> net : networks) {\\r\\n\\t\\tint min_x = INT32_MAX;\\r\\n\\t\\tint max_x = 0;\\r\\n\\t\\tint min_y = INT32_MAX;\\r\\n\\t\\tint max_y = 0;\\r\\n\\t\\tfor (int i : net) {\\r\\n\\t\\t\\tmin_x = min(min_x, cows[i].x);\\r\\n\\t\\t\\tmax_x = max(max_x, cows[i].x);\\r\\n\\t\\t\\tmin_y = min(min_y, cows[i].y);\\r\\n\\t\\t\\tmax_y = max(max_y, cows[i].y);\\r\\n\\t\\t}\\r\\n\\t\\tmin_perimeter = min(min_perimeter, 2 * (max_x - min_x) + 2 * (max_y - min_y));\\r\\n\\t}\\r\\n\\r\\n\\tofstream fout(\\\"fenceplan.out\\\");\\r\\n   \\tfout << min_perimeter << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-944","source":"USACO Silver 2019 US Open","title":"Fence Planning","author":"Brad Ma"},"parent":{"name":"usaco-944","relativePath":"usaco-944.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dfs","title":"Depth First Search (DFS)"}}}}]},"problemInfo":{"uniqueId":"usaco-944","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=944"}},"pageContext":{"id":"usaco-944"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}