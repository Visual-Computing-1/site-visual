{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1065-replication/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1065\", source = \"USACO Gold 2020 December\", title = \"Replication\", author = \"Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, LanguageSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_prob1_gold_dec20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Replication {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tScanner sc = new Scanner(System.in);\\r\\n\\t\\tPrintWriter out = new PrintWriter(System.out);\\r\\n\\t\\t\\r\\n\\t\\tint n = sc.nextInt();\\r\\n\\t\\tint d = sc.nextInt();\\r\\n\\r\\n\\t\\tchar[][] grid = new char[n][n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tString temp = sc.next();\\r\\n\\t\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\t\\tgrid[i][j] = temp.charAt(j);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// BFS with rocks as sources\\r\\n\\t\\t// Calculates the distance of each cell to the closest rock\\r\\n\\t\\tint[][] rockDist = new int[n][n];\\r\\n\\t\\tQueue<State> queue = new LinkedList<>();\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tArrays.fill(rockDist[i], -1);\\r\\n\\t\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\t\\tif (grid[i][j] == '#') {\\r\\n\\t\\t\\t\\t\\tqueue.add(new State(i, j, 0));\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} \\r\\n\\t\\t}\\r\\n\\t\\twhile (!queue.isEmpty()) {\\r\\n\\t\\t\\tState state = queue.remove();\\r\\n\\r\\n\\t\\t\\t// Skip if position out of bounds\\r\\n\\t\\t\\tif (state.i < 0 || state.i >= n || state.j < 0 || state.j >= n) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Skip if cell already visited\\r\\n\\t\\t\\tif (rockDist[state.i][state.j] != -1) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\trockDist[state.i][state.j] = state.distance;\\r\\n\\r\\n\\t\\t\\tfor (int i = -1; i <= 1; i += 2) {\\r\\n\\t\\t\\t\\tqueue.add(new State(state.i + i, state.j, state.distance + 1));\\r\\n\\t\\t\\t\\tqueue.add(new State(state.i, state.j + i, state.distance + 1));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// BFS from the sources\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\t\\tif (grid[i][j] == 'S') {\\r\\n\\t\\t\\t\\t\\tqueue.add(new State(i, j, 0));\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// We represent a cluster by position of center robot and size\\r\\n\\t\\t// A cell is \\\"visited\\\" if it gets occupied by a center robot\\r\\n\\t\\t// \\\"vis\\\" stores the size of the cluster that visits each cell\\r\\n\\t\\t// If cell is never visited, its value will be -1\\r\\n\\t\\tint[][] vis = new int[n][n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) Arrays.fill(vis[i], -1);\\r\\n\\t\\twhile (!queue.isEmpty()) {\\r\\n\\t\\t\\tState state = queue.remove();\\r\\n\\t\\t\\tint size = (state.distance - 1) / d;\\r\\n\\r\\n\\t\\t\\t// Skip if position out of bounds\\r\\n\\t\\t\\tif (state.i < 0 || state.i >= n || state.j < 0 || state.j >= n) {\\r\\n\\t\\t\\t\\tcontinue; \\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Skip if cell already visited\\r\\n\\t\\t\\tif (vis[state.i][state.j] != -1) continue;\\r\\n\\t\\t\\t// Skip if cluster will collide with a rock\\r\\n\\t\\t\\tif (rockDist[state.i][state.j] <= size) continue;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tvis[state.i][state.j] = size; \\r\\n\\t\\t\\t// Update size of robot cluster\\r\\n\\t\\t\\tsize = (state.distance)/d;\\r\\n\\t\\t\\t// Check if new size collides with rocks\\r\\n\\t\\t\\tif (rockDist[state.i][state.j] <= size) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// If not, continue BFS\\r\\n\\t\\t\\tvis[state.i][state.j] = size;\\r\\n\\r\\n\\t\\t\\tfor (int i = -1; i <= 1; i += 2) {\\r\\n\\t\\t\\t\\tqueue.add(new State(state.i + i, state.j, state.distance + 1));\\r\\n\\t\\t\\t\\tqueue.add(new State(state.i, state.j + i, state.distance + 1));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Set cell to 'x' if it can be occupied by a robot\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\t\\tfor (int di = 0; di <= vis[i][j]; di++) {\\r\\n\\t\\t\\t\\t\\tfor (int dj = 0; dj <= vis[i][j] - di; dj++) {\\r\\n\\t\\t\\t\\t\\t\\tgrid[i + di][j + dj] = 'x';\\r\\n\\t\\t\\t\\t\\t\\tgrid[i - di][j + dj] = 'x';\\r\\n\\t\\t\\t\\t\\t\\tgrid[i + di][j - dj] = 'x';\\r\\n\\t\\t\\t\\t\\t\\tgrid[i - di][j - dj] = 'x';\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\t\\tans += (grid[i][j] == 'x') ? 1 : 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tout.println(ans);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class State {\\r\\n\\t\\tint i, j;\\r\\n\\t\\tint distance;\\r\\n\\r\\n\\t\\tState(int i, int j, int distance) {\\r\\n\\t\\t\\tthis.i = i;\\r\\n\\t\\t\\tthis.j = j;\\r\\n\\t\\t\\tthis.distance = distance;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1065","source":"USACO Gold 2020 December","title":"Replication","author":"Nathan Gong"},"parent":{"name":"usaco-1065","relativePath":"usaco-1065.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"bfs","title":"Breadth First Search (BFS)"}}}}]},"problemInfo":{"uniqueId":"usaco-1065","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1065"}},"pageContext":{"id":"usaco-1065"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}