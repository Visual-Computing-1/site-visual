{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/izho-2014bank/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"izho-14-bank\", source = \"IZhO 2014\", title = \"Bank\", author = \"Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We do dynamic programming on all subsets of the notes.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{covered}[S]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">covered</mtext><mo stretchy=\\\"false\\\">[</mo><mi>S</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{covered}[S]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">covered</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" be the maximum prefix of people we can pay off using the notes defined in the subset, and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{leftover}[S]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">leftover</mtext><mo stretchy=\\\"false\\\">[</mo><mi>S</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{leftover}[S]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">leftover</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" be the leftover amount of money we have after we pay off the prefix of the people.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When transitioning, iterate over all possible \\\"ending\\\" banknotes and see how each of them would fit in when you put them onto the leftovers of the previous subset.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(M2^M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>M</mi><msup><mn>2</mn><mi>M</mi></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(M2^M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0913em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8413em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nint main() {\\r\\n\\tint people_num;\\r\\n\\tint note_num;\\r\\n\\tstd::cin >> people_num >> note_num;\\r\\n\\tvector<int> people(people_num);\\r\\n\\tvector<int> banknotes(note_num);\\r\\n\\tfor (int& p : people) {\\r\\n\\t\\tstd::cin >> p;\\r\\n\\t}\\r\\n\\tfor (int& b : banknotes) {\\r\\n\\t\\tstd::cin >> b;\\r\\n\\t}\\r\\n\\r\\n\\tvector<int> leftover(1 << note_num, -1);\\r\\n\\tvector<int> people_covered(1 << note_num, -1);\\r\\n\\tleftover[0] = 0;\\r\\n\\tpeople_covered[0] = 0;\\r\\n\\tfor (int s = 0; s < (1 << note_num); s++) {\\r\\n\\t\\tfor (int last = 0; last < note_num; last++) {\\r\\n\\t\\t\\tif ((s & (1 << last)) == 0) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tint prev = s & ~(1 << last);\\r\\n\\t\\t\\tif (people_covered[prev] == -1) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tint new_amt = leftover[prev] + banknotes[last];\\r\\n\\t\\t\\t// the salary of the current person we're going to try to pay\\r\\n\\t\\t\\tint curr_target = people[people_covered[prev]];\\r\\n\\t\\t\\t// if it's still not enough, just increment the leftover pile\\r\\n\\t\\t\\tif (new_amt < curr_target) {\\r\\n\\t\\t\\t\\tpeople_covered[s] = people_covered[prev];\\r\\n\\t\\t\\t\\tleftover[s] = new_amt;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * or it's exactly right, in which case reset the leftover count\\r\\n\\t\\t\\t * and increment the covered amount\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\telse if (new_amt == curr_target) {\\r\\n\\t\\t\\t\\tpeople_covered[s] = people_covered[prev] + 1;\\r\\n\\t\\t\\t\\tleftover[s] = 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// we've covered all the people!\\r\\n\\t\\tif (people_covered[s] == people_num) {\\r\\n\\t\\t\\tcout << \\\"YES\\\" << endl;\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << \\\"NO\\\" << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.BufferedReader;\\r\\nimport java.io.IOException;\\r\\nimport java.io.InputStreamReader;\\r\\nimport java.util.Arrays;\\r\\nimport java.util.StringTokenizer;\\r\\n\\r\\npublic class Bank {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tStringTokenizer initial = new StringTokenizer(read.readLine());\\r\\n\\t\\tint peopleNum = Integer.parseInt(initial.nextToken());\\r\\n\\t\\tint noteNum = Integer.parseInt(initial.nextToken());\\r\\n\\t\\tint[] people = Arrays.stream(read.readLine().split(\\\" \\\"))\\r\\n\\t\\t\\t\\t\\t\\t\\t .mapToInt(Integer::parseInt).toArray();\\r\\n\\t\\tint[] banknotes = Arrays.stream(read.readLine().split(\\\" \\\"))\\r\\n\\t\\t\\t\\t\\t\\t\\t .mapToInt(Integer::parseInt).toArray();\\r\\n\\r\\n\\t\\tint[] leftover = new int[1 << noteNum];\\r\\n\\t\\tint[] peopleCovered = new int[1 << noteNum];\\r\\n\\t\\tArrays.fill(leftover, -1);\\r\\n\\t\\tArrays.fill(peopleCovered, -1);\\r\\n\\t\\tleftover[0] = 0;\\r\\n\\t\\tpeopleCovered[0] = 0;\\r\\n\\t\\tfor (int s = 0; s < (1 << noteNum); s++) {\\r\\n\\t\\t\\tfor (int last = 0; last < noteNum; last++) {\\r\\n\\t\\t\\t\\tif ((s & (1 << last)) == 0) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tint prev = s & ~(1 << last);\\r\\n\\t\\t\\t\\tif (peopleCovered[prev] == -1) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tint new_amt = leftover[prev] + banknotes[last];\\r\\n\\t\\t\\t\\t// the salary of the current person we're going to try to pay\\r\\n\\t\\t\\t\\tint curr_target = people[peopleCovered[prev]];\\r\\n\\t\\t\\t\\t// if it's still not enough, just increment the leftover pile\\r\\n\\t\\t\\t\\tif (new_amt < curr_target) {\\r\\n\\t\\t\\t\\t\\tpeopleCovered[s] = peopleCovered[prev];\\r\\n\\t\\t\\t\\t\\tleftover[s] = new_amt;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t/*\\r\\n\\t\\t \\t\\t * or it's exactly right, in which case reset the leftover count\\r\\n\\t\\t \\t\\t * and increment the covered amount\\r\\n\\t\\t \\t\\t */\\r\\n\\t\\t\\t\\telse if (new_amt == curr_target) {\\r\\n\\t\\t\\t\\t\\tpeopleCovered[s] = peopleCovered[prev] + 1;\\r\\n\\t\\t\\t\\t\\tleftover[s] = 0;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// we've covered all the people!\\r\\n\\t\\t\\tif (peopleCovered[s] == peopleNum) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\\"YES\\\");\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(\\\"NO\\\");\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsxs(PySection, {\n        children: [_jsx(_components.p, {\n          children: \"The following code runs in time only if you submit with PyPy.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"from sys import exit\\r\\n\\r\\npeople_num, note_num = [int(i) for i in input().split()]\\r\\npeople = [int(i) for i in input().split()]\\r\\nbanknotes = [int(i) for i in input().split()]\\r\\n\\r\\nleftover = [-1 for _ in range(1 << note_num)]\\r\\npeople_covered = [-1 for _ in range(1 << note_num)]\\r\\nleftover[0] = 0\\r\\npeople_covered[0] = 0\\r\\nfor s in range(1, 1 << note_num):\\r\\n\\tfor last in range(note_num):\\r\\n\\t\\tif (s & (1 << last)) == 0:\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\tprev = s & ~(1 << last)\\r\\n\\t\\tif people_covered[prev] == -1:\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t\\r\\n\\t\\tnew_amt = leftover[prev] + banknotes[last]\\r\\n\\t\\t# the salary of the current person we're going to try to pay\\r\\n\\t\\tcurr_target = people[people_covered[prev]]\\r\\n\\t\\t# if it's still not enough, just increment the leftover pile\\r\\n\\t\\tif new_amt < curr_target:\\r\\n\\t\\t\\tpeople_covered[s] = people_covered[prev]\\r\\n\\t\\t\\tleftover[s] = new_amt\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\tor it's exactly right, in which case reset the leftover count\\r\\n\\t\\tand increment the covered amount\\r\\n\\t\\t\\\"\\\"\\\"\\r\\n\\t\\telif new_amt == curr_target:\\r\\n\\t\\t\\tpeople_covered[s] = people_covered[prev] + 1\\r\\n\\t\\t\\tleftover[s] = 0\\r\\n\\r\\n\\t# we've covered all the people!\\r\\n\\tif people_covered[s] == people_num:\\r\\n\\t\\tprint(\\\"YES\\\")\\r\\n\\t\\texit()\\r\\nprint(\\\"NO\\\")\\n\"\n          })\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"izho-14-bank","source":"IZhO 2014","title":"Bank","author":"Kevin Sheng"},"parent":{"name":"izho-14-bank","relativePath":"izho-14-bank.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dp-bitmasks","title":"Bitmask DP"}}}}]},"problemInfo":{"uniqueId":"izho-14-bank","url":"https://oj.uz/problem/view/IZhO14_bank"}},"pageContext":{"id":"izho-14-bank"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}