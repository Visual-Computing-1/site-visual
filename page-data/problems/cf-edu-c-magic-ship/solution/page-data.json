{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-edu-c-magic-ship/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1117C\", source = \"CF\", title = \"Magic Ship\", author = \"Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/65365\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <string>\\r\\n#include <cmath>\\r\\n\\r\\nusing std::cin;\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\n\\r\\nbool reachable(std::pair<long long, long long> start,\\r\\n\\t\\t\\t   std::pair<long long, long long> end,\\r\\n\\t\\t\\t   std::string wind,\\r\\n\\t\\t\\t   long long time) {\\r\\n\\tlong long wind_x = 0;\\r\\n\\tlong long wind_y = 0;\\r\\n\\tfor (const char& w : wind) {\\r\\n\\t\\tswitch (w) {\\r\\n\\t\\t\\tcase 'U':\\r\\n\\t\\t\\t\\twind_y++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'D':\\r\\n\\t\\t\\t\\twind_y--;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'L':\\r\\n\\t\\t\\t\\twind_x--;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'R':\\r\\n\\t\\t\\t\\twind_x++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// to speed things up, we can skip all the repetitive cycles and just multiply by the total complete amount of cycles\\r\\n\\twind_x *= time / wind.length();\\r\\n\\twind_y *= time / wind.length();\\r\\n\\tlong long remainder = time % wind.length();\\r\\n\\tfor (long long i = 0; i < remainder; i++) {\\r\\n\\t\\tswitch (wind[i]) {\\r\\n\\t\\t\\tcase 'U':\\r\\n\\t\\t\\t\\twind_y++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'D':\\r\\n\\t\\t\\t\\twind_y--;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'L':\\r\\n\\t\\t\\t\\twind_x--;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'R':\\r\\n\\t\\t\\t\\twind_x++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tstart.first += wind_x;\\r\\n\\tstart.second += wind_y;\\r\\n\\treturn std::abs(start.first - end.first) +\\r\\n\\t\\t   std::abs(start.second - end.second) <= time;\\r\\n}\\r\\n\\r\\n/**\\r\\n* https://codeforces.com/problemset/problem/1117/C\\r\\n* 0 0\\r\\n* 4 6\\r\\n* 3\\r\\n* UUU should output 5\\r\\n*\\r\\n* 0 3\\r\\n* 0 0\\r\\n* 3\\r\\n* UDD should output 3\\r\\n*/\\r\\nint main() {\\r\\n\\tstd::pair<long long, long long> at_pos;  // i'm not taking any chances with integer overflow\\r\\n\\tcin >> at_pos.first >> at_pos.second;\\r\\n\\tstd::pair<long long, long long> destination;\\r\\n\\tcin >> destination.first >> destination.second;\\r\\n\\tlong long wind_len;\\r\\n\\tcin >> wind_len;  // won't be using this but oh well\\r\\n\\tstd::string wind_cycle;\\r\\n\\tcin >> wind_cycle;\\r\\n\\r\\n\\tlong long lo = 0;\\r\\n\\tlong long hi = 20000000000000000;  // just spammed a bunch of 0s, it should be long enough\\r\\n\\tlong long valid = -1;\\r\\n\\twhile (lo <= hi) {\\r\\n\\t\\tlong long mid = (lo + hi) / 2;\\r\\n\\t\\tif (reachable(at_pos, destination, wind_cycle, mid)) {\\r\\n\\t\\t\\tvalid = mid;\\r\\n\\t\\t\\thi = mid - 1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tlo = mid + 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << valid << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.BufferedReader;\\r\\nimport java.io.IOException;\\r\\nimport java.io.InputStreamReader;\\r\\nimport java.util.Arrays;\\r\\n\\r\\n/**\\r\\n* https://codeforces.com/problemset/problem/1117/C\\r\\n* 0 0\\r\\n* 4 6\\r\\n* 3\\r\\n* UUU should output 5\\r\\n*\\r\\n* 0 3\\r\\n* 0 0\\r\\n* 3\\r\\n* UDD should output 3\\r\\n*/\\r\\npublic class MagicShip {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tlong[] atPos = Arrays.stream(read.readLine().split(\\\" \\\")).mapToLong(Long::parseLong).toArray();\\r\\n\\t\\tlong[] destination = Arrays.stream(read.readLine().split(\\\" \\\")).mapToLong(Long::parseLong).toArray();\\r\\n\\t\\tread.readLine();\\r\\n\\t\\tchar[] winds = read.readLine().toUpperCase().toCharArray();\\r\\n\\r\\n\\t\\tif (!reachable(atPos, destination, Long.MAX_VALUE / 2, winds)) {\\r\\n\\t\\t\\tSystem.out.println(-1);\\r\\n\\t\\t\\tSystem.exit(0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlong lo = 0;\\r\\n\\t\\tlong hi = Long.MAX_VALUE / 2;\\r\\n\\t\\tlong valid = -1;\\r\\n\\t\\twhile (lo <= hi) {\\r\\n\\t\\t\\tlong mid = lo / 2 + hi / 2;\\r\\n\\t\\t\\tif (reachable(atPos, destination, mid, winds)) {\\r\\n\\t\\t\\t\\t\\tvalid = mid;\\r\\n\\t\\t\\t\\t\\thi = mid - 1;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tlo = mid + 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(valid);\\r\\n\\t}\\r\\n\\r\\n\\tprivate static boolean reachable(long[] from, long[] to, long time, char[] windPattern) {\\r\\n\\t\\tlong windX = 0;\\r\\n\\t\\tlong windY = 0;\\r\\n\\t\\t// calculate the net change by the wind through one cycle\\r\\n\\t\\tfor (char w : windPattern) {\\r\\n\\t\\t\\tswitch (w) {\\r\\n\\t\\t\\t\\tcase 'U':\\r\\n\\t\\t\\t\\t\\twindY++;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 'D':\\r\\n\\t\\t\\t\\t\\twindY--;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 'L':\\r\\n\\t\\t\\t\\t\\twindX--;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 'R':\\r\\n\\t\\t\\t\\t\\twindX++;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// to speed things up, we can multiply the blown amount by the complete cycle amount\\r\\n\\t\\twindX *= time / windPattern.length;\\r\\n\\t\\twindY *= time / windPattern.length;\\r\\n\\t\\tlong remainder = time % windPattern.length;\\r\\n\\t\\tfor (int i = 0; i < remainder; i++) {  // calculate the remaining wind\\r\\n\\t\\tswitch (windPattern[i]) {\\r\\n\\t\\t\\tcase 'U':\\r\\n\\t\\t\\t\\twindY++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'D':\\r\\n\\t\\t\\t\\twindY--;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'L':\\r\\n\\t\\t\\t\\twindX--;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'R':\\r\\n\\t\\t\\t\\twindX++;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn manhattanDist(new long[] {from[0] + windX, from[1] + windY}, to) <= time;\\r\\n\\t}\\r\\n\\r\\n\\tprivate static long manhattanDist(long[] from, long[] to) {\\r\\n\\t\\treturn Math.abs(from[0] - to[0]) + Math.abs(from[1] - to[1]);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"\\\"\\\"\\\"\\r\\n0 0\\r\\n4 6\\r\\n3\\r\\nUUU should output 5\\r\\n\\r\\n0 3\\r\\n0 0\\r\\n3\\r\\nUDD should output 3\\r\\n\\\"\\\"\\\"\\r\\nfrom typing import List\\r\\n\\r\\ndef reachable(start: List[int], end: List[int], wind: str, time: int):\\r\\n\\tstart = start.copy()\\r\\n\\twind_x = wind.count(\\\"R\\\") - wind.count(\\\"L\\\")  # count the net changes after one wind cycle\\r\\n\\twind_y = wind.count(\\\"U\\\") - wind.count(\\\"D\\\")\\r\\n\\tcycle_num = time // len(wind)\\r\\n\\twind_x *= cycle_num  # speed this up by multiplying by the amount of complete cycles in the time\\r\\n\\twind_y *= cycle_num\\r\\n\\r\\n\\tremainder = time % len(wind)\\r\\n\\twind = wind[:remainder]  # account for the remaining wind\\r\\n\\twind_x += wind.count(\\\"R\\\") - wind.count(\\\"L\\\")\\r\\n\\twind_y += wind.count(\\\"U\\\") - wind.count(\\\"D\\\")\\r\\n\\r\\n\\tstart[0] += wind_x  # apply the changes and see if the manhattan distance is less than the time\\r\\n\\tstart[1] += wind_y\\r\\n\\treturn abs(start[0] - end[0]) + abs(start[1] - end[1]) <= time\\r\\n\\r\\n\\r\\nat_pos = [int(i) for i in input().split()]\\r\\ndestination = [int(i) for i in input().split()]\\r\\ninput()\\r\\nwind_cycle = input()\\r\\n\\r\\n\\r\\nlo = 0\\r\\nhi = 2 * 10**14\\r\\nvalid = -1\\r\\nwhile lo <= hi:\\r\\n\\tmid = (lo + hi) // 2\\r\\n\\tif reachable(at_pos, destination, wind_cycle, mid):\\r\\n\\t\\tvalid = mid\\r\\n\\t\\thi = mid - 1\\r\\n\\telse:\\r\\n\\t\\tlo = mid + 1\\r\\nprint(valid)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1117C","source":"CF","title":"Magic Ship","author":"Kevin Sheng"},"parent":{"name":"cf-1117C","relativePath":"cf-1117C.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"binary-search","title":"Binary Search"}}}}]},"problemInfo":{"uniqueId":"cf-1117C","url":"https://codeforces.com/problemset/problem/1117/C"}},"pageContext":{"id":"cf-1117C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}