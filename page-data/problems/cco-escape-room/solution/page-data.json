{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cco-escape-room/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*No need to prime factorize!*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cco-EscapeRoom\", source = \"CCC 2020\", title = \"J5 / S2: Escape Room\", author = \"Benjamin Qi\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [\"\\n\", _jsxs(_components.p, {\n      children: [\"Define \", _jsx(_components.code, {\n        children: \"grid[r][c]\"\n      }), \" to be the integer in the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\\\"application/x-tex\\\">r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span>\"\n      }), \"-th row of the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n      }), \"-th column of\\r\\nthe input grid. Let \", _jsx(_components.code, {\n        children: \"done[x]=true\"\n      }), \" if we can reach any cell \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(r,c)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>r</mi><mo separator=\\\"true\\\">,</mo><mi>c</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(r,c)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" such that\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r\\\\cdot c=x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>r</mi><mo>⋅</mo><mi>c</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">r\\\\cdot c=x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4445em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" otherwise. If \", _jsx(_components.code, {\n        children: \"done[x]\"\n      }), \" is \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", then we also know\\r\\nthat \", _jsx(_components.code, {\n        children: \"done[grid[r][c]]\"\n      }), \" is \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" for all cells \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(r,c)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>r</mi><mo separator=\\\"true\\\">,</mo><mi>c</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(r,c)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" such that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r\\\\cdot c=x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>r</mi><mo>⋅</mo><mi>c</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">r\\\\cdot c=x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4445em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So we essentially have a directed graph with vertices \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\\\\ldots 10^6\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>…</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">1\\\\ldots 10^6</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" where there\\r\\nexists a directed edge from \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"grid[r][c]\"\n      }), \" whenever \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r\\\\cdot c=x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>r</mi><mo>⋅</mo><mi>c</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">r\\\\cdot c=x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4445em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". We want\\r\\nto test whether there exists a path from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\\\\cdot M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>⋅</mo><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N\\\\cdot M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" in this graph.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Thus, we can simply start DFSing from vertex \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and mark all the vertices that\\r\\nwe visit in the boolean array \", _jsx(_components.code, {\n        children: \"done\"\n      }), \". If we set \", _jsx(_components.code, {\n        children: \"done[N*M]=true\"\n      }), \", then a path\\r\\nexists, and we can terminate after printing \\\"yes.\\\" Note that in the code below,\\r\\n\", _jsx(_components.code, {\n        children: \"todo[x]\"\n      }), \" denotes the adjacency list of \", _jsx(_components.code, {\n        children: \"x\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint M, N;\\r\\nvector<int> todo[1000005];\\r\\nbool done[1000005];\\r\\n\\r\\nvoid dfs(int x) {\\r\\n\\tif (done[x]) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (x == N * M) {\\r\\n\\t\\tcout << \\\"yes\\\" << endl;\\r\\n\\t\\texit(0);\\r\\n\\t}\\r\\n\\tdone[x] = 1;\\r\\n\\tfor (int& t : todo[x]) {\\r\\n\\t\\tdfs(t);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcin.tie(0)->sync_with_stdio(0);\\r\\n\\tcin >> M >> N;\\r\\n\\tfor (int i = 1; i <= M; i++) {\\r\\n\\t\\tfor (int j = 1; j <= N; j++) {\\r\\n\\t\\t\\tint x;\\r\\n\\t\\t\\tcin >> x;\\r\\n\\t\\t\\ttodo[i * j].push_back(x);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tdfs(1);\\r\\n\\tcout << \\\"no\\\" << endl;\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cco-EscapeRoom","source":"CCC 2020","title":"J5 / S2: Escape Room","author":"Benjamin Qi"},"parent":{"name":"cco-EscapeRoom","relativePath":"cco-EscapeRoom.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":null}}]},"problemInfo":{"uniqueId":"cco-EscapeRoom","url":"https://dmoj.ca/problem/ccc20s2"}},"pageContext":{"id":"cco-EscapeRoom"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}