{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/kattis-robot-turtles/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"kattis-robotturtles\", source = \"Kattis\", title = \"Robot Turtles\", author = \"Maggie Liu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Official Analysis:\\r\\n\", _jsx(_components.a, {\n        href: \"https://icpc.cs.vt.edu/hs/2016/outlines-vths-2016.pdf#page=20\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Solution Outline\"\n      }), \",\\r\\n\", _jsx(_components.a, {\n        href: \"https://icpc.cs.vt.edu/hs/2016/judge/robotturtles/submissions/accepted/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Code\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use Dijkstra's, keeping track of the current length of the program\\r\\n(\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist</span></span></span></span></span>\"\n      }), \"), the direction the turtle faces (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dir}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dir</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dir}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dir</span></span></span></span></span>\"\n      }), \") and the moves\\r\\nit has already made to reach its current location (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{moves}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">moves</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{moves}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">moves</span></span></span></span></span>\"\n      }), \"). If there\\r\\nis an ice castle in front of the turtle, it should only be melted if the turtle\\r\\nwill move there immediately. If the turtle doesn't move onto the square\\r\\nimmediately, then it will either:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"return to the square later, in which case the turtle has wasted moves before\\r\\nreturning.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"never move onto the square, in which case the turtle wasted a move melting the\\r\\nice castle.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, we only need to melt ice castles if the turtle moves forward immediately after.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At each location, the turtle can:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"move forward if there is an empty square.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"melt an ice castle and then move forward if there is an ice castle.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"turn.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As we make moves, we add the instructions to the string \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{moves}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">moves</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{moves}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">moves</span></span></span></span></span>\"\n      }), \". Once we\\r\\nreach the diamond, we can print out the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{moves}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">moves</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{moves}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">moves</span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2\\\\log N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mi>log</mi><mo>‚Å°</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2\\\\log N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" is the side length of\\r\\nthe board.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <string>\\r\\n#include <queue>\\r\\n#include <vector>\\r\\nusing namespace std;\\r\\n\\r\\nstruct State {\\r\\n\\t// directions: 0 is up, 1 is right, 2 is down, 3 is left\\r\\n\\tint dist, i, j, dir;\\r\\n\\tstring moves;\\r\\n\\tbool operator>(const State& a) const\\r\\n\\t{\\r\\n\\t\\treturn dist > a.dist;\\r\\n\\t}\\r\\n};\\r\\nbool ingrid(int a, int b)\\r\\n{\\r\\n\\treturn a >= 0 && a < 8 && b >= 0 && b < 8;\\r\\n}\\r\\nint di[] = {-1, 0, 1, 0}, dj[] = {0, 1, 0, -1};\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tstring grid[8];\\r\\n\\tfor (int i = 0; i < 8; i++)\\r\\n\\t{\\r\\n\\t\\tcin >> grid[i];\\r\\n\\t}\\r\\n\\tint dist[4][8][8]{}; // dir, i, j\\r\\n\\tfor (int i = 0; i < 4; i++)\\r\\n\\t{\\r\\n\\t\\tfor (int j = 0; j < 8; j++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tfor (int k = 0; k < 8; k++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tdist[i][j][k] = 1e9;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tdist[1][7][0] = 0;\\r\\n\\tpriority_queue<State, vector<State>, greater<State>> pq;\\r\\n\\tpq.push({0, 7, 0, 1, \\\"\\\"});\\r\\n\\r\\n\\t// use dijkstras to find the shortest path to the diamond\\r\\n\\twhile (!pq.empty())\\r\\n\\t{\\r\\n\\t\\tState cur = pq.top();\\r\\n\\t\\tpq.pop();\\r\\n\\t\\tif (cur.dist != dist[cur.dir][cur.i][cur.j])\\r\\n\\t\\t{\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (grid[cur.i][cur.j] == 'D')\\r\\n\\t\\t{\\r\\n\\t\\t\\tcout << cur.moves << endl;\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t\\t// move forward\\r\\n\\t\\tint newi = cur.i + di[cur.dir], newj = cur.j + dj[cur.dir];\\r\\n\\t\\tif (ingrid(newi, newj)\\r\\n\\t\\t\\t\\t&& (grid[newi][newj] == '.' || grid[newi][newj] == 'D')\\r\\n\\t\\t\\t\\t&& dist[cur.dir][cur.i][cur.j] + 1 < dist[cur.dir][newi][newj])\\r\\n\\t\\t{\\r\\n\\t\\t\\tdist[cur.dir][newi][newj] = dist[cur.dir][cur.i][cur.j] + 1;\\r\\n\\t\\t\\tpq.push({dist[cur.dir][newi][newj],\\r\\n\\t\\t\\t\\t\\t\\tnewi, newj, cur.dir, cur.moves + \\\"F\\\"});\\r\\n\\t\\t}\\r\\n\\t\\t// melt ice castle and move forward\\r\\n\\t\\tif (ingrid(newi, newj)\\r\\n\\t\\t\\t\\t&& grid[newi][newj] == 'I'\\r\\n\\t\\t\\t\\t&& dist[cur.dir][cur.i][cur.j] + 2 < dist[cur.dir][newi][newj])\\r\\n\\t\\t{\\r\\n\\t\\t\\tdist[cur.dir][newi][newj] = dist[cur.dir][cur.i][cur.j] + 2;\\r\\n\\t\\t\\tpq.push({dist[cur.dir][newi][newj],\\r\\n\\t\\t\\t\\t\\t\\tnewi, newj, cur.dir, cur.moves + \\\"XF\\\"});\\r\\n\\t\\t}\\r\\n\\t\\t// turn left or right\\r\\n\\t\\tfor (int turn : {-1, 1})\\r\\n\\t\\t{\\r\\n\\t\\t\\tint newdir = (cur.dir + turn + 4) % 4;\\r\\n\\t\\t\\tstring newmove = (turn == -1 ? \\\"L\\\" : \\\"R\\\");\\r\\n\\t\\t\\tif (dist[cur.dir][cur.i][cur.j] + 1 < dist[newdir][cur.i][cur.j])\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tdist[newdir][cur.i][cur.j] = dist[cur.dir][cur.i][cur.j] + 1;\\r\\n\\t\\t\\t\\tpq.push({dist[newdir][cur.i][cur.j],\\r\\n\\t\\t\\t\\t\\t\\t\\tcur.i, cur.j, newdir, cur.moves + newmove});\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << \\\"no solution\\\" << endl;\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"kattis-robotturtles","source":"Kattis","title":"Robot Turtles","author":"Maggie Liu"},"parent":{"name":"kattis-robotturtles","relativePath":"kattis-robotturtles.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"shortest-paths","title":"Shortest Paths with Non-Negative Edge Weights"}}}}]},"problemInfo":{"uniqueId":"kattis-robotturtles","url":"https://open.kattis.com/problems/robotturtles"}},"pageContext":{"id":"kattis-robotturtles"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}