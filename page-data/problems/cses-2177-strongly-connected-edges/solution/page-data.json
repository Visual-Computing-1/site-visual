{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-2177-strongly-connected-edges/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-2177\", source = \"CSES\", title = \"Strongly Connected Edges\", author = \"Andi Qu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(N + M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(N + M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are two cases when we can't make the graph strongly connected:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The graph isn't a single connected component.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The graph contains a \", _jsx(_components.a, {\n          href: \"/adv/BCC-2CC\",\n          children: \"bridge\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The first case can be checked with a simple DFS (i.e. check that it visits each\\r\\nnode).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The second case can be checked in the same DFS using Tarjan's bridge-finding\\r\\nalgorithm.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To construct the answer, set the direction of each edge to the direction in\\r\\nwhich we first traversed it in the DFS.\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nvector<pair<int, int>> ans, graph[100001];\\r\\nbool visited[100001], in_ans[200001];\\r\\nint tin[100001], low[100001], timer = 0;\\r\\n\\r\\nvoid dfs(int node = 1, int parent = 0) {\\r\\n\\tvisited[node] = true;\\r\\n\\ttin[node] = low[node] = timer++;\\r\\n\\tfor (pair<int, int> i : graph[node]) if (i.first != parent) {\\r\\n\\t\\tif (!in_ans[i.second]) {\\r\\n\\t\\t\\tans.push_back({node, i.first});\\r\\n\\t\\t\\tin_ans[i.second] = true;\\r\\n\\t\\t}\\r\\n\\t\\tif (visited[i.first]) low[node] = min(low[node], tin[i.first]);\\r\\n\\t\\telse {\\r\\n\\t\\t\\tdfs(i.first, node);\\r\\n\\t\\t\\tlow[node] = min(low[node], low[i.first]);\\r\\n\\t\\t\\tif (low[i.first] > tin[node]) {\\r\\n\\t\\t\\t\\tcout << \\\"IMPOSSIBLE\\\";\\r\\n\\t\\t\\t\\texit(0);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcin.tie(0)->sync_with_stdio(0);\\r\\n\\tint n, m;\\r\\n\\tcin >> n >> m;\\r\\n\\twhile (m--) {\\r\\n\\t\\tint u, v;\\r\\n\\t\\tcin >> u >> v;\\r\\n\\t\\tgraph[u].push_back({v, m});\\r\\n\\t\\tgraph[v].push_back({u, m});\\r\\n\\t}\\r\\n\\tdfs();\\r\\n\\tif (find(visited + 1, visited + n + 1, false) != visited + n + 1)\\r\\n\\t\\treturn cout << \\\"IMPOSSIBLE\\\", 0;\\r\\n\\tfor (pair<int, int> i : ans) cout << i.first << ' ' << i.second << '\\\\n';\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-2177","source":"CSES","title":"Strongly Connected Edges","author":"Andi Qu"},"parent":{"name":"cses-2177","relativePath":"cses-2177.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"BCC-2CC","title":"BCCs and 2CCs"}}}}]},"problemInfo":{"uniqueId":"cses-2177","url":"https://cses.fi/problemset/task/2177"}},"pageContext":{"id":"cses-2177"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}