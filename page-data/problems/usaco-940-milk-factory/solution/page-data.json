{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-940-milk-factory/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-940\", source = \"USACO Bronze 2019 Open\", title = \"Milk Factory\", author = \"Mrinall Umasudhan, Jesse Choe, Ryan Chou, Chuyang Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution-1\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_factory_bronze_open19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"fin = open('factory.in', 'r')\\r\\nN = int(fin.readline())\\r\\n\\r\\noutgoing = [0] * N\\r\\nincoming = [0] * N\\r\\nfor _ in range(N - 1):\\r\\n\\ta, b = map(int, fin.readline().split())\\r\\n\\t# Counting number of outgoing and incoming walkways.\\r\\n\\toutgoing[a] += 1\\r\\n\\tincoming[b] += 1\\r\\n\\r\\nans = -1\\r\\nfor i in range(1, N + 1):\\r\\n\\t# Found two meeting places. This won't work.\\r\\n\\t# (we have to find a unique walkway)\\r\\n\\tif outgoing[i] == 0 and ans != -1: \\r\\n\\t\\tans = -1\\r\\n\\t\\tbreak\\r\\n\\t# Found a meeting place, save it.\\r\\n\\t# (found a walkway which has only\\r\\n\\t# has walkways leading into it.)\\r\\n\\tif outgoing[i] == 0: \\r\\n\\t\\tans = i\\r\\n\\r\\nprint(ans, file = open('factory.out', 'w'))\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Factory {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader in = new BufferedReader(new FileReader(\\\"factory.in\\\"));\\r\\n\\t\\tPrintWriter out = new PrintWriter(\\\"factory.out\\\");\\r\\n\\r\\n\\t\\tint N = Integer.parseInt(in.readLine());\\r\\n\\t\\tint[] outgoing = new int[N];\\r\\n\\t\\t// N - 1 walkways\\r\\n\\t\\tfor (int i = 0; i < N - 1; i++) {\\r\\n\\t\\t\\tStringTokenizer st = new StringTokenizer(in.readLine());\\r\\n\\t\\t\\t// count the outdegree of this station\\r\\n\\t\\t\\t// Array index begins with 0, station begins with 1, so -1\\r\\n\\t\\t\\toutgoing[Integer.parseInt(st.nextToken()) - 1]++;\\r\\n\\t\\t}\\r\\n\\t\\tin.close();\\r\\n\\r\\n\\t\\tint ans = -1;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\t// only stations with outdegree 0 could be the sink\\r\\n\\t\\t\\tif (outgoing[i] == 0) {\\r\\n\\t\\t\\t\\tif (ans == -1)\\r\\n\\t\\t\\t\\t\\t// found the sink\\r\\n\\t\\t\\t\\t\\tans = i + 1; // Array index begins with 0\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t// found two sinks \\r\\n\\t\\t\\t\\t\\t// so it's impossible to get from one to another\\r\\n\\t\\t\\t\\t\\tans = -1;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tout.println(ans);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This problem can also be solved using \", _jsx(_components.a, {\n        href: \"/silver/dfs\",\n        children: \"Depth-First Search\"\n      }), \" (a\\r\\nSilver topic). Represent the factory as a directed unweighted graph with edges\\r\\nfrom \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">b_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">a_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" for all \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \". For every node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\\\\in [1,N]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>N</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">i\\\\in [1,N]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6986em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">∈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \", we start a DFS at\\r\\nnode \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" and check whether this results in every other node being visited. We\\r\\ncan keep track of whether the current DFS visits all nodes with a boolean array\\r\\nwhose entries are initially set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \". If every node is visited, then we\\r\\nprint \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \". Otherwise, if there exists no \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" such that this condition is\\r\\nsatisfied, then we print \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"-1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\nclass Graph{\\r\\n     private int V;\\r\\n     private ArrayList<ArrayList<Integer>> adj;\\r\\n     Graph(int V){\\r\\n         this.V = V;\\r\\n         adj = new ArrayList<ArrayList<Integer>>(V);\\r\\n         for(int i = 0; i < V; i++){\\r\\n              adj.add(new ArrayList<Integer>()); // Creating the adjacency list\\r\\n         }\\r\\n     }\\r\\n     void addEdge(int u, int v){\\r\\n          adj.get(v).add(u); // Connecting the two factories.\\r\\n     }\\r\\n\\r\\n\\r\\n     int DFSUtil(int v,boolean visited[]){\\r\\n         int ans = 0;\\r\\n         // Mark the current node as visited\\r\\n         visited[v] = true;\\r\\n         ans++;\\r\\n\\r\\n         // Recur for all the vertices adjacent to this vertex\\r\\n         Iterator<Integer> i = adj.get(v).listIterator();\\r\\n         while(i.hasNext()){\\r\\n             int n = i.next();\\r\\n             if(!visited[n]){\\r\\n                 ans += DFSUtil(n, visited); // recurse to the next edge/station in it's path and increase the number of stations visited.\\r\\n             }\\r\\n         }\\r\\n         return ans; // return number of visited stations.\\r\\n     }\\r\\n\\r\\n     // The function to do DFS traversal. It uses recursive DFSUtil()\\r\\n     int DFS(int v){\\r\\n         // Mark all the vertices as not visited(set as false by default)\\r\\n         boolean visited[] = new boolean[V];\\r\\n\\r\\n         // Call the recursive helper function to print DFS traversal\\r\\n         return DFSUtil(v, visited);\\r\\n     }\\r\\n }\\r\\n\\r\\n public class factory{\\r\\n     public static void main(String[] args) throws IOException{\\r\\n         Scanner sc = new Scanner(new File(\\\"factory.in\\\"));\\r\\n         PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"factory.out\\\")));\\r\\n         int N = sc.nextInt(); Graph  g = new Graph(N); boolean used = false;\\r\\n         for(int i = 0; i < N - 1; i++){\\r\\n             g.addEdge(sc.nextInt() - 1, sc.nextInt() - 1); // Meaning one can walk from station A to station B.\\r\\n         }\\r\\n         for(int i = 0; i < N; i++){\\r\\n              int ans = g.DFS(i);\\r\\n              if(ans == N){\\r\\n                   out.println(i + 1); // If the number of visited stations from the DFS is equal to the total number of stations then output.\\r\\n                   used = true;\\r\\n                   break;\\r\\n              }\\r\\n         }\\r\\n         if(!used){\\r\\n              out.println(-1); // If no such station exists then we print -1.\\r\\n         }\\r\\n         out.close();\\r\\n     }\\r\\n }\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n#define pb push_back\\r\\n#define all(x) begin(x), end(x)\\r\\n\\r\\nvoid setIO(string name=\\\"\\\"){ // FastIO See General -> Input/Output\\r\\n    ios_base::sync_with_stdio(0); cin.tie(0);\\r\\n    if((int)name.size() > 0){\\r\\n        freopen((name+\\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n        freopen((name+\\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n    }\\r\\n}\\r\\n\\r\\nvector<int> adj[101]; vector<bool> visited(101); int n;\\r\\n\\r\\nvoid dfs(int node){\\r\\n\\tvisited[node] = true;\\r\\n\\tfor(int v: adj[node]){\\r\\n\\t\\tif(!visited[v]){\\r\\n\\t\\t\\tdfs(v);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nbool allVisited(){\\r\\n\\tfor(int i = 0; i < n; i++){\\r\\n\\t\\tif(!visited[i]){\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true;\\r\\n}\\r\\n\\r\\nint main(){\\r\\n\\tsetIO(\\\"factory\\\");\\r\\n\\tcin >> n;\\r\\n\\tfor(int i = 0; i < (n - 1); i++){\\r\\n\\t\\tint a, b; cin >> a >> b;\\r\\n\\t\\t--a; --b;\\r\\n\\t\\tadj[b].pb(a);\\r\\n\\t}\\r\\n\\tfor(int i = 0; i < n; i++){\\r\\n\\t\\tfill(all(visited), false);\\r\\n\\t\\tdfs(i);\\r\\n\\t\\tif(allVisited()){\\r\\n\\t\\t\\tcout << i+1 << endl;\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << -1 << endl;\\r\\n}\\r\\n\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-940","source":"USACO Bronze 2019 Open","title":"Milk Factory","author":"Mrinall Umasudhan, Jesse Choe, Ryan Chou, Chuyang Wang"},"parent":{"name":"usaco-940","relativePath":"usaco-940.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Implementation","slug":"implementation-1"}],"java":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Implementation","slug":"implementation-1"}],"py":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Implementation","slug":"implementation-1"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-graphs","title":"Introduction to Graphs"}}}}]},"problemInfo":{"uniqueId":"usaco-940","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=940"}},"pageContext":{"id":"usaco-940"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}