{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1164-room-allocation/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1164\", source = \"CSES\", title = \"Room Allocation\", author = \"Shreyas Thumathy, Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    Warning: _missingComponent(\"Warning\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, Warning, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this problem, we're asked the minimum number of rooms needed to accommodate\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" customers, who arrive and leave on set days. Let's sort each customer by\\r\\ntheir start time so that we do not have a customer arriving at say, time 3,\\r\\noccupying a room before a customer that arrives at time 2.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, we can iterate through the customers while maintaining a minimum priority\\r\\nqueue that stores the departure times of customers we've already processed. For\\r\\neach customer, we check to see if the minimum element in the priority queue is\\r\\nless than the arrival time of the new customer.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"If this is true, that means a room previously occupied has opened up, so we\\r\\nremove the minimum element from the priority queue and replace it with the new\\r\\ncustomer's departure time. The new customer will be allocated to the same room\\r\\nas the customer who departed.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Otherwise, all the rooms are full, so we need to allocate another room for the\\r\\ncustomer and add it to the priority queue.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can determine \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \" by finding the maximum size the priority queue reaches as\\r\\nwe iterate through the customers.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n\\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <algorithm>\\r\\n#include <queue>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 2e5;\\r\\n\\r\\nint N;\\r\\nint ans[MAX_N];\\r\\nvector<pair<pair<int, int>, int>> v(MAX_N);\\r\\n\\r\\nint main() {\\r\\n\\tcin >> N;\\r\\n\\tv.resize(N);\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tcin >> v[i].first.first >> v[i].first.second;\\r\\n\\t\\tv[i].second = i; // store the original index\\r\\n\\t}\\r\\n\\tsort(v.begin(), v.end());\\r\\n\\r\\n\\tint rooms = 0, last_room = 0;\\r\\n\\tpriority_queue<pair<int, int>> pq; // min heap to store departure times.\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tif (pq.empty()) {\\r\\n\\t\\t\\tlast_room++;\\r\\n\\t\\t\\t// make the departure time negative so that we create a min heap\\r\\n\\t\\t\\t// (cleanest way to do a min heap... default is max in c++)\\r\\n\\t\\t\\tpq.push(make_pair(-v[i].first.second, last_room));\\r\\n\\t\\t\\tans[v[i].second] = last_room;\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\t// accessing the minimum departure time\\r\\n\\t\\t\\tpair<int, int> minimum = pq.top();\\r\\n\\t\\t\\tif (-minimum.first < v[i].first.first) {\\r\\n\\t\\t\\t\\tpq.pop();\\r\\n\\t\\t\\t\\tpq.push(make_pair(-v[i].first.second, minimum.second));\\r\\n\\t\\t\\t\\tans[v[i].second] = minimum.second;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tlast_room++;\\r\\n\\t\\t\\t\\tpq.push(make_pair(-v[i].first.second, last_room));\\r\\n\\t\\t\\t\\tans[v[i].second] = last_room;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trooms = max(rooms, int(pq.size()));\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tcout << rooms << \\\"\\\\n\\\";\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tcout << ans[i] << \\\" \\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsxs(JavaSection, {\n        children: [_jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [\"Input classes like \", _jsx(_components.code, {\n              children: \"Scanner\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"BufferedReader\"\n            }), \" are too slow for this problem,\\r\\nso we have to use \", _jsx(_components.a, {\n              href: \"/general/fast-io?lang=java#method-5---inputstream\",\n              children: _jsx(_components.code, {\n                children: \"FastIO\"\n              })\n            }), \" (which reads bytes directly from an input stream) instead.\"]\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class RoomAllocation {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tFastIO io = new FastIO();\\r\\n\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tCustomer[] customers = new Customer[n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tint arrival = io.nextInt();\\r\\n\\t\\t\\tint departure = io.nextInt();\\r\\n\\t\\t\\tcustomers[i] = new Customer(arrival, departure, i);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// sort customers by arrival time\\r\\n\\t\\tArrays.sort(customers, Comparator.comparingInt(c -> c.arrival));\\r\\n\\r\\n\\t\\tPriorityQueue<Room> pq = new PriorityQueue<>(\\r\\n\\t\\t\\t// order rooms by departure\\r\\n\\t\\t\\tComparator.comparingInt(r -> r.departure)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tint k = 0;\\r\\n\\t\\t// the room numbers allocated to each customer\\r\\n\\t\\tint[] roomAllocations = new int[n];\\r\\n\\t\\t// the number of the last new room we've allocated\\r\\n\\t\\tint lastRoom = 1;\\r\\n\\r\\n\\t\\t// add the first customer to the priority queue\\r\\n\\t\\tpq.add(new Room(customers[0].departure, lastRoom));\\r\\n\\t\\troomAllocations[customers[0].index] = lastRoom;\\r\\n\\r\\n\\t\\tfor (int i = 1; i < n; i++) {\\r\\n\\t\\t\\t// find the minimum departure time\\r\\n\\t\\t\\tRoom min = pq.peek();\\r\\n\\r\\n\\t\\t\\tif (min.departure < customers[i].arrival) {\\r\\n\\t\\t\\t\\tpq.remove();\\r\\n\\t\\t\\t\\tpq.add(new Room(customers[i].departure, min.number));\\r\\n\\t\\t\\t\\troomAllocations[customers[i].index] = min.number;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tlastRoom++;\\r\\n\\t\\t\\t\\tpq.add(new Room(customers[i].departure, lastRoom));\\r\\n\\t\\t\\t\\troomAllocations[customers[i].index] = lastRoom;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tk = Math.max(k, pq.size());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(k);\\r\\n\\t\\t// use StringBuilder to speed up output\\r\\n\\t\\tStringBuilder str = new StringBuilder();\\r\\n\\t\\tfor (int allocation : roomAllocations) {\\r\\n\\t\\t\\tstr.append(allocation).append(\\\" \\\");\\r\\n\\t\\t}\\r\\n\\t\\tio.println(str);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class Customer {\\r\\n\\t\\tint arrival, departure, index;\\r\\n\\r\\n\\t\\tCustomer(int arrival, int departure, int index) {\\r\\n\\t\\t\\tthis.arrival = arrival;\\r\\n\\t\\t\\tthis.departure = departure;\\r\\n\\t\\t\\tthis.index = index;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tstatic class Room {\\r\\n\\t\\t// departure: the time that the customer occupying the room leaves\\r\\n\\t\\t// number: the number of the room\\r\\n\\t\\tint departure, number;\\r\\n\\r\\n\\t\\tRoom(int departure, int number) {\\r\\n\\t\\t\\tthis.departure = departure;\\r\\n\\t\\t\\tthis.number = number;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// BeginCodeSnip{FastIO}\\r\\n\\tclass FastIO extends PrintWriter {\\r\\n\\t\\tprivate InputStream stream;\\r\\n\\t\\tprivate byte[] buf = new byte[1<<16];\\r\\n\\t\\tprivate int curChar, numChars;\\r\\n\\r\\n\\t\\t// standard input\\r\\n\\t\\tpublic FastIO() { this(System.in,System.out); }\\r\\n\\t\\tpublic FastIO(InputStream i, OutputStream o) {\\r\\n\\t\\t\\tsuper(o);\\r\\n\\t\\t\\tstream = i;\\r\\n\\t\\t}\\r\\n\\t\\t// file input\\r\\n\\t\\tpublic FastIO(String i, String o) throws IOException {\\r\\n\\t\\t\\tsuper(new FileWriter(o));\\r\\n\\t\\t\\tstream = new FileInputStream(i);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// throws InputMismatchException() if previously detected end of file\\r\\n\\t\\tprivate int nextByte() {\\r\\n\\t\\t\\tif (numChars == -1) throw new InputMismatchException();\\r\\n\\t\\t\\tif (curChar >= numChars) {\\r\\n\\t\\t\\t\\tcurChar = 0;\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\tnumChars = stream.read(buf);\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (numChars == -1) return -1; // end of file\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn buf[curChar++];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// to read in entire lines, replace c <= ' '\\r\\n\\t\\t// with a function that checks whether c is a line break\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\tint c; do { c = nextByte(); } while (c <= ' ');\\r\\n\\t\\t\\tStringBuilder res = new StringBuilder();\\r\\n\\t\\t\\tdo { res.appendCodePoint(c); c = nextByte(); } while (c > ' ');\\r\\n\\t\\t\\treturn res.toString();\\r\\n\\t\\t}\\r\\n\\t\\tpublic int nextInt() { // nextLong() would be implemented similarly\\r\\n\\t\\t\\tint c; do { c = nextByte(); } while (c <= ' ');\\r\\n\\t\\t\\tint sgn = 1; if (c == '-') { sgn = -1; c = nextByte(); }\\r\\n\\t\\t\\tint res = 0;\\r\\n\\t\\t\\tdo {\\r\\n\\t\\t\\t\\tif (c < '0' || c > '9')\\r\\n\\t\\t\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t\\t\\tres = 10*res+c-'0';\\r\\n\\t\\t\\t\\tc = nextByte();\\r\\n\\t\\t\\t} while (c > ' ');\\r\\n\\t\\t\\treturn res * sgn;\\r\\n\\t\\t}\\r\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\r\\n\\t}\\r\\n\\t// EndCodeSnip\\r\\n}\\n\"\n          })\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1164","source":"CSES","title":"Room Allocation","author":"Shreyas Thumathy, Nathan Gong"},"parent":{"name":"cses-1164","relativePath":"cses-1164.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorted-sets","title":"More Operations on Sorted Sets"}}}}]},"problemInfo":{"uniqueId":"cses-1164","url":"https://cses.fi/problemset/task/1164"}},"pageContext":{"id":"cses-1164"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}