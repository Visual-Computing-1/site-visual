{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-693-balanced-photo/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-693\", source = \"USACO Gold 2017 January\", title = \"Balanced Photo\", author = \"Andy Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    em: \"em\",\n    code: \"code\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Warning: _missingComponent(\"Warning\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, Warning, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://usaco.org/current/data/sol_bphoto_gold_jan17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The official solution uses a\\r\\n\", _jsx(_components.a, {\n        href: \"/gold/PURS/#binary-indexed-tree\",\n        children: \"binary indexed tree\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An alternative solution uses an order statistic tree. This is provided in C++\\r\\nwith the PBDS data structure; in Java you'll have to implement your own.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-c-only\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-c-only\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution (C++ only)\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We aim to quickly determine, for each cow, the number of \", _jsx(_components.em, {\n        children: \"taller\"\n      }), \" cows to its\\r\\nleft and right.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To do this, we can sweep through the cows from left to right and maintain two\\r\\nbalanced binary search trees: one for storing the heights of cows on each side\\r\\nof the current cow. Then, use binary search to count the number of heights in\\r\\neach set that are greater than the height of the current cow.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use \", _jsx(_components.a, {\n        href: \"/gold/PURS/#order-statistic-tree\",\n        children: \"order statistic trees\"\n      }), \" to achieve\\r\\nthis in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(N \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(N \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsxs(_components.p, {\n        children: [\"We may \", _jsx(_components.strong, {\n          children: \"not\"\n        }), \" use \", _jsx(_components.a, {\n          href: \"http://www.cplusplus.com/reference/set/set/\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: _jsx(_components.code, {\n            children: \"std::set\"\n          })\n        }), \"\\r\\nbecause it does not support indexing. Additionally, since BBSTs do \", _jsx(_components.em, {\n          children: \"not\"\n        }), \" support\\r\\nrandom access, using operations such as\\r\\n\", _jsx(_components.a, {\n          href: \"http://www.cplusplus.com/reference/iterator/distance/\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: _jsx(_components.code, {\n            children: \"std::distance\"\n          })\n        }), \" to\\r\\nindex takes linear time.\"]\n      })\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n#include <ext/pb_ds/assoc_container.hpp> // for policy-based data structures\\r\\nusing namespace __gnu_pbds;\\t\\t\\t\\t // for policy-based data structures\\r\\nusing namespace std;\\r\\n\\r\\ntypedef tree<int, null_type, less<int>, rb_tree_tag,\\r\\n\\t\\t\\t tree_order_statistics_node_update>\\r\\n\\tindexed_set; // indexed_set -> order_of_key & find_by_order\\r\\nint N, h, ans;\\r\\nvector<int> height;\\r\\nindexed_set cow; // store height of cows on the right\\r\\nindexed_set woc; // store height of cows on the left\\r\\nint main()\\r\\n{\\r\\n\\tFILE *in, *out;\\r\\n\\tin = fopen(\\\"bphoto.in\\\", \\\"r\\\");\\r\\n\\tout = fopen(\\\"bphoto.out\\\", \\\"w\\\");\\r\\n\\tfscanf(in, \\\"%d\\\", &N);\\r\\n\\tfor (int i = 0; i < N; i++)\\r\\n\\t{\\r\\n\\t\\tfscanf(in, \\\"%d\\\", &h);\\r\\n\\t\\tcow.insert(h);\\r\\n\\t\\theight.push_back(h);\\r\\n\\t}\\r\\n\\tfor (int i : height)\\r\\n\\t{\\r\\n\\t\\tcow.erase(i);\\t\\t\\t\\t\\t\\t\\t   //remove current cow from right\\r\\n\\t\\tint le = woc.size() - woc.order_of_key(i); // order_of_key counts the number of elements in the set that are strictly less than i\\r\\n\\t\\tint ri = cow.size() - cow.order_of_key(i); // we want to count the number of elemtns that are larger than i\\r\\n\\t\\twoc.insert(i);\\t\\t\\t\\t\\t\\t\\t   //add current cow to left\\r\\n\\t\\tif (max(le, ri) > 2 * min(le, ri))\\r\\n\\t\\t\\tans++;\\r\\n\\t}\\r\\n\\tfprintf(out, \\\"%d\\\\n\\\", ans);\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-693","source":"USACO Gold 2017 January","title":"Balanced Photo","author":"Andy Wang"},"parent":{"name":"usaco-693","relativePath":"usaco-693.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution (C++ only)","slug":"solution-c-only"}],"java":[{"depth":2,"value":"Solution (C++ only)","slug":"solution-c-only"}],"py":[{"depth":2,"value":"Solution (C++ only)","slug":"solution-c-only"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"PURS","title":"Point Update Range Sum"}}}}]},"problemInfo":{"uniqueId":"usaco-693","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=693"}},"pageContext":{"id":"usaco-693"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}