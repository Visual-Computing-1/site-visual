{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/baltic-oi-2016park/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"baltic-16-park\", source = \"Baltic OI 2016\", title = \"Park\", author = \"Michael Cao\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Warning: _missingComponent(\"Warning\")\n  }, _props.components), {HeaderLink, MATHSPAN, Warning, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://boi.cses.fi/files/boi2016_solutions.zip\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"tldr\",\n      children: [_jsx(_components.a, {\n        href: \"#tldr\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"TL;DR\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Draw lines between circles and to borders, and use DSU to answer queries\\r\\noffline.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"intuition\",\n      children: [_jsx(_components.a, {\n        href: \"#intuition\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Intuition\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this problem, we're given a park with circles of differing radii and asked\\r\\nwhether some circle can move from a corner of the park to another corner. Upon\\r\\nfirst glance, this task seems quite challenging and probably involves some\\r\\nnot-so-fun geometry. However, the final solution turns out to be quite nice, and\\r\\nnot too hard to implement either.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's call the circle you are moving around between exits \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". We claim that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \"\\r\\ncan move between two circles \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \" as long as\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dist(a, b) - a_r - b_r \\\\leq x_r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\\\"false\\\">(</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">)</mo><mo>−</mo><msub><mi>a</mi><mi>r</mi></msub><mo>−</mo><msub><mi>b</mi><mi>r</mi></msub><mo>≤</mo><msub><mi>x</mi><mi>r</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">dist(a, b) - a_r - b_r \\\\leq x_r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7333em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x_r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>x</mi><mi>r</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">x_r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" denotes the radius of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \", \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a_r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mi>r</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">a_r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \"\\r\\nand \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b_r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>b</mi><mi>r</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">b_r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" denote the radius of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"dist(a, b)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\\\"false\\\">(</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dist(a, b)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" denotes the distance\\r\\nbetween the centers of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \". Also, let's add horizontal and vertical line\\r\\nsegments from each border of the park to each circle with the distance between\\r\\nthem as well.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally, observe that you can go from exit \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"e_1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">e_1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" to exit \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"e_2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>e</mi><mn>2</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">e_2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" as long as there\\r\\nisn't some chain of line segments with weight \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\leq x_r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>≤</mo><msub><mi>x</mi><mi>r</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\leq x_r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" that completely blocks\\r\\noff the path between exits. For example, you can go from the top-right exit to\\r\\nthe bottom-left exit as long as there isn't a chain of line segments from the\\r\\ntop border to the bottom, top to right, bottom to left, or left to right.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"creating-a-graph\",\n      children: [_jsx(_components.a, {\n        href: \"#creating-a-graph\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Creating a Graph\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now, you have some circles with weights between each other. Let's transform each\\r\\nof the line segments we defined before into an edge, and each circle and border\\r\\ninto a node, creating \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n ^ 2 + 4n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n ^ 2 + 4n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" edges overall and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n + 4\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>4</mn></mrow><annotation encoding=\\\"application/x-tex\\\">n + 4</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span></span></span></span>\"\n      }), \" nodes.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The problem of checking whether we can go between two exits now becomes\\r\\nchecking, for some \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\\\"application/x-tex\\\">r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span>\"\n      }), \", whether edges with weight \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\leq r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>≤</mo><mi>r</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\leq r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span>\"\n      }), \" connect certain\\r\\nborders (this involves some casework).\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"offline-queries-and-dsu\",\n      children: [_jsx(_components.a, {\n        href: \"#offline-queries-and-dsu\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Offline Queries and DSU\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To efficently answer queries of whether two borders are connected, let's process\\r\\nthem in order of increasing \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x_r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>x</mi><mi>r</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">x_r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" and store a DSU. Now, we can add edges one by\\r\\none as long as their weight \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\leq x_r\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>≤</mo><msub><mi>x</mi><mi>r</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\leq x_r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", and then check connectivity between the\\r\\nborder nodes.\"]\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsx(_components.p, {\n        children: \"When computing distance between two circles, make sure to subtract the radius\\r\\nof both. We want the distance between the borders, not the centers.\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\n\\r\\nusing vi = vector<int>;\\r\\n#define pb push_back\\r\\n#define rsz resize\\r\\n#define all(x) begin(x), end(x)\\r\\n#define sz(x) (int)(x).size()\\r\\n\\r\\nusing pi = pair<int,int>;\\r\\n#define f first\\r\\n#define s second\\r\\n#define mp make_pair\\r\\n\\r\\nconst int MX = 2006;\\r\\n\\r\\nvector<pair<ll, pair<pi, pi>>> ed; map<pi, int> cc;\\r\\n\\r\\ntemplate<int SZ> struct DSU{\\r\\n\\tint p[SZ], sz[SZ];\\r\\n\\tvoid init(){\\r\\n\\t\\tfor(int i = 0; i < SZ; i++){\\r\\n\\t\\t\\tp[i] = i; sz[i] = 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tint find(int x){\\r\\n\\t\\treturn p[x] = (p[x] == x ? x : find(p[x]));\\r\\n\\t}\\r\\n\\tvoid merge(int u, int v){\\r\\n\\t\\tint a = find(u); int b = find(v);\\r\\n\\t\\tif(a != b){\\r\\n\\t\\t\\tif(sz[a] < sz[b]){\\r\\n\\t\\t\\t\\tswap(a,b);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tp[b] = a;\\r\\n\\t\\t\\tsz[a] += sz[b];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\\r\\nDSU<MX> dsu; bool ok[100005][4];\\r\\n\\r\\nint main(){\\r\\n\\tios::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\tint n, m, w, h; cin >> n >> m >> w >> h;\\r\\n\\tvector<pair<pair<ll, ll>, int>> trees(n);\\r\\n\\tset<pi> pts;\\r\\n\\tauto dist = [&] (int x1, int y1, int x2, int y2) {\\r\\n\\t\\treturn sqrt((1LL *(x2 - x1) * (x2 - x1)) + (1LL * (y2 - y1) * (y2 - y1)));\\r\\n\\t};\\r\\n\\tauto add = [&] (int x1, int y1, int x2, int y2, ll r1, ll r2) {\\r\\n\\t\\tll ndist = dist(x1, y1, x2, y2) - r1 - r2;\\r\\n\\t\\ted.pb(mp(ndist, mp(mp(x1, y1), mp(x2, y2))));\\r\\n\\t};\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> trees[i].f.f >> trees[i].f.s >> trees[i].s;\\r\\n\\t\\tpts.insert(mp(trees[i].f.f, trees[i].f.s));\\r\\n\\t\\tcc[mp(0, trees[i].f.s)] = 3;\\r\\n\\t\\tcc[mp(trees[i].f.f, h)] = 2;\\r\\n\\t\\tcc[mp(w, trees[i].f.s)] = 1;\\r\\n\\t\\tcc[mp(trees[i].f.f, 0)] = 0;\\r\\n\\t\\tadd(trees[i].f.f, trees[i].f.s, 0, trees[i].f.s, trees[i].s, 0);\\r\\n\\t\\tadd(trees[i].f.f, trees[i].f.s, trees[i].f.f, 0, trees[i].s, 0);\\r\\n\\t\\tadd(trees[i].f.f, trees[i].f.s, w, trees[i].f.s, trees[i].s, 0);\\r\\n\\t\\tadd(trees[i].f.f, trees[i].f.s, trees[i].f.f, h, trees[i].s, 0);\\r\\n\\t}\\r\\n\\tint cnt = 4;\\r\\n\\tfor (pi x : pts) {\\r\\n\\t\\tcc[x] = cnt++;\\r\\n\\t}\\r\\n\\tassert(cnt <= n + 4);\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = i + 1; j < n; j++) {\\r\\n\\t\\t\\tadd(trees[i].f.f, trees[i].f.s, trees[j].f.f, trees[j].f.s, trees[i].s, trees[j].s);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvector<pair<pi, int>> qrs;\\r\\n\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\tint r, e; cin >> r >> e;\\r\\n\\t\\te--;\\r\\n\\t\\tqrs.pb(mp(mp(2 * r, e), i));\\r\\n\\t}\\r\\n\\tsort(all(qrs));\\r\\n\\tsort(all(ed));\\r\\n\\tdsu.init();\\r\\n\\tint p = 0;\\r\\n\\tmemset(ok, true, sizeof(ok));\\r\\n\\tfor (auto v : ed) {\\r\\n\\t\\twhile (p < sz(qrs) && qrs[p].f.f <= v.f){\\r\\n\\t\\t\\tbool conn[4][4];\\r\\n\\t\\t\\tpair<pi, int> curr = qrs[p];\\r\\n\\t\\t\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\t\\t\\tconn[i][i] = true;\\r\\n\\t\\t\\t\\tfor (int j = i + 1; j < 4; j++) {\\r\\n\\t\\t\\t\\t\\tconn[i][j] = (dsu.find(i) == dsu.find(j));\\r\\n\\t\\t\\t\\t\\tconn[j][i] = conn[i][j];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tauto bad = [&] (const int &x) {\\r\\n\\t\\t\\t\\treturn conn[(x - 1 < 0 ? 3 : x - 1)][x];\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\t\\t\\tif (curr.f.s == i) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (bad(curr.f.s) || bad(i)) {\\r\\n\\t\\t\\t\\t\\tok[curr.s][i] = false;\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbool upok = conn[0][2];\\r\\n\\t\\t\\t\\tbool sok = conn[1][3];\\r\\n\\t\\t\\t\\tif (abs(curr.f.s - i) == 2) {\\r\\n\\t\\t\\t\\t\\tif (upok || sok) {\\r\\n\\t\\t\\t\\t\\t\\tok[curr.s][i] = false;\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse if(curr.f.s + i == 3) {\\r\\n\\t\\t\\t\\t\\tif (sok) {\\r\\n\\t\\t\\t\\t\\t\\tok[curr.s][i] = false;\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tif (upok) {\\r\\n\\t\\t\\t\\t\\t\\tok[curr.s][i] = false;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t++p;\\r\\n\\t\\t\\tif (p >= sz(qrs)) break;\\r\\n\\t\\t}\\r\\n\\t\\tdsu.merge(cc[v.s.f], cc[v.s.s]);\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\tstring ret = \\\"\\\";\\r\\n\\t\\tfor (int j = 0; j < 4; j++) {\\r\\n\\t\\t\\tif (ok[i][j]) ret += to_string(j + 1);\\r\\n\\t\\t}\\r\\n\\t\\tcout << ret << '\\\\n';\\r\\n\\t}\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"baltic-16-park","source":"Baltic OI 2016","title":"Park","author":"Michael Cao"},"parent":{"name":"baltic-16-park","relativePath":"baltic-16-park.mdx"},"toc":{"cpp":[{"depth":2,"value":"TL;DR","slug":"tldr"},{"depth":2,"value":"Intuition","slug":"intuition"},{"depth":2,"value":"Creating a Graph","slug":"creating-a-graph"},{"depth":2,"value":"Offline Queries and DSU","slug":"offline-queries-and-dsu"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"TL;DR","slug":"tldr"},{"depth":2,"value":"Intuition","slug":"intuition"},{"depth":2,"value":"Creating a Graph","slug":"creating-a-graph"},{"depth":2,"value":"Offline Queries and DSU","slug":"offline-queries-and-dsu"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"TL;DR","slug":"tldr"},{"depth":2,"value":"Intuition","slug":"intuition"},{"depth":2,"value":"Creating a Graph","slug":"creating-a-graph"},{"depth":2,"value":"Offline Queries and DSU","slug":"offline-queries-and-dsu"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dsu","title":"Disjoint Set Union"}}}}]},"problemInfo":{"uniqueId":"baltic-16-park","url":"https://oj.uz/problem/view/BOI16_park"}},"pageContext":{"id":"baltic-16-park"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}