{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/dmoj-rank/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"dmoj-rank\", source = \"DMOJ\", title = \"Rank\", author = \"Ryan Chou, Ryan Kim\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use the games to construct a directed graph. If \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" wins against \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \" then we can construct an edge from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \". Since the bounds of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" are small, we can start a DFS from every vertex. If we reach that vertex again, then we can mark that vertex as “cyclic” and count said vertex in the result.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2 + M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2 + M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 20;\\r\\nvector<vector<int>> adj(MAX_N);\\r\\nbool vis[MAX_N], cyclic[MAX_N];\\r\\n\\r\\nint original_node;\\r\\n\\r\\nvoid dfs(int node) {\\r\\n\\tvis[node] = true;\\r\\n\\r\\n\\t// found a cycle\\r\\n\\tif (node == original_node) {\\r\\n\\t\\tcyclic[node] = true;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tfor (int u : adj[node]) {\\r\\n\\t\\tif (!vis[u]) dfs(u);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint n, k;\\r\\n\\tcin >> n >> k;\\r\\n\\t\\r\\n\\t// process directed graph\\r\\n\\tfor (int i = 0; i < k; i++) {\\r\\n\\t\\tint a, b, sa, sb;\\r\\n\\t\\tcin >> a >> b >> sa >> sb;\\r\\n\\r\\n\\t\\tif (sa > sb) {\\r\\n\\t\\t\\tadj[b - 1].push_back(a - 1);\\r\\n\\t\\t} else if (sa < sb) {\\r\\n\\t\\t\\tadj[a - 1].push_back(b - 1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\toriginal_node = i;\\r\\n\\t\\tfill(begin(vis), end(vis), false);\\r\\n\\r\\n\\t\\tfor (int u : adj[i]) {\\r\\n\\t\\t\\tdfs(u);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// count number of cyclic nodes.\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tif (cyclic[i]) ans++;\\r\\n\\t}\\r\\n\\tcout << ans << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"n, m = map(int, input().split())\\r\\n\\r\\nadj = [[] for _ in range(n)]\\r\\nvis, cyclic = [False for _ in range(n)], [False for _ in range(n)]\\r\\noriginal_node = -1\\r\\n\\r\\ndef dfs(node):\\r\\n\\tif vis[node]: \\r\\n\\t\\treturn\\r\\n\\r\\n\\tvis[node] = True\\r\\n\\r\\n\\t# found a cycle\\r\\n\\tif node == original_node:\\r\\n\\t\\tcyclic[node] = True\\r\\n\\r\\n\\tfor u in adj[node]:\\r\\n\\t\\tif not vis[u]: \\r\\n\\t\\t\\tdfs(u)\\r\\n\\r\\n# process directed graph\\r\\nfor i in range(m):\\r\\n\\ta, b, sa, sb = map(int, input().split())\\r\\n\\r\\n\\tif sa > sb:\\r\\n\\t\\tadj[b - 1].append(a - 1)\\r\\n\\telif sb > sa:\\r\\n\\t\\tadj[a - 1].append(b - 1)\\r\\n\\r\\nfor i in range(n):\\r\\n\\toriginal_node = i\\r\\n\\tvis = [False for _ in range(n)]\\r\\n\\r\\n\\tfor u in adj[i]:\\r\\n\\t\\tdfs(u)\\r\\n\\r\\nans = 0\\r\\nfor i in range(n):\\r\\n\\tif cyclic[i]:\\r\\n\\t\\tans += 1\\r\\n\\r\\nprint(ans)\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Rank {\\r\\n\\tstatic Map<Integer, HashSet<Integer>> graph = new HashMap<>();\\r\\n\\tstatic int ans = 0;\\r\\n\\tstatic Set<Integer> visited = new HashSet<>();\\r\\n\\tstatic boolean cyclic = false;\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tint people = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint games = Integer.parseInt(st.nextToken());\\r\\n\\r\\n\\t\\tfor (int x = 0; x < games; x++) {\\r\\n\\t\\t\\tst = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tint p1 = Integer.parseInt(st.nextToken());  // Person 1\\r\\n\\t\\t\\tint p2 = Integer.parseInt(st.nextToken());  // Person 2\\r\\n\\t\\t\\tint p1s = Integer.parseInt(st.nextToken());  // Person 1 score\\r\\n\\t\\t\\tint p2s = Integer.parseInt(st.nextToken());  // Person 2 score\\r\\n\\r\\n\\t\\t\\tint winner;\\r\\n\\t\\t\\tint loser;\\r\\n\\r\\n\\t\\t\\tif (p1s > p2s) {\\r\\n\\t\\t\\t\\twinner = p1;\\r\\n\\t\\t\\t\\tloser = p2;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\twinner = p2;\\r\\n\\t\\t\\t\\tloser = p1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (!graph.containsKey(winner)) {\\r\\n\\t\\t\\t\\tgraph.put(winner, new HashSet<>());\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Graph should put an edge from winner -> loser\\r\\n\\t\\t\\tgraph.get(winner).add(loser);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int x = 1; x <= people; x++) {\\r\\n\\t\\t\\t// Count cyclic nodes\\r\\n\\t\\t\\tcyclic = false;\\r\\n\\t\\t\\tvisited = new HashSet<>();\\r\\n\\t\\t\\tif (dfs(x, x)) {\\r\\n\\t\\t\\t\\tans++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(ans);\\r\\n\\t}\\r\\n\\r\\n\\tpublic static boolean dfs(int current, int start) {\\r\\n\\t\\t// Keep traversing graph until either you run into \\r\\n\\t\\t// the starting node, or you already visited all of the nodes\\r\\n\\t\\tif (visited.contains(current) && current == start) {\\r\\n\\t\\t\\t// Is cyclic\\r\\n\\t\\t\\tcyclic = true;\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\t\\tif (visited.contains(current)) {\\r\\n\\t\\t\\t// Visited but not cyclic\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\t\\tvisited.add(current);\\r\\n\\t\\tif (!graph.containsKey(current)) {\\r\\n\\t\\t\\tgraph.put(current, new HashSet<>());\\r\\n\\t\\t}\\r\\n\\t\\tfor (int x : graph.get(current)) {\\r\\n\\t\\t\\tdfs(x, start);\\r\\n\\t\\t}\\r\\n\\t\\treturn cyclic;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"dmoj-rank","source":"DMOJ","title":"Rank","author":"Ryan Chou, Ryan Kim"},"parent":{"name":"dmoj-rank","relativePath":"dmoj-rank.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dfs","title":"Depth First Search (DFS)"}}}}]},"problemInfo":{"uniqueId":"dmoj-rank","url":"https://dmoj.ca/problem/acsl1p4"}},"pageContext":{"id":"dmoj-rank"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}