{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-735-the-lost-cow/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-735\", source = \"USACO Bronze 2017 Open\", title = \"The Lost Cow\", author = \"Jesse Choe, Ananth Kashyap, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_lostcow_bronze_open17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log|x-y|)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>x</mi><mo>−</mo><mi>y</mi><mi mathvariant=\\\"normal\\\">∣</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log|x-y|)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mord\\\">∣</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"// Created by Jesse Choe - Bronze Template\\r\\n\\r\\n#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\n// Type aliases\\r\\n\\r\\nusing ll = long long;\\r\\nusing str = string;\\r\\nusing vi = vector<int>;\\r\\nusing pi = pair<int,int>;\\r\\nusing vpi = vector<pi>;\\r\\nusing si = set<int>;\\r\\n\\r\\n// Vector Operations\\r\\n\\r\\n#define sz (int)(x).size()\\r\\n#define pb push_back\\r\\n#define all(x) begin(x), end(x)\\r\\n#define sor(x) sort(all(x))\\r\\n#define rev(x) reverse(all(x))\\r\\n#define del(x, i) erase(begin(x)+i)\\r\\n#define rem(x,i) erase(begin(x), begin(x)+i)\\r\\n\\r\\n// Pairs\\r\\n\\r\\n#define mp make_pair\\r\\n#define sec second\\r\\n#define fir first\\r\\n\\r\\n// Sets and Maps\\r\\n\\r\\n#define ins insert\\r\\n#define ez erase\\r\\n#define cnt count\\r\\n\\r\\n// Math\\r\\n\\r\\n#define MOD 1e9+7\\r\\n#define MAX_INT 1e18*9\\r\\n\\r\\n// Permutation\\r\\n\\r\\n#define possibilities(x) while(next_permutation(all(x))\\r\\n\\r\\n// Loops\\r\\n\\r\\n#define Trav(a,x) for (auto& a: x)\\r\\n#define For(i,a,b) for (int i = (a); i < (b); ++i)\\r\\n\\r\\n// Input/Output - s is basically the file name without the \\\".in\\\" and \\\".out\\\"\\r\\n\\r\\nvoid setIO(string s) {\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tfreopen((s+\\\".in\\\").c_str(),\\\"r\\\",stdin);\\r\\n\\tfreopen((s+\\\".out\\\").c_str(),\\\"w\\\",stdout);\\r\\n}\\r\\n\\r\\nint main(){\\r\\n\\r\\n\\tsetIO(\\\"lostcow\\\");\\r\\n\\r\\n\\tint x, y; cin >> x >> y;\\r\\n\\r\\n\\tvi zigzag;\\r\\n\\r\\n\\tif(x == y){\\r\\n\\t\\tcout << 0 << endl;\\r\\n\\t} else if(x < y){\\r\\n\\t\\tint dist = 1;\\r\\n\\r\\n\\t\\twhile(x+dist < y){\\r\\n\\t\\t\\tzigzag.pb(x+dist);\\r\\n\\t\\t\\tdist*=-2;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tzigzag.pb(x+dist);\\r\\n\\r\\n\\t\\tint ans = 1;\\r\\n\\r\\n\\t\\tFor(i, 0, zigzag.size()-1){\\r\\n\\t\\t\\tans+=abs(zigzag[i] - zigzag[i+1]);\\r\\n\\t\\t}\\r\\n\\t\\tans-=(zigzag[zigzag.size()-1]-y);\\r\\n\\t\\tcout << ans << endl;\\r\\n\\t} else {\\r\\n\\t\\tint dist = 1;\\r\\n\\r\\n\\t\\twhile(x+dist > y){\\r\\n\\t\\t\\tzigzag.pb(x+dist);\\r\\n\\t\\t\\tdist*=-2;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tzigzag.pb(x+dist);\\r\\n\\r\\n\\t\\tint ans = 1;\\r\\n\\r\\n\\t\\tFor(i, 0, zigzag.size()-1){\\r\\n\\t\\t\\tans+=abs(zigzag[i] - zigzag[i+1]);\\r\\n\\t\\t}\\r\\n\\t\\tans-=(y-zigzag[zigzag.size()-1]);\\r\\n\\t\\tcout << ans << endl;\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"# Take in the input data using python standard file I/O system\\r\\nfile_in = open('lostcow.in')\\r\\ndata = file_in.read().strip().split('\\\\n')\\r\\nx, y = map(int, data[0].split(' '))\\r\\n\\r\\n# Compute the number of times Farmer John must change direction\\r\\nif y > x:\\r\\n\\tp = 0\\r\\n\\twhile (2 ** p) + x < y:\\r\\n\\t\\tp += 2\\r\\nelse:\\r\\n\\tp = 1\\r\\n\\twhile x - (2 ** p) > y:\\r\\n\\t\\tp += 2\\r\\n\\r\\ntotal_distance = 0\\r\\n\\r\\n# Compute the total distance that farmer John must travel\\r\\nif p == 0:\\r\\n\\tprint(1)\\r\\nelse:\\r\\n\\ttotal_distance = 1\\r\\n\\tfor i in range(1, p):\\r\\n\\t\\ttotal_distance += (2 ** i) + (2 ** (i - 1))\\r\\n\\ttotal_distance += (2 ** (p - 1)) + abs(x - y)\\r\\n\\r\\n# Add the answer to the output file using python standard file I/O system\\r\\nfile_out = open('lostcow.out', 'w')\\r\\nfile_out.write(str(total_distance))\\r\\nfile_out.close()\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.StringTokenizer;\\r\\n\\r\\npublic class theLostCow {\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"lostcow\\\");\\r\\n\\t\\tint x = io.nextInt();\\r\\n\\t\\tint y = io.nextInt();\\r\\n\\r\\n\\t\\tint direction = 1;\\r\\n\\t\\tint totalDistance = 0;\\r\\n\\t\\tint directionDistance = 1;\\r\\n\\r\\n\\t\\twhile (true) {\\r\\n\\t\\t\\t// found bessie\\r\\n\\t\\t\\tif ((direction == 1 && x <= y && y <= (x + directionDistance)) ||\\r\\n\\t\\t\\t\\t(direction == -1 && y <= x && (x - directionDistance <= y))) {\\r\\n\\r\\n\\t\\t\\t\\ttotalDistance += Math.abs(y - x); // distance to bessie from original position\\r\\n\\t\\t\\t\\tio.println(totalDistance);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse { // did not find bessie yet\\r\\n\\t\\t\\t\\ttotalDistance += (directionDistance * 2); // add to the distance count\\r\\n\\t\\t\\t\\tdirectionDistance *= 2; // double the distance\\r\\n\\t\\t\\t\\tdirection *= -1; // switch directions\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\r\\n\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-735","source":"USACO Bronze 2017 Open","title":"The Lost Cow","author":"Jesse Choe, Ananth Kashyap, Brad Ma"},"parent":{"name":"usaco-735","relativePath":"usaco-735.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"simulation","title":"Simulation"}}}}]},"problemInfo":{"uniqueId":"usaco-735","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=735"}},"pageContext":{"id":"usaco-735"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}