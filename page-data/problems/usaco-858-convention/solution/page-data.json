{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-858-convention/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-858\", source = \"USACO Silver 2018 December\", title = \"Convention\", author = \"Qi Wang, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_convention_silver_dec18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Consider a possible maximum waiting time \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"X\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\\\"application/x-tex\\\">X</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">X</span></span></span></span>\"\n      }), \", if we can't file all of the cows into the buses with this constraint, we can't process the cows with a smaller \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"X\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\\\"application/x-tex\\\">X</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">X</span></span></span></span>\"\n      }), \" either. It remains to find how to check if some \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"X\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\\\"application/x-tex\\\">X</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">X</span></span></span></span>\"\n      }), \" can be processed.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Instead of the problem being:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Is it possible to file the cows in \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"M\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n        }), \" buses with a maximum waiting time of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"X\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\\\"application/x-tex\\\">X</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">X</span></span></span></span>\"\n        }), \"?\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We'll transform the problem into:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"What's the minimum number of buses needed to transport the cows with a maximum waiting time of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"X\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\\\"application/x-tex\\\">X</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">X</span></span></span></span>\"\n        }), \"?\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This simplification allows us to break processing a cow into three cases:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Adding this cow will cause the first cow to exceed the maximum waiting time.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Adding this cow will overflow the bus capacity.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Adding this cow will satisfy all of the constraints.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It takes \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time to binary search on \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"X\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\\\"application/x-tex\\\">X</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">X</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time to validate a possible time constraint, so this leaves us with a \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" solution, which fits comfortably under the time limit.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class convention {\\r\\n\\tstatic int N;\\r\\n\\tstatic int numBus;\\r\\n\\tstatic int cap;\\r\\n\\tstatic int[] cow;\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tInputReader in = new InputReader(\\\"convention.in\\\");\\r\\n\\t\\tN = in.nextInt(); numBus = in.nextInt(); cap = in.nextInt();\\r\\n\\t\\tcow = new int[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tcow[i] = in.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\tArrays.sort(cow);\\r\\n\\r\\n\\t\\t//Lower Bound. Since minimal wait time has to be below the max arrival the upper bound can be the largest value in the array\\r\\n\\t\\tint l = 0;\\r\\n\\t\\tint r = cow[cow.length-1];\\r\\n\\t\\twhile(l <= r){\\r\\n\\t\\t\\tint mid = (l+r)/2;\\r\\n\\t\\t\\tif(check(mid)){\\r\\n\\t\\t\\t\\tr = mid-1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse{\\r\\n\\t\\t\\t\\tl = mid+1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"convention.out\\\")));\\r\\n\\t\\tSystem.out.println(l);\\r\\n\\t\\tout.println(l);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\t//Calculates the number of buses needed to ensure the minWait time. If larger than the buses available, false.\\r\\n\\tprivate static boolean check(int minWait){\\r\\n\\t\\tint first = cow[0]; int used = 1; int curCap = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif(cow[i]-first>minWait || curCap >= cap){\\r\\n\\t\\t\\t\\tused++;\\r\\n\\t\\t\\t\\tcurCap=0;\\r\\n\\t\\t\\t\\tfirst = cow[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcurCap++;\\r\\n\\t\\t}\\r\\n\\t\\treturn used <= numBus;\\r\\n\\t}\\r\\n\\tprivate static class InputReader {\\r\\n\\t\\tpublic BufferedReader reader;\\r\\n\\t\\tpublic StringTokenizer tokenizer;\\r\\n\\r\\n\\t\\tpublic InputReader() {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new InputStreamReader(System.in), 32768);\\r\\n\\t\\t\\t} catch (Exception e) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Could not create input stream\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic InputReader(String fileName) {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new FileReader(new File(fileName)), 32768);\\r\\n\\t\\t\\t} catch (Exception ex) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Input file does not exist! Put it in the project folder.\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ttokenizer = null;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\ttokenizer = new StringTokenizer(reader.readLine());\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn tokenizer.nextToken();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic boolean hasNextInt() throws IOException { return reader.ready(); }\\r\\n\\r\\n\\t\\tpublic int nextInt() {\\r\\n\\t\\t\\treturn Integer.parseInt(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic double nextDouble() {\\r\\n\\t\\t\\treturn Double.parseDouble(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic long nextLong() {\\r\\n\\t\\t\\treturn Long.parseLong(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic char nextChar() {\\r\\n\\t\\t\\treturn next().charAt(0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * When you call next(), that entire line will be skipped.\\r\\n\\t\\t * No flushing buffers.\\r\\n\\t\\t * Doesn't work when you want to scan the remaining line.\\r\\n\\t\\t *\\r\\n\\t\\t * @return entire line\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tpublic String nextLine() {\\r\\n\\t\\t\\tString str = \\\"\\\";\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstr = reader.readLine();\\r\\n\\t\\t\\t\\ttokenizer = null;\\r\\n\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn str;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <algorithm>\\r\\n#include <cstdio>\\r\\n#include <iostream>\\r\\n#include <vector>\\r\\n\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nint n, m, c;\\r\\nvector<int> arrivals;\\r\\n\\r\\nbool validate(int k) {\\r\\n\\tint bus = 0;   // number of buses needed\\r\\n\\tint cow = 0;   // current cow\\r\\n\\tint lcow = 0;  // earliest cow on this bus\\r\\n\\r\\n\\twhile (cow < n) {\\r\\n\\t\\tif (cow == lcow) {\\r\\n\\t\\t\\tbus++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// can't satisfy time constraint by adding this cow\\r\\n\\t\\tif (arrivals[cow] - arrivals[lcow] > k) {\\r\\n\\t\\t\\tlcow = cow;\\r\\n\\t\\t// can't fit this cow in the bus\\r\\n\\t\\t} else if (cow - lcow + 1 == c) {\\r\\n\\t\\t\\tlcow = ++cow;\\r\\n\\t\\t// add this cow to the current bus\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tcow++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn bus <= m;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"convention.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"convention.out\\\", \\\"w\\\", stdout);\\r\\n\\t\\r\\n\\tstd::cin >> n >> m >> c;\\r\\n\\tarrivals.resize(n);\\r\\n\\t\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tstd::cin >> arrivals[i];\\r\\n\\t}\\r\\n\\r\\n\\t// sort by arrival time to process cows in order\\r\\n\\tsort(arrivals.begin(), arrivals.end());\\r\\n\\r\\n\\tint lo = 0;\\r\\n\\tint hi = arrivals[n - 1] - arrivals[0];\\r\\n\\r\\n\\twhile (lo < hi) {\\r\\n\\t\\tint mid = lo + (hi - lo) / 2;\\r\\n\\t\\r\\n\\t\\tif (validate(mid)) {\\r\\n\\t\\t\\thi = mid;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tlo = mid + 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tstd::cout << lo << endl;\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-858","source":"USACO Silver 2018 December","title":"Convention","author":"Qi Wang, Ryan Chou"},"parent":{"name":"usaco-858","relativePath":"usaco-858.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"binary-search","title":"Binary Search"}}}}]},"problemInfo":{"uniqueId":"usaco-858","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=858"}},"pageContext":{"id":"usaco-858"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}