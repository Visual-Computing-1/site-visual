{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-570-switching-on-the-lights/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-570\", source = \"USACO Silver 2015 December\", title = \"Switching on the Lights\", author = \"Akshar Yeccherla\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_lightson_silver_dec15.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can traverse through the rooms that are lit and connected to the room \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(1,1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(1,1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" using floodfill, since we are essentially traversing a connected component. We can then turn on all the switches in each room we visit.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, we run into an issue when a newly lit room that becomes part of the main connected component can't be visited since the floodfill already visited the lit rooms neighboring it.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To account for this, we start a floodfill from newly lit rooms if they are connected to the connected component that contains \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(1,1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(1,1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" (i.e. it's accessible to us). By keeping track of the number of rooms we light up along the way, we get our answer.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2 + M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2 + M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint N;\\r\\nint litRooms = 1;\\r\\nconst int MN = 100;\\r\\nbool visited[MN][MN];\\r\\nbool illuminated[MN][MN];\\r\\nvector<pair<int,int>> switches[MN][MN];\\r\\n\\r\\nint dirX[] = {-1, 0, 1, 0};\\r\\nint dirY[] = {0, 1, 0, -1};\\r\\n\\r\\nvoid setIO(string name = \\\"\\\") {\\r\\n\\tcin.tie(0)->sync_with_stdio(0);\\r\\n\\tif (name.size()) {\\r\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// Checks if a room is connected to the main component\\r\\nbool checkConnected(int x, int y) {\\r\\n\\t// Iterate through neighbors\\r\\n\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\tint newX = x + dirX[i];\\r\\n\\t\\tint newY = y + dirY[i];\\r\\n\\r\\n\\t\\t// Ignore neighbor if out of bounds\\r\\n\\t\\tif (newX < 0 || newY < 0 || newX > N - 1 || newY > N - 1) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// If a neighbor is visited, return true\\r\\n\\t\\tif (visited[newX][newY]) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t// If no neighbors have been visited, return false\\r\\n\\treturn false;\\r\\n\\r\\n}\\r\\n\\r\\n// Floodfill method with source room (x,y)\\r\\nvoid floodfill(int x, int y) {\\r\\n\\t// Ignore this room if its out of bounds, already been visited, or isn't lit\\r\\n\\tif (x < 0 || y < 0 || x > N - 1 || y > N - 1 || visited[x][y] || !illuminated[x][y]) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\t/* \\r\\n\\t * Ignore room if it isn't connected to main component\\r\\n\\t * (i.e. it's inaccessible to Bessie)\\r\\n\\t * Don't return on coordinate (1, 1)\\r\\n\\t */\\r\\n\\tif (!checkConnected(x, y) && !(x == 0 && y == 0)) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\t// Set room to visited\\r\\n\\tvisited[x][y] = true;\\r\\n\\r\\n\\t// Iterate through neighbors and floodfill from them\\r\\n\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\tfloodfill(x + dirX[i], y + dirY[i]);\\r\\n\\t}\\r\\n\\r\\n\\t// Turn on all lights from current room\\r\\n\\tfor (int i = 0; i < switches[x][y].size(); i++) {\\r\\n\\t\\tint roomX = switches[x][y][i].first;\\r\\n\\t\\tint roomY = switches[x][y][i].second;\\r\\n\\r\\n\\t\\t/* \\r\\n\\t\\t * If room hasn't been lit yet, add it to our count of rooms that have \\r\\n\\t\\t * been lit\\r\\n\\t\\t */\\r\\n\\t\\tif (!illuminated[roomX][roomY]) {\\r\\n\\t\\t\\tlitRooms++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Set room led to by switch to lit\\r\\n\\t\\tilluminated[roomX][roomY] = true;\\r\\n\\r\\n\\t\\t// Floodfill from new room that is lit\\r\\n\\t\\tfloodfill(roomX, roomY);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"lightson\\\");\\r\\n\\r\\n\\tint m;\\r\\n\\tcin >> N >> m;\\r\\n\\t\\r\\n\\t// Take in input and add switches to corresponding room\\r\\n\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\tint x, y, a, b;\\r\\n\\t\\tcin >> x >> y >> a >> b;\\r\\n\\t\\tswitches[x - 1][y - 1].push_back({a - 1, b - 1});\\r\\n\\t}\\r\\n\\r\\n\\t// Set the top left room to lit (since it's lit initially)\\r\\n\\tilluminated[0][0] = true;\\r\\n\\r\\n\\t// Start floodfill from top-left room\\r\\n\\tfloodfill(0, 0);\\r\\n\\r\\n\\tcout << litRooms << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\nsys.setrecursionlimit(100000)  # Raise recursion limit as the default will error\\r\\n\\r\\nfilein = open(\\\"lightson.in\\\", 'r')\\r\\nN, m = map(int, filein.readline().split())\\r\\n\\r\\nlit_rooms = 1\\r\\nvisited = [[False for i in range(N)] for j in range(N)]\\r\\nilluminated = [[False for i in range(N)] for j in range(N)]\\r\\nswitches = [[[] for i in range(N)] for j in range(N)]\\r\\n\\r\\n# Read in light switches input\\r\\nfor i in range(m):\\r\\n\\tx, y, a, b = map(int, filein.readline().split())\\r\\n\\tswitches[x - 1][y - 1].append((a - 1, b - 1))\\r\\n\\r\\n# Checks if a room is connected to the main component\\r\\ndef check_connected(x, y):\\r\\n\\tdir_x = [-1, 0, 1, 0]\\r\\n\\tdir_y= [0, -1, 0, 1]\\r\\n\\r\\n\\t# Iterate through neighbors\\r\\n\\tfor i in range(4):\\r\\n\\t\\tnew_x = x + dir_x[i]\\r\\n\\t\\tnew_y = y + dir_y[i]\\r\\n\\r\\n\\t\\t# Ignore neighbor if out of bounds\\r\\n\\t\\tif new_x < 0 or new_y < 0 or new_x > N - 1 or new_y > N - 1:\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t\\r\\n\\t\\t# If a neighbor is visited, return true\\r\\n\\t\\tif visited[new_x][new_y]:\\r\\n\\t\\t\\treturn True\\r\\n\\t\\r\\n\\t# If no neighbors have been visited, return false\\r\\n\\treturn False\\r\\n\\r\\n# Floodfill method with source room (x, y)\\r\\ndef floodfill(x, y):\\r\\n\\tglobal lit_rooms\\r\\n\\r\\n\\t# Ignore room if its out of bounds, already visited, or not lit\\r\\n\\tif x < 0 or y < 0 or x > N - 1 or y > N - 1 or visited[x][y] or not illuminated[x][y]:\\r\\n\\t\\treturn\\r\\n\\r\\n\\t# Ignore this room if it isn't connected to main component \\r\\n\\t# (i.e. it's inaccessible to Bessie)\\r\\n\\t# Don't return on the starting coordinate (1, 1)\\r\\n\\tif not check_connected(x, y) and not (x == 0 and y == 0):\\r\\n\\t\\treturn\\r\\n\\r\\n\\t# Set room to visited\\r\\n\\tvisited[x][y] = True\\r\\n\\r\\n\\tdir_x = [-1, 0, 1, 0]\\r\\n\\tdir_y = [0, -1, 0, 1]\\r\\n\\r\\n\\t# Iterate through neighbors and floodfill from them\\r\\n\\tfor i in range(4):\\r\\n\\t\\tfloodfill(x + dir_x[i], y + dir_y[i])\\r\\n\\r\\n\\t# Turn on all lights from current room\\r\\n\\tfor i in range(len(switches[x][y])):\\r\\n\\t\\troom_x = switches[x][y][i][0]\\r\\n\\t\\troom_y = switches[x][y][i][1]\\r\\n\\r\\n\\t\\t# If room hasn't been lit yet, add it to our count of rooms that \\r\\n\\t\\t# have been lit\\r\\n\\t\\tif not illuminated[room_x][room_y]:\\r\\n\\t\\t\\tlit_rooms += 1\\r\\n\\r\\n\\t\\t# Set room led to by switch to lit\\r\\n\\t\\tilluminated[room_x][room_y] = True\\r\\n\\r\\n\\t\\t# Floodfill form new room that is lit\\r\\n\\t\\tfloodfill(room_x, room_y)\\r\\n\\r\\n# Set the top left room to lit (since it's lit initially)\\r\\nilluminated[0][0] = True\\r\\n\\r\\n# Start floodfill from top-left room\\r\\nfloodfill(0, 0)\\r\\n\\r\\nprint(lit_rooms, file=open(\\\"lightson.out\\\", \\\"w\\\"))\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class LightsOn {\\r\\n\\t// Pair class from official USACO solution\\r\\n\\tstatic class Pair {\\r\\n\\t\\tpublic int x, y;\\r\\n\\t\\tpublic Pair(int x, int y) {\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\r\\n\\t// Initial declarations\\r\\n\\tstatic int N;\\r\\n\\tstatic boolean illuminated[][];\\r\\n\\tstatic boolean visited[][];\\r\\n\\tstatic List<Pair>[][] switches;\\r\\n\\tstatic int litRooms = 1;\\r\\n\\r\\n\\tstatic int[] dirX = {0, 1, 0, -1};\\r\\n\\tstatic int[] dirY = {-1, 0, 1, 0};\\r\\n\\r\\n\\t// Checks if a room is connected to the main component\\r\\n\\tpublic static boolean checkConnected(int x, int y) {\\r\\n\\t\\t// Iterate through neighbors\\r\\n\\t\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\t\\tint newX = x + dirX[i];\\r\\n\\t\\t\\tint newY = y + dirY[i];\\r\\n\\r\\n\\t\\t\\t//Ignore neighbor if out of bounds\\r\\n\\t\\t\\tif (newX < 0 || newY < 0 || newX > N - 1 || newY > N - 1) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// If a neighbor is visited, the room is connected to the main \\r\\n\\t\\t\\t// component, return true\\r\\n\\t\\t\\tif (visited[newX][newY]) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// If no neighbors have been visited, return false\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\t// Floodfill method with source room (x, y)\\r\\n\\tpublic static void floodfill(int x, int y) {\\r\\n\\t\\t// Ignore this room if its out of bounds, already visited, or isn't lit\\r\\n\\t\\tif (x < 0 || y < 0 || x > N - 1 || y > N - 1 || visited[x][y] || !illuminated[x][y]) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/* \\r\\n\\t\\t * Ignore room if it isn't connected to main component \\r\\n\\t\\t * (i.e. it's inaccessible to Bessie)\\r\\n\\t\\t * Don't return on coordinate (1, 1)\\r\\n\\t\\t */\\r\\n\\t\\tif (!checkConnected(x, y) && !(x == 0 && y == 0)) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Set room to visited\\r\\n\\t\\tvisited[x][y] = true;\\r\\n\\r\\n\\t\\t// Iterate through neighbors and floodfill from them\\r\\n\\t\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\t\\tfloodfill(x + dirX[i], y + dirY[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Turn on all lights from current room\\r\\n\\t\\tfor (int i = 0; i < switches[x][y].size(); i++) {\\r\\n\\t\\t\\tint roomX = switches[x][y].get(i).x;\\r\\n\\t\\t\\tint roomY = switches[x][y].get(i).y;\\r\\n\\r\\n\\t\\t\\t/* \\r\\n\\t\\t\\t * If room hasn't been lit yet, add it to our count of rooms that \\r\\n\\t\\t\\t * have been lit\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tif (!illuminated[roomX][roomY]) {\\r\\n\\t\\t\\t\\tlitRooms++;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Set room led to by switch to lit\\r\\n\\t\\t\\tilluminated[roomX][roomY] = true;\\r\\n\\r\\n\\t\\t\\t// Floodfill from new room that is lit\\r\\n\\t\\t\\tfloodfill(roomX, roomY);\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) throws java.io.IOException {\\r\\n\\t\\tBufferedReader in = new BufferedReader(new FileReader(\\\"lightson.in\\\"));\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"lightson.out\\\")));\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(in.readLine());\\r\\n\\r\\n\\t\\tN = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint m = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\r\\n\\t\\tilluminated = new boolean[N][N];\\r\\n\\t\\tvisited = new boolean[N][N];\\r\\n\\t\\tswitches = new ArrayList[N][N];\\r\\n\\t\\t\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tswitches[i][j] = new ArrayList<Pair>();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Take in input and add switches to corresponding room\\r\\n\\t\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\t\\tStringTokenizer st2 = new StringTokenizer(in.readLine());\\r\\n\\t\\t\\tint x = Integer.parseInt(st2.nextToken());\\r\\n\\t\\t\\tint y = Integer.parseInt(st2.nextToken());\\r\\n\\t\\t\\tint a = Integer.parseInt(st2.nextToken());\\r\\n\\t\\t\\tint b = Integer.parseInt(st2.nextToken());\\r\\n\\r\\n\\t\\t\\tswitches[x - 1][y - 1].add(new Pair(a - 1, b - 1));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Set the top left room to lit (since it's lit initially)\\r\\n\\t\\tilluminated[0][0] = true;\\r\\n\\r\\n\\t\\t// Start floodfill from top-left room\\r\\n\\t\\tfloodfill(0, 0);\\r\\n\\r\\n\\t\\tout.println(litRooms);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-570","source":"USACO Silver 2015 December","title":"Switching on the Lights","author":"Akshar Yeccherla"},"parent":{"name":"usaco-570","relativePath":"usaco-570.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"flood-fill","title":"Flood Fill"}}}}]},"problemInfo":{"uniqueId":"usaco-570","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=570"}},"pageContext":{"id":"usaco-570"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}