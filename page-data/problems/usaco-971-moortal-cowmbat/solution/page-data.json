{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-971-moortal-cowmbat/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-971\", source = \"USACO Gold 2019 December\", title = \"Moortal Cowmbat\", author = \"Sofia Yang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_cowmbat_gold_dec19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(M^3 + N M^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>M</mi><mn>3</mn></msup><mo>+</mo><mi>N</mi><msup><mi>M</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(M^3 + N M^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAXN = 1e5;\\r\\nconst int MAXL = 26;\\r\\nint freq[MAXN][MAXL];\\r\\n\\r\\n// count(i, j, k) is the number of appearances of letter k between index i and j.\\r\\nint count(int start, int end, int let) {\\r\\n\\treturn freq[end + 1][let] - freq[start][let];\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"cowmbat.in\\\", \\\"r\\\", stdin); // see /general/input-output\\r\\n\\tfreopen(\\\"cowmbat.out\\\", \\\"w\\\", stdout);\\r\\n\\tint N;\\r\\n\\tint M;\\r\\n\\tint K;\\r\\n\\tcin >> N >> M >> K;\\r\\n\\r\\n\\tstring S;\\r\\n\\tcin >> S;\\r\\n\\r\\n\\tvector<vector<int>> cost(M, vector<int>(M));\\r\\n\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\tcin >> cost[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Calculate the minimum cost to change letter i to j.\\r\\n\\tfor (int k = 0; k < M; k++) {\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\t\\tcost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\t * freq[i][j] is frequency of letter j\\r\\n\\t * in the string in the range from 0 to i.\\r\\n\\t */\\r\\n\\tfor (int i = 1; i <= N; i++) {\\r\\n\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\tfreq[i][j] = freq[i - 1][j];\\r\\n\\t\\t}\\r\\n\\t\\tfreq[i][S[i - 1] - 'a']++;\\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\t * dp[i][j] is the minimum cost to make a valid streak\\r\\n\\t * up to index i, where the last streak has letter j.\\r\\n\\t */\\r\\n\\tvector<vector<int>> dp(N, vector<int>(M, INT32_MAX));\\r\\n\\t// ans[i] is the minimum cost to make a valid streak to index i.\\r\\n\\tvector<int> ans(N, INT32_MAX);\\r\\n\\tans[0] = 0;\\r\\n\\r\\n\\t// If (N < 2 * K), then there is only 1 letter streak.\\r\\n\\tfor (int idx = K - 1; (idx < 2 * K - 1) && (idx < N); idx++) {\\r\\n\\t\\tfor (int let = 0; let < M; let++) {\\r\\n\\t\\t\\tdp[idx][let] = 0;\\r\\n\\t\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\t\\t// Calculate cost of converting each letter to 'let'.\\r\\n\\t\\t\\t\\tdp[idx][let] += (cost[i][let] * count(0, idx, i));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Find a letter 'j' with minimum cost to change all the letters to.\\r\\n\\t\\tans[idx] = dp[idx][0];\\r\\n\\t\\tfor (int j = 1; j < M; j++) {\\r\\n\\t\\t\\tans[idx] = min(ans[idx], dp[idx][j]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// If (N >= 2K) there is >= 1 unique letter streaks.\\r\\n\\tfor (int idx = (2 * K - 1); idx < N; idx++) {\\r\\n\\t\\t// Continue the previous streak.\\r\\n\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\tdp[idx][j] = dp[idx - 1][j];\\r\\n\\t\\t\\t// Change the letter.\\r\\n\\t\\t\\tif (S[idx] - 'a' != j) {\\r\\n\\t\\t\\t\\tdp[idx][j] += cost[S[idx] - 'a'][j];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Make a new streak with letter 'let1'.\\r\\n\\t\\tfor (int let1 = 0; let1 < M; let1++) {\\r\\n\\t\\t\\tint add = 0;\\r\\n\\t\\t\\tfor (int let2 = 0; let2 < M; let2++) {\\r\\n\\t\\t\\t\\tadd += cost[let2][let1] * count(idx - K + 1, idx, let2);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//Continue with same letter, or make a new streak\\r\\n\\t\\t\\tdp[idx][let1] = min(dp[idx][let1], ans[idx - K] + add);\\r\\n\\t\\t}\\r\\n\\t\\t// Update the answer.\\r\\n\\t\\tans[idx] = dp[idx][0];\\r\\n\\t\\tfor (int j = 1; j < M; j++) {\\r\\n\\t\\t\\tans[idx] = min(ans[idx], dp[idx][j]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\tcout << ans[N - 1] << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class MoortalCowmbat {\\r\\n\\tpublic static int MAXN = (int) 1e5;\\r\\n\\tpublic static int MAXL = 26;\\r\\n\\tpublic static int[][] freq = new int[MAXN][MAXL];\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"cowmbat\\\");\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tint M = io.nextInt();\\r\\n\\t\\tint K = io.nextInt();\\r\\n\\t\\tchar[] S = io.next().toCharArray();\\r\\n\\r\\n\\t\\tint[][] cost = new int[MAXL][MAXL];\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\t\\tcost[i][j] = io.nextInt();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Calculate the minimum cost to change letter i to j.\\r\\n\\t\\tfor (int k = 0; k < M; k++) {\\r\\n\\t\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\t\\t\\tcost[i][j] = Math.min(cost[i][j], cost[i][k] + cost[k][j]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * freq[i][j] is frequency of letter j\\r\\n\\t\\t * in the string in the range from 0 to i.\\r\\n\\t\\t */\\r\\n\\t\\tfor (int i = 1; i <= N; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\t\\tfreq[i][j] = freq[i - 1][j];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfreq[i][S[i - 1] - 'a']++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * dp[i][j] is the minimum cost to make a valid streak\\r\\n\\t\\t * up to index i, where the last streak has letter j.\\r\\n\\t\\t */\\r\\n\\t\\tint[][] dp = new int[MAXN][MAXL];\\r\\n\\t\\t// ans[i] is the minimum cost to make a valid streak to index i.\\r\\n\\t\\tint[] ans = new int[MAXN];\\r\\n\\t\\tans[0] = 0;\\r\\n\\r\\n\\t\\t// If (N < 2 * K), then there is only 1 letter streak.\\r\\n\\t\\tfor (int idx = K - 1; (idx < 2 * K - 1) && (idx < N); idx++) {\\r\\n\\t\\t\\tfor (int let = 0; let < M; let++) {\\r\\n\\t\\t\\t\\tdp[idx][let] = 0;\\r\\n\\t\\t\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\t\\t\\t// Calculate cost of converting each letter to 'let'.\\r\\n\\t\\t\\t\\t\\tdp[idx][let] += (cost[i][let] * count(0, idx, i));\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Find a letter 'j' with minimum cost to change all the letters to.\\r\\n\\t\\t\\tans[idx] = dp[idx][0];\\r\\n\\t\\t\\tfor (int j = 1; j < M; j++) {\\r\\n\\t\\t\\t\\tans[idx] = Math.min(ans[idx], dp[idx][j]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t//If (N >= 2K) there is >= 1 unique letter streaks.\\r\\n\\t\\tfor (int idx = (2 * K - 1); idx < N; idx++) {\\r\\n\\t\\t\\t// Continue the previous streak.\\r\\n\\t\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\t\\tdp[idx][j] = dp[idx - 1][j];\\r\\n\\t\\t\\t\\t// Change the letter.\\r\\n\\t\\t\\t\\tif (S[idx] - 'a' != j) {\\r\\n\\t\\t\\t\\t\\tdp[idx][j] += cost[S[idx] - 'a'][j];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Make a new streak with letter 'let1'.\\r\\n\\t\\t\\tfor (int let1 = 0; let1 < M; let1++) {\\r\\n\\t\\t\\t\\tint add = 0;\\r\\n\\t\\t\\t\\tfor (int let2 = 0; let2 < M; let2++) {\\r\\n\\t\\t\\t\\t\\tadd += cost[let2][let1] * count(idx - K + 1, idx, let2);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// Continue with same letter, or make a new streak\\r\\n\\t\\t\\t\\tdp[idx][let1] = Math.min(dp[idx][let1], ans[idx - K] + add);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Update the answer.\\r\\n\\t\\t\\tans[idx] = dp[idx][0];\\r\\n\\t\\t\\tfor (int j = 1; j < M; j++) {\\r\\n\\t\\t\\t\\tans[idx] = Math.min(ans[idx], dp[idx][j]);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\t\\tio.println(ans[N - 1]);\\r\\n\\t\\tio.close();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// count(i, j, k) is the number of appearances of letter k between index i and j.\\r\\n\\tstatic int count(int start, int end, int let) {\\r\\n\\t\\treturn freq[end + 1][let] - freq[start][let];\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-971","source":"USACO Gold 2019 December","title":"Moortal Cowmbat","author":"Sofia Yang"},"parent":{"name":"usaco-971","relativePath":"usaco-971.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-dp","title":"Introduction to DP"}}}},{"node":{"module":{"frontmatter":{"id":"shortest-paths","title":"Shortest Paths with Non-Negative Edge Weights"}}}}]},"problemInfo":{"uniqueId":"usaco-971","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=971"}},"pageContext":{"id":"usaco-971"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}