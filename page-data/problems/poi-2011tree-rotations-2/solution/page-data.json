{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/poi-2011tree-rotations-2/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"poi-11-TreeRotations2\", source = \"POI\", title = \"Tree Rotations 2\", author = \"Benjamin Qi\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, IncompleteSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Apparently\\r\\n\", _jsx(_components.a, {\n        href: \"https://www.cs.cmu.edu/~scandal/papers/treaps-spaa98.pdf\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"this paper\"\n      }), \" proves\\r\\nthat this runs in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n\\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"int n;\\r\\nll ans, inv;\\r\\ntypedef struct tnode* pt;\\r\\nstruct tnode {\\r\\n\\tint pri, val;\\r\\n\\tpt c[2];  // essential\\r\\n\\tint sz;  // for range queries\\r\\n\\ttnode (int val) {\\r\\n\\t\\tpri = rng();\\r\\n\\t\\tval = val;\\r\\n\\t\\tsz = 1;\\r\\n\\t\\tc[0] = c[1] = NULL;\\r\\n\\t}\\r\\n};\\r\\nint getsz(pt x) {\\r\\n\\treturn x ? x->sz : 0;\\r\\n}\\r\\npt calc(pt x) {\\r\\n\\tx->sz = 1 + getsz(x->c[0]) + getsz(x->c[1]);\\r\\n\\treturn x;\\r\\n}\\r\\npair<pt, pt> split(pt t, int v) { // >= v goes to the right\\r\\n\\tif (!t) return {t, t};\\r\\n\\tif (t->val >= v) {\\r\\n\\t\\tauto p = split(t->c[0], v);\\r\\n\\t\\tt->c[0] = p.s;\\r\\n\\t\\treturn {p.f, calc(t)};\\r\\n\\t} else {\\r\\n\\t\\tauto p = split(t->c[1], v);\\r\\n\\t\\tt->c[1] = p.f;\\r\\n\\t\\treturn {calc(t), p.s};\\r\\n\\t}\\r\\n}\\r\\npt merge(pt a, pt b) {\\r\\n\\tif (!a || !b) {\\r\\n\\t\\treturn a ? NULL : b;\\r\\n\\t}\\r\\n\\tif (a->pri > b->pri) {\\r\\n\\t\\tauto B = split(b, a->val);\\r\\n\\t\\tinv += (ll) (1 + getsz(a->c[0])) * getsz(B.s);\\r\\n\\t\\ta->c[0] = merge(a->c[0], B.f);\\r\\n\\t\\ta->c[1] = merge(a->c[1], B.s);\\r\\n\\t\\treturn calc(a);\\r\\n\\t} else {\\r\\n\\t\\tauto A = split(a, b->val);\\r\\n\\t\\tinv += (ll) getsz(A.f) * (1 + getsz(b->c[1]));\\r\\n\\t\\tb->c[0] = merge(A.f, b->c[0]);\\r\\n\\t\\tb->c[1] = merge(A.s, b->c[1]);\\r\\n\\t\\treturn calc(b);\\r\\n\\t}\\r\\n}\\r\\npt go() {\\r\\n\\tint x;\\r\\n\\tre(x);\\r\\n\\tif (x) return new tnode(x);\\r\\n\\tpt L = go();\\r\\n\\tpt R = go();\\r\\n\\tll tot = (ll) L->sz * R->sz;\\r\\n\\tinv = 0;\\r\\n\\tpt cur = merge(L,R); assert(inv <= tot);  // dbg(\\\"HUH\\\",tot,inv);\\r\\n\\tans += min(inv,tot-inv);\\r\\n\\treturn cur;\\r\\n}\\r\\nint main() {\\r\\n\\tsetIO(); re(n); go();\\r\\n\\tps(ans);\\r\\n}\\n\"\n          })\n        }), _jsx(IncompleteSection, {\n          children: \"Make code work and add explanation\"\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"poi-11-TreeRotations2","source":"POI","title":"Tree Rotations 2","author":"Benjamin Qi"},"parent":{"name":"poi-11-TreeRotations2","relativePath":"poi-11-TreeRotations2.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"treaps","title":"Treaps"}}}}]},"problemInfo":{"uniqueId":"poi-11-TreeRotations2","url":"https://szkopul.edu.pl/problemset/problem/b0BM0al2crQBt6zovEtJfOc6/site/?key=statement"}},"pageContext":{"id":"poi-11-TreeRotations2"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}