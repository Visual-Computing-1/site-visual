{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-918-sleepy-cow-herding/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-918\", source = \"USACO Silver 2019 February\", title = \"Sleepy Cow Herding\", author = \"Qi Wang, Melody Yu (Video)\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Youtube: _missingComponent(\"Youtube\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, Youtube, LanguageSection, JavaSection, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_herding_silver_feb19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"video-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#video-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Video Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: The video solution might not be the same as other solutions. Code in C++.\"\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"BvgV7f3pwcI\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(JavaSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Time Complexity:\"\n          }), \" \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(N)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          })]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"herding.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"herding.out\\\", \\\"w\\\", stdout);\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tint herd[100005];\\r\\n\\tfor (int i = 0; i < n; ++i) {\\r\\n\\t\\tcin >> herd[i];\\r\\n\\t}\\r\\n\\tsort(herd, herd + n);\\r\\n\\t\\r\\n\\t// Getting the total amount of empty cells\\r\\n\\tint tot = 0;\\r\\n\\tfor (int i = 1; i < n; ++i) {\\r\\n\\t\\ttot += herd[i] - herd[i - 1] - 1;\\r\\n\\t}\\r\\n\\tint minAns = INT_MAX;\\r\\n\\tif (herd[n - 2] - herd[0] == n - 2 && herd[n - 1] - herd[n - 2] > 2) {\\r\\n\\t\\tminAns = 2;\\r\\n\\t} else if (herd[n - 1] - herd[1] == n - 2 && herd[1] - herd[0] > 2) {\\r\\n\\t\\tminAns = 2;\\r\\n\\t} else {\\r\\n\\t\\t// Min is the patch that is >= N and has the least number of empty positions\\r\\n\\t\\tint j = 0;\\r\\n\\t\\tfor (int i = 0; i < n; ++i) {\\r\\n\\t\\t\\twhile (j + 1 < n && herd[j + 1] - herd[i] < n) {\\r\\n\\t\\t\\t\\tj++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tminAns = min(minAns, n - (j - i + 1));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// Max is just the maximum of the total gap minus either the first or last gap\\r\\n\\tint maxAns = max(tot - (herd[1] - herd[0] - 1), tot - (herd[n - 1] - herd[n - 2] - 1));\\r\\n\\tcout << minAns << \\\"\\\\n\\\" << maxAns;\\r\\n}\\n\"\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"//Created by Qi Wang\\r\\nimport java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class herding {\\r\\n\\tstatic int N;\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tInputReader in = new InputReader(\\\"herding.in\\\"); //InputReader class down below\\r\\n\\t\\tN = in.nextInt();\\r\\n\\t\\tint tot = 0;\\r\\n\\t\\tint[] pos = new int[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tpos[i] = in.nextInt();\\r\\n\\t\\t}\\r\\n\\t\\tArrays.sort(pos);\\r\\n\\r\\n\\t\\tint min = Integer.MAX_VALUE;\\r\\n\\t\\t//Getting the total amount of empty cells\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif(i > 0)\\r\\n\\t\\t\\t\\ttot += (pos[i]-pos[i-1]-1);\\r\\n\\t\\t}\\r\\n\\t\\tif (pos[N-2]-pos[0] == N-2 && pos[N-1]-pos[N-2]>2 || pos[N-1]-pos[1] == N-2 && pos[1]-pos[0]>2) {\\r\\n\\t\\t\\tmin = 2;\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\t//Min is the patch that is >= N and has the least number of empty positions\\r\\n\\t\\t\\tint j = 0;\\r\\n\\t\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\t\\twhile (j < N-1 && pos[j+1] - pos[i] < N) j++;\\r\\n\\t\\t\\t\\tmin = Math.min(min, N-(j-i+1));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//Max is just the maximum of the total gap minus either the first or last gap\\r\\n\\t\\tint max = Math.max(tot - (pos[1] - pos[0] - 1), tot - (pos[pos.length-1] - pos[pos.length-2] - 1));\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"herding.out\\\")));\\r\\n\\t\\tout.println(min);\\r\\n\\t\\tout.println(max);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tpublic static class InputReader {\\r\\n\\t\\tpublic BufferedReader reader;\\r\\n\\t\\tpublic StringTokenizer tokenizer;\\r\\n\\r\\n\\t\\tpublic InputReader() {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new InputStreamReader(System.in), 32768);\\r\\n\\t\\t\\t} catch (Exception e) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Could not create input stream\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic InputReader(String fileName) {\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\treader = new BufferedReader(new FileReader(new File(fileName)), 32768);\\r\\n\\t\\t\\t} catch (Exception ex) {\\r\\n\\t\\t\\t\\tthrow new NullPointerException(\\\"Input file does not exist! Put it in the project folder.\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ttokenizer = null;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\ttokenizer = new StringTokenizer(reader.readLine());\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn tokenizer.nextToken();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic boolean hasNextInt() throws IOException { return reader.ready(); }\\r\\n\\r\\n\\t\\tpublic int nextInt() {\\r\\n\\t\\t\\treturn Integer.parseInt(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic double nextDouble() {\\r\\n\\t\\t\\treturn Double.parseDouble(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic long nextLong() {\\r\\n\\t\\t\\treturn Long.parseLong(next());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic char nextChar() {\\r\\n\\t\\t\\treturn next().charAt(0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * When you call next(), that entire line will be skipped.\\r\\n\\t\\t * No flushing buffers.\\r\\n\\t\\t * Doesn't work when you want to scan the remaining line.\\r\\n\\t\\t *\\r\\n\\t\\t * @return entire line\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tpublic String nextLine() {\\r\\n\\t\\t\\tString str = \\\"\\\";\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tstr = reader.readLine();\\r\\n\\t\\t\\t\\ttokenizer = null;\\r\\n\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn str;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-918","source":"USACO Silver 2019 February","title":"Sleepy Cow Herding","author":"Qi Wang, Melody Yu (Video)"},"parent":{"name":"usaco-918","relativePath":"usaco-918.mdx"},"toc":{"cpp":[{"depth":2,"value":"Video Solution","slug":"video-solution"}],"java":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Video Solution","slug":"video-solution"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"two-pointers","title":"Two Pointers"}}}}]},"problemInfo":{"uniqueId":"usaco-918","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=918"}},"pageContext":{"id":"usaco-918"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}