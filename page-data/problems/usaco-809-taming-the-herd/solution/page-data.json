{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-809-taming-the-herd/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-809\", source = \"USACO Bronze 2018 Febuary\", title = \"Taming the Herd\", author = \"Sathvik Chundru\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {MATHSPAN, LanguageSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_taming_bronze_feb18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Taming {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio(\\\"taming\\\");\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint[] log = new int[n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tlog[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\t\\t/*\\r\\n\\t\\t * The first entry in the log is a special case, \\r\\n\\t\\t * since Farmer John already knows the cows broke out on that day.\\r\\n\\t\\t */\\r\\n\\t\\tif (log[0] > 0) {\\r\\n\\t\\t\\tio.println(-1);\\r\\n\\t\\t\\tio.close();\\r\\n\\t\\t\\tSystem.exit(0);\\r\\n\\t\\t}\\r\\n\\t\\t// If it is a missing entry, we can set it to 0.\\r\\n\\t\\tlog[0] = 0;\\r\\n\\t\\tint t = -1;\\r\\n\\t\\tint req = 0;\\r\\n\\t\\tint pos = 0;\\r\\n\\t\\t/*\\r\\n\\t\\t * If we ever come across a contradiction, then the \\r\\n\\t\\t * log is necessarily inconsistent, so we can just output −1. \\r\\n\\t\\t * Otherwise, the log must consist of several streaks 0,1,2,…,k \\r\\n\\t\\t * of various lengths, with possibly some −1s between \\r\\n\\t\\t * streaks - entries which we could not uniquely deduce. \\r\\n\\t\\t * We know that the first streak starts on the first day.\\r\\n\\t\\t */\\r\\n\\t\\tfor (int i = n - 1; i >= 0; i--) {\\r\\n\\t\\t\\tif (t != -1 && log[i] != -1 && log[i] != t) {\\r\\n\\t\\t\\t\\tio.println(-1);\\r\\n\\t\\t\\t\\tio.close();\\r\\n\\t\\t\\t\\tSystem.exit(0);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (t == -1) {\\r\\n\\t\\t\\t\\tt = log[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (log[i] == -1) {\\r\\n\\t\\t\\t\\tlog[i] = t;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (log[i] == 0) {\\r\\n\\t\\t\\t\\treq++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (log[i] == -1) {\\r\\n\\t\\t\\t\\tpos++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (t > -1) {\\r\\n\\t\\t\\t\\tt--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tint sum = req + pos;\\r\\n\\t\\tio.println(req + \\\" \\\" + sum);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"fin = open(\\\"taming.in\\\", 'r')\\r\\nfout = open('taming.out', 'w')\\r\\n\\r\\ninputs = [str(i) for i in fin.read().splitlines()]\\r\\ndays = int(inputs[0])\\r\\nentry = [int(i) for i in inputs[1].split(\\\" \\\")]\\r\\n\\r\\ntime = -1  # Keep tracks of the days left where 0 outbreaks is guaranteed\\r\\noutbreaks = 0  # Count the number of outbreaks that must happen\\r\\npotential = 0  # Count the number of outbreaks that can potentially happen\\r\\nvalid = True  # Check if the input is valid\\r\\n\\r\\n# If the first entry is above 0, then we have a contradiction\\r\\nif entry[0] > 0:\\r\\n\\tvalid = False\\r\\nelse:\\r\\n\\tentry[0] = 0\\r\\n\\r\\n\\\"\\\"\\\"\\r\\nIf we ever come across a contradiction, then the \\r\\nlog is necessarily inconsistent, so we can just output −1. \\r\\nOtherwise, the log must consist of several streaks 0,1,2,…,k \\r\\nof various lengths, with possibly some −1s between \\r\\nstreaks - entries which we could not uniquely deduce.\\r\\nWe know that the first streak starts on the first day.\\r\\n\\\"\\\"\\\"\\r\\nfor day in range(days - 1, -1, -1):\\r\\n\\tif time != -1 and entry[day] != -1 and entry[day] != time:\\r\\n\\t\\tvalid = False\\r\\n\\t\\tbreak\\r\\n\\tif time == -1:\\r\\n\\t\\ttime = entry[day]\\r\\n\\tif entry[day] == -1:\\r\\n\\t\\tentry[day] = time\\r\\n\\tif entry[day] == 0:\\r\\n\\t\\toutbreaks += 1\\r\\n\\tif entry[day] == -1:\\r\\n\\t\\tpotential += 1\\r\\n\\tif time > -1:\\r\\n\\t\\ttime -= 1\\r\\n\\r\\nif valid:\\r\\n\\tprint(outbreaks, outbreaks + potential, file=fout)\\r\\nelse:\\r\\n\\tprint(-1, file=fout)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-809","source":"USACO Bronze 2018 Febuary","title":"Taming the Herd","author":"Sathvik Chundru"},"parent":{"name":"usaco-809","relativePath":"usaco-809.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"ad-hoc","title":"Ad Hoc Problems"}}}}]},"problemInfo":{"uniqueId":"usaco-809","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=809"}},"pageContext":{"id":"usaco-809"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}