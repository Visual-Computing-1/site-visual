{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-717-why-did-the-cow-cross-the-road/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-717\", source = \"USACO Gold 2017 December\", title = \"Why Did the Cow Cross the Road\", author = \"Qi Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, LanguageSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_visitfj_gold_feb17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class VisitFJ {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"visitfj\\\");\\r\\n\\r\\n\\t\\t// Possible paths cow can take\\r\\n\\t\\tint[] dx = {0, 1, 2, 3, 0, 1, 2, -1, -2, -3, -1, -2, 1, -1, 0, 0};\\r\\n\\t\\tint[] dy = {3, 2, 1, 0, -3, -2, -1, 2, 1, 0, -2, -1, 0, 0, 1, -1};\\r\\n\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tint T = io.nextInt();\\r\\n\\r\\n\\t\\tint[][] w = new int[N][N];\\r\\n\\t\\tint[][] dist = new int[N][N];\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tArrays.fill(dist[i], Integer.MAX_VALUE);\\r\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tw[i][j] = io.nextInt();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tPriorityQueue<Edge> pq = new PriorityQueue<>();\\r\\n\\t\\tpq.add(new Edge(new int[]{0, 0}, 0));\\r\\n\\t\\twhile (!pq.isEmpty()) {\\r\\n\\t\\t\\tEdge cur = pq.poll();\\r\\n\\t\\t\\tint[] pos = cur.t;\\r\\n\\r\\n\\t\\t\\tint d = N - 1 - pos[0] + N - 1 - pos[1];\\r\\n\\r\\n\\t\\t\\t// If within 3 blocks away, update the minimum weight needed\\r\\n\\t\\t\\tif (d < 3 && d > 0) {\\r\\n\\t\\t\\t\\tdist[N - 1][N - 1] = Math.min(dist[N - 1][N - 1], cur.w + T * d);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor (int i = 0; i < dx.length; i++) {\\r\\n\\t\\t\\t\\tint nx = pos[0] + dx[i];\\r\\n\\t\\t\\t\\tint ny = pos[1] + dy[i];\\r\\n\\r\\n\\t\\t\\t\\t// Continue if new point is out of bound\\r\\n\\t\\t\\t\\tif (nx < 0 || nx >= N || ny < 0 || ny >= N) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tint nw = cur.w + w[nx][ny] + T * 3;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t// If new distance is greater than current minimum distance, it is not needed\\r\\n\\t\\t\\t\\tif (nw > dist[nx][ny]) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tdist[nx][ny] = nw;\\r\\n\\r\\n\\t\\t\\t\\tpq.add(new Edge(new int[]{nx, ny}, nw));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(dist[N - 1][N - 1]);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tprivate static class Edge implements Comparable<Edge>{\\r\\n\\t\\tint[] t;\\r\\n\\t\\tint w;\\r\\n\\t\\tpublic Edge(int[] t, int w) {\\r\\n\\t\\t\\tthis.t = t;\\r\\n\\t\\t\\tthis.w = w;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compareTo(Edge o) {\\r\\n\\t\\t\\treturn w - o.w;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-717","source":"USACO Gold 2017 December","title":"Why Did the Cow Cross the Road","author":"Qi Wang"},"parent":{"name":"usaco-717","relativePath":"usaco-717.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"shortest-paths","title":"Shortest Paths with Non-Negative Edge Weights"}}}}]},"problemInfo":{"uniqueId":"usaco-717","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=717"}},"pageContext":{"id":"usaco-717"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}