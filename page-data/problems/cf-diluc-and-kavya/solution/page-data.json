{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-diluc-and-kavya/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1536C\", source = \"CF\", title = \"Diluc and Kaeya\", author = \"Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/91520\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <unordered_map>\\r\\n#include <algorithm>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nint main() {\\r\\n\\tint test_num;\\r\\n\\tstd::cin >> test_num;\\r\\n\\tfor (int t = 0; t < test_num; t++) {\\r\\n\\t\\tint len;\\r\\n\\t\\tstd::cin >> len;\\r\\n\\t\\tvector<char> str(len);\\r\\n\\t\\tfor (char& c : str) {\\r\\n\\t\\t\\tstd::cin >> c;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tint d_num = 0;\\r\\n\\t\\tint k_num = 0;\\r\\n\\t\\tvector<int> max_pref_chunks;\\r\\n\\t\\tstd::unordered_map<int, std::unordered_map<int, int>> prev_ratios;\\r\\n\\t\\tfor (char c : str) {\\r\\n\\t\\t\\tif (c == 'D') {\\r\\n\\t\\t\\t\\td_num++;\\r\\n\\t\\t\\t} else if (c == 'K') {\\r\\n\\t\\t\\t\\tk_num++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// get the simplified ratio by dividing both quantities by the gcd\\r\\n\\t\\t\\tint gcd = std::__gcd(d_num, k_num);\\r\\n\\t\\t\\tint d_ratio = d_num / gcd;\\r\\n\\t\\t\\tint k_ratio = k_num / gcd;\\r\\n\\t\\t\\t// add the ratio to the records and record the max prefix chunk amount\\r\\n\\t\\t\\tmax_pref_chunks.push_back(++prev_ratios[d_ratio][k_ratio]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < len - 1 ; i++) {\\r\\n\\t\\t\\tcout << max_pref_chunks[i] << ' ';\\r\\n\\t\\t}\\r\\n\\t\\tcout << max_pref_chunks.back() << endl;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class DilucKaeya {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tint testNum = Integer.parseInt(read.readLine());\\r\\n\\r\\n\\t\\tStringBuilder ans = new StringBuilder();\\r\\n\\t\\tfor (int t = 0; t < testNum; t++) {\\r\\n\\t\\t\\tread.readLine();\\r\\n\\t\\t\\tString str = read.readLine();\\r\\n\\r\\n\\t\\t\\tint dNum = 0;\\r\\n\\t\\t\\tint kNum = 0;\\r\\n\\t\\t\\tHashMap<Integer, HashMap<Integer, Integer>> prevRatios = new HashMap<>();\\r\\n\\t\\t\\tint[] maxPrefChunks = new int[str.length()];\\r\\n\\t\\t\\tfor (int i = 0; i < str.length(); i++) {\\r\\n\\t\\t\\t\\tif (str.charAt(i) == 'D') {\\r\\n\\t\\t\\t\\t\\tdNum++;\\r\\n\\t\\t\\t\\t} else if (str.charAt(i) == 'K') {\\r\\n\\t\\t\\t\\t\\tkNum++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// get the simplified ratio by dividing both quantities by the gcd\\r\\n\\t\\t\\t\\tint gcd = gcd(dNum, kNum);\\r\\n\\t\\t\\t\\tint dRatio = dNum / gcd;\\r\\n\\t\\t\\t\\tint kRatio = kNum / gcd;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t// add the ratio to the records and record the max prefix chunk amount\\r\\n\\t\\t\\t\\tif (!prevRatios.containsKey(dRatio)) {\\r\\n\\t\\t\\t\\t\\tprevRatios.put(dRatio, new HashMap<>());\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tprevRatios.get(dRatio).put(\\r\\n\\t\\t\\t\\t\\tkRatio, prevRatios.get(dRatio).getOrDefault(kRatio, 0) + 1\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\tmaxPrefChunks[i] = prevRatios.get(dRatio).get(kRatio);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor (int i = 0; i < str.length() - 1; i++) {\\r\\n\\t\\t\\t\\tans.append(maxPrefChunks[i]).append(' ');\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tans.append(maxPrefChunks[str.length() - 1]).append('\\\\n');\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.print(ans);\\r\\n\\t}\\r\\n\\r\\n\\tprivate static int gcd(int a, int b) {\\r\\n\\t\\treturn b == 0 ? a : gcd(b, a % b);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"from math import gcd\\r\\n\\r\\nfor _ in range(int(input())):\\r\\n\\tinput()\\r\\n\\tk_num = 0\\r\\n\\td_num = 0\\r\\n\\tmax_pref_chunks = []\\r\\n\\tpref_ratios = {}\\r\\n\\tfor c in input():\\r\\n\\t\\tif c == 'D':\\r\\n\\t\\t\\td_num += 1\\r\\n\\t\\telif c == 'K':\\r\\n\\t\\t\\tk_num += 1\\r\\n\\t\\t\\r\\n\\t\\t# get the simplified ratio by dividing both quantities by the gcd\\r\\n\\t\\tcommon = gcd(d_num, k_num)\\r\\n\\t\\td_ratio = d_num // common\\r\\n\\t\\tk_ratio = k_num // common\\r\\n\\t\\t\\r\\n\\t\\t# add the ratio to the records and record the max prefix chunk amount\\r\\n\\t\\tif d_ratio not in pref_ratios:\\r\\n\\t\\t\\tpref_ratios[d_ratio] = {}\\r\\n\\t\\tif k_ratio not in pref_ratios[d_ratio]:\\r\\n\\t\\t\\tpref_ratios[d_ratio][k_ratio] = 0\\r\\n\\t\\tpref_ratios[d_ratio][k_ratio] += 1\\r\\n\\t\\tmax_pref_chunks.append(pref_ratios[d_ratio][k_ratio])\\r\\n\\r\\n\\tprint(' '.join(str(m) for m in max_pref_chunks))\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1536C","source":"CF","title":"Diluc and Kaeya","author":"Kevin Sheng"},"parent":{"name":"cf-1536C","relativePath":"cf-1536C.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"divisibility","title":"Divisibility"}}}}]},"problemInfo":{"uniqueId":"cf-1536C","url":"https://codeforces.com/problemset/problem/1536/C"}},"pageContext":{"id":"cf-1536C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}