{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1193-labyrinth/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1193\", source = \"CSES\", title = \"Labyrinth\", author = \"Nathan Wang, Sofia Yang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    Youtube: _missingComponent(\"Youtube\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {Youtube, HeaderLink, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"In this problem, we're asked to find and output the shortest path between two\\r\\nnodes. We can't use DFS here because we're looking for the \", _jsx(_components.em, {\n        children: \"shortest\"\n      }), \" path.\\r\\nInstead, we can use BFS to solve this problem.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below is a video solution for this problem by Jonathan Paulson. The video uses\\r\\nPython.\"\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"Xp6MwU5fGT8\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"(Note: The video solution TLE's on one of the test cases. I think (??) it may be\\r\\npossible to get AC by setting \", _jsx(_components.code, {\n        children: \"SEEN[rr][cc]\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" after line 42, and\\r\\nremoving lines 23, 24, and 38. However, I haven't tested this.)\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\n#define ii pair<int, int>\\r\\n#define f first\\r\\n#define s second\\r\\n#define mp make_pair\\r\\n\\r\\nint n, m;\\r\\nchar A[1000][1000];\\r\\nbool vis[1000][1000];\\r\\n\\r\\n// previousStep stores the previous direction that we moved in to arrive that this cell\\r\\nint previousStep[1000][1000];\\r\\n\\r\\n// 0 = up, 1 = right, 2 = down, 3 = left\\r\\nint dx[4] = { -1, 0, 1, 0 };\\r\\nint dy[4] = { 0, 1, 0, -1 };\\r\\nstring stepDir = \\\"URDL\\\";\\r\\n\\r\\nint main() {\\r\\n\\tcin >> n >> m;\\r\\n\\r\\n\\tqueue<ii> q;\\r\\n\\tii begin, end;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\tcin >> A[i][j];\\r\\n\\t\\t\\tif (A[i][j] == 'A') {\\r\\n\\t\\t\\t\\tbegin = mp(i, j);\\r\\n\\t\\t\\t} else if (A[i][j] == 'B') {\\r\\n\\t\\t\\t\\tend = mp(i, j);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tq.push(begin);\\r\\n\\tvis[begin.f][begin.s] = true;\\r\\n\\r\\n\\twhile (!q.empty()) {\\r\\n\\t\\tii u = q.front(); q.pop();\\r\\n\\t\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\t\\tii v = mp(u.f + dx[i], u.s + dy[i]);\\r\\n\\t\\t\\tif (v.f < 0 || v.f >= n || v.s < 0 || v.s >= m) continue;\\r\\n\\t\\t\\tif (A[v.f][v.s] == '#') continue;\\r\\n\\t\\t\\tif (vis[v.f][v.s]) continue;\\r\\n\\t\\t\\tvis[v.f][v.s] = true;\\r\\n\\t\\t\\tpreviousStep[v.f][v.s] = i;\\r\\n\\t\\t\\tq.push(v);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tif (vis[end.f][end.s]) {\\r\\n\\t\\tcout << \\\"YES\\\" << endl;\\r\\n\\t\\tvector<int> steps;\\r\\n\\t\\twhile (end != begin) {\\r\\n\\t\\t\\tint p = previousStep[end.f][end.s];\\r\\n\\t\\t\\tsteps.push_back(p);\\r\\n\\t\\t\\t// undo the previous step to get back to the previous square\\r\\n\\t\\t\\t// Notice how we subtract dx/dy, whereas we added dx/dy before\\r\\n\\t\\t\\tend = mp(end.f - dx[p], end.s - dy[p]);\\r\\n\\t\\t}\\r\\n\\t\\treverse(steps.begin(), steps.end());\\r\\n\\r\\n\\t\\tcout << steps.size() << endl;\\r\\n\\t\\tfor (char c : steps) {\\r\\n\\t\\t\\tcout << stepDir[c];\\r\\n\\t\\t}\\r\\n\\t\\tcout << endl;\\r\\n\\t} else {\\r\\n\\t\\tcout << \\\"NO\\\" << endl;\\r\\n\\t}\\r\\n\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class cses1193 {\\r\\n\\tpublic static int[] dX = {-1, 0, 0, 1};\\r\\n\\tpublic static int[] dY = {0, -1, 1, 0};\\r\\n\\tpublic static String dirs = \\\"ULRD\\\";\\r\\n\\r\\n\\t//Coordinates for points A and B.\\r\\n\\tpublic static point A = new point(-1, -1);\\r\\n\\tpublic static point B = new point(-1, -1);\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(System.out);\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tint N = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint M = Integer.parseInt(st.nextToken());\\r\\n\\t\\tboolean[][] blocked = new boolean[N][M];\\r\\n\\t\\tboolean[][] visited = new boolean[N][M];\\r\\n\\t\\tint[][] prevMove = new int[N][M];\\r\\n\\t\\t\\r\\n\\t\\t//Read in the grid.\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tchar[] S = br.readLine().toCharArray();\\r\\n\\t\\t\\tfor (int j = 0; j < M; j++) {\\r\\n\\t\\t\\t\\tif (S[j] == '#') {\\r\\n\\t\\t\\t\\t\\tblocked[i][j] = true;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tblocked[i][j] = false;\\r\\n\\t\\t\\t\\t\\tif (S[j] == 'A') {\\r\\n\\t\\t\\t\\t\\t\\tA = new point(i, j);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif (S[j] == 'B') {\\r\\n\\t\\t\\t\\t\\t\\tB = new point(i, j);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tQueue<point> q = new LinkedList<>();\\r\\n\\t\\tq.add(A);\\r\\n\\r\\n\\t\\t//BFS starting from point A.\\r\\n\\t\\twhile (!q.isEmpty()) {\\r\\n\\t\\t\\tpoint cur = q.poll();\\r\\n\\r\\n\\t\\t\\tfor (int dir = 0; dir < 4; dir++) {\\r\\n\\t\\t\\t\\tpoint next = new point(cur.x + dX[dir], cur.y + dY[dir]);\\r\\n\\t\\t\\t\\t//Check if the next point is visit-able.\\r\\n\\t\\t\\t\\tif (next.x < 0 || next.y < 0  || next.x >= N || next.y >= M) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (blocked[next.x][next.y]) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (visited[next.x][next.y]) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tvisited[next.x][next.y] = true;\\r\\n\\t\\t\\t\\tprevMove[next.x][next.y] = dir;\\r\\n\\t\\t\\t\\tq.add(next);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (visited[B.x][B.y]) {\\r\\n\\t\\t\\tpw.println(\\\"YES\\\");\\r\\n\\t\\t\\tArrayList<Integer> moves = new ArrayList<>();\\r\\n\\r\\n\\t\\t\\t//Now we can go backwards from B to find all the moves we made.\\r\\n\\t\\t\\twhile ((A.x != B.x) || (A.y != B.y)) {\\r\\n\\t\\t\\t\\tint prevDir = prevMove[B.x][B.y];\\r\\n\\t\\t\\t\\tmoves.add(prevDir);\\r\\n\\r\\n\\t\\t\\t\\tB.x = B.x - dX[prevDir];\\r\\n\\t\\t\\t\\tB.y = B.y - dY[prevDir];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tCollections.reverse(moves);\\r\\n\\r\\n\\t\\t\\tpw.println(moves.size());\\r\\n\\t\\t\\tfor (int i : moves) {\\r\\n\\t\\t\\t\\tpw.print(dirs.charAt(i));\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t//We cannot reach point B.\\r\\n\\t\\t\\tpw.println(\\\"NO\\\");\\r\\n\\t\\t}\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n\\r\\n\\tpublic static class point {\\r\\n\\t\\tpublic int x, y;\\r\\n\\t\\tpublic point(int x, int y) {\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1193","source":"CSES","title":"Labyrinth","author":"Nathan Wang, Sofia Yang"},"parent":{"name":"cses-1193","relativePath":"cses-1193.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"bfs","title":"Breadth First Search (BFS)"}}}}]},"problemInfo":{"uniqueId":"cses-1193","url":"https://cses.fi/problemset/task/1193"}},"pageContext":{"id":"cses-1193"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}