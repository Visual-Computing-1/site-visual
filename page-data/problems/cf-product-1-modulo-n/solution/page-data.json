{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-product-1-modulo-n/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1514C\", source = \"CF\", title = \"Product 1 Modulo N\", author = \"Jesse Choe\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/89810\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\n\\r\\nll gcd(ll a, ll b) {\\r\\n\\tif(b == 0) return a;\\r\\n\\treturn gcd(b, a % b);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint n; cin >> n;\\r\\n\\tvector<ll> coprimes; \\r\\n\\t/*\\r\\n\\t * This array stores all of the numbers \\r\\n\\t * which are less than n and are coprime with n.\\r\\n\\t */\\r\\n\\tfor (int i = 1; i < n; i++) {\\r\\n\\t\\t// A number is coprime with n if gcd(n, i) = 1\\r\\n\\t\\tif (gcd(n, i) == 1) {\\r\\n\\t\\t\\tcoprimes.push_back(i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\t * The longest subsequence whose product is 1 modulo n\\r\\n\\t * is the longest subarray of coprimes with a product\\r\\n\\t * of 1 modulo n.\\r\\n\\t */\\r\\n\\r\\n\\tint number_of_coprimes = coprimes.size();\\r\\n\\tvector<ll> prefix_mod(number_of_coprimes);\\r\\n\\tprefix_mod[0] = 1;\\r\\n\\t/*\\r\\n\\t * We can take the modulo prefix to check the modulus\\r\\n\\t * of the first k coprimes, where k is the end of the\\r\\n\\t * subarray.\\r\\n\\t */\\r\\n\\tfor (int i = 1; i < number_of_coprimes; i++) {\\r\\n\\t\\tprefix_mod[i] = (prefix_mod[i - 1] * coprimes[i]) % n;\\r\\n\\t}\\r\\n\\tint length_of_longest_subarray = 1;\\r\\n\\tfor (int i = 0; i < number_of_coprimes; i++) {\\r\\n\\t\\t/* \\r\\n\\t\\t * If a given subarray has a product of \\r\\n\\t\\t * 1 modulo n, update the length of the \\r\\n\\t\\t * longest subsequence with product 1\\r\\n\\t\\t * modulo n.\\r\\n\\t\\t */\\r\\n\\t\\tif (prefix_mod[i] == 1) {\\r\\n\\t\\t\\tlength_of_longest_subarray = i + 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << length_of_longest_subarray << endl;\\r\\n\\tfor (int i = 0; i < length_of_longest_subarray; i++) {\\r\\n\\t\\tcout << coprimes[i] << \\\" \\\";\\r\\n\\t}\\r\\n\\tcout << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1514C","source":"CF","title":"Product 1 Modulo N","author":"Jesse Choe"},"parent":{"name":"cf-1514C","relativePath":"cf-1514C.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"divisibility","title":"Divisibility"}}}}]},"problemInfo":{"uniqueId":"cf-1514C","url":"https://codeforces.com/problemset/problem/1514/C"}},"pageContext":{"id":"cf-1514C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}