{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-consecutive-subsequence/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-977F\", source = \"CF\", title = \"Consecutive Subsequence\", author = \"Sofia Yang, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/59281\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class ConsecutiveSubsequence {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tint[] arr = new int[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tarr[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tMap<Integer, Integer> dp = new HashMap<>();\\r\\n\\t\\tfor (int i = N - 1; i >= 0; i--) {\\r\\n\\t\\t\\t// If the next number exists, we can continue the subsequence.\\r\\n\\t\\t\\tif (dp.containsKey(arr[i] + 1)) {\\r\\n\\t\\t\\t\\tdp.put(arr[i], dp.get(arr[i] + 1) + 1);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// If not we can just start a new subsequence.\\r\\n\\t\\t\\t\\tdp.put(arr[i], 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint idx = 0;\\r\\n\\t\\tint maxLen = 0;\\r\\n\\t\\tfor (int i : dp.keySet()) {\\r\\n\\t\\t\\t// Find the largest length.\\r\\n\\t\\t\\tif (dp.get(i) > maxLen) {\\r\\n\\t\\t\\t\\tidx = i;\\r\\n\\t\\t\\t\\tmaxLen = dp.get(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.println(maxLen);\\r\\n\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif (arr[i] == idx) {\\r\\n\\t\\t\\t\\tio.print((i + 1) + \\\" \\\");\\r\\n\\t\\t\\t\\tidx++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <map>\\r\\n#include <algorithm>\\r\\n \\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\nusing std::pair;\\r\\n \\r\\nint main() {\\r\\n\\tint size;\\r\\n\\tstd::cin >> size;\\r\\n\\tvector<int> arr(size);\\r\\n\\tfor (int& i : arr) {\\r\\n\\t\\tstd::cin >> i;\\r\\n\\t}\\r\\n \\r\\n\\tint best_len = 1;\\r\\n\\t// given the ending limit, stores the longest consecutive sequence\\r\\n\\tstd::map<int, pair<int, int>> ending_max_len;\\r\\n\\tstd::map<int, int> come_from;\\r\\n\\tfor (int i = 0; i < size; i++) {\\r\\n\\t\\tint n = arr[i];\\r\\n\\t\\tif (!ending_max_len.count(n - 1)) {\\r\\n\\t\\t\\tending_max_len[n] = {1, i};\\r\\n\\t\\t\\tcome_from[i] = -1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tint new_len = ending_max_len[n - 1].first + 1;\\r\\n\\t\\t\\tif (!ending_max_len.count(n) || ending_max_len[n].first < new_len) {\\r\\n\\t\\t\\t\\tending_max_len[n] = {new_len, i};\\r\\n\\t\\t\\t\\tbest_len = std::max(best_len, new_len);\\r\\n\\t\\t\\t\\tcome_from[i] = ending_max_len[n - 1].second;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\n\\tint at_ind = -1;\\r\\n\\tfor (const pair<int, pair<int, int>>& end : ending_max_len) {\\r\\n\\t\\tif (end.second.first == best_len) {\\r\\n\\t\\t\\tat_ind = end.second.second;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvector<int> reverse_inds;\\r\\n\\tfor (int i = 0; i < best_len; i++) {\\r\\n\\t\\treverse_inds.push_back(at_ind);\\r\\n\\t\\tat_ind = come_from[at_ind];\\r\\n\\t}\\r\\n \\r\\n\\tcout << best_len << endl;\\r\\n\\tfor (int i = best_len - 1; i > 0; i--) {\\r\\n\\t\\tcout << reverse_inds[i] + 1 << ' ';\\r\\n\\t}\\r\\n\\tcout << reverse_inds.front() + 1 << endl;\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-977F","source":"CF","title":"Consecutive Subsequence","author":"Sofia Yang, Kevin Sheng"},"parent":{"name":"cf-977F","relativePath":"cf-977F.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"lis","title":"Longest Increasing Subsequence"}}}}]},"problemInfo":{"uniqueId":"cf-977F","url":"https://codeforces.com/contest/977/problem/F"}},"pageContext":{"id":"cf-977F"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}