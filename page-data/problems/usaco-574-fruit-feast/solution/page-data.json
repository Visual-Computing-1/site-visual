{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-574-fruit-feast/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-574\", source = \"USACO Gold 2015 December\", title = \"Fruit Feast\", author = \"Danh Ta Chi Thanh, Mark Phan, Arpan Banerjee\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, LanguageSection, CPPSection, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_feast_gold_dec15.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---dp\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---dp\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - DP\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nbool dp[2][5000001];\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tfreopen(\\\"feast.in\\\",\\\"r\\\",stdin);\\r\\n\\tfreopen(\\\"feast.out\\\",\\\"w\\\",stdout);\\r\\n\\tint T,A,B;\\r\\n\\tcin >> T >> A >> B;\\r\\n\\tdp[0][0] = true;\\r\\n\\tfor (int i = 0; i < T + 1; ++i) {\\r\\n\\t\\tif (i-A>=0) dp[0][i] |= dp[0][i-A];\\r\\n\\t\\tif (i-B>=0) dp[0][i] |= dp[0][i-B];\\r\\n\\t\\tdp[1][i/2] |= dp[0][i];\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < T + 1; ++i) {\\r\\n\\t\\tif (i-A>=0) dp[1][i] |= dp[1][i-A];\\r\\n\\t\\tif (i-B>=0) dp[1][i] |= dp[1][i-B];\\r\\n\\t}\\r\\n\\tfor (int i = T; i >= 0; --i) if (dp[1][i]) {\\r\\n\\t\\tcout << i;\\r\\n\\t\\tbreak;\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"alternative-implementation---bfsdfs\",\n      children: [_jsx(_components.a, {\n        href: \"#alternative-implementation---bfsdfs\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Alternative Implementation - BFS/DFS\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instead of a knapsack solution, a BFS/DFS can be done to iterate though \", _jsx(_components.strong, {\n        children: \"all\"\n      }), \" attainable states and simply choose the one with maximum fullness. The scene can be thought of as a graph by defining each edge to be the transition from fullness \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \". Each state is defined by fullness and whether Bessie has drank water. Since there are \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2T\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn><mi>T</mi></mrow><annotation encoding=\\\"application/x-tex\\\">2T</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span></span></span></span>\"\n      }), \" states and each state is visited at most once, the time and space complexity of this solution is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(T)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>T</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(T)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". Below is a BFS implementation.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int maxn = 5e6 + 5;\\r\\nbool pass[maxn][2];\\r\\n\\r\\nstruct node {\\r\\n\\tint val;\\r\\n\\tbool drunk;\\r\\n};\\r\\n\\r\\nint bfs(int t, int a, int b) {\\r\\n\\tint res = INT_MIN;\\r\\n\\tqueue<node> q;\\r\\n\\tq.push({0, 0});\\r\\n\\r\\n\\twhile (!q.empty()) {\\r\\n\\t\\tint value = q.front().val;\\r\\n\\t\\tbool drunk = q.front().drunk;\\r\\n\\t\\tq.pop();\\r\\n\\t\\tres = max(res, value);\\r\\n\\r\\n\\t\\tif(value + a <= t && !pass[value + a][drunk]) {\\r\\n\\t\\t\\tq.push({value + a, drunk});\\r\\n\\t\\t\\tpass[value + a][drunk] = true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif(value + b <= t && !pass[value + b][drunk]) {\\r\\n\\t\\t\\tq.push({value + b, drunk});\\r\\n\\t\\t\\tpass[value + b][drunk] = true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif(!drunk && !pass[value / 2][1]) {\\r\\n\\t\\t\\tq.push({value / 2, 1});\\r\\n\\t\\t\\tpass[value / 2][1] = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn res;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"feast.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"feast.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tint t, a, b;\\r\\n\\tcin >> t >> a >> b;\\r\\n\\tcout << bfs(t, a, b);\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-574","source":"USACO Gold 2015 December","title":"Fruit Feast","author":"Danh Ta Chi Thanh, Mark Phan, Arpan Banerjee"},"parent":{"name":"usaco-574","relativePath":"usaco-574.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution - DP","slug":"solution---dp"},{"depth":2,"value":"Alternative Implementation - BFS/DFS","slug":"alternative-implementation---bfsdfs"}],"java":[{"depth":2,"value":"Solution - DP","slug":"solution---dp"},{"depth":2,"value":"Alternative Implementation - BFS/DFS","slug":"alternative-implementation---bfsdfs"}],"py":[{"depth":2,"value":"Solution - DP","slug":"solution---dp"},{"depth":2,"value":"Alternative Implementation - BFS/DFS","slug":"alternative-implementation---bfsdfs"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"knapsack","title":"Knapsack DP"}}}}]},"problemInfo":{"uniqueId":"usaco-574","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=574"}},"pageContext":{"id":"usaco-574"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}