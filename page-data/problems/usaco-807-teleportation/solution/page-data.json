{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-807-teleportation/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-807\", source = \"USACO Bronze 2018 February\", title = \"Teleportation\", author = \"Ananth Kashyap, Tanmoy Das\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_teleport_bronze_feb18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            children: \"# Take in data using Python file i/o system\\r\\nfile_in = open('teleport.in')\\r\\ndata = file_in.read().strip().split('\\\\n')\\r\\na, b, x, y = map(int, data[0].split(' '))\\r\\n\\r\\n# Manually sort a, b to be increasing order\\r\\nif a > b:\\r\\n\\ta, b = b, a\\r\\n\\r\\n# Manually sort x, y to be increasing order\\r\\nif x > y:\\r\\n\\tx, y = y, x\\r\\n\\r\\n# Set base distance as distance needed to travel without using teleporter\\r\\nbase_distance = abs(a - b)\\r\\n\\r\\n# Set teleporter distance to be the travel distance using the teleporter\\r\\nteleporter_distance = abs(a - x) + abs(b - y)\\r\\n\\r\\n# The answer is the minimum of the teleporter distance and the base distance\\r\\nans = min(teleporter_distance, base_distance)\\r\\n\\r\\n# Output the answer using Python file i/o system\\r\\nprint(ans, file = open('teleport.out', 'w'))\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\n\\r\\npublic class Teleportation {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader r = new BufferedReader(new FileReader(\\\"teleport.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(\\\"teleport.out\\\");\\r\\n\\r\\n\\t\\tString[] input = r.readLine().split(\\\" \\\");\\r\\n\\t\\tint a = Integer.parseInt(input[0]);\\r\\n\\t\\tint b = Integer.parseInt(input[1]);\\r\\n\\t\\tint x = Integer.parseInt(input[2]);\\r\\n\\t\\tint y = Integer.parseInt(input[3]);\\r\\n\\r\\n\\t\\t// Distance needed to travel without teleportation\\r\\n\\t\\tint result = Math.abs(a - b);\\r\\n\\r\\n\\t\\t// Result is minimum of all possible distances\\r\\n\\t\\tresult = Math.min(result, Math.abs(a - x) + Math.abs(b - y));\\r\\n\\t\\tresult = Math.min(result, Math.abs(a - y) + Math.abs(b - x));\\r\\n\\t\\tpw.println(result);\\r\\n\\t\\tpw.close()\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-807","source":"USACO Bronze 2018 February","title":"Teleportation","author":"Ananth Kashyap, Tanmoy Das"},"parent":{"name":"usaco-807","relativePath":"usaco-807.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"expected-knowledge","title":"Expected Knowledge"}}}}]},"problemInfo":{"uniqueId":"usaco-807","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=807"}},"pageContext":{"id":"usaco-807"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}