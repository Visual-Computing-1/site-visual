{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-frequency-of-string/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-963D\", source = \"CF\", title = \"Frequency of String\", author = \"Dustin Miao\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/58991\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"official editorial\"\n      }), \" mentions a solution using an Aho-Corasick Automaton built over the query strings. We run the initial string through the automaton to locate all occurence positions of each query. The answer can easily be identified for each query by using a sliding window.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"More intuitively, instead of building an Aho-Corasick automaton over the queries, let us build a suffix automaton over the input string. Like before, we will need all occurence positions.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For a state \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"s\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\\\"application/x-tex\\\">s</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span></span></span></span>\"\n      }), \", let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"pos[s]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">pos[s]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">os</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" denote the ending position of the first occurence of any string that corresponds to state \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"s\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\\\"application/x-tex\\\">s</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"When we create a new state \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"s\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\\\"application/x-tex\\\">s</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"pos[s] = len[s] - 1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">pos[s] = len[s] - 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">os</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When we clone state \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"t\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\\\"application/x-tex\\\">t</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6151em;\\\"></span><span class=\\\"mord mathnormal\\\">t</span></span></span></span>\"\n        }), \" to create a state \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"s\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\\\"application/x-tex\\\">s</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"pos[s] = pos[t]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy=\\\"false\\\">[</mo><mi>t</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">pos[s] = pos[t]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">os</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">os</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With this method,  we can easily initialize \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"pos\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\\\"application/x-tex\\\">pos</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">os</span></span></span></span>\"\n      }), \" without any extra time complexity. Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"occ_P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>o</mi><mi>c</mi><msub><mi>c</mi><mi>P</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">occ_P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord mathnormal\\\">oc</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3283em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" be the set of positions where a string \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n      }), \" begins in the string. If state \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"s\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\\\"application/x-tex\\\">s</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span></span></span></span>\"\n      }), \" corresponds to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n      }), \", then clearly \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(pos[p] - |P| + 1) \\\\in occ_P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy=\\\"false\\\">[</mo><mi>p</mi><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>P</mi><mi mathvariant=\\\"normal\\\">∣</mi><mo>+</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo><mo>∈</mo><mi>o</mi><mi>c</mi><msub><mi>c</mi><mi>P</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">(pos[p] - |P| + 1) \\\\in occ_P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">os</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mord\\\">∣</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">∈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord mathnormal\\\">oc</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3283em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \". To find the remainder of occurence positions, we can take advantage of the structure of the suffix automaton.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All states where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n      }), \" is a suffix is a candidate for \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"occ_P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>o</mi><mi>c</mi><msub><mi>c</mi><mi>P</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">occ_P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord mathnormal\\\">oc</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3283em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \". Thus, we simply do a BFS/DFS on the \", _jsx(_components.em, {\n        children: \"suffix-link tree\"\n      }), \", or the tree formed by building a tree out of the suffix links and rooted at the initial state, starting from state that we arrive at when we run \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n      }), \" through the suffix automaton. There is a technicality that more than one state may have the same occurence position. Namely, this happens only with cloned states; thus, we redefine \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"pos[s] = -1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy=\\\"false\\\">[</mo><mi>s</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">pos[s] = -1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">os</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" for all cloned states \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"s\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\\\"application/x-tex\\\">s</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can preprocess all queries, and solve them all with a single BFS/DFS.\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Time Complexity:\"\n          }), \" \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal{O}(m \\\\sqrt{m} \\\\log n)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>m</mi><msqrt><mi>m</mi></msqrt><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(m \\\\sqrt{m} \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0503em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mord sqrt\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8003em;\\\"><span class=\\\"svg-align\\\" style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\" style=\\\"padding-left:0.833em;\\\"><span class=\\\"mord mathnormal\\\">m</span></span></span><span style=\\\"top:-2.7603em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"hide-tail\\\" style=\\\"min-width:0.853em;height:1.08em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\\nc69,-144,104.5,-217.7,106.5,-221\\nl0 -0\\nc5.3,-9.3,12,-14,20,-14\\nH400000v40H845.2724\\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2397em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          })]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n \\r\\nusing pii = pair<int, int>;\\r\\n\\r\\n//BeginCodeSnip{Suffix Automaton}\\r\\n/**\\r\\n * Generates the Suffix Automaton of a given string\\r\\n * Complexity: O(|S|)\\r\\n */ \\r\\nstruct SuffixAuto {\\r\\n\\tstruct State {\\r\\n\\t\\tint len, link, pos;\\r\\n\\t\\tint next[26];\\r\\n\\t\\tState(int len = 0, int link = -1, int pos = -1) : len(len), link(link), pos(pos) {\\r\\n\\t\\t\\tmemset(next, -1, sizeof(next));\\r\\n\\t\\t}\\r\\n\\t};\\r\\n \\r\\n\\tvector<State> states;\\r\\n\\t\\r\\n\\tSuffixAuto() {}\\r\\n \\r\\n\\tSuffixAuto(const string &S) { \\r\\n\\t\\tstates.reserve(2 * S.size());\\r\\n\\t\\tlast = state();\\r\\n\\t\\tfor (char c : S) {\\r\\n\\t\\t\\textend(c);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\n\\tvoid extend(char l) {\\r\\n\\t\\tint c = encode(l); \\r\\n\\t\\tint cur = state(states[last].len + 1, -1, states[last].len), P = last; \\r\\n\\t\\twhile (P != -1 && states[P].next[c] == -1) {\\r\\n\\t\\t\\tstates[P].next[c] = cur;\\r\\n\\t\\t\\tP = states[P].link;\\r\\n\\t\\t}\\r\\n\\t\\tif (P == -1) {\\r\\n\\t\\t\\tstates[cur].link = 0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tint Q = states[P].next[c];\\r\\n\\t\\t\\tif (states[P].len + 1 == states[Q].len) {\\r\\n\\t\\t\\t\\tstates[cur].link = Q;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tint C = state(states[P].len + 1, states[Q].link, -1);\\r\\n\\t\\t\\t\\tcopy(states[Q].next, states[Q].next + 26, states[C].next);\\r\\n\\t\\t\\t\\twhile (P != -1 && states[P].next[c] == Q) {\\r\\n\\t\\t\\t\\t\\tstates[P].next[c] = C;\\r\\n\\t\\t\\t\\t\\tP = states[P].link;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tstates[Q].link = states[cur].link = C;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tlast = cur;\\r\\n\\t}\\r\\n\\t\\r\\n\\tint run(string &P) {\\r\\n\\t\\tint s = 0;\\r\\n\\t\\tfor (char _c : P) {\\r\\n\\t\\t\\tint c = encode(_c);\\r\\n\\t\\t\\ts = states[s].next[c];\\r\\n\\t\\t\\tif (s == -1) {\\r\\n\\t\\t\\t\\treturn -1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn s;\\r\\n\\t}\\r\\n \\r\\nprivate:\\r\\n\\tint last;\\r\\n \\r\\n\\tint encode(char c) { return c - 'a'; }\\r\\n \\r\\n\\tinline int state(int len = 0, int link = -1, int pos = -1) {\\r\\n\\t\\tstates.emplace_back(len, link, pos);\\r\\n\\t\\treturn states.size() - 1;\\r\\n\\t}\\r\\n};\\r\\n//EndCodeSnip\\r\\n\\r\\nconst int MAXN = 1e5 + 1;\\r\\n\\t\\r\\nstring S;\\r\\nSuffixAuto sa;\\r\\n \\r\\n// answer for query\\r\\nint Q, ans[MAXN];  \\r\\n// queries per state\\r\\nvector<pii> queries[MAXN];  \\r\\n// suffix link tree (at most 2 * |S| nodes)\\r\\nvector<int> suffix_link_tree[MAXN * 2]; \\r\\n \\r\\nvector<int> ord;  // visited nodes in dfs\\r\\n \\r\\nvoid dfs(int u) {\\r\\n\\tint l = ord.size();\\r\\n\\tif (sa.states[u].pos != -1) {\\r\\n\\t\\tord.PB(sa.states[u].pos);\\r\\n\\t}\\r\\n\\r\\n\\tfor (int v : suffix_link_tree[u]) {\\r\\n\\t\\tdfs(v);\\r\\n\\t}\\r\\n\\r\\n\\tif (queries[u].size()) {\\r\\n\\t\\tint r = ord.size();\\r\\n\\t\\tsort(ord.begin() + l, ord.end()); \\r\\n\\t\\tfor (auto [q, K] : queries[u]) {\\r\\n\\t\\t\\tint t = INT_MAX;\\r\\n\\t\\t\\tfor (int i = l; i + K - 1 < r; i++) {\\r\\n\\t\\t\\t\\tt = min(t, ord[i + K - 1] - ord[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (t != INT_MAX) {\\r\\n\\t\\t\\t\\tans[q] += t;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tans[q] = -1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}  \\r\\n} \\r\\n \\r\\nint main() {\\r\\n\\tcin >> S >> Q;\\r\\n\\tsa = SuffixAuto(S);\\r\\n\\tfor (int i = 1; i < sa.states.size(); i++) {\\r\\n\\t\\tsuffix_link_tree[sa.states[i].link].push_back(i);\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < Q; i++) {\\r\\n\\t\\tint K; string P;\\r\\n\\t\\tcin >> K >> P;\\r\\n\\t\\tint s = sa.run(P);\\r\\n\\t\\tif (s == -1) {\\r\\n\\t\\t\\tans[i] = -1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tqueries[s].EB(i, K);\\r\\n\\t\\t\\tans[i] = P.size();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\n\\tdfs(0);\\r\\n \\r\\n\\tfor (int i = 0; i < Q; i++) {\\r\\n\\t\\tcout << ans[i] << '\\\\n';\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-963D","source":"CF","title":"Frequency of String","author":"Dustin Miao"},"parent":{"name":"cf-963D","relativePath":"cf-963D.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"string-search","title":"String Searching"}}}}]},"problemInfo":{"uniqueId":"cf-963D","url":"https://codeforces.com/contest/963/problem/D"}},"pageContext":{"id":"cf-963D"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}