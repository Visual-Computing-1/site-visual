{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-786-lifeguards/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-786\", source = \"USACO Silver 2018 January\", title = \"Lifeguards\", author = \"Ã“scar Garries, Nathan Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_lifeguards_silver_jan18.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation-with-sets\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation-with-sets\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation (With Sets)\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nstruct Event {\\r\\n\\tint time;\\r\\n\\tint cowId;\\r\\n\\tbool isStartOfInterval;\\r\\n};\\r\\n\\r\\nbool cmp (const Event& a, const Event& b) {\\r\\n\\treturn a.time < b.time;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"lifeguards.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"lifeguards.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tvector<Event> events;\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tint l, r; cin >> l >> r;\\r\\n\\r\\n\\t\\t// each cow interval can be represented by two events:\\r\\n\\t\\t// one start event and one end event\\r\\n\\t\\tevents.push_back({ l, i, 1 });\\r\\n\\t\\tevents.push_back({ r, i, 0 });\\r\\n\\t}\\r\\n\\r\\n\\tsort(events.begin(), events.end(), cmp); // sort events by time\\r\\n\\r\\n\\t// how much time each cow spends alone\\r\\n\\tvector<int> aloneTime(n, 0);\\r\\n\\r\\n\\t// which cows are currently working during the time period [prevTime, curTime]\\r\\n\\tset<int> activeCows;\\r\\n\\r\\n\\t// The time of the previous event\\r\\n\\tint prevTime = 0;\\r\\n\\r\\n\\t// How much time is covered by all the cows together (assuming we don't need to fire anyone)\\r\\n\\tint totalTime = 0;\\r\\n\\r\\n\\tfor (auto ev : events) {\\r\\n\\t\\tint curTime = ev.time;\\r\\n\\r\\n\\t\\t// 0. Update total time covered by all the cows\\r\\n\\t\\tif (activeCows.size() > 0) {\\r\\n\\t\\t\\ttotalTime += curTime - prevTime;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// 1. Check to see if there was only one cow in [prevTime, curTime]\\r\\n\\t\\tif (activeCows.size() == 1) {\\r\\n\\t\\t\\taloneTime[*activeCows.begin()] += curTime - prevTime;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// 2. Process the event\\r\\n\\t\\tif (ev.isStartOfInterval) {\\r\\n\\t\\t\\tactiveCows.insert(ev.cowId);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tactiveCows.erase(ev.cowId);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// 3. Update prevTime\\r\\n\\t\\tprevTime = curTime;\\r\\n\\t}\\r\\n\\r\\n\\tint minAloneTime = 1e9;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tminAloneTime = min(minAloneTime, aloneTime[i]);\\r\\n\\t}\\r\\n\\r\\n\\tcout << totalTime - minAloneTime << endl;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.h2, {\n          id: \"another-implementation-no-sets\",\n          children: [_jsx(_components.a, {\n            href: \"#another-implementation-no-sets\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Another Implementation (No Sets)\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nstruct Time {\\r\\n\\tint l, r;\\r\\n};\\r\\n\\r\\nbool cmp (const Time& a, const Time& b) {\\r\\n\\treturn a.l < b.l;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"lifeguards.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"lifeguards.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\tvector<Time> ar(n);\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> ar[i].l >> ar[i].r;\\r\\n\\t}\\r\\n\\r\\n\\tsort(ar.begin(), ar.end(), cmp); // sort lifeguards by start point\\r\\n\\tint tot = 0, left = 0, right = 0;\\r\\n\\t// tot = time that is covered if no lifeguards covered\\r\\n\\t// right = max ending point of lifeguards considered so far\\r\\n\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tif (ar[i].r > right) {\\r\\n\\t\\t\\tleft = max(right, ar[i].l);\\r\\n\\t\\t\\ttot += ar[i].r - left;\\r\\n\\t\\t\\tright = ar[i].r;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tint res = tot; // res = min time to subtract if one lifeguard removed\\r\\n\\tTime last;\\r\\n\\tlast.l = ar[n - 1].r;\\r\\n\\tar.push_back(last);\\r\\n\\tright = 0;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tint curRes = min(ar[i + 1].l, ar[i].r) - max(ar[i].l, right);\\r\\n\\t\\tres = min(res, curRes);\\r\\n\\t\\tright = max(right, ar[i].r);\\r\\n\\t}\\r\\n\\r\\n\\tres = max(res, 0); // if res < 0 then answer = tot\\r\\n\\tcout << tot - res << '\\\\n';\\r\\n}\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.p, {\n          children: \"Lightly modified from the official editorial.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\npublic class lifeguards {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new FileReader(\\\"lifeguards.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\\\"lifeguards.out\\\")));\\r\\n\\t\\t// BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\t// PrintWriter pw = new PrintWriter(System.out);\\r\\n\\r\\n\\t\\tint n = Integer.parseInt(br.readLine());\\r\\n\\t\\tEvent[] events = new Event[2*n];\\r\\n\\t\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tint start = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint end = Integer.parseInt(st.nextToken());\\r\\n\\r\\n            // each cow interval can be represented by two events:\\r\\n            // one start event and one end event\\r\\n\\t\\t\\tevents[2*i] = new Event(start, i, 1);\\r\\n\\t\\t\\tevents[2*i+1] = new Event(end, i, 0);\\r\\n\\t\\t}\\r\\n\\t\\tArrays.sort(events); // sort events by time\\r\\n\\r\\n        // which cows are currently working during the time period [prevTime, curTime]\\r\\n\\t\\tTreeSet<Integer> activeCows = new TreeSet<Integer>();\\r\\n\\r\\n\\t    // How much time is covered by all the cows together (assuming we don't need to fire anyone)\\r\\n\\t\\tint totalTime = 0;\\r\\n\\r\\n        // how much time each cow spends alone\\r\\n\\t\\tint[] aloneTime = new int[n];\\r\\n\\r\\n        // The time of the previous event\\r\\n        int prevTime = 0;\\r\\n\\r\\n\\t\\tfor(Event ev : events) {\\r\\n            int curTime = ev.time;\\r\\n\\r\\n            // 0. Update total time covered by all the cows\\r\\n            if (!activeCows.isEmpty()) {\\r\\n                totalTime += curTime - prevTime;\\r\\n            }\\r\\n\\r\\n            // 1. Check to see if there was only one cow in [prevTime, curTime]\\r\\n            if (activeCows.size() == 1) {\\r\\n                aloneTime[activeCows.first()] += curTime - prevTime;\\r\\n            }\\r\\n\\r\\n            // 2. Process the event\\r\\n            if (ev.isStartOfInterval == 1) {\\r\\n                activeCows.add(ev.cowId);\\r\\n            } else {\\r\\n                activeCows.remove(ev.cowId);\\r\\n            }\\r\\n\\r\\n            // 3. Update prevTime\\r\\n            prevTime = curTime;\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n        int minAloneTime = 1000000000;\\r\\n        for (int i = 0; i < n; i++) {\\r\\n            minAloneTime = Math.min(minAloneTime, aloneTime[i]);\\r\\n        }\\r\\n\\r\\n\\t\\tpw.println(totalTime - minAloneTime);\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class Event implements Comparable<Event> {\\r\\n\\t\\tpublic int time, cowId, isStartOfInterval;\\r\\n\\t\\tpublic Event(int a, int b, int c) {\\r\\n\\t\\t\\ttime=a;\\r\\n\\t\\t\\tcowId=b;\\r\\n            isStartOfInterval = c;\\r\\n\\t\\t}\\r\\n\\t\\tpublic int compareTo(Event s) {\\r\\n\\t\\t\\treturn time - s.time;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n}\\n\"\n          })\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-786","source":"USACO Silver 2018 January","title":"Lifeguards","author":"Ã“scar Garries, Nathan Wang"},"parent":{"name":"usaco-786","relativePath":"usaco-786.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation (With Sets)","slug":"implementation-with-sets"},{"depth":2,"value":"Another Implementation (No Sets)","slug":"another-implementation-no-sets"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sorting-custom","title":"Custom Comparators and Coordinate Compression"}}}}]},"problemInfo":{"uniqueId":"usaco-786","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=786"}},"pageContext":{"id":"usaco-786"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}