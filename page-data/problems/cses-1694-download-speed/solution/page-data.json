{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1694-download-speed/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1694\", source = \"CSES\", title = \"Download Speed\", author = \"Dong Liu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \": \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(N^2 \\\\cdot M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>⋅</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(N^2 \\\\cdot M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Just find the max flow of the graph using your favourite max flow algorithm.\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsx(_components.p, {\n          children: \"The code below uses Dinic's maxflow algorithm.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\nusing vi = vector<int>;\\r\\n#define f first\\r\\n#define s second\\r\\n#define pb push_back\\r\\n#define all(x) begin(x), end(x)\\r\\n\\r\\n#define F0R(i,a) for(int i=0; i<(a); i++)\\r\\n#define FOR(i,a,b) for(int i=(a); i<=(b); i++)\\r\\n#define R0F(i,a) for(int i=(a)-1; i>=0; i--)\\r\\n#define ROF(i,a,b) for(int i=(b); i>=a; i--)\\r\\n#define trav(a,x) for (auto& a: x)\\r\\n\\r\\nint n, m;\\r\\nll adj[501][501], oadj[501][501];\\r\\n\\r\\nll flow[501];\\r\\nbool V[501];\\r\\nint pa[501];\\r\\n\\r\\nbool reachable() {\\r\\n\\tmemset(V, false, sizeof(V));\\r\\n\\tqueue<int> Q; Q.push(1); V[1]=1;\\r\\n\\twhile(!Q.empty()) {\\r\\n\\t\\tint i=Q.front(); Q.pop();\\r\\n\\t\\tFOR(j,1,n) if (adj[i][j] && !V[j])\\r\\n\\t\\t\\tV[j]=1, pa[j]=i, Q.push(j);\\r\\n\\t}\\r\\n\\treturn V[n];\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcin >> n >> m;\\r\\n\\tFOR(i,1,n) FOR(j,1,n) adj[i][j] = 0;\\r\\n\\tF0R(i,m) {\\r\\n\\t\\tll a,b,c; cin >> a >> b >> c;\\r\\n\\t\\tadj[a][b] += c;\\r\\n\\t}\\r\\n\\tint v, u;\\r\\n\\tll maxflow = 0;\\r\\n\\twhile(reachable()) {\\r\\n\\t\\tll flow = 1e18;\\r\\n\\t\\tfor (v=n; v!=1; v=pa[v]) {\\r\\n\\t\\t\\tu = pa[v];\\r\\n\\t\\t\\tflow = min(flow, adj[u][v]);\\r\\n\\t\\t}\\r\\n\\t\\tmaxflow += flow;\\r\\n\\t\\tfor (v=n; v!=1; v=pa[v]) {\\r\\n\\t\\t\\tu = pa[v];\\r\\n\\t\\t\\tadj[u][v] -= flow;\\r\\n\\t\\t\\tadj[v][u] += flow;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << maxflow << '\\\\n';\\r\\n}\\n\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1694","source":"CSES","title":"Download Speed","author":"Dong Liu"},"parent":{"name":"cses-1694","relativePath":"cses-1694.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"max-flow","title":"Maximum Flow"}}}}]},"problemInfo":{"uniqueId":"cses-1694","url":"https://cses.fi/problemset/task/1694"}},"pageContext":{"id":"cses-1694"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}