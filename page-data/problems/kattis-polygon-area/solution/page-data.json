{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/kattis-polygon-area/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"kattis-polygonarea\", source = \"Kattis\", title = \"Polygon Area\", author = \"Neo Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"We can use the \", _jsx(_components.a, {\n        href: \"/CPH.pdf#page=281\",\n        children: \"shoelace theorem\"\n      }), \" to find the area of the\\r\\npolygon.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Recall that the sign of the resulting area determines the direction in which the\\r\\nvertices are given. For our implementation, the vertices are given clockwise if\\r\\nthe area is negative, and counterclockwise otherwise.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\n// From KACTL: https://github.com/kth-competitive-programming/kactl\\r\\n\\r\\ntemplate<class T>\\r\\nstruct Point {\\r\\n\\ttypedef Point P;\\r\\n\\tT x, y;\\r\\n\\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\\r\\n\\tP operator-(P p) const { return P(x-p.x, y-p.y); }\\r\\n\\tT cross(P p) const { return x*p.y - y*p.x; }\\r\\n\\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\\r\\n};\\r\\n\\r\\ntemplate<class T>\\r\\nT polygonArea2(vector<Point<T>>& v) {\\r\\n\\tT a = v.back().cross(v[0]);\\r\\n\\tfor(int i = 0; i < sz(v)-1; i++) a += v[i].cross(v[i+1]);\\r\\n\\treturn a;\\r\\n}\\r\\n\\r\\ntypedef Point<long double> P;\\r\\n\\r\\nvoid solve(int n) {\\r\\n\\tvector<P> pts(n);\\r\\n\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\tint a, b; cin >> a >> b;\\r\\n\\t\\tpts[i] = P(a, b);\\r\\n\\t}\\r\\n\\r\\n\\t// implementation has 2x polygon area\\r\\n\\tlong double area = polygonArea2(pts) / 2;\\r\\n\\t(area < 0) ? cout << \\\"CW \\\" : cout << \\\"CCW \\\";\\r\\n\\r\\n\\tcout << fixed << setprecision(1) << abs(area) << \\\"\\\\n\\\";\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO();\\r\\n\\tfor(;;) {\\r\\n\\t\\tint n; cin >> n;\\r\\n\\t\\tif(!n) break;\\r\\n\\t\\tsolve(n);\\r\\n\\t}\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"kattis-polygonarea","source":"Kattis","title":"Polygon Area","author":"Neo Wang"},"parent":{"name":"kattis-polygonarea","relativePath":"kattis-polygonarea.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"geo-pri","title":"Geometry Primitives"}}}}]},"problemInfo":{"uniqueId":"kattis-polygonarea","url":"https://open.kattis.com/problems/polygonarea"}},"pageContext":{"id":"kattis-polygonarea"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}