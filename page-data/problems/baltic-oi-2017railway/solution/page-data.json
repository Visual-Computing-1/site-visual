{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/baltic-oi-2017railway/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"baltic-17-railway\", source = \"Baltic OI 2017\", title = \"Railway\", author = \"Andi Qu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://boi.cses.fi/files/boi2017_solutions.zip\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this problem, we're given a tree and asked to increment the values of all\\r\\nedges on the spanning trees of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" given subsets of nodes.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is similar to incrementing the values of all edges on given paths, so let's\\r\\ntry to adapt the solution for that to this problem. (To increment the values of\\r\\nall edges on a path efficiently,\\r\\n\", _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/78564\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"we can use a Fenwick tree\"\n      }), \".)\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We make the following important observation: \", _jsx(_components.strong, {\n        children: \"In a DFS, we traverse each edge\\r\\nexactly twice\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"How does this help us? First, we do a DFS on the entire tree and note when each\\r\\nnode is visited.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we sort the chosen nodes \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" in the order that they're visited in the DFS,\\r\\nthen the traversal\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c_1 \\\\rightarrow c_2 \\\\rightarrow \\\\dots \\\\rightarrow c_{s_i} \\\\rightarrow c_1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>→</mo><msub><mi>c</mi><mn>2</mn></msub><mo>→</mo><mo>⋯</mo><mo>→</mo><msub><mi>c</mi><msub><mi>s</mi><mi>i</mi></msub></msub><mo>→</mo><msub><mi>c</mi><mn>1</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_1 \\\\rightarrow c_2 \\\\rightarrow \\\\dots \\\\rightarrow c_{s_i} \\\\rightarrow c_1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.3669em;\\\"></span><span class=\\\"minner\\\">⋯</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6807em;vertical-align:-0.2501em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3281em;\\\"><span style=\\\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.5em;\\\"></span><span class=\\\"sizing reset-size3 size1 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.143em;\\\"><span></span></span></span></span></span></span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2501em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \"\\r\\nvisits each edge on the spanning tree of the chosen nodes exactly twice.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This means we can split each spanning tree into several paths and increment the\\r\\nvalues of all edges on those paths individually!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally, we check whether the value of each edge is at least \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2K\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn><mi>K</mi></mrow><annotation encoding=\\\"application/x-tex\\\">2K</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The complexity of this algorithm is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((S + N) \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>S</mi><mo>+</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((S + N) \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint n, m, k;\\r\\nvector<pair<int, int>> graph[100001];\\r\\nint tin[100001], tout[100001], timer = 0, anc[100001][20], p_edge[100001];\\r\\nint chosen[50001], bit[100001];\\r\\n\\r\\nvoid dfs(int node = 1, int parent = 0) {\\r\\n\\ttin[node] = ++timer;\\r\\n\\tfor (int i = 1; i < 20; i++) anc[node][i] = anc[anc[node][i - 1]][i - 1];\\r\\n\\tfor (pair<int, int> i : graph[node]) if (i.first != parent) {\\r\\n\\t\\tanc[i.first][0] = node;\\r\\n\\t\\tp_edge[i.first] = i.second;\\r\\n\\t\\tdfs(i.first, node);\\r\\n\\t}\\r\\n\\ttout[node] = timer;\\r\\n}\\r\\n\\r\\nbool is_ancestor(int a, int b) {\\r\\n\\treturn (tin[a] <= tin[b] && tout[a] >= tout[b]);\\r\\n}\\r\\n\\r\\nint lca(int a, int b) {\\r\\n\\tif (is_ancestor(a, b)) return a;\\r\\n\\tfor (int i = 19; ~i; i--) {\\r\\n\\t\\tif (anc[a][i] && !is_ancestor(anc[a][i], b)) a = anc[a][i];\\r\\n\\t}\\r\\n\\treturn anc[a][0];\\r\\n}\\r\\n\\r\\nvoid update(int pos, int val) {\\r\\n\\tfor (; pos <= n; pos += pos & (-pos)) bit[pos] += val;\\r\\n}\\r\\n\\r\\nint query(int a, int b) {\\r\\n\\tint ans = 0;\\r\\n\\tfor (; b; b -= b & (-b)) ans += bit[b];\\r\\n\\tfor (a--; a; a -= a & (-a)) ans -= bit[a];\\r\\n\\treturn ans;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\tcin >> n >> m >> k;\\r\\n\\tfor (int i = 1; i < n; i++) {\\r\\n\\t\\tint a, b;\\r\\n\\t\\tcin >> a >> b;\\r\\n\\t\\tgraph[a].push_back({b, i});\\r\\n\\t\\tgraph[b].push_back({a, i});\\r\\n\\t}\\r\\n\\tdfs();\\r\\n\\twhile (m--) {\\r\\n\\t\\tint s, l;\\r\\n\\t\\tcin >> s;\\r\\n\\t\\tfor (int i = 0; i < s; i++) cin >> chosen[i];\\r\\n\\t\\tsort(chosen, chosen + s, [](int A, int B) { return tin[A] < tin[B]; });\\r\\n\\t\\tchosen[s] = chosen[0];\\r\\n\\t\\tfor (int i = 0; i < s; i++) {\\r\\n\\t\\t\\tint l = lca(chosen[i], chosen[i + 1]);\\r\\n\\t\\t\\tupdate(tin[chosen[i]], 1);\\r\\n\\t\\t\\tupdate(tin[chosen[i + 1]], 1);\\r\\n\\t\\t\\tupdate(tin[l], -2);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvector<int> ans;\\r\\n\\tfor (int i = 2; i <= n; i++)\\r\\n\\t\\tif (query(tin[i], tout[i]) >= 2 * k)\\r\\n\\t\\t\\tans.push_back(p_edge[i]);\\r\\n\\tsort(ans.begin(), ans.end());\\r\\n\\tcout << ans.size() << '\\\\n';\\r\\n\\tfor (int i : ans) cout << i << ' ';\\r\\n\\treturn 0;\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"baltic-17-railway","source":"Baltic OI 2017","title":"Railway","author":"Andi Qu"},"parent":{"name":"baltic-17-railway","relativePath":"baltic-17-railway.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"binary-jump","title":"Binary Jumping"}}}}]},"problemInfo":{"uniqueId":"baltic-17-railway","url":"https://oj.uz/problem/view/BOI17_railway"}},"pageContext":{"id":"baltic-17-railway"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}