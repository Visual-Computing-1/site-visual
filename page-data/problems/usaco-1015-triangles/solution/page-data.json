{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1015-triangles/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1015\", source = \"USACO Silver 2020 February\", title = \"Triangles\", author = \"Albert Zhu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_triangles_silver_feb20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nvoid setIO(string prob=\\\"\\\") {\\r\\n\\tif (!prob.empty()) {\\r\\n\\t\\tfreopen((prob + \\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\t\\tfreopen((prob + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nconst int MAX_N = 1e5;\\r\\nconst int MOD = 1e9 + 7;\\r\\nconst int MAX_C = 1e4;\\r\\n\\r\\nstruct Fence {\\r\\n\\tint x;\\r\\n\\tint y;\\r\\n\\t// terminology: anchor point = vertex of the right angle in a right triangle\\r\\n\\t// sum of heights of all triangles that use this fence as an anchor point\\r\\n\\tlong long heightsum;\\r\\n\\t// sum of the bases of all triangles that use this fence as an anchor point\\r\\n\\tlong long basesum;\\r\\n};\\r\\n\\r\\nFence fences[MAX_N];\\r\\n// all possible x coordinates of the fences (+1 to account for 0)\\r\\nvector<pair<int, int>> xcoords[2 * MAX_C + 1];\\r\\n// all possible y coordinates of the fences\\r\\nvector<pair<int, int>> ycoords[2 * MAX_C + 1];\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"triangles\\\");\\r\\n\\r\\n\\tint n; cin >> n;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> fences[i].x >> fences[i].y;\\r\\n\\t\\t// we add MAX_C to make all of our coordinates positive\\r\\n\\t\\t// so that we won't have negative indices\\r\\n\\t\\txcoords[fences[i].x + MAX_C].push_back({fences[i].y, i});\\r\\n\\t\\tycoords[fences[i].y + MAX_C].push_back({fences[i].x, i});\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 0; i <= 2 * MAX_C; i++) {\\r\\n\\t\\tif (xcoords[i].size() > 0) {\\r\\n\\t\\t\\t// cur is the value of the current s_i\\r\\n\\t\\t\\tlong long curr = 0;\\r\\n\\t\\t\\t// sort all y positions of all points w/ the same x pos\\r\\n\\t\\t\\tsort(xcoords[i].begin(), xcoords[i].end());\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * then we compute the value s_1 of this set:\\r\\n\\t\\t\\t * the sum of the heights of all the triangles that\\r\\n\\t\\t\\t * have their anchor point at (i, xcoords[i][0].first)\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tfor (int j = 1; j < xcoords[i].size(); j++) {\\r\\n\\t\\t\\t\\tcurr += xcoords[i][j].first - xcoords[i][0].first;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfences[xcoords[i][0].second].heightsum = curr;\\r\\n\\t\\t\\t// then we compute the rest of the s_i for this set\\r\\n\\t\\t\\tfor (int j = 1; j < xcoords[i].size(); j++) {\\r\\n\\t\\t\\t\\tcurr += (2 * j - xcoords[i].size())\\r\\n\\t\\t\\t\\t\\t\\t* (xcoords[i][j].first - xcoords[i][j - 1].first);\\r\\n\\t\\t\\t\\tfences[xcoords[i][j].second].heightsum = curr;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// we do the sums of bases in exactly the same way\\r\\n\\tfor (int i = 0; i <= MAX_C * 2; i++) {\\r\\n\\t\\tif (ycoords[i].size() > 0) {\\r\\n\\t\\t\\tlong long curr = 0;\\r\\n\\t\\t\\tsort(ycoords[i].begin(), ycoords[i].end());\\r\\n\\t\\t\\tfor (int j = 1; j < ycoords[i].size(); j++) {\\r\\n\\t\\t\\t\\tcurr += ycoords[i][j].first - ycoords[i][0].first;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfences[ycoords[i][0].second].basesum = curr;\\r\\n\\t\\t\\tfor (int j = 1; j < ycoords[i].size(); j++) {\\r\\n\\t\\t\\t\\tcurr += (2 * j - ycoords[i].size())\\r\\n\\t\\t\\t\\t\\t\\t* (ycoords[i][j].first - ycoords[i][j - 1].first);\\r\\n\\t\\t\\t\\tfences[ycoords[i][j].second].basesum = curr;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tlong long total_area = 0;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\ttotal_area += fences[i].heightsum * fences[i].basesum % MOD;\\r\\n\\t\\ttotal_area %= MOD;\\r\\n\\t}\\r\\n\\tcout << total_area << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Triangles {\\r\\n\\tstatic class Fence {\\r\\n\\t\\tint x;\\r\\n\\t\\tint y;\\r\\n\\t\\t// terminology: anchor point = vertex of the right angle in a right triangle\\r\\n\\t\\t// sum of heights of all triangles that use this fence as an anchor point\\r\\n\\t\\tlong heightsum;\\r\\n\\t\\t// sum of the bases of all triangles that use this fence as an anchor point\\r\\n\\t\\tlong basesum;\\r\\n\\t}\\r\\n\\r\\n\\tstatic class Pair implements Comparable<Pair> {\\r\\n\\t\\tint first, second;\\r\\n\\r\\n\\t\\tpublic Pair(int x, int y) {\\r\\n\\t\\t\\tfirst = x;\\r\\n\\t\\t\\tsecond = y;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic int compareTo(Pair x) {\\r\\n\\t\\t\\tif (this.first == x.first) return this.second - x.second;\\r\\n\\t\\t\\treturn this.first - x.first;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tstatic final int MOD = (int) 1e9 + 7;\\r\\n\\tstatic final int MAX_C = (int) 1e4;\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader in = new BufferedReader(new FileReader(\\\"triangles.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(\\\"triangles.out\\\");\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(in.readLine());\\r\\n\\t\\t\\r\\n\\t\\tint n = Integer.parseInt(st.nextToken());\\r\\n\\t\\tFence[] fences = new Fence[n];\\r\\n\\t\\t// all possible x coordinates of the fences (+1 to account for 0)\\r\\n\\t\\tArrayList<Pair>[] xcoords = new ArrayList[2 * MAX_C + 1];\\r\\n\\t\\t// all possible y coordinates of the fences\\r\\n\\t\\tArrayList<Pair>[] ycoords = new ArrayList[2 * MAX_C + 1];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(in.readLine());\\r\\n\\t\\t\\tfences[i] = new Fence();\\r\\n\\t\\t\\tfences[i].x = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tfences[i].y = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\t// we add MAX_C to make all of our coordinates positive\\r\\n\\t\\t\\t// so that we won't have negative indices\\r\\n\\t\\t\\tif (xcoords[fences[i].x + MAX_C] == null)\\r\\n\\t\\t\\t\\txcoords[fences[i].x + MAX_C] = new ArrayList<>();\\r\\n\\t\\t\\tif (ycoords[fences[i].y + MAX_C] == null)\\r\\n\\t\\t\\t\\tycoords[fences[i].y + MAX_C] = new ArrayList<>();\\r\\n\\t\\t\\t\\r\\n\\t\\t\\txcoords[fences[i].x + MAX_C].add(new Pair(fences[i].y, i));\\r\\n\\t\\t\\tycoords[fences[i].y + MAX_C].add(new Pair(fences[i].x, i));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i <= 2 * MAX_C; i++) {\\r\\n\\t\\t\\tif (xcoords[i] != null) {\\r\\n\\t\\t\\t\\t// cur is the value of the current s_i\\r\\n\\t\\t\\t\\tlong cur = 0;\\r\\n\\t\\t\\t\\t// sort all y positions of all points w/ the same x pos\\r\\n\\t\\t\\t\\tCollections.sort(xcoords[i]);\\r\\n\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t * then we compute the value s_1 of this set:\\r\\n\\t\\t\\t\\t * the sum of the heights of all the triangles that\\r\\n\\t\\t\\t\\t * have their anchor point at (i, xcoords[i][0].first)\\r\\n\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\tfor (int j = 1; j < xcoords[i].size(); j++) {\\r\\n\\t\\t\\t\\t\\tcur += xcoords[i].get(j).first - xcoords[i].get(0).first;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tfences[xcoords[i].get(0).second].heightsum = cur;\\r\\n\\t\\t\\t\\t// then we compute the rest of the s_i for this set\\r\\n\\t\\t\\t\\tfor (int j = 1; j < xcoords[i].size(); j++) {\\r\\n\\t\\t\\t\\t\\tcur += (2 * j - xcoords[i].size())\\r\\n\\t\\t\\t\\t\\t\\t\\t* (xcoords[i].get(j).first - xcoords[i].get(j - 1).first);\\r\\n\\t\\t\\t\\t\\tfences[xcoords[i].get(j).second].heightsum = cur;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// we do the sums of bases in exactly the same way\\r\\n\\t\\tfor (int i = 0; i <= 2 * MAX_C; i++) {\\r\\n\\t\\t\\tif (ycoords[i] != null) {\\r\\n\\t\\t\\t\\tlong cur = 0;\\r\\n\\t\\t\\t\\tCollections.sort(ycoords[i]);\\r\\n\\t\\t\\t\\tfor (int j = 1; j < ycoords[i].size(); j++) {\\r\\n\\t\\t\\t\\t\\tcur += ycoords[i].get(j).first - ycoords[i].get(0).first;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tfences[ycoords[i].get(0).second].basesum = cur;\\r\\n\\t\\t\\t\\tfor (int j = 1; j < ycoords[i].size(); j++) {\\r\\n\\t\\t\\t\\t\\tcur += (2 * j - ycoords[i].size())\\r\\n\\t\\t\\t\\t\\t\\t\\t* (ycoords[i].get(j).first - ycoords[i].get(j - 1).first);\\r\\n\\t\\t\\t\\t\\tfences[ycoords[i].get(j).second].basesum = cur;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// finally we compute the total area\\r\\n\\t\\tint totalArea = 0;\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\ttotalArea += fences[i].heightsum * fences[i].basesum % MOD;\\r\\n\\t\\t\\ttotalArea %= MOD;\\r\\n\\t\\t}\\r\\n\\t\\tpw.println(totalArea);\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1015","source":"USACO Silver 2020 February","title":"Triangles","author":"Albert Zhu"},"parent":{"name":"usaco-1015","relativePath":"usaco-1015.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sorting-custom","title":"Custom Comparators and Coordinate Compression"}}}}]},"problemInfo":{"uniqueId":"usaco-1015","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1015"}},"pageContext":{"id":"usaco-1015"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}