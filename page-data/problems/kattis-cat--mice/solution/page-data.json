{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/kattis-cat--mice/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"kattis-catandmice\", source = \"Kattis\", title = \"Cat & Mice\", author = \"Ian Zhang, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Official Analysis:\\r\\n\", _jsx(_components.a, {\n        href: \"https://cs.baylor.edu/~hamerly/icpc/qualifier_2017/naq17_slides.pdf#page=54\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Solution Outline\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, we binary search on the initial velocity.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then, we use dynamic programming on bitmasks to check whether an initial velocity is valid. Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[i][j]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>j</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i][j]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" be\\r\\nthe minimum possible time to reach visit every mice in subset \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \" as the last visited mouse.\\r\\nIf it is not possible to reach subset \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \" as the last visited mice, let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[i][j] = \\\\infty\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>j</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mi mathvariant=\\\"normal\\\">∞</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i][j] = \\\\infty</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord\\\">∞</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When transitioning, iterate through every mouse not in the current subset and try adding it to the current subset.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally, an initial velocity is possible iff there is an index \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" such that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[2^{n}-1][i] \\\\neq\\\\infty\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo mathvariant=\\\"normal\\\">≠</mo><mi mathvariant=\\\"normal\\\">∞</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[2^{n}-1][i] \\\\neq\\\\infty</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.6644em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">n</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\"><span class=\\\"mrel\\\"><span class=\\\"mord vbox\\\"><span class=\\\"thinbox\\\"><span class=\\\"rlap\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"inner\\\"><span class=\\\"mord\\\"><span class=\\\"mrel\\\"></span></span></span><span class=\\\"fix\\\"></span></span></span></span></span><span class=\\\"mrel\\\">=</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord\\\">∞</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log(M)N^2\\\\cdot2^N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo><msup><mi>N</mi><mn>2</mn></msup><mo>⋅</mo><msup><mn>2</mn><mi>N</mi></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log(M)N^2\\\\cdot2^N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0913em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8413em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" is the maximum possible velocity.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 15;\\r\\nconst long double PRECISION = 1e-3, INF = 1e18;\\r\\n\\r\\nlong double dp[1 << MAX_N][MAX_N], p[MAX_N];  // p[i] = pow(speed_red, i)\\r\\n\\r\\nstruct Mouse {\\r\\n\\tlong double x, y, time;\\r\\n};\\r\\n\\r\\nlong double dist(Mouse a, Mouse b) {\\r\\n\\treturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\\r\\n}\\r\\n\\r\\nint mice_num;\\r\\nlong double speed_red;\\r\\nvector<Mouse> mice;\\r\\nMouse orig{0, 0, 0};\\r\\n\\r\\nbool check(long double v) {\\r\\n\\tfor (auto &i : dp) {\\r\\n\\t\\tfor (long double &j : i) {\\r\\n\\t\\t\\tj = INF;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 0; i < mice_num; ++i) {\\r\\n\\t\\tlong double time = dist(orig, mice[i]) / v;\\r\\n\\t\\tif (time <= mice[i].time) {\\r\\n\\t\\t\\tdp[1 << i][i] = time;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfor (int mask = 1; mask < (1 << mice_num); mask++) {\\r\\n\\t\\tint num_mice = __builtin_popcount(mask) - 1;\\r\\n\\t\\tfor (int i = 0; i < mice_num; ++i) {\\r\\n\\t\\t\\tif (mask & (1 << i)) {\\r\\n\\t\\t\\t\\tint pre = mask ^ (1 << i);\\r\\n\\t\\t\\t\\tfor (int j = 0; j < mice_num; ++j) {\\r\\n\\t\\t\\t\\t\\tif (pre & (1 << j)) {\\r\\n\\t\\t\\t\\t\\t\\tlong double cur_v = v * p[num_mice];\\r\\n\\t\\t\\t\\t\\t\\tlong double time = dp[pre][j] + dist(mice[j], mice[i]) / cur_v;\\r\\n\\t\\t\\t\\t\\t\\tif (dp[pre][j] != INF && time <= mice[i].time) {\\r\\n\\t\\t\\t\\t\\t\\t\\tdp[mask][i] = min(dp[mask][i], time);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 0; i < mice_num; ++i) {\\r\\n\\t\\tif (dp[(1 << mice_num) - 1][i] != INF) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcin >> mice_num;\\r\\n\\tmice.resize(mice_num);\\r\\n\\tfor (int i = 0; i < mice_num; ++i) {\\r\\n\\t\\tcin >> mice[i].x >> mice[i].y >> mice[i].time;\\r\\n\\t}\\r\\n\\t\\r\\n\\tcin >> speed_red;\\r\\n\\tp[0] = 1;\\r\\n\\tfor (int i = 1; i < MAX_N; ++i) {\\r\\n\\t\\tp[i] = p[i - 1] * speed_red;\\r\\n\\t}\\r\\n\\r\\n\\tlong double l = 0, r = 1e9;\\r\\n\\twhile (r - l > PRECISION) {\\r\\n\\t\\tlong double mid = (l + r) / 2;\\r\\n\\t\\tif (check(mid)) {\\r\\n\\t\\t\\tr = mid;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tl = mid;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << fixed << setprecision(16) << l << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic final class CatAndMice {\\r\\n\\tprivate static final long PRECISION = (long) 1e4;\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tint miceNum = Integer.parseInt(read.readLine());\\r\\n\\t\\tint[][] mice = new int[miceNum][];\\r\\n\\t\\tfor (int m = 0; m < miceNum; m++) {\\r\\n\\t\\t\\tmice[m] = Arrays.stream(read.readLine().split(\\\" \\\"))\\r\\n\\t\\t\\t\\t\\t\\t\\t.mapToInt(Integer::parseInt).toArray();\\r\\n\\t\\t}\\r\\n\\t\\tdouble speedRed = Double.parseDouble(read.readLine());\\r\\n\\r\\n\\t\\tlong lo = 0;\\r\\n\\t\\tlong hi = Long.MAX_VALUE / 2;  // this should be large enough\\r\\n\\t\\tdouble valid = -1;\\r\\n\\t\\twhile (lo <= hi) {\\r\\n\\t\\t\\tlong mid = (lo + hi) / 2;\\r\\n\\t\\t\\tdouble toTest = (double) mid / PRECISION;\\r\\n\\t\\t\\tif (allEatable(new int[] {0, 0}, mice, speedRed, toTest)) {\\r\\n\\t\\t\\t\\thi = mid - 1;\\r\\n\\t\\t\\t\\tvalid = toTest;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tlo = mid + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(valid);\\r\\n\\t}\\r\\n\\r\\n\\tprivate static boolean allEatable(\\r\\n\\t\\tint[] start, int[][] mice, double speedRed, double initSpeed\\r\\n\\t) {\\r\\n\\t\\tdouble[][] minTime = new double[1 << mice.length][mice.length];\\r\\n\\t\\tfor (int s = 0; s < (1 << mice.length); s++) {\\r\\n\\t\\t\\t// MAX_VALUE will be used as a placeholder for invalid values\\r\\n\\t\\t\\tArrays.fill(minTime[s], Double.MAX_VALUE);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int s = 1; s < (1 << mice.length); s++) {\\r\\n\\t\\t\\tdouble speed = Math.pow(speedRed, Integer.bitCount(s) - 1) * initSpeed;\\r\\n\\t\\t\\tfor (int end = 0; end < mice.length; end++) {\\r\\n\\t\\t\\t\\tif ((s & (1 << end)) == 0) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// the subset without the current end\\r\\n\\t\\t\\t\\tint prev = s & ~(1 << end);\\r\\n\\t\\t\\t\\t// handle the special case for when we just started\\r\\n\\t\\t\\t\\tif (prev == 0) {\\r\\n\\t\\t\\t\\t\\tdouble dist = dist(start, mice[end]);\\r\\n\\t\\t\\t\\t\\tminTime[s][end] = initSpeed * mice[end][2] >= dist\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  ? dist / initSpeed : Double.MAX_VALUE;\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tfor (int prevEnd = 0; prevEnd < mice.length; prevEnd++) {\\r\\n\\t\\t\\t\\t\\tif (minTime[prev][prevEnd] == Double.MAX_VALUE) {\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdouble dist = dist(mice[prevEnd], mice[end]);\\r\\n\\t\\t\\t\\t\\t// check if Cartesian Cat can reach the mouse in time\\r\\n\\t\\t\\t\\t\\tif (speed * (mice[end][2] - minTime[prev][prevEnd]) < dist) {\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tminTime[s][end] = Math.min(\\r\\n\\t\\t\\t\\t\\t\\t\\tminTime[s][end],\\r\\n\\t\\t\\t\\t\\t\\t\\tminTime[prev][prevEnd] + dist / speed\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tfor (double time : minTime[(1 << mice.length) - 1]) {\\r\\n\\t\\t\\tif (time != Double.MAX_VALUE) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\tprivate static double dist(int[] p1, int[] p2) {\\r\\n\\t\\treturn Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"kattis-catandmice","source":"Kattis","title":"Cat & Mice","author":"Ian Zhang, Kevin Sheng"},"parent":{"name":"kattis-catandmice","relativePath":"kattis-catandmice.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dp-bitmasks","title":"Bitmask DP"}}}}]},"problemInfo":{"uniqueId":"kattis-catandmice","url":"https://open.kattis.com/problems/catandmice"}},"pageContext":{"id":"kattis-catandmice"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}