{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-945-snakes/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-945\", source = \"USACO Gold 2019 US Open\", title = \"Snakes\", author = \"Sofia Yang, Ryan Chou\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {MATHSPAN, HeaderLink, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_snakes_gold_open19.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instead of keeping track of all of the different resizings, let's assume that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[i][j]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>j</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i][j]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" stores the minimum sum of all net sizes for the first \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" snakes after \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \" resizings. Then the total wasted space would be \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[n][k] - T\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>n</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>k</mi><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mi>T</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[n][k] - T</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"T\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\\\"application/x-tex\\\">T</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span></span></span></span>\"\n      }), \" is the sum of all of the groups of snakes.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^3)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^3)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"snakes.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"snakes.out\\\", \\\"w\\\", stdout);\\r\\n\\t\\r\\n\\tint n, k;\\r\\n\\tcin >> n >> k;\\r\\n\\r\\n\\tvector<int> groups(n + 1);\\r\\n\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\tcin >> groups[i];\\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\t * dp[i][j] = the min sum of net sizes after \\r\\n\\t * catching first i snakes with j resizings\\r\\n\\t */\\r\\n\\tvector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));\\r\\n\\r\\n\\tint largest_group = -1;\\r\\n\\tint space_used = 0;\\r\\n\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\tlargest_group = max(largest_group, groups[i]);\\r\\n\\t\\t\\r\\n\\t\\t/*\\r\\n\\t\\t * base case: with zero resizings, Bessie must start off with\\r\\n\\t\\t * a net large enough to catch the largest group of snakes\\r\\n\\t\\t */\\r\\n\\t\\tdp[i][0] = largest_group * i;\\r\\n\\r\\n\\t\\tfor (int j = 1; j <= k; j++) {\\r\\n\\t\\t\\tdp[i][j] = INT32_MAX;\\r\\n\\t\\t\\tint net_size = groups[i];\\r\\n\\t\\t\\tfor (int c = i - 1; c >= 0; c--) {\\r\\n\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t * consider the case where we switch\\r\\n\\t\\t\\t\\t * after collecting the first c groups\\r\\n\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\tdp[i][j] = min(dp[i][j], dp[c][j - 1] + net_size * (i - c));\\r\\n\\t\\t\\t\\tnet_size = max(net_size , groups[c]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tspace_used += groups[i];\\r\\n\\t}\\r\\n\\tcout << dp[n][k] - space_used << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Snakes {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"snakes\\\");\\r\\n\\t\\tint groups = io.nextInt();\\r\\n\\t\\tint changes = io.nextInt();\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * dp[i][j] is the min sum of net sizes used\\r\\n\\t\\t * to pick up the first i groups with j net size changes.\\r\\n\\t\\t */\\r\\n\\t\\tint[][] dp = new int[groups + 1][changes + 1];\\r\\n\\t\\tint[] snakes = new int[groups + 1];\\r\\n\\t\\tint noWaste = 0;  // Just the sum of snakes in each group.\\r\\n\\t\\tint max = -1;  // The maximum net size used.\\r\\n\\r\\n\\t\\tfor (int i = 1; i <= groups; i++) {\\r\\n\\t\\t\\tsnakes[i] = io.nextInt();\\r\\n\\t\\t\\tmax = Math.max(max, snakes[i]);\\r\\n\\r\\n\\t\\t\\t// The default value is just (max net size) * (num groups).\\r\\n\\t\\t\\tdp[i][0] = max * i;\\r\\n\\r\\n\\t\\t\\tfor (int j = 1; j <= changes; j++) {\\r\\n\\t\\t\\t\\tdp[i][j] = Integer.MAX_VALUE;\\r\\n\\t\\t\\t\\tint size = snakes[i];\\r\\n\\t\\t\\t\\t// Changing the net size.\\r\\n\\t\\t\\t\\tfor (int prev = i - 1; prev >= 0; prev--) {\\r\\n\\t\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t\\t * The cost is the previous cost,\\r\\n\\t\\t\\t\\t\\t * plus the cost of picking up the groups from prev to i.\\r\\n\\t\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\t\\tdp[i][j] = Math.min(dp[i][j], dp[prev][j - 1] + size * (i - prev));\\r\\n\\t\\t\\t\\t\\tsize = Integer.max(size, snakes[prev]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnoWaste += snakes[i];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * The space wasted is just the current space\\r\\n\\t\\t * used minus the space used if there is unlimited size changes.\\r\\n\\t\\t */\\r\\n\\t\\tint answer = dp[groups][changes] - noWaste;\\r\\n\\t\\tio.println(answer);\\r\\n\\t\\tio.close();\\r\\n\\r\\n\\t}\\r\\n\\t\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-945","source":"USACO Gold 2019 US Open","title":"Snakes","author":"Sofia Yang, Ryan Chou"},"parent":{"name":"usaco-945","relativePath":"usaco-945.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-dp","title":"Introduction to DP"}}}}]},"problemInfo":{"uniqueId":"usaco-945","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=945"}},"pageContext":{"id":"usaco-945"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}