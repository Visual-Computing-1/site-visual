{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-739-bovine-genomics/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-739\", source = \"USACO Silver 2017 US Open\", title = \"Bovine Genomics\", author = \"Brad Ma, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_cownomics_silver_open17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(NM^3)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mi>M</mi><mn>3</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(NM^3)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <fstream>\\r\\n#include <string>\\r\\n#include <vector>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nint main() {\\r\\n\\tstd::ifstream read(\\\"cownomics.in\\\");\\r\\n\\r\\n\\tint cow_num;\\r\\n\\tint genome_len;\\r\\n\\tread >> cow_num >> genome_len;\\r\\n\\r\\n\\tvector<vector<int>> spotted(cow_num, vector<int>(genome_len));\\r\\n\\tfor (int s = 0; s < cow_num; s++) {\\r\\n\\t\\tstd::string genome;\\r\\n\\t\\tread >> genome;\\r\\n\\t\\tfor (int g = 0; g < genome_len; g++) {\\r\\n\\t\\t\\t// A -> 0, C -> 1, T -> 2, G -> 3\\r\\n\\t\\t\\tif (genome[g] == 'A') {\\r\\n\\t\\t\\t\\tspotted[s][g] = 0;\\r\\n\\t\\t\\t} else if (genome[g] == 'T') {\\r\\n\\t\\t\\t\\tspotted[s][g] = 1;\\r\\n\\t\\t\\t} else if (genome[g] == 'C') {\\r\\n\\t\\t\\t\\tspotted[s][g] = 2;\\r\\n\\t\\t\\t} else if (genome[g] == 'G') {\\r\\n\\t\\t\\t\\tspotted[s][g] = 3;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tvector<vector<int>> plain(cow_num, vector<int>(genome_len));\\r\\n\\tfor (int p = 0; p < cow_num; p++) {\\r\\n\\t\\tstd::string genome;\\r\\n\\t\\tread >> genome;\\r\\n\\t\\tfor (int g = 0; g < genome_len; g++) {\\r\\n\\t\\t\\tif (genome[g] == 'A') {\\r\\n\\t\\t\\t\\tplain[p][g] = 0;\\r\\n\\t\\t\\t} else if (genome[g] == 'T') {\\r\\n\\t\\t\\t\\tplain[p][g] = 1;\\r\\n\\t\\t\\t} else if (genome[g] == 'C') {\\r\\n\\t\\t\\t\\tplain[p][g] = 2;\\r\\n\\t\\t\\t} else if (genome[g] == 'G') {\\r\\n\\t\\t\\t\\tplain[p][g] = 3;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tint valid_sets = 0;\\r\\n\\r\\n\\t// Loop through every possible group of 3.\\r\\n\\tfor (int a = 0; a < genome_len; a++) {\\r\\n\\t\\tfor (int b = a + 1; b < genome_len; b++) {\\r\\n\\t\\t\\tfor (int c = b + 1; c < genome_len; c++) {\\r\\n\\t\\t\\t\\tvector<bool> spotted_ids(64);\\r\\n\\t\\t\\t\\tfor (int sc = 0; sc < cow_num; sc++) {\\r\\n\\t\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t\\t * By multiplying the first, second, and\\r\\n\\t\\t\\t\\t\\t * third digits by 16, 4, and 1 respectively, we can\\r\\n\\t\\t\\t\\t\\t * get a number unique to that combination.\\r\\n\\t\\t\\t\\t\\t */ \\r\\n\\t\\t\\t\\t\\tint total = (\\r\\n\\t\\t\\t\\t\\t\\tspotted[sc][a] * 16\\r\\n\\t\\t\\t\\t\\t\\t+ spotted[sc][b] * 4\\r\\n\\t\\t\\t\\t\\t\\t+ spotted[sc][c] * 1\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\tspotted_ids[total] = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tbool valid = true;\\r\\n\\t\\t\\t\\tfor (int pc = 0; pc < cow_num; pc++) {\\r\\n\\t\\t\\t\\t\\tint total = (\\r\\n\\t\\t\\t\\t\\t\\tplain[pc][a] * 16\\r\\n\\t\\t\\t\\t\\t\\t+ plain[pc][b] * 4\\r\\n\\t\\t\\t\\t\\t\\t+ plain[pc][c] * 1\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t// We can't tell the spotted & plain cows apart.\\r\\n\\t\\t\\t\\t\\tif (spotted_ids[total]) {\\r\\n\\t\\t\\t\\t\\t\\tvalid = false;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvalid_sets += valid;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tstd::ofstream(\\\"cownomics.out\\\") << valid_sets << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class BovineGenomics {\\r\\n\\tpublic static void main (String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"cownomics\\\");\\r\\n\\t\\r\\n\\t\\tint cowNum = io.nextInt();\\r\\n\\t\\tint genomeLen = io.nextInt();\\r\\n\\r\\n\\t\\tint[][] spotted = new int[cowNum][genomeLen];\\r\\n\\t\\tfor (int s = 0; s < cowNum; s++) {\\r\\n\\t\\t\\tgenome = io.next();\\r\\n\\t\\t\\tfor (int g = 0; g < genomeLen; g++) {\\r\\n\\t\\t\\t\\t// A -> 0, C -> 1, T -> 2, G -> 3\\r\\n\\t\\t\\t\\tif (genome.charAt(g) == 'A') {\\r\\n\\t\\t\\t\\t\\tspotted[s][g] = 0;\\r\\n\\t\\t\\t\\t} else if (genome.charAt(g) == 'C') {\\r\\n\\t\\t\\t\\t\\tspotted[s][g] = 1;\\r\\n\\t\\t\\t\\t} else if (genome.charAt(g) == 'T') {\\r\\n\\t\\t\\t\\t\\tspotted[s][g] = 2;\\r\\n\\t\\t\\t\\t} else if (genome.charAt(g) == 'G') {\\r\\n\\t\\t\\t\\t\\tspotted[s][g] = 3;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint[][] plain = new int[cowNum][genomeLen];\\r\\n\\t\\tfor (int p = 0; p < cowNum; p++) {\\r\\n\\t\\t\\tgenome = io.next();\\r\\n\\t\\t\\tfor (int g = 0; g < genomeLen; g++) {\\r\\n\\t\\t\\t\\tif (genome.charAt(g) == 'A') {\\r\\n\\t\\t\\t\\t\\tplain[p][g] = 0;\\r\\n\\t\\t\\t\\t} else if (genome.charAt(g) == 'C') {\\r\\n\\t\\t\\t\\t\\tplain[p][g] = 1;\\r\\n\\t\\t\\t\\t} else if (genome.charAt(g) == 'T') {\\r\\n\\t\\t\\t\\t\\tplain[p][g] = 2;\\r\\n\\t\\t\\t\\t} else if (genome.charAt(g) == 'G') {\\r\\n\\t\\t\\t\\t\\tplain[p][g] = 3;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint validSets = 0;\\r\\n\\r\\n\\t\\t// Loop through every possible group of 3.\\r\\n\\t\\tfor (int a = 0; a < genomeLen; a++) {\\r\\n\\t\\t\\tfor (int b = a + 1; b < genomeLen; b++) {\\r\\n\\t\\t\\t\\tfor (int c = b + 1; c < genomeLen; c++) {\\r\\n\\t\\t\\t\\t\\tboolean[] spottedIDs = new boolean[64];\\r\\n\\t\\t\\t\\t\\tfor (int sc = 0; sc < cowNum; sc++) {\\r\\n\\t\\t\\t\\t\\t\\t/*\\r\\n\\t\\t\\t\\t\\t\\t * By multiplying the first, second, and\\r\\n\\t\\t\\t\\t\\t\\t * third digits by 16, 4, and 1 respectively, we can\\r\\n\\t\\t\\t\\t\\t\\t * get a number unique to that combination.\\r\\n\\t\\t\\t\\t\\t\\t */ \\r\\n\\t\\t\\t\\t\\t\\tint total = (\\r\\n\\t\\t\\t\\t\\t\\t\\tspotted[sc][a] * 16\\r\\n\\t\\t\\t\\t\\t\\t\\t+ spotted[sc][b] * 4\\r\\n\\t\\t\\t\\t\\t\\t\\t+ spotted[sc][c] * 1\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\tspottedIDs[total] = true;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tboolean valid = true;\\r\\n\\t\\t\\t\\t\\tfor (int pc = 0; pc < cowNum; pc++) {\\r\\n\\t\\t\\t\\t\\t\\tint total = (\\r\\n\\t\\t\\t\\t\\t\\t\\tplain[pc][a] * 16\\r\\n\\t\\t\\t\\t\\t\\t\\t+ plain[pc][b] * 4\\r\\n\\t\\t\\t\\t\\t\\t\\t+ plain[pc][c] * 1\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\t// We can't tell the spotted & plain cows apart.\\r\\n\\t\\t\\t\\t\\t\\tif (spottedIDs[total]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tvalid = false;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tvalidSets += valid ? 1 : 0;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(validSets);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-739","source":"USACO Silver 2017 US Open","title":"Bovine Genomics","author":"Brad Ma, Kevin Sheng"},"parent":{"name":"usaco-739","relativePath":"usaco-739.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-complete","title":"Basic Complete Search"}}}}]},"problemInfo":{"uniqueId":"usaco-739","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=739"}},"pageContext":{"id":"usaco-739"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}