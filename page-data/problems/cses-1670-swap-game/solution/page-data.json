{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1670-swap-game/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1670\", source = \"CSES\", title = \"Swap Game\", author = \"Maggie Liu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since there are only \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"9!\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>9</mn><mo stretchy=\\\"false\\\">!</mo></mrow><annotation encoding=\\\"application/x-tex\\\">9!</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\">9</span><span class=\\\"mclose\\\">!</span></span></span></span>\"\n      }), \" states the grid can be in, we can use BFS to find the\\r\\nnumber of moves needed to reach the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{target}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">target</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{target}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7758em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">target</span></span></span></span></span>\"\n      }), \" from the starting grid. We\\r\\nrepresent each grid as a number in base \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>9</mn></mrow><annotation encoding=\\\"application/x-tex\\\">9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">9</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For each grid, we can swap two horizontally adjacent squares or two vertically\\r\\nadjacent squares. If we haven't processed this new grid yet, we can push the new\\r\\ngrid and distance into the queue and mark it as visited in the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{vis}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">vis</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{vis}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">vis</span></span></span></span></span>\"\n      }), \"\\r\\narray. When we reach the sorted grid, we print the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist</span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2!)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">!</mo><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2!)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">!)</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" is the side length of the\\r\\ngrid\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <queue>\\r\\n#include <vector>\\r\\n#include <algorithm>\\r\\nusing namespace std;\\r\\n\\r\\nint powers[10];\\r\\n\\r\\n// swap two pieces and return the new grid\\r\\nint move(int grid, int i, int j)\\r\\n{\\r\\n\\tint a = grid % powers[i + 1] / powers[i];\\r\\n\\tint b = grid % powers[j + 1] / powers[j];\\r\\n\\treturn grid - a * powers[i] - b * powers[j] + b * powers[i] + a * powers[j];\\r\\n}\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\tpowers[0] = 1;\\r\\n\\tfor (int i = 1; i < 10; i++)\\r\\n\\t{\\r\\n\\t\\tpowers[i] = 9 * powers[i - 1];\\r\\n\\t}\\r\\n\\tvector<bool> vis(powers[9], false);\\r\\n\\t// the final grid we want to reach\\r\\n\\tint target = 0;\\r\\n\\tfor (int i = 8; i >= 0; i--)\\r\\n\\t{\\r\\n\\t\\ttarget += (8 - i) * powers[i];\\r\\n\\t}\\r\\n\\tint grid = 0, num;\\r\\n\\tfor (int i = 8; i >= 0; i--)\\r\\n\\t{\\r\\n\\t\\tcin >> num;\\r\\n\\t\\tgrid += (num - 1) * powers[i];\\r\\n\\t}\\r\\n\\tqueue<pair<int, int>> q;\\r\\n\\tq.push({grid, 0});\\r\\n\\twhile (!q.empty())\\r\\n\\t{\\r\\n\\t\\tauto [g, dist] = q.front();\\r\\n\\t\\tq.pop();\\r\\n\\t\\t// if we've reached the target, we can print the number of moves\\r\\n\\t\\tif (g == target)\\r\\n\\t\\t{\\r\\n\\t\\t\\tcout << dist << endl;\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t\\t// swap two horizontally adjacent pieces\\r\\n\\t\\tfor (int i = 0; i < 8; i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tif (i % 3 == 2)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tint swapped = move(g, 8 - i, 8 - (i + 1));\\r\\n\\t\\t\\tif (!vis[swapped])\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tq.push({swapped, dist + 1});\\r\\n\\t\\t\\t\\tvis[swapped] = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// swap two vertically adjacent pieces\\r\\n\\t\\tfor (int i = 0; i < 6; i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tint swapped = move(g, 8 - i, 8 - (i + 3));\\r\\n\\t\\t\\tif (!vis[swapped])\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tq.push({swapped, dist + 1});\\r\\n\\t\\t\\t\\tvis[swapped] = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1670","source":"CSES","title":"Swap Game","author":"Maggie Liu"},"parent":{"name":"cses-1670","relativePath":"cses-1670.mdx"},"toc":{"cpp":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Explanation","slug":"explanation"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"bfs","title":"Breadth First Search (BFS)"}}}}]},"problemInfo":{"uniqueId":"cses-1670","url":"https://cses.fi/problemset/task/1670/"}},"pageContext":{"id":"cses-1670"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}