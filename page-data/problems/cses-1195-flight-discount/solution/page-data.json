{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1195-flight-discount/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1195\", source = \"CSES\", title = \"Flight Discount\", author = \"Kai Wang, Stanley Zhong, Maggie Liu, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution-1\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Say we use the discount coupon on the edge between cities A and B.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are two cases: we can go from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\\\\rightarrow A\\\\rightarrow B\\\\rightarrow N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>→</mo><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">1\\\\rightarrow A\\\\rightarrow B\\\\rightarrow N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \",\\r\\nor \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\\\\rightarrow B\\\\rightarrow A\\\\rightarrow N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>→</mo><mi>B</mi><mo>→</mo><mi>A</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">1\\\\rightarrow B\\\\rightarrow A\\\\rightarrow N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \". We need to know the distance\\r\\nbetween \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n      }), \", and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use Dijkstra's to compute the distance from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" to every vertex.\\r\\nThen our answer is\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\min\\\\limits_{A\\\\rightarrow B} \\\\texttt{dist1}[A]+c(A,B)+\\\\texttt{distN}[B]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><munder><mrow><mi>min</mi><mo>⁡</mo></mrow><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow></munder><mtext mathvariant=\\\"monospace\\\">dist1</mtext><mo stretchy=\\\"false\\\">[</mo><mi>A</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\\\"false\\\">(</mo><mi>A</mi><mo separator=\\\"true\\\">,</mo><mi>B</mi><mo stretchy=\\\"false\\\">)</mo><mo>+</mo><mtext mathvariant=\\\"monospace\\\">distN</mtext><mo stretchy=\\\"false\\\">[</mo><mi>B</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\min\\\\limits_{A\\\\rightarrow B} \\\\texttt{dist1}[A]+c(A,B)+\\\\texttt{distN}[B]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.4943em;vertical-align:-0.7443em;\\\"></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.6679em;\\\"><span style=\\\"top:-2.3557em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">A</span><span class=\\\"mrel mtight\\\">→</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span><span class=\\\"mop\\\">min</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7443em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist1</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">distN</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \", where\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c(A,B)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mo stretchy=\\\"false\\\">(</mo><mi>A</mi><mo separator=\\\"true\\\">,</mo><mi>B</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">c(A,B)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" is the cost to travel from city \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n      }), \" to city \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \" after applying the\\r\\ncoupon to that flight, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist1}[A]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist1</mtext><mo stretchy=\\\"false\\\">[</mo><mi>A</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist1}[A]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist1</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" is the cost to travel from city \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \"\\r\\nto city \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{distN}[B]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">distN</mtext><mo stretchy=\\\"false\\\">[</mo><mi>B</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{distN}[B]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">distN</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" is the cost to travel from city \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \" to city\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n \\r\\npublic class FlightDiscount {\\r\\n\\tstatic class Flight {\\r\\n\\t\\tint to;\\r\\n\\t\\tlong cost;\\r\\n\\t\\tFlight(int v, long wt) {\\r\\n\\t\\t\\tthis.to = v;\\r\\n\\t\\t\\tthis.cost = wt;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// The class we'll use to represent the Dijkstra state\\r\\n\\tstatic class Pos implements Comparable<Pos> {\\r\\n\\t\\tint pos;\\r\\n\\t\\tlong cost;\\r\\n\\t\\tPos(int val, long wsf) {\\r\\n\\t\\t\\tthis.pos = val;\\r\\n\\t\\t\\tthis.cost = wsf;\\r\\n\\t\\t}\\r\\n \\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compareTo(Pos o) {\\r\\n\\t\\t\\treturn (int) (this.cost - o.cost);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Making these variables local results in TLE on the last test case\\r\\n\\tstatic List<List<Flight>> neighbors = new ArrayList<>();\\r\\n\\tstatic List<List<Flight>> reverseNeighbors = new ArrayList<>();\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tStringTokenizer initial = new StringTokenizer(br.readLine());\\r\\n\\t\\tint cityNum = Integer.parseInt(initial.nextToken());\\r\\n\\t\\tint flightNum = Integer.parseInt(initial.nextToken());\\r\\n\\t\\tfor (int c = 0; c < cityNum; c++) {\\r\\n\\t\\t\\tneighbors.add(new ArrayList<>());\\r\\n\\t\\t\\treverseNeighbors.add(new ArrayList<>());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int f = 0; f < flightNum; f++) {\\r\\n\\t\\t\\tStringTokenizer flight = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tint from = Integer.parseInt(flight.nextToken()) - 1;\\r\\n\\t\\t\\tint to = Integer.parseInt(flight.nextToken()) - 1;\\r\\n\\t\\t\\tint cost = Integer.parseInt(flight.nextToken());\\r\\n\\t\\t\\tneighbors.get(from).add(new Flight(to, cost));\\r\\n\\t\\t\\treverseNeighbors.get(to).add(new Flight(from, cost));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlong[] dis1 = minDist(0, neighbors);\\r\\n\\t\\tlong[] dis2 = minDist(cityNum - 1, reverseNeighbors);\\r\\n\\t\\tlong minCost = Long.MAX_VALUE;\\r\\n\\t\\tfor (int c = 0; c < cityNum; c++) {\\r\\n\\t\\t\\t// Go through all flights and see what the min cost is\\r\\n\\t\\t\\tfor (Flight e : neighbors.get(c)) {\\r\\n\\t\\t\\t\\tminCost = Math.min(minCost, dis1[c] + dis2[e.to] + e.cost / 2);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(minCost);\\r\\n\\t}\\r\\n\\r\\n\\tpublic static long[] minDist(int start, ArrayList<ArrayList<Flight>> neighbors) {\\r\\n\\t\\tlong[] minDist = new long[neighbors.size()];\\r\\n\\t\\tboolean[] visited = new boolean[neighbors.size()];\\r\\n\\t\\tPriorityQueue<Pos> frontier = new PriorityQueue<>();\\r\\n\\t\\tfrontier.add(new Pos(start, 0));\\r\\n\\t\\twhile(!frontier.isEmpty()) {\\r\\n\\t\\t\\tPos curr = frontier.remove();\\r\\n\\t\\t\\tif (visited[curr.pos]) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tvisited[curr.pos] = true;\\r\\n\\t\\t\\tminDist[curr.pos] = curr.cost;\\r\\n\\t\\t\\tfor (Flight e : neighbors.get(curr.pos)) {\\r\\n\\t\\t\\t\\tfrontier.add(new Pos(e.to, curr.cost + e.cost));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn minDist;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <queue>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\nusing std::pair;\\r\\n\\r\\n/**\\r\\n * given a start point, and an adjacency list with costs,\\r\\n * this function gives an array with the minimum distances\\r\\n * from all the other nodes to the start node\\r\\n * (the value is INT64_MAX if unreachable)\\r\\n */\\r\\nvector<long long> min_costs(\\r\\n\\tint from, const vector<vector<pair<int, int>>>& neighbors\\r\\n) {\\r\\n\\tvector<long long> min_costs(neighbors.size(), INT64_MAX);\\r\\n\\tmin_costs[from] = 0;\\r\\n\\tstd::priority_queue<pair<long long, int>> frontier;\\r\\n\\tfrontier.push({0, from});\\r\\n\\twhile (!frontier.empty()) {\\r\\n\\t\\tpair<long long, int> curr_state = frontier.top();\\r\\n\\t\\tfrontier.pop();\\r\\n\\t\\tint curr = curr_state.second;\\r\\n\\t\\tif (-curr_state.first != min_costs[curr]) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tfor (auto [n, nc] : neighbors[curr]) {\\r\\n\\t\\t\\tlong long new_cost = min_costs[curr] + nc;\\r\\n\\t\\t\\tif (new_cost < min_costs[n]) {\\r\\n\\t\\t\\t\\tmin_costs[n] = new_cost;\\r\\n\\t\\t\\t\\tfrontier.push({-new_cost, n});\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn min_costs;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint city_num;\\r\\n\\tint flight_num;\\r\\n\\tstd::cin >> city_num >> flight_num;\\r\\n\\tvector<vector<pair<int, int>>> neighbors(city_num);\\r\\n\\tvector<vector<pair<int, int>>> reverse_neighbors(city_num);\\r\\n\\tfor (int f = 0; f < flight_num; f++) {\\r\\n\\t\\tint from;\\r\\n\\t\\tint to;\\r\\n\\t\\tint cost;\\r\\n\\t\\tstd::cin >> from >> to >> cost;\\r\\n\\t\\tneighbors[--from].push_back({--to, cost});\\r\\n\\t\\treverse_neighbors[to].push_back({from, cost});\\r\\n\\t}\\r\\n \\r\\n\\tvector<long long> start_costs = min_costs(0, neighbors);\\r\\n\\tvector<long long> end_costs = min_costs(city_num - 1, reverse_neighbors);\\r\\n\\tlong long total_min = INT64_MAX;\\r\\n\\tfor (int c = 0; c < city_num; c++) {\\r\\n\\t\\tfor (auto [n, nc] : neighbors[c]) {\\r\\n\\t\\t\\tif (start_costs[c] == INT64_MAX || end_costs[n] == INT64_MAX) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ttotal_min = std::min(\\r\\n\\t\\t\\t\\ttotal_min,\\r\\n\\t\\t\\t\\tstart_costs[c] + (nc / 2) + end_costs[n]\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << total_min << endl;\\r\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution-2\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Alternatively, we can run Dijkstra's and modify our distance array slightly to\\r\\ntrack whether the discount has been used or not.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist}[i][\\\\texttt{false}]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mtext mathvariant=\\\"monospace\\\">false</mtext><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist}[i][\\\\texttt{false}]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">false</span></span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" will represent the shortest distance from the start node\\r\\nto node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \", without using the discount. \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dist}[i][\\\\texttt{true}]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dist</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mtext mathvariant=\\\"monospace\\\">true</mtext><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dist}[i][\\\\texttt{true}]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dist</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">true</span></span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" will represent\\r\\nthe shortest distance after using the discount.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <queue>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nint main() {\\r\\n\\tint city_num;\\r\\n\\tint flight_num;\\r\\n\\tstd::cin >> city_num >> flight_num;\\r\\n\\tvector<vector<std::pair<int, int>>> neighbors(city_num);\\r\\n\\tfor (int f = 0; f < flight_num; f++) {\\r\\n\\t\\tint from;\\r\\n\\t\\tint to;\\r\\n\\t\\tint cost;\\r\\n\\t\\tstd::cin >> from >> to >> cost;\\r\\n\\t\\tneighbors[--from].push_back({--to, cost});\\r\\n\\t}\\r\\n \\r\\n\\tvector<vector<long long>> min_cost(city_num, {INT64_MAX, INT64_MAX});\\r\\n\\tmin_cost[0] = {0, 0};\\r\\n \\r\\n\\tstruct Pos {\\r\\n\\t\\tint pos;  // the current position\\r\\n\\t\\tbool used;  // whether we've used up our discount yet\\r\\n\\t\\tlong long cost;  // the cost associated with this state\\r\\n\\t};\\r\\n\\tauto cmp = [&] (const Pos& a, const Pos& b) { return a.cost > b.cost; };\\r\\n\\tstd::priority_queue<Pos, vector<Pos>, decltype(cmp)> frontier(cmp);\\r\\n\\tfrontier.push({0, false, 0});\\r\\n\\t\\r\\n\\twhile (!frontier.empty()) {\\r\\n\\t\\tPos curr = frontier.top();\\r\\n\\t\\tfrontier.pop();\\r\\n\\t\\tlong long curr_cost = min_cost[curr.pos][curr.used];\\r\\n\\t\\tif (curr_cost != curr.cost) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (curr.pos == city_num - 1) {\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tfor (auto [n, nc] : neighbors[curr.pos]) {\\r\\n\\t\\t\\t// if we haven't used the discount yet, try using it now\\r\\n\\t\\t\\tif (!curr.used) {\\r\\n\\t\\t\\t\\tlong long new_cost = curr_cost + nc / 2;\\r\\n\\t\\t\\t\\tif (new_cost < min_cost[n][true]) {\\r\\n\\t\\t\\t\\t\\tmin_cost[n][true] = new_cost;\\r\\n\\t\\t\\t\\t\\tfrontier.push(Pos{n, true, new_cost});\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// but we can always just try the normal cost route\\r\\n\\t\\t\\tif (curr_cost + nc < min_cost[n][curr.used]) {\\r\\n\\t\\t\\t\\tmin_cost[n][curr.used] = curr_cost + nc;\\r\\n\\t\\t\\t\\tfrontier.push(Pos{n, curr.used, curr_cost + nc});\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << min_cost[city_num - 1][1];\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1195","source":"CSES","title":"Flight Discount","author":"Kai Wang, Stanley Zhong, Maggie Liu, Kevin Sheng"},"parent":{"name":"cses-1195","relativePath":"cses-1195.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"}],"java":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"}],"py":[{"depth":2,"value":"Solution 1","slug":"solution-1"},{"depth":2,"value":"Solution 2","slug":"solution-2"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"shortest-paths","title":"Shortest Paths with Non-Negative Edge Weights"}}}}]},"problemInfo":{"uniqueId":"cses-1195","url":"https://cses.fi/problemset/task/1195"}},"pageContext":{"id":"cses-1195"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}