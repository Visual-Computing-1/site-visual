{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1147-maximum-building-i/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1147\", source = \"CSES\", title = \"Maximum Building I\", author = \"Benjamin Qi, Andrew Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    Spoiler: _missingComponent(\"Spoiler\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {Spoiler, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Spoiler, {\n      title: \"Hint\",\n      children: _jsxs(_components.p, {\n        children: [\"Fix the bottom row of the rectangle. Then apply the solution for\\r\\n\", _jsx(_components.a, {\n          href: \"/solutions/lc-largest-rectangle-in-histogram\",\n          children: \"Max Histogram Area\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution 1\",\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Time Complexity:\"\n        }), \" \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(NM)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(NM)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">NM</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        })]\n      }), _jsx(_components.p, {\n        children: \"Update the nearest tree for every column for each new bottom row. Iterate from\\r\\nleft to right and use a monotonic stack to calculate the area for every bottom\\r\\nrow.\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n#define pi pair<int, int>\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\nqueue<int> col[1005];\\r\\nchar grid[1005][1005];\\r\\nint main() {\\r\\n\\tint N, M; cin >> N >> M;\\r\\n\\tfor(int i = 0; i < N; i++){\\r\\n\\t\\tstring str; cin >> str;\\r\\n\\t\\tfor(int j = 0; j < M; j++){\\r\\n\\t\\t\\tgrid[j][i] = str[j];\\r\\n\\t\\t\\tif(grid[j][i] == '*'){\\r\\n\\t\\t\\t\\tcol[j].push(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor(int j = 0; j < M; j++) col[j].push(N);\\r\\n\\tint maxa = 0;\\r\\n\\tfor(int i = 0; i < N; i++){\\r\\n\\t\\tfor(int j = 0; j < M; j++){\\r\\n\\t\\t\\tif(col[j].front() < i) col[j].pop(); //updates the nearest tree\\r\\n\\t\\t}\\r\\n\\t\\tstack<pi> sta;\\r\\n\\t\\tfor(int j = 0; j < M; j++){\\r\\n\\t\\t\\tint start = j;\\r\\n\\t\\t\\twhile(!sta.empty() && col[j].front()-i < sta.top().s){\\r\\n\\t\\t\\t\\tpi cur = sta.top(); sta.pop();\\r\\n\\t\\t\\t\\tstart = cur.f;\\r\\n\\t\\t\\t\\tmaxa = max(maxa, (j-cur.f)*cur.s);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tsta.push(make_pair(start, col[j].front()-i));\\r\\n\\t\\t}\\r\\n\\t\\twhile(!sta.empty()){\\r\\n\\t\\t\\tpi cur = sta.top(); sta.pop();\\r\\n\\t\\t\\tmaxa = max(maxa, (M - cur.f)*cur.s);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << maxa << endl;\\r\\n\\treturn 0;\\r\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution 2\",\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Time Complexity:\"\n        }), \" \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(NM)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(NM)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">NM</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        })]\n      }), _jsx(_components.p, {\n        children: \"Same as solution 1, but we can use DSU instead of a monotonic stack.\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\nusing ld = long double;\\r\\nusing db = double;\\r\\nusing str = string; // yay python!\\r\\n\\r\\nusing pi = pair<int,int>;\\r\\nusing pl = pair<ll,ll>;\\r\\nusing pd = pair<db,db>;\\r\\n\\r\\nusing vi = vector<int>;\\r\\nusing vb = vector<bool>;\\r\\nusing vl = vector<ll>;\\r\\nusing vd = vector<db>;\\r\\nusing vs = vector<str>;\\r\\nusing vpi = vector<pi>;\\r\\nusing vpl = vector<pl>;\\r\\nusing vpd = vector<pd>;\\r\\n\\r\\n#define tcT template<class T\\r\\n#define tcTU tcT, class U\\r\\n// ^ lol this makes everything look weird but I'll try it\\r\\ntcT> using V = vector<T>;\\r\\ntcT, size_t SZ> using AR = array<T,SZ>;\\r\\ntcT> using PR = pair<T,T>;\\r\\n\\r\\n// pairs\\r\\n#define mp make_pair\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\n// vectors\\r\\n// oops size(x), rbegin(x), rend(x) need C++17\\r\\n#define sz(x) int((x).size())\\r\\n#define bg(x) begin(x)\\r\\n#define all(x) bg(x), end(x)\\r\\n#define rall(x) x.rbegin(), x.rend()\\r\\n#define sor(x) sort(all(x))\\r\\n#define rsz resize\\r\\n#define ins insert\\r\\n#define ft front()\\r\\n#define bk back()\\r\\n#define pb push_back\\r\\n#define eb emplace_back\\r\\n#define pf push_front\\r\\n\\r\\n#define lb lower_bound\\r\\n#define ub upper_bound\\r\\ntcT> int lwb(V<T>& a, const T& b) { return int(lb(all(a),b)-bg(a)); }\\r\\n\\r\\n// loops\\r\\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\\r\\n#define F0R(i,a) FOR(i,0,a)\\r\\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\\r\\n#define R0F(i,a) ROF(i,0,a)\\r\\n#define trav(a,x) for (auto& a: x)\\r\\n\\r\\nconst int MOD = 1e9+7; // 998244353;\\r\\nconst int MX = 2e5+5;\\r\\nconst ll INF = 1e18; // not too close to LLONG_MAX\\r\\nconst ld PI = acos((ld)-1);\\r\\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\\r\\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());\\r\\ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\\r\\n\\r\\n// bitwise ops\\r\\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\\r\\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\\r\\nconstexpr int bits(int x) { // assert(x >= 0); // make C++11 compatible until USACO updates ...\\r\\n\\treturn x == 0 ? 0 : 31-__builtin_clz(x); } // floor(log2(x))\\r\\nconstexpr int p2(int x) { return 1<<x; }\\r\\nconstexpr int msk2(int x) { return p2(x)-1; }\\r\\n\\r\\nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\\r\\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\\r\\n\\r\\ntcT> bool ckmin(T& a, const T& b) {\\r\\n\\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\\r\\ntcT> bool ckmax(T& a, const T& b) {\\r\\n\\treturn a < b ? a = b, 1 : 0; }\\r\\n\\r\\ntcTU> T fstTrue(T lo, T hi, U f) {\\r\\n\\thi ++; assert(lo <= hi); // assuming f is increasing\\r\\n\\twhile (lo < hi) { // find first index such that f is true\\r\\n\\t\\tT mid = lo+(hi-lo)/2;\\r\\n\\t\\tf(mid) ? hi = mid : lo = mid+1;\\r\\n\\t}\\r\\n\\treturn lo;\\r\\n}\\r\\ntcTU> T lstTrue(T lo, T hi, U f) {\\r\\n\\tlo --; assert(lo <= hi); // assuming f is decreasing\\r\\n\\twhile (lo < hi) { // find first index such that f is true\\r\\n\\t\\tT mid = lo+(hi-lo+1)/2;\\r\\n\\t\\tf(mid) ? lo = mid : hi = mid-1;\\r\\n\\t}\\r\\n\\treturn lo;\\r\\n}\\r\\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\\r\\n\\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\\r\\ntcTU> void erase(T& t, const U& u) { // don't erase\\r\\n\\tauto it = t.find(u); assert(it != end(t));\\r\\n\\tt.erase(it); } // element that doesn't exist from (multi)set\\r\\n\\r\\n// INPUT\\r\\n#define tcTUU tcT, class ...U\\r\\ntcT> void re(complex<T>& c);\\r\\ntcTU> void re(pair<T,U>& p);\\r\\ntcT> void re(V<T>& v);\\r\\ntcT, size_t SZ> void re(AR<T,SZ>& a);\\r\\n\\r\\ntcT> void re(T& x) { cin >> x; }\\r\\nvoid re(db& d) { str t; re(t); d = stod(t); }\\r\\nvoid re(ld& d) { str t; re(t); d = stold(t); }\\r\\ntcTUU> void re(T& t, U&... u) { re(t); re(u...); }\\r\\n\\r\\ntcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; }\\r\\ntcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\\r\\ntcT> void re(V<T>& x) { trav(a,x) re(a); }\\r\\ntcT, size_t SZ> void re(AR<T,SZ>& x) { trav(a,x) re(a); }\\r\\ntcT> void rv(int n, V<T>& x) { x.rsz(n); re(x); }\\r\\n\\r\\n// TO_STRING\\r\\n#define ts to_string\\r\\nstr ts(char c) { return str(1,c); }\\r\\nstr ts(const char* s) { return (str)s; }\\r\\nstr ts(str s) { return s; }\\r\\nstr ts(bool b) {\\r\\n\\t#ifdef LOCAL\\r\\n\\t\\treturn b ? \\\"true\\\" : \\\"false\\\";\\r\\n\\t#else\\r\\n\\t\\treturn ts((int)b);\\r\\n\\t#endif\\r\\n}\\r\\ntcT> str ts(complex<T> c) {\\r\\n\\tstringstream ss; ss << c; return ss.str(); }\\r\\nstr ts(V<bool> v) {\\r\\n\\tstr res = \\\"{\\\"; F0R(i,sz(v)) res += char('0'+v[i]);\\r\\n\\tres += \\\"}\\\"; return res; }\\r\\ntemplate<size_t SZ> str ts(bitset<SZ> b) {\\r\\n\\tstr res = \\\"\\\"; F0R(i,SZ) res += char('0'+b[i]);\\r\\n\\treturn res; }\\r\\ntcTU> str ts(pair<T,U> p);\\r\\ntcT> str ts(T v) { // containers with begin(), end()\\r\\n\\t#ifdef LOCAL\\r\\n\\t\\tbool fst = 1; str res = \\\"{\\\";\\r\\n\\t\\tfor (const auto& x: v) {\\r\\n\\t\\t\\tif (!fst) res += \\\", \\\";\\r\\n\\t\\t\\tfst = 0; res += ts(x);\\r\\n\\t\\t}\\r\\n\\t\\tres += \\\"}\\\"; return res;\\r\\n\\t#else\\r\\n\\t\\tbool fst = 1; str res = \\\"\\\";\\r\\n\\t\\tfor (const auto& x: v) {\\r\\n\\t\\t\\tif (!fst) res += \\\" \\\";\\r\\n\\t\\t\\tfst = 0; res += ts(x);\\r\\n\\t\\t}\\r\\n\\t\\treturn res;\\r\\n\\r\\n\\t#endif\\r\\n}\\r\\ntcTU> str ts(pair<T,U> p) {\\r\\n\\t#ifdef LOCAL\\r\\n\\t\\treturn \\\"(\\\"+ts(p.f)+\\\", \\\"+ts(p.s)+\\\")\\\";\\r\\n\\t#else\\r\\n\\t\\treturn ts(p.f)+\\\" \\\"+ts(p.s);\\r\\n\\t#endif\\r\\n}\\r\\n\\r\\n// OUTPUT\\r\\ntcT> void pr(T x) { cout << ts(x); }\\r\\ntcTUU> void pr(const T& t, const U&... u) {\\r\\n\\tpr(t); pr(u...); }\\r\\nvoid ps() { pr(\\\"\\\\n\\\"); } // print w/ spaces\\r\\ntcTUU> void ps(const T& t, const U&... u) {\\r\\n\\tpr(t); if (sizeof...(u)) pr(\\\" \\\"); ps(u...); }\\r\\n\\r\\n// DEBUG\\r\\nvoid DBG() { cerr << \\\"]\\\" << endl; }\\r\\ntcTUU> void DBG(const T& t, const U&... u) {\\r\\n\\tcerr << ts(t); if (sizeof...(u)) cerr << \\\", \\\";\\r\\n\\tDBG(u...); }\\r\\n#ifdef LOCAL // compile with -DLOCAL, chk -> fake assert\\r\\n\\t#define dbg(...) cerr << \\\"Line(\\\" << __LINE__ << \\\") -> [\\\" << #__VA_ARGS__ << \\\"]: [\\\", DBG(__VA_ARGS__)\\r\\n\\t#define chk(...) if (!(__VA_ARGS__)) cerr << \\\"Line(\\\" << __LINE__ << \\\") -> function(\\\" \\\\\\r\\n\\t\\t << __FUNCTION__  << \\\") -> CHK FAILED: (\\\" << #__VA_ARGS__ << \\\")\\\" << \\\"\\\\n\\\", exit(0);\\r\\n#else\\r\\n\\t#define dbg(...) 0\\r\\n\\t#define chk(...) 0\\r\\n#endif\\r\\n\\r\\nvoid setPrec() { cout << fixed << setprecision(15); }\\r\\nvoid unsyncIO() { cin.tie(0)->sync_with_stdio(0); }\\r\\n// FILE I/O\\r\\nvoid setIn(str s) { freopen(s.c_str(),\\\"r\\\",stdin); }\\r\\nvoid setOut(str s) { freopen(s.c_str(),\\\"w\\\",stdout); }\\r\\nvoid setIO(str s = \\\"\\\") {\\r\\n\\tunsyncIO(); setPrec();\\r\\n\\t// cin.exceptions(cin.failbit);\\r\\n\\t// throws exception when do smth illegal\\r\\n\\t// ex. try to read letter into int\\r\\n\\tif (sz(s)) setIn(s+\\\".in\\\"), setOut(s+\\\".out\\\"); // for USACO\\r\\n}\\r\\n\\r\\ntemplate<int SZ> struct DSU {\\r\\n\\tint par[SZ], sz[SZ];\\r\\n\\tDSU() {\\r\\n\\t\\tF0R(i,SZ) par[i] = -1, sz[i] = 1;\\r\\n\\t}\\r\\n\\r\\n\\tint get(int x) { // path compression\\r\\n\\t\\tif (par[x] != x) par[x] = get(par[x]);\\r\\n\\t\\treturn par[x];\\r\\n\\t}\\r\\n\\r\\n\\tbool unite(int x, int y) { // union-by-rank\\r\\n\\t\\tx = get(x), y = get(y);\\r\\n\\t\\tif (x == y) return 0;\\r\\n\\t\\tif (sz[x] < sz[y]) swap(x,y);\\r\\n\\t\\tsz[x] += sz[y], par[y] = x;\\r\\n\\t\\treturn 1;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nint n,m,cur[1000];\\r\\nchar g[1000][1000];\\r\\nint ans = 0;\\r\\n\\r\\nvoid solve(int x) {\\r\\n\\tvi nex[m+1];\\r\\n\\tF0R(i,n) nex[cur[i]-x].pb(i);\\r\\n\\tDSU<1000> D;\\r\\n\\tR0F(i,m+1) for (int a: nex[i]) {\\r\\n\\t\\tD.par[a] = a;\\r\\n\\t\\tif (a > 0 && D.par[a-1] != -1) D.unite(a,a-1);\\r\\n\\t\\tif (a < n-1 && D.par[a+1] != -1) D.unite(a,a+1);\\r\\n\\t\\tans = max(ans,i*D.sz[D.get(a)]);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint solve() {\\r\\n\\tF0R(i,n) cur[i] = m;\\r\\n\\tR0F(j,m) {\\r\\n\\t\\tF0R(i,n) if (g[i][j] == '*') cur[i] = j;\\r\\n\\t\\tsolve(j);\\r\\n\\t}\\r\\n\\treturn ans;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO();\\r\\n\\tcin >> n >> m;\\r\\n\\tF0R(i,n) F0R(j,m) cin >> g[i][j];\\r\\n\\tcout << solve();\\r\\n}\\n\"\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1147","source":"CSES","title":"Maximum Building I","author":"Benjamin Qi, Andrew Wang"},"parent":{"name":"cses-1147","relativePath":"cses-1147.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"stacks","title":"Stacks"}}}}]},"problemInfo":{"uniqueId":"cses-1147","url":"https://cses.fi/problemset/task/1147"}},"pageContext":{"id":"cses-1147"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}