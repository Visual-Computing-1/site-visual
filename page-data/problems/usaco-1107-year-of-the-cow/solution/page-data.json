{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1107-year-of-the-cow/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1107\", source = \"USACO Bronze 2021 February\", title = \"Year of the Cow\", author = \"Ananth Kashyap, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_prob1_bronze_feb21.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this problem, we want to find the number of years separating Elsie and Bessie. For every line of the input, we can calculate the number of years separating the two cows. Then, we can store a cumulative value that holds the number of years separating Bessie and the second cow in the input line, as the first cow in the input line is guaranteed to appear in a previous line. When Elsie appears (as the second cow) in the input line, we can readjust our cumulative value, which will be our answer.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            children: \"n = int(input())\\r\\narr = []\\r\\nfor i in range(n):\\r\\n\\t# Keep track of only keywords from each line of the input\\r\\n\\ttarr = input().split(' ')\\r\\n\\tarr.append([tarr[0], tarr[3], tarr[4], tarr[7]])\\r\\n\\r\\n# Store the order of the Chinese year names\\r\\nyears = ['Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse',\\r\\n\\t\\t 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig', 'Rat']\\r\\n\\r\\nfor i in range(n):\\r\\n\\t# Find the number of years separating the cows in each line of the input\\r\\n\\tif arr[i][3] == 'Bessie':\\r\\n\\t\\tarr[i].append(years.index(arr[i][2]))\\r\\n\\t\\tarr[i].append(0)\\r\\n\\telse:\\r\\n\\t\\tfor j in range(i - 1, -1, -1):\\r\\n\\t\\t\\tif arr[j][0] == arr[i][3]:\\r\\n\\t\\t\\t\\tvalue = j\\r\\n\\t\\tarr[i].append(years.index(arr[i][2]))\\r\\n\\t\\tarr[i].append(years.index(arr[value][2]))\\r\\n\\tif arr[i][1] == 'previous':\\r\\n\\t\\tif arr[i][4] >= arr[i][5]:\\r\\n\\t\\t\\tarr[i].append(-12 + arr[i][4] - arr[i][5])\\r\\n\\t\\telse:\\r\\n\\t\\t\\tarr[i].append(arr[i][4] - arr[i][5])\\r\\n\\telse:\\r\\n\\t\\tif arr[i][4] <= arr[i][5]:\\r\\n\\t\\t\\tarr[i].append(12 - (arr[i][5] - arr[i][4]))\\r\\n\\t\\telse:\\r\\n\\t\\t\\tarr[i].append(arr[i][4] - arr[i][5])\\r\\n\\t# Store the number of years separating Bessie and the second cow in the line\\r\\n\\tif arr[i][3] == 'Bessie':\\r\\n\\t\\tarr[i].append(arr[i][6])\\r\\n\\telse:\\r\\n\\t\\tfor j in range(i - 1, -1, -1):\\r\\n\\t\\t\\tif arr[j][0] == arr[i][3]:\\r\\n\\t\\t\\t\\tvalue = j\\r\\n\\t\\t\\t\\tarr[i].append(arr[i][6] + arr[value][7])\\r\\n\\tif arr[i][0] == 'Elsie':\\r\\n\\t\\tans = arr[i][7]\\r\\n\\t\\tbreak\\r\\n\\r\\nprint(abs(ans))\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class YearOfTheCow {\\r\\n\\tstatic String[] animals = {\\r\\n\\t\\t\\\"Ox\\\", \\\"Tiger\\\", \\\"Rabbit\\\", \\\"Dragon\\\", \\\"Snake\\\", \\\"Horse\\\",\\r\\n\\t\\t\\\"Goat\\\", \\\"Monkey\\\", \\\"Rooster\\\", \\\"Dog\\\", \\\"Pig\\\", \\\"Rat\\\"\\r\\n\\t};\\r\\n\\r\\n\\tstatic Map<String, Integer> whenBorn = new TreeMap<>();\\r\\n\\r\\n\\t// given a year, return what animal the year is\\r\\n\\tstatic String getAnimal(int year) {\\r\\n\\t\\tint currAnimal = 0, currYear = 2021;\\r\\n\\t\\twhile (currYear < year) {\\r\\n\\t\\t\\tcurrYear++;\\r\\n\\t\\t\\tcurrAnimal++;\\r\\n\\t\\t\\tif (currAnimal == 12) {  // end of a 12 year cycle\\r\\n\\t\\t\\t\\tcurrAnimal = 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (currYear > year) {\\r\\n\\t\\t\\tcurrYear--;\\r\\n\\t\\t\\tcurrAnimal--;\\r\\n\\t\\t\\tif (currAnimal == -1) {  // end of a 12 year cycle\\r\\n\\t\\t\\t\\tcurrAnimal = 11;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn animals[currAnimal];\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main (String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\twhenBorn.put(\\\"Bessie\\\", 2021);\\r\\n\\r\\n\\t\\tString cowA, born, in, relation, animal, year, from, cowB;\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tcowA = io.next();\\r\\n\\t\\t\\tborn = io.next();\\r\\n\\t\\t\\tin = io.next();\\r\\n\\t\\t\\trelation = io.next();\\r\\n\\t\\t\\tanimal = io.next();\\r\\n\\t\\t\\tyear = io.next();\\r\\n\\t\\t\\tfrom = io.next();\\r\\n\\t\\t\\tcowB = io.next();\\r\\n\\r\\n\\t\\t\\twhenBorn.put(cowA, whenBorn.get(cowB));\\r\\n\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t * make sure that the loop is executed at least once and\\r\\n\\t\\t\\t * keep on updating the birth year until it\\r\\n\\t\\t\\t * matches the animal we want\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tdo {\\r\\n\\t\\t\\t\\tif (relation.equals(\\\"previous\\\")) {\\r\\n\\t\\t\\t\\t\\twhenBorn.put(cowA, whenBorn.get(cowA) - 1);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\twhenBorn.put(cowA, whenBorn.get(cowA) + 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} while (!getAnimal(whenBorn.get(cowA)).equals(animal));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// we want the positive difference so take the absolute value\\r\\n\\t\\tint diff = Math.abs(whenBorn.get(\\\"Bessie\\\") - whenBorn.get(\\\"Elsie\\\"));\\r\\n\\r\\n\\t\\tio.println(diff);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1107","source":"USACO Bronze 2021 February","title":"Year of the Cow","author":"Ananth Kashyap, Brad Ma"},"parent":{"name":"usaco-1107","relativePath":"usaco-1107.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sets","title":"Introduction to Sets & Maps"}}}}]},"problemInfo":{"uniqueId":"usaco-1107","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1107"}},"pageContext":{"id":"usaco-1107"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}