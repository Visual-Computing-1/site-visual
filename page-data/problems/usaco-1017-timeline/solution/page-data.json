{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1017-timeline/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1017\", source = \"USACO Gold 2020 February\", title = \"Timeline\", author = \"Sofia Yang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_timeline_gold_feb20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N+M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N+M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class timeline {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader r = new BufferedReader(new FileReader(\\\"timeline.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(\\\"timeline.out\\\");\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(r.readLine());\\r\\n\\t\\tint N = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint M = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint C = Integer.parseInt(st.nextToken());\\r\\n\\r\\n\\t\\t//Read in each earliest session date.\\r\\n\\t\\tst = new StringTokenizer(r.readLine());\\r\\n\\t\\tint[] time = new int[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\ttime[i] = Integer.parseInt(st.nextToken());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tArrayList<edge>[] adj = new ArrayList[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tadj[i] = new ArrayList<>();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//Read in each edge.\\r\\n\\t\\tint[] inDegree = new int[N];\\r\\n\\t\\tfor (int i = 0; i < C; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(r.readLine());\\r\\n\\t\\t\\tint a = Integer.parseInt(st.nextToken()) - 1;\\r\\n\\t\\t\\tint b = Integer.parseInt(st.nextToken()) - 1;\\r\\n\\t\\t\\tint c = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tadj[a].add(new edge(b, c));\\r\\n\\t\\t\\tinDegree[b]++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//Add all \\\"starting\\\" nodes with no incoming edges to the queue.\\r\\n\\t\\tQueue<Integer> q = new LinkedList<>();\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tif (inDegree[i] == 0) {\\r\\n\\t\\t\\t\\tq.add(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\twhile (!q.isEmpty()) {\\r\\n\\t\\t\\tint cur = q.poll();\\r\\n\\t\\t\\tfor (edge next : adj[cur]) {\\r\\n\\t\\t\\t\\t//Update the time for the next node.\\r\\n\\t\\t\\t\\tint newTime = time[cur] + next.cost;\\r\\n\\t\\t\\t\\ttime[next.node] = Integer.max(time[next.node], newTime);\\r\\n\\r\\n\\t\\t\\t\\t//There are no more incoming edges, add this node to the queue.\\r\\n\\t\\t\\t\\tif (--inDegree[next.node] == 0) {\\r\\n\\t\\t\\t\\t\\tq.add(next.node);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i : time) {\\r\\n\\t\\t\\tpw.println(i);\\r\\n\\t\\t}\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class edge {\\r\\n\\t\\tpublic int node, cost;\\r\\n\\r\\n\\t\\tpublic edge(int node, int cost) {\\r\\n\\t\\t\\tthis.node = node;\\r\\n\\t\\t\\tthis.cost = cost;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1017","source":"USACO Gold 2020 February","title":"Timeline","author":"Sofia Yang"},"parent":{"name":"usaco-1017","relativePath":"usaco-1017.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"toposort","title":"Topological Sort"}}}}]},"problemInfo":{"uniqueId":"usaco-1017","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1017"}},"pageContext":{"id":"usaco-1017"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}