{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-team-building/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1316E\", source = \"CF\", title = \"Team Building\", author = \"Sofia Yang, Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/74493\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\cdot p\\\\cdot 2^p)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>⋅</mo><mi>p</mi><mo>⋅</mo><msup><mn>2</mn><mi>p</mi></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\cdot p\\\\cdot 2^p)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6389em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.6644em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">p</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint pool_size;\\r\\n\\tint team_size;\\r\\n\\tint aud_size;\\r\\n\\tcin >> pool_size >> team_size >> aud_size;\\r\\n\\tvector<pair<int, int>> aud_contrib(pool_size);\\r\\n\\tfor (int i = 0; i < pool_size; i++) {\\r\\n\\t\\tcin >> aud_contrib[i].first;\\r\\n\\t\\taud_contrib[i].second = i;\\r\\n\\t}\\r\\n\\tsort(\\r\\n\\t\\taud_contrib.begin(), aud_contrib.end(),\\r\\n\\t\\tgreater<pair<int, int>>()\\r\\n\\t);\\r\\n\\t\\r\\n\\tvector<vector<int>> raw_team_contrib(pool_size, vector<int>(team_size));\\r\\n\\tfor (int i = 0; i < pool_size; i++) {\\r\\n\\t\\tfor (int j = 0; j < team_size; j++) {\\r\\n\\t\\t\\tcin >> raw_team_contrib[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvector<vector<int>> team_contrib(pool_size, vector<int>(team_size));\\r\\n\\tfor (int i = 0; i < pool_size; i++) {\\r\\n\\t\\tteam_contrib[i] = raw_team_contrib[aud_contrib[i].second];\\r\\n\\t}\\r\\n\\r\\n\\tvector<vector<long long>> max_strength(\\r\\n\\t\\tpool_size + 1, vector<long long>(1 << team_size, -1)\\r\\n\\t);\\r\\n\\tmax_strength[0][0] = 0;\\r\\n\\tfor (int up_to = 1; up_to <= pool_size; up_to++) {\\r\\n\\t\\tmax_strength[up_to] = max_strength[up_to - 1];\\r\\n\\t\\tfor (int subset = 0; subset < (1 << team_size); subset++) {\\r\\n\\t\\t\\tint curr_aud = up_to - __builtin_popcount(subset) - 1;\\r\\n\\t\\t\\tif (curr_aud < aud_size && max_strength[up_to - 1][subset] != -1) {\\r\\n\\t\\t\\t\\tmax_strength[up_to][subset] = max(\\r\\n\\t\\t\\t\\t\\tmax_strength[up_to][subset],\\r\\n\\t\\t\\t\\t\\tmax_strength[up_to - 1][subset] + aud_contrib[up_to - 1].first\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tfor (int t = 0; t < team_size; t++) {\\r\\n\\t\\t\\t\\tint prev = subset & ~(1 << t);\\r\\n\\t\\t\\t\\tif (!(subset & (1 << t))\\r\\n\\t\\t\\t\\t\\t\\t|| max_strength[up_to - 1][prev] == -1) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tmax_strength[up_to][subset] = max(\\r\\n\\t\\t\\t\\t\\tmax_strength[up_to][subset],\\r\\n\\t\\t\\t\\t\\tmax_strength[up_to - 1][prev] + team_contrib[up_to - 1][t]\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << max_strength[pool_size][(1 << team_size) - 1] << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class TeamBuilding {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tint poolSize = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint teamSize = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint audSize = Integer.parseInt(st.nextToken());\\r\\n\\r\\n\\t\\tst = new StringTokenizer(br.readLine());\\r\\n\\t\\tPair[] audContrib = new Pair[poolSize];\\r\\n\\t\\tfor (int i = 0; i < poolSize; i++) {\\r\\n\\t\\t\\taudContrib[i] = new Pair(i, Integer.parseInt(st.nextToken()));\\r\\n\\t\\t}\\r\\n\\t\\tArrays.sort(audContrib);\\r\\n\\r\\n\\t\\tint[][] skill = new int[poolSize][teamSize];\\r\\n\\t\\tfor (int i = 0; i < poolSize; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tfor (int j = 0; j < teamSize; j++) {\\r\\n\\t\\t\\t\\tskill[i][j] = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlong[][] dp = new long[poolSize + 1][(1 << teamSize)];\\r\\n\\t\\tfor (int i = 0; i <= poolSize; i++) {\\r\\n\\t\\t\\tArrays.fill(dp[i], -1);\\r\\n\\t\\t}\\r\\n\\t\\tdp[0][0] = 0;\\r\\n\\t\\t\\r\\n\\t\\tfor (int i = 1; i <= poolSize; i++) {\\r\\n\\t\\t\\tint ind = audContrib[i - 1].idx;\\r\\n\\t\\t\\tfor (int m = 0; m < (1 << teamSize); m++) {\\r\\n\\t\\t\\t\\tint bits = Integer.bitCount(m);\\r\\n\\r\\n\\t\\t\\t\\t// Try adding the player to the audience.\\r\\n\\t\\t\\t\\tint numAud = i - 1 - bits;\\r\\n\\t\\t\\t\\tif (numAud < audSize) {\\r\\n\\t\\t\\t\\t\\tif (dp[i - 1][m] != -1) {\\r\\n\\t\\t\\t\\t\\t\\tdp[i][m] = dp[i - 1][m] + audContrib[i - 1].val;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tif (dp[i - 1][m] != -1) {\\r\\n\\t\\t\\t\\t\\t\\tdp[i][m] = dp[i - 1][m];\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// Try adding the player to the team.\\r\\n\\t\\t\\t\\tfor (int j = 0; j < teamSize; j++) {\\r\\n\\t\\t\\t\\t\\tif ((m & (1 << j)) != 0 && (dp[i - 1][m ^ (1 << j)]) != -1) {\\r\\n\\t\\t\\t\\t\\t\\tdp[i][m] = Math.max(\\r\\n\\t\\t\\t\\t\\t\\t\\tdp[i][m],\\r\\n\\t\\t\\t\\t\\t\\t\\tdp[i - 1][m ^ (1 << j)] + skill[ind][j]\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(dp[poolSize][(1 << teamSize) - 1]);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nclass Pair implements Comparable<Pair> {\\r\\n\\tint idx;\\r\\n\\tint val;\\r\\n\\r\\n\\tpublic Pair(int idx, int val) {\\r\\n\\t\\tthis.idx = idx;\\r\\n\\t\\tthis.val = val;\\r\\n\\t}\\r\\n\\r\\n\\tpublic int compareTo(Pair other) {\\r\\n\\t\\treturn other.val - val;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"alternate-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#alternate-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Alternate Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/74493?#comment-586020\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Minimum Cost Flow Solution\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1316E","source":"CF","title":"Team Building","author":"Sofia Yang, Kevin Sheng"},"parent":{"name":"cf-1316E","relativePath":"cf-1316E.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Alternate Solution","slug":"alternate-solution"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Alternate Solution","slug":"alternate-solution"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Alternate Solution","slug":"alternate-solution"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"dp-bitmasks","title":"Bitmask DP"}}}},{"node":{"module":{"frontmatter":{"id":"min-cost-flow","title":"Minimum Cost Flow"}}}}]},"problemInfo":{"uniqueId":"cf-1316E","url":"https://codeforces.com/contest/1316/problem/E"}},"pageContext":{"id":"cf-1316E"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}