{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cses-1636-coin-combinations-ii-ordered/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*This problem is very to similar Coin Combinations I, with the main difference being that we only count ordered combinations.*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cses-1636\", source = \"CSES\", title = \"Coin Combinations II\", author = \"Michael Cao, Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    Info: _missingComponent(\"Info\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHDIV: _missingComponent(\"MATHDIV\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {Info, MATHSPAN, HeaderLink, MATHDIV, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [\"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/70018\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Unoffical Editorial (C++)\"\n      })\n    }), \"\\n\", _jsx(Info, {\n      title: \"Note\",\n      children: _jsxs(_components.p, {\n        children: [\"The solution for this problem is very similar to that of\\r\\n\", _jsx(_components.a, {\n          href: \"https://cses.fi/problemset/task/1635\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Coin Combinations I\"\n        }), \". If you haven't solved that already, we recommend doing so before attempting this problem.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The key difference between this problem and\\r\\n\", _jsx(_components.a, {\n        href: \"https://cses.fi/problemset/task/1635\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Coin Combinations I\"\n      }), \" is that we're now\\r\\ntrying to find the number of \", _jsx(_components.strong, {\n        children: \"ordered\"\n      }), \" ways to add the coins to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". This\\r\\nmeans that if we had coins \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\{1, 3, 5\\\\}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">{</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>3</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo stretchy=\\\"false\\\">}</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\{1, 3, 5\\\\}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">3</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mclose\\\">}</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x=4\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\\\"application/x-tex\\\">x=4</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span></span></span></span>\"\n      }), \", adding \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1 + 3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1 + 3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \" is treated as\\r\\nthe same \\\"way\\\" as \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"3 + 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3 + 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">3</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We'll let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[w]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>w</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[w]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" equal the number of ordered ways to add the coins up\\r\\nto \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"w\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\\\"application/x-tex\\\">w</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span></span></span></span>\"\n      }), \". In the previous problem, we tried out each coin for each possible \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"w\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\\\"application/x-tex\\\">w</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span></span></span></span>\"\n      }), \".\\r\\nHere, we'll do the reverse, looping through all possible \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"w\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\\\"application/x-tex\\\">w</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span></span></span></span>\"\n      }), \" (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0\\\\leq w \\\\leq x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>w</mi><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">0\\\\leq w \\\\leq x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7804em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \")\\r\\nfor each coin \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" while updating \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span></span></span></span>\"\n      }), \" as follows:\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"\\\\texttt{dp}[w] := \\\\texttt{dp}[w] + \\\\texttt{dp}[w-\\\\texttt{coins}[i]]\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>w</mi><mo stretchy=\\\"false\\\">]</mo><mo>:</mo><mo>=</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>w</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>w</mi><mo>−</mo><mtext mathvariant=\\\"monospace\\\">coins</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[w] := \\\\texttt{dp}[w] + \\\\texttt{dp}[w-\\\\texttt{coins}[i]]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">coins</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]]</span></span></span></span></span>\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This essentially entails switching the order of the nested loops from the\\r\\nprevious problem. Since we now loop over the coins before the weights, we only\\r\\ngo through the set of coins once, so it's impossible to create two combinations\\r\\nwith the same set of coins ordered differently.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n \\\\cdot x)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo>⋅</mo><mi>x</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n \\\\cdot x)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\nusing vi = vector<int>;\\r\\n#define pb push_back\\r\\n#define rsz resize\\r\\n#define all(x) begin(x), end(x)\\r\\n#define sz(x) (int)(x).size()\\r\\nusing pi = pair<int,int>;\\r\\n#define f first\\r\\n#define s second\\r\\n#define mp make_pair\\r\\nvoid setIO(string name = \\\"\\\") { // name is nonempty for USACO file I/O\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0); // see Fast Input & Output\\r\\n\\tif(sz(name)){\\r\\n\\t\\tfreopen((name+\\\".in\\\").c_str(), \\\"r\\\", stdin); // see Input & Output\\r\\n\\t\\tfreopen((name+\\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nll dp[1000001];\\r\\n\\r\\nconst int MOD = (int) 1e9 + 7;\\r\\n\\r\\nint main(){\\r\\n\\tint n, x; cin >> n >> x;\\r\\n\\tvi coins(n);\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> coins[i];\\r\\n\\t}\\r\\n\\tdp[0] = 1;\\r\\n\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\tfor (int weight = 0; weight <= x; weight++) {\\r\\n\\t\\t\\tif(weight - coins[i - 1] >= 0) {  // prevent out of bounds cases\\r\\n\\t\\t\\t\\tdp[weight] += dp[weight - coins[i - 1]];\\r\\n\\t\\t\\t\\tdp[weight] %= MOD;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << dp[x] << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\n\\r\\npublic class CoinCombinations2 {\\r\\n\\tstatic final int MOD = 1000000007;\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tScanner sc = new Scanner(System.in);\\r\\n\\t\\tint n = sc.nextInt();\\r\\n\\t\\tint x = sc.nextInt();\\r\\n\\r\\n\\t\\tint[] coins = new int[n];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tcoins[i] = sc.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// dp[w] = the number of ordered ways to add coins up to w\\t\\r\\n\\t\\tint[] dp = new int[x + 1];\\r\\n\\t\\tdp[0] = 1;\\r\\n\\t\\tfor (int i = 0; i < n; i++) {  // loop through coins\\r\\n\\t\\t\\tfor (int w = 0; w <= x; w++) {  // loop through sums\\r\\n\\t\\t\\t\\tif (w - coins[i] >= 0) {  // prevent out of bounds cases\\r\\n\\t\\t\\t\\t\\tdp[w] = (dp[w] + dp[w - coins[i]]) % MOD;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(dp[x]);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cses-1636","source":"CSES","title":"Coin Combinations II","author":"Michael Cao, Nathan Gong"},"parent":{"name":"cses-1636","relativePath":"cses-1636.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Solution","slug":"solution"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"knapsack","title":"Knapsack DP"}}}}]},"problemInfo":{"uniqueId":"cses-1636","url":"https://cses.fi/problemset/task/1636"}},"pageContext":{"id":"cses-1636"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}