{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1038-social-distancing/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1038\", source = \"USACO Silver 2020 US Open\", title = \"Social Distancing\", author = \"Albert Zhu, Melody Yu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Youtube: _missingComponent(\"Youtube\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, Youtube, MATHSPAN, LanguageSection, CPPSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_socdist_silver_open20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"video-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#video-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Video Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: The video solution might not be the same as other solutions. Code in C++.\"\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"mt8QhnFOkr0\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((N+M)\\\\log (\\\\texttt{maxDist}))\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo><mi>log</mi><mo>‚Å°</mo><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">maxDist</mtext><mo stretchy=\\\"false\\\">)</mo><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((N+M)\\\\log (\\\\texttt{maxDist}))</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">maxDist</span></span><span class=\\\"mclose\\\">))</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nvoid setIO(string prob=\\\"\\\") {\\r\\n\\tif (!prob.empty()) {\\r\\n\\t\\tfreopen((prob + \\\".in\\\").c_str(), \\\"r\\\", stdin);\\r\\n\\t\\tfreopen((prob + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nconst int MAX_N = 1e5;\\r\\n\\r\\npair<long long, long long> intervals[MAX_N];\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"socdist\\\");\\r\\n\\t\\r\\n\\tint n, m;\\r\\n\\tcin >> n >> m;\\r\\n\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\tcin >> intervals[i].first >> intervals[i].second;\\r\\n\\t}\\r\\n\\tsort(intervals, intervals + m);\\r\\n\\r\\n\\tlong long lo = 0;\\r\\n\\tlong long hi = intervals[m - 1].second - intervals[0].first + 1;\\r\\n\\twhile (lo < hi) {\\r\\n\\t\\tlong long mid = lo + (hi - lo + 1) / 2;\\r\\n\\t\\tint count = 1;\\r\\n\\t\\tint intervalCount = 0;\\r\\n\\t\\tlong long current = intervals[0].first;\\r\\n\\r\\n\\t\\t// try to fit the next cow into the earliest patch of grass that's available\\r\\n\\t\\twhile ((current + mid) < intervals[m - 1].second) {\\r\\n\\t\\t\\twhile (current + mid > intervals[intervalCount].second) {\\r\\n\\t\\t\\t\\tintervalCount++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcurrent = max(intervals[intervalCount].first, current + mid);\\r\\n\\t\\t\\tcount++;\\r\\n\\t\\t\\tif (count == n) break;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (count >= n) lo = mid;\\r\\n\\t\\telse hi = mid - 1;\\r\\n\\t}\\r\\n\\tcout << lo << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class SocDist {\\r\\n\\tstatic class Pair implements Comparable<Pair> {\\r\\n\\t\\tlong first, second;\\r\\n\\r\\n\\t\\tpublic Pair(long x, long y) {\\r\\n\\t\\t\\tfirst = x;\\r\\n\\t\\t\\tsecond = y;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic int compareTo(Pair x) {\\r\\n\\t\\t\\tif (this.first == x.first)\\r\\n\\t\\t\\t\\treturn (int) (this.second - x.second);\\r\\n\\t\\t\\treturn (int) (this.first - x.first);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader in = new BufferedReader(new FileReader(\\\"socdist.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(\\\"socdist.out\\\");\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(in.readLine());\\r\\n\\t\\t\\r\\n\\t\\tint n = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint m = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\r\\n\\t\\tPair intervals[] = new Pair[m];\\r\\n\\t\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(in.readLine());\\r\\n\\t\\t\\tintervals[i] = new Pair(\\r\\n\\t\\t\\t\\tLong.parseLong(st.nextToken()),\\r\\n\\t\\t\\t\\tLong.parseLong(st.nextToken())\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tArrays.sort(intervals);\\r\\n\\t\\tlong lo = 0;\\r\\n\\t\\tlong hi = intervals[m - 1].second - intervals[0].first + 1;\\r\\n\\t\\twhile (lo < hi) {\\r\\n\\t\\t\\tlong mid = lo + (hi - lo + 1) / 2;\\r\\n\\t\\t\\tint count = 1;\\r\\n\\t\\t\\tint intervalCount = 0;\\r\\n\\t\\t\\tlong current = intervals[0].first;\\r\\n\\t\\t\\t// try to fit the next cow into the earliest patch of grass that's available\\r\\n\\t\\t\\twhile ((current + mid) < intervals[m - 1].second) {\\r\\n\\t\\t\\t\\twhile (current + mid > intervals[intervalCount].second) {\\r\\n\\t\\t\\t\\t\\tintervalCount++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tcurrent = Math.max(intervals[intervalCount].first, current + mid);\\r\\n\\t\\t\\t\\tcount++;\\r\\n\\t\\t\\t\\tif (count == n)\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (count >= n)\\r\\n\\t\\t\\t\\tlo = mid;\\r\\n\\t\\t\\telse\\r\\n\\t\\t\\t\\thi = mid - 1;\\r\\n\\t\\t}\\r\\n\\t\\tpw.println(lo);\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1038","source":"USACO Silver 2020 US Open","title":"Social Distancing","author":"Albert Zhu, Melody Yu"},"parent":{"name":"usaco-1038","relativePath":"usaco-1038.mdx"},"toc":{"cpp":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"binary-search","title":"Binary Search"}}}}]},"problemInfo":{"uniqueId":"usaco-1038","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1038"}},"pageContext":{"id":"usaco-1038"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}