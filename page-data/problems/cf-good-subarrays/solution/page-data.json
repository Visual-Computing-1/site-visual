{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-good-subarrays/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1398C\", source = \"CF\", title = \"Good Subarrays\", author = \"Jesse Choe, Brad Ma\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/81506\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---prefix-sums--math\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---prefix-sums--math\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Prefix Sums + Math\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\nusing pi = pair<ll, ll>;\\r\\nvoid solve(){\\r\\n\\tint n; cin >> n;\\r\\n\\tvector<int> dp(n+1, 0);\\r\\n\\tfor (int i=1; i<=n; i++) {\\r\\n\\t\\tchar c; cin >> c;\\r\\n\\t\\tdp[i]=c-'0';\\r\\n\\t}\\r\\n\\tfor (int i=1; i<=n; i++) {\\r\\n\\t\\tdp[i]+=dp[i-1];\\r\\n\\t}\\r\\n\\tmap<int, ll> sumDist;\\r\\n\\tfor (int i=0; i<=n; i++) {\\r\\n\\t\\tsumDist[dp[i]-i]++;\\r\\n\\t}\\r\\n\\tll goodArrays=0;\\r\\n\\tfor (pi p: sumDist) {\\r\\n\\t\\tll f=p.second;\\r\\n\\t\\t// sum of all positive integers less than f\\r\\n\\t\\tgoodArrays+=f*(f-1)/2;\\r\\n\\t}\\r\\n\\tcout << goodArrays << endl;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint t; cin >> t;\\r\\n\\tfor (int i=0; i<t; i++) {\\r\\n\\t\\tsolve();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class GoodSubarrays {\\r\\n\\tstatic long solve (int arrayLength, String stringArray) {\\r\\n\\t\\tint[] array = new int[arrayLength + 1];\\r\\n\\t\\tfor (int x = 1; x <= arrayLength; x++) {  \\r\\n\\t\\t\\tarray[x] = stringArray.charAt(x - 1) - '0';\\r\\n\\t\\t}\\r\\n\\t\\tfor (int x = 1; x <= arrayLength; x++) { \\r\\n\\t\\t\\tarray[x] += array[x - 1];\\r\\n\\t\\t}\\r\\n\\t\\tMap<Integer, Long> sumDist = new HashMap<>();\\r\\n\\t\\tfor (int x = 0; x <= arrayLength; x++) {  \\r\\n\\t\\t\\tif (sumDist.containsKey(array[x] - x)) {  \\r\\n\\t\\t\\t\\tsumDist.put(array[x] - x, sumDist.get(array[x] - x) + 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {  \\r\\n\\t\\t\\t\\tsumDist.put(array[x] - x, (long) 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tlong goodArrays = 0;\\r\\n\\t\\tfor (int key : sumDist.keySet()) {  \\r\\n\\t\\t\\tlong f = sumDist.get(key);\\r\\n\\t\\t\\t// sum of all positive integers less than f\\r\\n\\t\\t\\tgoodArrays += f * (f - 1) / 2;\\r\\n\\t\\t}\\r\\n\\t\\treturn goodArrays;\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main (String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint t = io.nextInt();\\r\\n\\t\\tfor (int x = 0; x < t; x++) { \\r\\n\\t\\t\\tint arrayLength = io.nextInt();\\r\\n\\t\\t\\tString array = io.next();\\r\\n\\t\\t\\tio.println(solve(arrayLength, array));\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"for _ in range(int(input())):\\r\\n\\tlen_nums = int(input())\\r\\n\\tnums = list(map(int, list(input().strip())))\\r\\n\\trecord = {0: 1}\\r\\n\\tans, prefix_sum = 0, 0\\r\\n\\r\\n\\tfor j in range(len_nums):\\r\\n\\t\\tprefix_sum += nums[j]\\r\\n\\t\\tval = prefix_sum - j - 1 \\r\\n\\t\\tif val not in record:\\r\\n\\t\\t\\trecord[val] = 0\\r\\n\\t\\trecord[val] += 1\\r\\n\\r\\n\\tfor key in record:\\r\\n\\t\\t# sum of positive integers less than 'record[key]'\\r\\n\\t\\tans += (record[key] * (record[key] - 1)) // 2 \\r\\n\\tprint(ans)\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1398C","source":"CF","title":"Good Subarrays","author":"Jesse Choe, Brad Ma"},"parent":{"name":"cf-1398C","relativePath":"cf-1398C.mdx"},"toc":{"cpp":[{"depth":2,"value":"Solution - Prefix Sums + Math","slug":"solution---prefix-sums--math"}],"java":[{"depth":2,"value":"Solution - Prefix Sums + Math","slug":"solution---prefix-sums--math"}],"py":[{"depth":2,"value":"Solution - Prefix Sums + Math","slug":"solution---prefix-sums--math"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"prefix-sums","title":"Introduction to Prefix Sums"}}}},{"node":{"module":{"frontmatter":{"id":"visual","title":"Visual"}}}}]},"problemInfo":{"uniqueId":"cf-1398C","url":"https://codeforces.com/contest/1398/problem/C"}},"pageContext":{"id":"cf-1398C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}