{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/ceoi-cloud-computing/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"ceoi18-clo\", source = \"CEOI 18\", title = \"Cloud Computing\", author = \"Kevin Sheng\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://ceoi2018.pl/wp-content/uploads/2018/08/solutions_day1.pdf#page=10\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It might be tempting at first to do a 2-dimensional DP with the number of computer purchases and the number of customer orders, but that would result in a nasty and inefficient transition.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Instead, let's try grouping the two into a single array of \\\"transactions\\\". Each transation has three attributes: the change in the number of cores, the associated clock rate of the cores, and the change in the total profits.\\r\\nFor example, the example case would have a transaction array that looks like this:\"\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tbody\", {\n          children: [_jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Core change\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"Clock rate\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"Profit change\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"4\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2200\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"-700\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"2\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1800\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"-10\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"20\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2550\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"-9999\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"4\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2000\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"-750\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"-1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1500\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"300\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"-6\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1900\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1500\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"-3\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2400\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"4550\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now we sort the array by clock rate in reverse, resulting in this:\"\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tbody\", {\n          children: [_jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Core change\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"Clock rate\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"Profit change\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"20\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2550\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"-9999\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"-3\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2400\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"4550\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"4\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2200\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"-700\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"4\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2000\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"-750\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"-6\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1900\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1500\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"2\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1800\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"-10\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"-1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1500\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"300\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Notice that in this order, as long as a customer order comes after a computer purchase, the computer will be able to satisfy the order as long as there are enough cores.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This drastically simplifies the problem. Now we can simply define \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max\\\\_profits}[t][c]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">max_profits</mtext><mo stretchy=\\\"false\\\">[</mo><mi>t</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>c</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max\\\\_profits}[t][c]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max_profits</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" as the maximum profit we can gain from the first \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"t\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\\\"application/x-tex\\\">t</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6151em;\\\"></span><span class=\\\"mord mathnormal\\\">t</span></span></span></span>\"\n      }), \" transactions given that we have \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n      }), \" cores left.\\r\\nGiven this, the rest of the problem is simple knapsack.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n#include <algorithm>\\r\\n\\r\\nusing std::cout;\\r\\nusing std::endl;\\r\\nusing std::vector;\\r\\n\\r\\nstruct Transaction {\\r\\n\\tint cores;\\r\\n\\tint rate;\\r\\n\\tint price;\\r\\n};\\r\\n\\r\\nint main() {\\r\\n\\tvector<Transaction> poss_transactions;\\r\\n\\tint max_computers = 0;\\r\\n\\tint comp_num;\\r\\n\\tstd::cin >> comp_num;\\r\\n\\tfor (int c = 0; c < comp_num; c++) {\\r\\n\\t\\tTransaction trans;\\r\\n\\t\\tstd::cin >> trans.cores >> trans.rate >> trans.price;\\r\\n\\t\\ttrans.price = -trans.price;\\r\\n\\t\\tposs_transactions.push_back(trans);\\r\\n\\t\\tmax_computers += trans.cores;\\r\\n\\t}\\r\\n\\tint order_num;\\r\\n\\tstd::cin >> order_num;\\r\\n\\tfor (int o = 0; o < order_num; o++) {\\r\\n\\t\\tTransaction trans;\\r\\n\\t\\tstd::cin >> trans.cores >> trans.rate >> trans.price;\\r\\n\\t\\ttrans.cores = -trans.cores;\\r\\n\\t\\tposs_transactions.push_back(trans);\\r\\n\\t}\\r\\n\\t/*\\r\\n\\t * if we sort like this, then the entire clock rate issue\\r\\n\\t * goes away as long as we process them in order\\r\\n\\t */\\r\\n\\tstd::sort(\\r\\n\\t\\tposs_transactions.begin(), poss_transactions.end(),\\r\\n\\t\\t[] (const Transaction& a, const Transaction& b) -> bool {\\r\\n\\t\\t\\treturn a.rate != b.rate ? a.rate > b.rate : a.price < b.price;\\r\\n\\t\\t}\\r\\n\\t);\\r\\n\\r\\n\\t/*\\r\\n\\t * max_profits[t][c] = the maximum profit we can gain from the first\\r\\n\\t * t transactions given that we have c cores left\\r\\n\\t */\\r\\n\\tvector<long long> max_profits(max_computers + 1, INT64_MIN);\\r\\n\\tmax_profits[0] = 0;\\r\\n\\tfor (const Transaction& t : poss_transactions) {\\r\\n\\t\\tvector<long long> new_max(max_profits);\\r\\n\\t\\tfor (int c = 0; c <= max_computers; c++) {\\r\\n\\t\\t\\tint prev_comp = c - t.cores;\\r\\n\\t\\t\\tif (0 <= prev_comp && prev_comp <= max_computers\\r\\n\\t\\t\\t\\t\\t&& max_profits[prev_comp] != INT64_MIN) {\\r\\n\\t\\t\\t\\tnew_max[c] = std::max(new_max[c], max_profits[prev_comp] + t.price);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tmax_profits = new_max;\\r\\n\\t}\\r\\n\\tcout << *std::max_element(max_profits.begin(), max_profits.end()) << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"ceoi18-clo","source":"CEOI 18","title":"Cloud Computing","author":"Kevin Sheng"},"parent":{"name":"ceoi18-clo","relativePath":"ceoi18-clo.mdx"},"toc":{"cpp":[],"java":[],"py":[]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"knapsack","title":"Knapsack DP"}}}}]},"problemInfo":{"uniqueId":"ceoi18-clo","url":"https://oj.uz/problem/view/CEOI18_clo"}},"pageContext":{"id":"ceoi18-clo"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}