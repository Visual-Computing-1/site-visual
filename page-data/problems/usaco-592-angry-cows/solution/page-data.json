{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-592-angry-cows/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-592\", source = \"USACO Bronze 2016 January\", title = \"Angry Cows\", author = \"Qi Wang\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_angry_bronze_jan16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (Java)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint N;\\r\\nvector<int> bales;\\r\\n\\r\\nint exploded_num(int start, int direction) {\\r\\n\\tint radius = 1;\\r\\n\\tint prev = start;\\r\\n\\twhile (true) {\\r\\n\\t\\tint next = prev;\\r\\n\\t\\t// Get the furthest explosion index without exceeding the current radius\\r\\n\\t\\twhile (\\r\\n\\t\\t\\tnext + direction >= 0\\r\\n\\t\\t\\t&& next + direction < N\\r\\n\\t\\t\\t&& abs(bales[next + direction] - bales[prev]) <= radius) {\\r\\n\\t\\t\\tnext += direction;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// We didn't find a new haybale, so the chain explosion is over\\r\\n\\t\\tif (next == prev) {\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Update our previous explosion and increment radius\\r\\n\\t\\tprev = next;\\r\\n\\t\\tradius++;\\r\\n\\t}\\r\\n\\treturn abs(prev - start);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"angry.in\\\",\\\"r\\\",stdin);\\r\\n\\tfreopen(\\\"angry.out\\\",\\\"w\\\",stdout);\\r\\n\\r\\n\\tcin >> N;\\r\\n\\tbales.resize(N);\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tcin >> bales[i];\\r\\n\\t}\\r\\n\\r\\n\\tsort(bales.begin(), bales.end());\\r\\n\\tint max_exploded = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t// Get the number of exploded bales for the left & right side\\r\\n\\t\\tmax_exploded = max(\\r\\n\\t\\t\\tmax_exploded, exploded_num(i, -1) + exploded_num(i, 1) + 1\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\tcout << max_exploded << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Angry {\\r\\n\\tstatic int N;\\r\\n\\tstatic int[] bales;\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"angry\\\");\\r\\n\\r\\n\\t\\tN = io.nextInt();\\r\\n\\t\\tbales = new int[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tbales[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tArrays.sort(bales);\\r\\n\\t\\tint maxExploded = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\t// Get the number of exploded bales for the left & right side\\r\\n\\t\\t\\tmaxExploded = Math.max(\\r\\n\\t\\t\\t\\tmaxExploded, explodedNum(i, -1) + explodedNum(i, 1) + 1\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t\\tio.println(maxExploded);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tpublic static int explodedNum(int start, int direction) {\\r\\n\\t\\tint radius = 1;\\r\\n\\t\\tint prev = start;\\r\\n\\t\\twhile (true) {\\r\\n\\t\\t\\tint next = prev;\\r\\n\\t\\t\\t// Getting the furthest explosion index without exceeding radius\\r\\n\\t\\t\\twhile (\\r\\n\\t\\t\\t\\tnext + direction >= 0\\r\\n\\t\\t\\t\\t&& next + direction < N \\r\\n\\t\\t\\t\\t&& Math.abs(bales[next + direction] - bales[prev]) <= radius\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tnext += direction;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// We didn't find a new haybale, so the chain explosion is over\\r\\n\\t\\t\\tif (next == prev) {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Update our previous explosion and increment radius\\r\\n\\t\\t\\tprev = next;\\r\\n\\t\\t\\tradius++;\\r\\n\\t\\t}\\r\\n\\t\\treturn Math.abs(prev - start);\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"with open('angry.in') as read:\\r\\n\\tbales = sorted([int(read.readline()) for _ in range(int(read.readline()))])\\r\\n\\r\\n\\r\\ndef exploded_num(start: int, direction: int) -> int:\\r\\n\\tradius = 1\\r\\n\\tprev = start\\r\\n\\twhile True:\\r\\n\\t\\tnext_ = prev\\r\\n\\t\\t# Get the furthest explosion index without exceeding the current radius\\r\\n\\t\\twhile (\\r\\n\\t\\t\\t0 <= next_ + direction < len(bales)\\r\\n\\t\\t\\tand abs(bales[next_ + direction] - bales[prev]) <= radius\\r\\n\\t\\t):\\r\\n\\t\\t\\tnext_ += direction\\r\\n\\t\\t\\r\\n\\t\\t# We didn't find a new haybale, so the chain explosion is over\\r\\n\\t\\tif next_ == prev:\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t\\r\\n\\t\\t# Update our previous explosion and increment radius\\r\\n\\t\\tprev = next_\\r\\n\\t\\tradius += 1\\r\\n\\treturn abs(prev - start)\\r\\n\\r\\n\\r\\nmax_exploded = 0\\r\\nfor i in range(len(bales)):\\r\\n\\t# Get the number of exploded bales for the left & right side\\r\\n\\tmax_exploded = max(\\r\\n\\t\\tmax_exploded, exploded_num(i, -1) + exploded_num(i, 1) + 1\\r\\n\\t)\\r\\nprint(max_exploded, file=open('angry.out', 'w'))\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-592","source":"USACO Bronze 2016 January","title":"Angry Cows","author":"Qi Wang"},"parent":{"name":"usaco-592","relativePath":"usaco-592.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorting","title":"Introduction to Sorting"}}}}]},"problemInfo":{"uniqueId":"usaco-592","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=592"}},"pageContext":{"id":"usaco-592"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}