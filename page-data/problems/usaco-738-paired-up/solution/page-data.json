{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-738-paired-up/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-738\", source = \"USACO Silver 2017 US Open\", title = \"Paired Up\", author = \"Sofia Yang, Ryan Chou, Melody Yu\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Youtube: _missingComponent(\"Youtube\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, Youtube, MATHSPAN, LanguageSection, CPPSection, PySection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_pairup_silver_open17.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"video-solution\",\n      children: [_jsx(_components.a, {\n        href: \"#video-solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Video Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: The video solution might not be the same as other solutions. Code in C++.\"\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"yIoUWlzH_7w\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the sample input, we have the following cows:\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"8, 5, 5, 2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>8</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">8, 5, 5, 2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8389em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\">8</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \", and there's two ways to pair these up.\"]\n    }), \"\\n\", _jsxs(\"ol\", {\n      children: [_jsx(\"li\", {\n        children: _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"(8, 5), (5, 2)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>8</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo stretchy=\\\"false\\\">)</mo><mo separator=\\\"true\\\">,</mo><mo stretchy=\\\"false\\\">(</mo><mn>5</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(8, 5), (5, 2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">8</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mclose\\\">)</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">5</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        })\n      }), \"\\r\\n\", _jsx(\"li\", {\n        children: _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"(8, 2), (5, 5)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>8</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn><mo stretchy=\\\"false\\\">)</mo><mo separator=\\\"true\\\">,</mo><mo stretchy=\\\"false\\\">(</mo><mn>5</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(8, 2), (5, 5)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">8</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">)</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">5</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first case would take \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"13\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>13</mn></mrow><annotation encoding=\\\"application/x-tex\\\">13</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">13</span></span></span></span>\"\n      }), \" time units to finish milking all cows.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The second case would take \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">10</span></span></span></span>\"\n      }), \" time units to finish milking all cows.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This test case consists of 3 distinct values: \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"8, 5, 2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>8</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">8, 5, 2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8389em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\">8</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \", let's call them \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A, B, C\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi><mo separator=\\\"true\\\">,</mo><mi>B</mi><mo separator=\\\"true\\\">,</mo><mi>C</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A, B, C</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8778em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span></span></span></span>\"\n      }), \". These would follow the paradigm \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A < B < C\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi><mo>&lt;</mo><mi>B</mi><mo>&lt;</mo><mi>C</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A &lt; B &lt; C</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Therefore, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A+C < B + C\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi><mo>+</mo><mi>C</mi><mo>&lt;</mo><mi>B</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A+C &lt; B + C</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We should always pair up the greatest value (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"C\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\\\"application/x-tex\\\">C</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span></span></span></span>\"\n      }), \"), with the smallest value (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n      }), \"), in order to achieve the most optimal milking time.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"(Because it requires sorting the input, which is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <fstream>\\r\\n#include <cmath>\\r\\n#include <algorithm>\\r\\n#include <vector>\\r\\nusing namespace std;\\r\\n\\r\\ntypedef pair<int,int> pii;\\r\\n\\r\\nint main() {\\r\\n\\tifstream fin (\\\"pairup.in\\\");\\r\\n\\tofstream fout (\\\"pairup.out\\\");\\r\\n\\tint N;\\r\\n\\tvector<pii> V;\\r\\n\\tfin >> N;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint num_cows, milk_time;\\r\\n\\t\\tfin >> num_cows >> milk_time;\\r\\n\\t\\tV.push_back(pii(milk_time, num_cows));\\r\\n\\t}\\r\\n\\tsort(V.begin(), V.end());\\r\\n\\tint M = 0, left = 0, right = N - 1;\\r\\n\\r\\n\\twhile (left <= right) {\\r\\n\\t\\t// the maximum amount of cows we can group together.\\r\\n\\t\\tint sub = min(V[left].second, V[right].second);\\r\\n\\t\\tif (left == right) sub /= 2;\\r\\n\\t\\tM = max(M, V[left].first + V[right].first);\\r\\n\\t\\tV[left].second -= sub;\\r\\n\\t\\tV[right].second -= sub;\\r\\n\\t\\t\\r\\n\\t\\t// once there are no more cows available in our \\r\\n\\t\\t// pair, we can increment/decrement the left/right\\r\\n\\t\\t// pointer(s).\\r\\n\\t\\tif (V[left].second == 0) left++;\\r\\n\\t\\tif (V[right].second == 0) right--;\\r\\n\\t}\\r\\n\\tfout << M << \\\"\\\\n\\\";\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\n\\r\\nsys.stdin = open(\\\"pairup.in\\\", 'r')\\r\\nsys.stdout = open(\\\"pairup.out\\\", 'w')\\r\\n\\r\\nn = int(input())\\r\\nall_cows = []\\r\\nfor _ in range(n):\\r\\n\\tnum_cows, milk_time = map(int, input().split())\\r\\n\\tall_cows.append([milk_time, num_cows])\\r\\n\\r\\nall_cows.sort()\\r\\nleft, right = 0, n - 1\\r\\nans = 0\\r\\n\\t\\r\\nwhile left <= right:\\r\\n\\t# how many cows have been grouped together.\\r\\n\\tsub = min(all_cows[left][1], all_cows[right][1])\\r\\n\\tans = max(ans, all_cows[left][0] + all_cows[right][0])\\r\\n\\tif left == right:\\r\\n\\t\\tsub /= 2\\r\\n\\tall_cows[left][1] -= sub\\r\\n\\tall_cows[right][1] -= sub\\r\\n\\t# If there are no more cows which have this milk output,\\r\\n\\t# we can increment/decrement the left/right pointer.\\r\\n\\tif all_cows[left][1] == 0: left += 1\\r\\n\\tif all_cows[right][1] == 0: right -= 1\\r\\n\\r\\nprint(ans)\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class PairUp {\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader io = new BufferedReader(new FileReader(\\\"pairup.in\\\"));\\r\\n\\t\\tint N = Integer.parseInt(io.readLine().trim());\\r\\n\\t\\tList<Pair> events = new ArrayList<>();\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tStringTokenizer tok = new StringTokenizer(io.readLine());\\r\\n\\t\\t\\tint freq = Integer.parseInt(tok.nextToken());\\r\\n\\t\\t\\tint amt = Integer.parseInt(tok.nextToken());\\r\\n\\t\\t\\tevents.add(new Pair(freq, amt));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tCollections.sort(events);\\r\\n\\t\\tint ret = 0;\\r\\n\\t\\tint left = 0, right = N - 1;\\r\\n\\t\\twhile (left <= right) {\\r\\n\\t\\t\\t// how many cows have been grouped together.\\r\\n\\t\\t\\tint numPaired = Integer.min(events.get(left).freq, events.get(right).freq);\\r\\n\\t\\t\\tif (left == right) {\\r\\n\\t\\t\\t\\tnumPaired /= 2;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tret = Integer.max(ret, events.get(left).amt + events.get(right).amt);\\r\\n\\t\\t\\tevents.get(left).freq -= numPaired;\\r\\n\\t\\t\\tevents.get(right).freq -= numPaired;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// If there are no more cows which have this milk output,\\r\\n\\t\\t\\t// we can increment/decrement the left/right pointer.\\r\\n\\t\\t\\tif (events.get(left).freq == 0) {\\r\\n\\t\\t\\t\\tleft++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (events.get(right).freq == 0) {\\r\\n\\t\\t\\t\\tright--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tPrintWriter out = new PrintWriter(new FileWriter(\\\"pairup.out\\\"));\\r\\n\\t\\tout.println(ret);\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n}\\r\\n\\r\\nclass Pair implements Comparable<Pair> {\\r\\n\\tpublic int freq, amt;\\r\\n\\r\\n\\tpublic Pair(int freq, int amt) {\\r\\n\\t\\tthis.freq = freq;\\r\\n\\t\\tthis.amt = amt;\\r\\n\\t}\\r\\n\\tpublic int compareTo(Pair other) {\\r\\n\\t\\treturn Integer.compare(this.amt, other.amt);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-738","source":"USACO Silver 2017 US Open","title":"Paired Up","author":"Sofia Yang, Ryan Chou, Melody Yu"},"parent":{"name":"usaco-738","relativePath":"usaco-738.mdx"},"toc":{"cpp":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Video Solution","slug":"video-solution"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"two-pointers","title":"Two Pointers"}}}}]},"problemInfo":{"uniqueId":"usaco-738","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=738"}},"pageContext":{"id":"usaco-738"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}