{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/cf-covered-points-count/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cf-1000C\", source = \"CF\", title = \"Covered Points Count\", author = \"Jesse Choe\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://codeforces.com/blog/entry/60288\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Editorial\"\n      })\n    }), \"\\n\", _jsxs(_components.h1, {\n      id: \"solution-coordinate-compression\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-coordinate-compression\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution (Coordinate Compression)\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Due to the large constraints on \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"l_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">l_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">r_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", it is impossible to brute force the number of intersecting segments for each point on the coordinate line. However, notice that we can compress the coordinates and \\\"pretend\\\" as if the coordinates were between \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This allows us to apply prefix sums on each point in our compressed number line and retransform these compressed coordinates to the original endpoints \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"l_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">l_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">r_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \". To compress the coordinates, we can either sort the coordinates or use an ordered map.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\nusing vi = vector<int>;\\r\\nusing pi = pair<int, int>;\\r\\n\\r\\n#define f first\\r\\n#define s second\\r\\n#define all(x) begin(x), end(x)\\r\\n\\r\\nint main() {\\r\\n\\tint n;\\r\\n\\tcin >> n;\\r\\n\\t// This stores the original endpoints to use in our frequency array later\\r\\n\\tvector<pair<ll, ll>> segments(n); \\r\\n\\t// This stores only the unique endpoints (also, the endpoints will be in sorted order).\\r\\n\\tset<ll> points; \\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> segments[i].f >> segments[i].s; // Read in the endpoints of the i-th segment\\r\\n\\t\\t// This ensures that only the unique points are stored\\r\\n\\t\\tpoints.insert(segments[i].f);\\r\\n\\t\\tpoints.insert(segments[i].s + 1); \\r\\n\\t}\\r\\n\\t\\r\\n\\tint cur = 0;\\r\\n\\tmap<ll, int> compressed; // This map stores the compressed coordinates.\\r\\n\\tvector<ll> coords;\\r\\n\\tfor (auto& c: points) {\\r\\n\\t\\t// Assign c to cur, where cur is our compressed coordinate for \\\"a\\\".\\r\\n\\t\\tcompressed[c] = cur;\\r\\n\\t\\t/*\\r\\n\\t\\t * We still need to remember our original endpoints so \\r\\n\\t\\t * we can retransform the compressed coordinates\\r\\n\\t\\t */\\r\\n\\t\\tcoords.push_back(c);\\r\\n\\t\\tcur++;\\r\\n\\t}\\r\\n\\tvi freq(2 * n); // This stores the frequency of a given endpoint.\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t/*\\r\\n\\t\\t * A segment starts from [l*, r*], so we should end the segment \\r\\n\\t\\t * at r* + 1 to ensure that r* is included into the segment.\\r\\n\\t\\t */\\r\\n\\t\\tfreq[compressed[segments[i].f]]++;\\r\\n\\t\\tfreq[compressed[segments[i].s + 1]]--;\\r\\n\\t}\\r\\n\\t// This counts how many points are at a given compressed endpoint using prefix sums.\\r\\n\\tfor (int i = 1; i < 2 * n; i++) {\\r\\n\\t\\tfreq[i] += freq[i - 1];\\r\\n\\t}\\r\\n\\r\\n\\tvector<ll> cnt(n + 1);\\r\\n\\tfor (int i = 1; i < coords.size(); i++) {\\r\\n\\t\\t/*\\r\\n\\t\\t * We add r - l to the number of points for a given \\r\\n\\t\\t * frequency since we compressed the coordinates.\\t\\t  \\r\\n\\t\\t */\\t\\t\\t  \\r\\n\\t\\tcnt[freq[i - 1]] += coords[i] - coords[i - 1];\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\tcout << cnt[i] << \\\" \\\"; // Print out the answer here\\r\\n\\t}\\r\\n\\tcout << endl;\\r\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"cf-1000C","source":"CF","title":"Covered Points Count","author":"Jesse Choe"},"parent":{"name":"cf-1000C","relativePath":"cf-1000C.mdx"},"toc":{"cpp":[{"depth":1,"value":"Solution (Coordinate Compression)","slug":"solution-coordinate-compression"},{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":1,"value":"Solution (Coordinate Compression)","slug":"solution-coordinate-compression"},{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":1,"value":"Solution (Coordinate Compression)","slug":"solution-coordinate-compression"},{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-sorted-sets","title":"More Operations on Sorted Sets"}}}}]},"problemInfo":{"uniqueId":"cf-1000C","url":"https://codeforces.com/problemset/problem/1000/C"}},"pageContext":{"id":"cf-1000C"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}