{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-645-splitting-the-field/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-645\", source = \"USACO Gold 2016 Open\", title = \"Splitting the Field\", author = \"Óscar Garries, Benjamin Qi\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {LanguageSection, CPPSection, HeaderLink, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_split_gold_open16.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Implementation\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MX = 5e4;\\r\\nint n, x[MX], y[MX], ar[MX];\\r\\n\\r\\nbool cmp (int a, int b) {\\r\\n\\tif (x[a] == x[b]) return y[a] < y[b];\\r\\n\\treturn x[a] < x[b];\\r\\n}\\r\\n\\r\\nbool cmp1 (int a, int b) {\\r\\n\\tif (y[a] == y[b]) return x[a] < x[b];\\r\\n\\treturn y[a] < y[b];\\r\\n}\\r\\n\\r\\nint main () {\\r\\n\\tfreopen(\\\"split.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"split.out\\\", \\\"w\\\", stdout);\\r\\n\\tcin >> n;\\r\\n\\tmultiset<int> allX, allY, leftX, leftY, rightX, rightY;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tar[i] = i;\\r\\n\\t\\tcin >> x[i] >> y[i];\\r\\n\\t\\tallX.insert(x[i]);\\r\\n\\t\\tallY.insert(y[i]);\\r\\n\\t}\\r\\n\\tsort (ar, ar + n, cmp);\\r\\n\\tint x1 = *allX.rbegin(), x2 = *allX.begin(), y1 = *allY.rbegin(), y2 = *allY.begin();\\r\\n\\tlong long area = (x1 - x2) * 1LL * (y1 - y2); // original area\\r\\n\\tlong long sol = 0; // maximum difference\\r\\n\\r\\n\\tfor (int k = 0; k <= 1; k++) {\\r\\n\\t\\trightX = allX;\\r\\n\\t\\trightY = allY;\\r\\n\\t\\tleftX.clear();\\r\\n\\t\\tleftY.clear();\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tint j = ar[i];\\r\\n\\t\\t\\tlong long areaL = 0, areaR = 0;\\r\\n\\r\\n\\t\\t\\tleftX.insert(x[j]);\\r\\n\\t\\t\\tleftY.insert(y[j]);\\r\\n\\t\\t\\trightX.erase(rightX.find(x[j]));\\r\\n\\t\\t\\trightY.erase(rightY.find(y[j]));\\r\\n\\r\\n\\t\\t\\tx1 = *leftX.begin();\\r\\n\\t\\t\\ty1 = *leftY.begin();\\r\\n\\t\\t\\tx2 = *leftX.rbegin();\\r\\n\\t\\t\\ty2 = *leftY.rbegin();\\r\\n\\t\\t\\tareaL = (x2 - x1) * 1LL * (y2 - y1);\\r\\n\\t\\t\\tif (!rightX.empty()) {\\r\\n\\t\\t\\t\\tx1 = *rightX.begin();\\r\\n\\t\\t\\t\\ty1 = *rightY.begin();\\r\\n\\t\\t\\t\\tx2 = *rightX.rbegin();\\r\\n\\t\\t\\t\\ty2 = *rightY.rbegin();\\r\\n\\t\\t\\t\\tareaR = (x2 - x1) * 1LL * (y2 - y1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tsol = max (sol, area - (areaR + areaL));\\r\\n\\t\\t}\\r\\n\\t\\tsort (ar, ar + n, cmp1);\\r\\n\\t}\\r\\n\\tcout << sol << '\\\\n';\\r\\n}\\r\\n\\n\"\n          })\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"alternative\",\n      children: [_jsx(_components.a, {\n        href: \"#alternative\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Alternative\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"From the analysis:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Note that it is also possible to dispense with the binary search trees\\r\\nentirely and just keep running mins and maxes in \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"y\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\nconst ll INF = 1e18; // not too close to LLONG_MAX\\r\\n\\r\\nint N;\\r\\nll ans = 0;\\r\\nvector<pi> v;\\r\\n\\r\\nvoid tri() {\\r\\n\\tsort(all(v));\\r\\n\\tvector<pi> lef(N), rig(N);\\r\\n\\tauto comb = [](pi a, int b) -> pi { return mp(min(a.f,b),max(a.s,b)); };\\r\\n\\tlef[0] = {v[0].s,v[0].s};\\r\\n\\tfor (int i = 1; i < N; ++i) lef[i] = comb(lef[i-1],v[i].s);\\r\\n\\trig[N-1] = mp(v[N-1].s,v[N-1].s);\\r\\n\\tfor (int i = N-2; i >= 0; --i) rig[i] = comb(rig[i+1],v[i].s);\\r\\n\\tll area = (ll)(v.back().f-v.front().f)*(lef.back().s-lef.back().f);\\r\\n\\tll best = INF;\\r\\n\\tfor (int i = 0; i < N-1; ++i) if (v[i].f != v[i+1].f)\\r\\n\\t\\tbest = min(best,(ll)(v[i].f-v[0].f)*(lef[i].s-lef[i].f)\\r\\n\\t\\t\\t+(ll)(v.back().f-v[i+1].f)*(rig[i+1].s-rig[i+1].f));\\r\\n\\tans = max(ans,area-best);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"split\\\");\\r\\n\\tcin >> N;\\r\\n\\tv.resize(N);\\r\\n\\tfor (pi& t : v) cin >> t.f >> t.s;\\r\\n\\ttri();\\r\\n\\tfor (pi& t : v) swap(t.f,t.s);\\r\\n\\ttri();\\r\\n\\tcout << ans;\\r\\n\\treturn 0;\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"note---weak-test-data\",\n      children: [_jsx(_components.a, {\n        href: \"#note---weak-test-data\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Note - Weak Test Data\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The above codes give different outputs on the following test case:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The right answer should be \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"6\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>6</mn></mrow><annotation encoding=\\\"application/x-tex\\\">6</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">6</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"17\\r\\n0 0\\r\\n0 1\\r\\n0 2\\r\\n1 0\\r\\n1 1\\r\\n1 2\\r\\n2 0\\r\\n2 1\\r\\n2 2\\r\\n2 3\\r\\n2 4\\r\\n3 2\\r\\n3 3\\r\\n3 4\\r\\n4 2\\r\\n4 3\\r\\n4 4\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-645","source":"USACO Gold 2016 Open","title":"Splitting the Field","author":"Óscar Garries, Benjamin Qi"},"parent":{"name":"usaco-645","relativePath":"usaco-645.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Alternative","slug":"alternative"},{"depth":2,"value":"Note - Weak Test Data","slug":"note---weak-test-data"}],"java":[{"depth":2,"value":"Alternative","slug":"alternative"},{"depth":2,"value":"Note - Weak Test Data","slug":"note---weak-test-data"}],"py":[{"depth":2,"value":"Alternative","slug":"alternative"},{"depth":2,"value":"Note - Weak Test Data","slug":"note---weak-test-data"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"sorting-custom","title":"Custom Comparators and Coordinate Compression"}}}}]},"problemInfo":{"uniqueId":"usaco-645","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=645"}},"pageContext":{"id":"usaco-645"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}