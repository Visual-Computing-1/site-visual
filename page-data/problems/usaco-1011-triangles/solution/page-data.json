{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-1011-triangles/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-1011\", source = \"USACO Bronze 2020 February\", title = \"Triangles\", author = \"Ryan Chou (Python), Mrinall Umasudhan (Java), Sathvik Chundru (CPP)\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, PySection, JavaSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_triangles_bronze_feb20.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis (C++)\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Brute force all possible right triangles by looping over all triples of points\\r\\nand checking whether they form a right triangle. If so, compute the area and\\r\\nfind the maximum over all right triangles all in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^3)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^3)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            children: \"from itertools import permutations\\r\\n# using itertools to generate all permutations\\r\\n\\r\\nfin = open('triangles.in', 'r')\\r\\n\\r\\nN = int(fin.readline().strip())\\r\\npoints = []\\r\\n\\r\\nfor _ in range(N):\\r\\n\\tpoints.append([int(p) for p in fin.readline().split()])\\r\\n\\r\\npers = list(permutations(points, 3))\\r\\n# generating all permutations of size 3, since a triangle consists of 3 points.\\r\\n\\r\\narea = 0\\r\\n\\r\\nfor x in pers:\\r\\n\\tif x[0][1] == x[1][1] and x[1][0] == x[2][0]:\\r\\n\\t\\t# checks if one of the sides is parallel to the x-axis\\r\\n\\t\\t# and another is parallel to the y-axis.\\r\\n\\r\\n\\t\\tarea = max(area, abs((x[0][0] - x[1][0]) * (x[1][1] - x[2][1])))\\r\\n\\t\\t# is the area of this triangle larger than our current one?\\r\\n\\r\\nwith open('triangles.out', 'w') as fout:\\r\\n\\tfout.write(str(area) + '\\\\n')\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"\\r\\nimport java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class triangles{\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tScanner sc = new Scanner(new File(\\\"triangles.in\\\"));\\r\\n\\t\\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\\\"triangles.out\\\")));\\r\\n\\t\\tint N = sc.nextInt();\\r\\n\\t\\tint[][] vertices = new int[N][2]; // Store the vertices in a 2D array\\r\\n\\r\\n\\t\\tfor(int i= 0; i < N; i++){\\r\\n\\t\\t\\tvertices[i][0] = sc.nextInt(); // Read in the x-coordinate\\r\\n\\t\\t\\tvertices[i][1] = sc.nextInt(); // Read in the y-coordinate\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor(int i = 0; i < N; i++){\\r\\n\\t\\t\\tint a_x = vertices[i][0];  int a_y = vertices[i][1]; // Iterate for the first vertices of the triangle.\\r\\n\\t\\t\\tfor(int j = 0; j < N; j++){\\r\\n\\t\\t\\t\\tint b_x = vertices[j][0];  int b_y = vertices[j][1];\\r\\n\\t\\t\\t\\tfor(int k = 0; k < N; k++){\\r\\n\\t\\t\\t\\t\\tint c_x = vertices[k][0];  int c_y = vertices[k][1];\\r\\n\\r\\n\\t\\t\\t\\t\\tint area = Math.abs((a_x  * (b_y - c_y)) + (b_x * (c_y - a_y)) + (c_x * (a_y - b_y ))); // Calculate the area of the three triangles\\r\\n\\r\\n\\t\\t\\t\\t\\tif((a_x == b_x || a_x == c_x || c_x == b_x) && (a_y == b_y || a_y == c_y || c_y == b_y)) { // Check if the triangle has any sides parallel to the X-axis and the Y-axis.\\r\\n\\t\\t\\t\\t\\t\\tans = Math.max(ans, area); // Store the maximum area.\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tout.println(ans); // Print the max area.\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\n\"\n          })\n        })\n      }), _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\nconst int MAX_N = 105;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"triangles.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"triangles.out\\\", \\\"w\\\", stdout);\\r\\n\\tint n; cin >> n;\\r\\n\\tint x[MAX_N];\\r\\n\\tint y[MAX_N];\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> x[i] >> y[i];\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\tfor (int j = 0; j < n; j++) {\\r\\n\\t\\t\\tfor (int k = 0; k < n; k++) {\\r\\n\\t\\t\\t\\t// Check to see if both points are parallel to the X and Y axis\\r\\n\\t\\t\\t\\tif (y[i] == y[j] && x[i] == x[k]) {\\r\\n\\t\\t\\t\\t\\tint area = abs((x[j] - x[i]) * (y[k] - y[i]));\\r\\n\\t\\t\\t\\t\\tans = max(ans, area);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << ans << endl;\\r\\n}\\n\"\n          })\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-1011","source":"USACO Bronze 2020 February","title":"Triangles","author":"Ryan Chou (Python), Mrinall Umasudhan (Java), Sathvik Chundru (CPP)"},"parent":{"name":"usaco-1011","relativePath":"usaco-1011.mdx"},"toc":{"cpp":[{"depth":3,"value":"Implementation","slug":"implementation"}],"java":[{"depth":3,"value":"Implementation","slug":"implementation"}],"py":[{"depth":3,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"intro-complete","title":"Basic Complete Search"}}}}]},"problemInfo":{"uniqueId":"usaco-1011","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1011"}},"pageContext":{"id":"usaco-1011"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}