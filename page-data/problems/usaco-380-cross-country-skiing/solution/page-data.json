{
    "componentChunkName": "component---src-templates-solution-template-tsx",
    "path": "/problems/usaco-380-cross-country-skiing/solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"usaco-380\", source = \"USACO Silver 2014 January\", title = \"Cross Country Skiing\", author = \"Nathan Gong\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    JavaSection: _missingComponent(\"JavaSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, JavaSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"http://www.usaco.org/current/data/sol_ccski.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Official Analysis\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(NM\\\\log R)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>M</mi><mi>log</mi><mo>‚Å°</mo><mi>R</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(NM\\\\log R)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">NM</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">R</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"R\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\\\"application/x-tex\\\">R</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">R</span></span></span></span>\"\n      }), \" denotes the maximum\\r\\nheight difference between any two cells\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class CrossCountrySkiing {\\r\\n\\tstatic int n, m;\\r\\n\\tstatic int startI, startJ; // Stores starting position of each floodfill\\r\\n\\tstatic int[][] course; // Stores the skiing course heights\\r\\n\\tstatic boolean[][] waypoints; // Stored as booleans instead of 1s and 0s\\r\\n\\tstatic boolean[][] vis; // Visited array for floodfill\\r\\n\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tKattio io = new Kattio(\\\"ccski\\\");\\r\\n\\r\\n\\t\\tn = io.nextInt();\\r\\n\\t\\tm = io.nextInt();\\r\\n\\r\\n\\t\\tint minHeight = Integer.MAX_VALUE;\\r\\n\\t\\tint maxHeight = Integer.MIN_VALUE;\\r\\n\\r\\n\\t\\tcourse = new int[n][m];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\tcourse[i][j] = io.nextInt();\\r\\n\\t\\t\\t\\tminHeight = Math.min(minHeight, course[i][j]);\\r\\n\\t\\t\\t\\tmaxHeight = Math.max(maxHeight, course[i][j]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\twaypoints = new boolean[n][m];\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\tif (io.nextInt() == 1) {\\r\\n\\t\\t\\t\\t\\twaypoints[i][j] = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t// Keep one of the waypoints as the starting position\\r\\n\\t\\t\\t\\t\\tstartI = i;\\r\\n\\t\\t\\t\\t\\tstartJ = j;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\twaypoints[i][j] = false;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Binary search for the minimum possible value of d that works\\r\\n\\t\\t// We can set \\\"hi\\\" to maxHeight - minHeight because that will be the\\r\\n\\t\\t// maximum value of d we need to try\\r\\n\\t\\tint lo = 0;\\r\\n\\t\\tint hi = maxHeight - minHeight;\\r\\n\\t\\tint minD = -1;\\r\\n\\t\\twhile (lo <= hi) {\\r\\n\\t\\t\\tint d = (lo + hi) / 2;\\r\\n\\t\\t\\tif (reachable(d)) {\\r\\n\\t\\t\\t\\tminD = d;\\r\\n\\t\\t\\t\\thi = d - 1;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tlo = d + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tio.println(minD);\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t// i and j store current position\\r\\n\\t// d stores current value of d\\r\\n\\t// prevHeight stores the height of the previous cell\\r\\n\\tstatic void floodfill(int i, int j, int d, int prevHeight) {\\r\\n\\t\\t// Check if we are out of bounds\\r\\n\\t\\tif (i < 0 || i >= n || j < 0 || j >= m) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t// Check if current position has already been visited\\r\\n\\t\\tif (vis[i][j]) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t// Check if current position can be visited from previous position\\r\\n\\t\\tif (Math.abs(course[i][j] - prevHeight) > d) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Mark position as visited if all checks pass\\r\\n\\t\\tvis[i][j] = true;\\r\\n\\r\\n\\t\\t// Visit each adjacent cell\\r\\n\\t\\tfloodfill(i + 1, j, d, course[i][j]);\\r\\n\\t\\tfloodfill(i - 1, j, d, course[i][j]);\\r\\n\\t\\tfloodfill(i, j + 1, d, course[i][j]);\\r\\n\\t\\tfloodfill(i, j - 1, d, course[i][j]);\\r\\n\\t}\\r\\n\\r\\n\\tstatic boolean reachable(int d) {\\r\\n\\t\\t// Reset visited array and begin floodfill (DFS) from start position\\r\\n\\t\\tvis = new boolean[n][m];\\r\\n\\t\\tfloodfill(startI, startJ, d, course[startI][startJ]);\\r\\n\\t\\t\\r\\n\\t\\t// Check each cell: if it is a waypoint and it hasn't been visited,\\r\\n\\t\\t// we know not all waypoints are reachable from one another\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\tif (waypoints[i][j] && !vis[i][j]) {\\r\\n\\t\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  source,\n  title,\n  author,\n  default: MDXContent\n};\n","frontmatter":{"id":"usaco-380","source":"USACO Silver 2014 January","title":"Cross Country Skiing","author":"Nathan Gong"},"parent":{"name":"usaco-380","relativePath":"usaco-380.mdx"},"toc":{"cpp":[{"depth":2,"value":"Implementation","slug":"implementation"}],"java":[{"depth":2,"value":"Implementation","slug":"implementation"}],"py":[{"depth":2,"value":"Implementation","slug":"implementation"}]}},"allProblemInfo":{"edges":[{"node":{"module":{"frontmatter":{"id":"flood-fill","title":"Flood Fill"}}}}]},"problemInfo":{"uniqueId":"usaco-380","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=380"}},"pageContext":{"id":"usaco-380"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}