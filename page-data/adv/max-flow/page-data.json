{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/max-flow",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"max-flow\", title = \"Maximum Flow\", author = \"Benjamin Qi\", prerequisites = [\"bfs\"], description = \"Introduces maximum flow as well as flow with lower bounds.\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    Problems: _missingComponent(\"Problems\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Youtube: _missingComponent(\"Youtube\"),\n    Optional: _missingComponent(\"Optional\")\n  }, _props.components), {Problems, HeaderLink, Resources, Resource, Youtube, Optional, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Problems, {\n      problems: \"maxSam\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"resources\",\n      children: [_jsx(_components.a, {\n        href: \"#resources\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resources\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPC\",\n        title: \"10 - Network Flow\",\n        url: \"10_graphs_3_network_flow\"\n      }), _jsx(Resource, {\n        source: \"CPH\",\n        title: \"20 - Flows & Cuts\"\n      }), _jsx(Resource, {\n        source: \"CP2\",\n        title: \"4.6, 4.7.4 - Max Flow, Bipartite Graphs\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"flows\",\n      children: [_jsx(_components.a, {\n        href: \"#flows\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Flows\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"flow\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"bipartite-matching\",\n      children: [_jsx(_components.a, {\n        href: \"#bipartite-matching\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Bipartite Matching\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"match\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"dinics-algorithm\",\n      children: [_jsx(_components.a, {\n        href: \"#dinics-algorithm\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Dinic's Algorithm\"]\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"M6cm8UeeziI\"\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"dinic\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hopcroft-Karp Bipartite Matching?\"\n    }), \"\\n\", _jsxs(Optional, {\n      title: \"Faster Flow\",\n      children: [_jsxs(_components.p, {\n        children: [\"There exist faster flow algorithms such as \", _jsx(_components.strong, {\n          children: \"Push-Relabel\"\n        }), \". Also see the\\r\\nfollowing blog post:\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://codeforces.com/blog/entry/66006\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"Chilli: Dinic's with Scaling\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"However, the standard implementation of Dinic's is (almost) always fast enough\\r\\non reasonable problems.\"\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Benq\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/graphs%20(12)/Flows%20(12.3)/Dinic.h\",\n        title: \"Dinic\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"breaking-flows\",\n      children: [_jsx(_components.a, {\n        href: \"#breaking-flows\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Breaking Flows\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When the constraints are too high ...\"\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        url: \"https://codeforces.com/blog/entry/80627\",\n        title: \"maroonrk - TL Issue on CF 659 Div 1 F\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"CF\",\n        url: \"https://codeforces.com/blog/entry/52714?#comment-668566\",\n        title: \"Actual Complexity of Max Flow?\",\n        starred: true\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Maximum Flow","author":"Benjamin Qi","contributors":null,"id":"max-flow","prerequisites":["bfs"],"description":"Introduces maximum flow as well as flow with lower bounds.","frequency":1},"parent":{"name":"Max_Flow","relativePath":"6_Advanced/Max_Flow.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Flows","slug":"flows"},{"depth":2,"value":"Bipartite Matching","slug":"bipartite-matching"},{"depth":2,"value":"Dinic&#39;s Algorithm","slug":"dinics-algorithm"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Breaking Flows","slug":"breaking-flows"}],"java":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Flows","slug":"flows"},{"depth":2,"value":"Bipartite Matching","slug":"bipartite-matching"},{"depth":2,"value":"Dinic&#39;s Algorithm","slug":"dinics-algorithm"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Breaking Flows","slug":"breaking-flows"}],"py":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Flows","slug":"flows"},{"depth":2,"value":"Bipartite Matching","slug":"bipartite-matching"},{"depth":2,"value":"Dinic&#39;s Algorithm","slug":"dinics-algorithm"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Breaking Flows","slug":"breaking-flows"}]}},"moduleProblemLists":{"problemLists":[{"listId":"maxSam","problems":[{"uniqueId":"cses-1694","name":"Download Speed","url":"https://cses.fi/problemset/task/1694","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["Max Flow"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"flow","problems":[{"uniqueId":"cses-1711","name":"Distinct Routes","url":"https://cses.fi/problemset/task/1711","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["Max Flow"],"solution":null}]},{"listId":"match","problems":[{"uniqueId":"cses-1696","name":"School Dance","url":"https://cses.fi/problemset/task/1696","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["Max Flow"],"solution":null}]},{"listId":"dinic","problems":[{"uniqueId":"spoj-FastFlow","name":"Fast Flow","url":"https://www.spoj.com/problems/FASTFLOW","source":"SPOJ","difficulty":"Easy","isStarred":false,"tags":[],"solution":null},{"uniqueId":"ys-BipartiteMatching","name":"Bipartite Matching","url":"https://judge.yosupo.jp/problem/bipartitematching","source":"YS","difficulty":"Easy","isStarred":false,"tags":[],"solution":null}]}]}},"pageContext":{"id":"max-flow"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}