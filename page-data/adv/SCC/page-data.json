{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/SCC",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*<Resource\nsource=\"Benq\"\ntitle=\"Kosaraju's Implementation\"\nurl=\"https://github.com/bqi343/USACO/blob/master/Implementations/content/graphs%20(12)/DFS/SCCK.h\"\n>\nconcise implementation of Kosaraju's Algorithm\n</Resource>*/\n/*<Resource\nsource=\"Benq\"\ntitle=\"Tarjan's Implementation\"\nurl=\"https://github.com/bqi343/USACO/blob/master/Implementations/content/graphs%20(12)/DFS/SCCT.h\"\n>\nconcise implementation of Tarjan's Algorithm\n</Resource>*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"SCC\", title = \"Strongly Connected Components\", author = \"Benjamin Qi, Dong Liu, Neo Wang\", prerequisites = [\"toposort\", \"BCC-2CC\"], description = \"Subsets of nodes in directed graphs where each node in a subset can reach each other node in the subset.\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Problems: _missingComponent(\"Problems\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\")\n  }, _props.components), {HeaderLink, FocusProblem, Resources, Resource, Spoiler, LanguageSection, CPPSection, Problems, IncompleteSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"sccs\",\n      children: [_jsx(_components.a, {\n        href: \"#sccs\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"SCCs\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"ex\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The definition of a kingdom in this problem is equivalent to the definition of a strongly connected component. We can compute these components using either \", _jsx(_components.strong, {\n        children: \"Kosaraju's\"\n      }), \" or \", _jsx(_components.strong, {\n        children: \"Tarjan's\"\n      }), \" algorithms, both of which are described below.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"kosarajus-algorithm\",\n      children: [_jsx(_components.a, {\n        href: \"#kosarajus-algorithm\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Kosaraju's Algorithm\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"17 - Strong Connectivity\"\n      }), _jsx(Resource, {\n        source: \"Wikipedia\",\n        title: \"Kosaraju's Algorithm\",\n        url: \"https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm\"\n      })]\n    }), \"\\n\", \"\\n\", _jsx(Spoiler, {\n      title: \"Solution (Kosaraju's)\",\n      children: _jsx(LanguageSection, {\n        children: _jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h> // see /general/running-code-locally\\r\\nusing namespace std;\\r\\n\\r\\nusing vi = vector<int>;\\r\\n#define pb push_back\\r\\n\\r\\nconst int mx = 1e5+1;\\r\\n\\r\\n// adj_t is the transpose of adj\\r\\nvi adj[mx], adj_t[mx], S;\\r\\nbool vis[mx];\\r\\nint id[mx];\\r\\n \\r\\nvoid dfs(int x, int pass, int num = 0) {\\r\\n\\tvis[x] = true;\\r\\n\\tvi &ad = (pass == 1) ? adj[x] : adj_t[x];\\r\\n\\tfor(const int &e : ad) {\\r\\n\\t\\tif(!vis[e]) dfs(e, pass, num);\\r\\n\\t}\\r\\n\\r\\n\\tS.pb(x);\\r\\n\\tif(pass == 2) id[x] = num;\\r\\n}\\r\\n \\r\\nint main() {\\r\\n\\tcin.tie(0)->sync_with_stdio(0);\\r\\n\\t\\r\\n\\tint n, m;\\r\\n\\tcin >> n >> m;\\r\\n \\r\\n\\twhile(m--) {\\r\\n\\t\\tint a, b; cin >> a >> b;\\r\\n\\t\\tadj[a].pb(b);\\r\\n\\t\\tadj_t[b].pb(a);\\r\\n\\t}\\r\\n \\r\\n\\tfor(int i = 1; i <= n; i++) {\\r\\n\\t\\tif(!vis[i]) dfs(i, 1);\\r\\n\\t}\\r\\n \\r\\n\\tmemset(vis, false, sizeof vis);\\r\\n \\r\\n\\tint components = 0;\\r\\n \\r\\n\\tfor(int i = n - 1; i >= 0; i--) {\\r\\n\\t\\tif(!vis[S[i]]) {\\r\\n\\t\\t\\tcomponents++;\\r\\n\\t\\t\\tdfs(S[i], 2, components);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tcout << components << \\\"\\\\n\\\";\\r\\n \\r\\n\\tfor(int i = 1; i <= n; i++)\\r\\n\\t\\tcout << id[i] << \\\" \\\";\\r\\n}\\n\"\n            })\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tarjans-algorithm\",\n      children: [_jsx(_components.a, {\n        href: \"#tarjans-algorithm\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tarjan's Algorithm\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPC\",\n        title: \"7 - Graphs 1\",\n        url: \"07_graphs_1\"\n      }), _jsx(Resource, {\n        source: \"CP2\",\n        title: \"4.2.9 - Finding SCCs\"\n      }), _jsx(Resource, {\n        source: \"Wikipedia\",\n        title: \"Tarjan's SCC Algorithm\",\n        url: \"https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\"\n      })]\n    }), \"\\n\", \"\\n\", _jsx(Spoiler, {\n      title: \"Solution (Tarjan's)\",\n      children: _jsx(LanguageSection, {\n        children: _jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n/**\\r\\n * Description: Tarjan's, DFS once to generate\\r\\n \\t* strongly connected components in topological order. $a,b$\\r\\n \\t* in same component if both $a\\\\to b$ and $b\\\\to a$ exist.\\r\\n \\t* Uses less memory than Kosaraju b/c doesn't store reverse edges.\\r\\n * Time: O(N+M)\\r\\n * Source: KACTL\\r\\n \\t* https://github.com/kth-competitive-programming/kactl/blob/master/content/graph/SCC.h\\r\\n * Verification: https://cses.fi/problemset/task/1686/\\r\\n*/\\r\\nstruct SCC {\\r\\n\\tint N, ti = 0; vector<vector<int>> adj;\\r\\n\\tvector<int> disc, comp, st, comps;\\r\\n\\tvoid init(int _N) {\\r\\n\\t\\tN = _N;\\r\\n\\t\\tadj.resize(N), disc.resize(N), comp = vector<int>(N,-1);\\r\\n\\t}\\r\\n\\tvoid ae(int x, int y) {\\r\\n\\t\\tadj[x].push_back(y);\\r\\n\\t}\\r\\n\\tint dfs(int x) {\\r\\n\\t\\tint low = disc[x] = ++ti; st.push_back(x); // disc[y] != 0 -> in stack\\r\\n\\t\\tfor(int y : adj[x]) if (comp[y] == -1) low = min(low, disc[y]?:dfs(y));\\r\\n\\t\\tif (low == disc[x]) { // make new SCC, pop off stack until you find x\\r\\n\\t\\t\\tcomps.push_back(x); for (int y = -1; y != x;)\\r\\n\\t\\t\\t\\tcomp[y = st.back()] = x, st.pop_back();\\r\\n\\t\\t}\\r\\n\\t\\treturn low;\\r\\n\\t}\\r\\n\\tvoid gen() {\\r\\n\\t\\tfor(int i=0; i<N; i++) if (!disc[i]) dfs(i);\\r\\n\\t\\treverse(begin(comps), end(comps));\\r\\n\\t}\\r\\n};\\r\\n\\r\\nint main() {\\r\\n\\tint n, m, a, b;\\r\\n\\tcin >> n >> m;\\r\\n\\r\\n\\tSCC graph;\\r\\n\\tgraph.init(n);\\r\\n\\twhile(m--) {\\r\\n\\t\\tcin >> a >> b;\\r\\n\\t\\tgraph.ae(--a, --b);\\r\\n\\t}\\r\\n\\tgraph.gen();\\r\\n\\tint ID[200000]{};\\r\\n\\tint ids = 0;\\r\\n\\tfor(int i=0; i<n; i++) {\\r\\n\\t\\tif(!ID[graph.comp[i]]) {\\r\\n\\t\\t\\tID[graph.comp[i]] = ++ids;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << ids << '\\\\n';\\r\\n\\tfor(int i=0; i<n; i++) {\\r\\n\\t\\tcout << ID[graph.comp[i]] << \\\" \\\\n\\\"[i==n-1];\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"2-sat\",\n      children: [_jsx(_components.a, {\n        href: \"#2-sat\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"2-SAT\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"satEx\"\n    }), \"\\n\", _jsx(IncompleteSection, {\n      children: _jsx(_components.p, {\n        children: \"implementation\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CF\",\n        title: \"2-SAT\",\n        url: \"16205\"\n      })\n    }), \"\\n\", _jsx(IncompleteSection, {\n      children: _jsx(_components.p, {\n        children: \"mention KACTL - at most one\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Strongly Connected Components","author":"Benjamin Qi, Dong Liu, Neo Wang","contributors":null,"id":"SCC","prerequisites":["toposort","BCC-2CC"],"description":"Subsets of nodes in directed graphs where each node in a subset can reach each other node in the subset.","frequency":1},"parent":{"name":"SCC","relativePath":"6_Advanced/SCC.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"SCCs","slug":"sccs"},{"depth":3,"value":"Kosaraju&#39;s Algorithm","slug":"kosarajus-algorithm"},{"depth":3,"value":"Tarjan&#39;s Algorithm","slug":"tarjans-algorithm"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"2-SAT","slug":"2-sat"},{"depth":3,"value":"Tutorial","slug":"tutorial"}],"java":[{"depth":2,"value":"SCCs","slug":"sccs"},{"depth":3,"value":"Kosaraju&#39;s Algorithm","slug":"kosarajus-algorithm"},{"depth":3,"value":"Tarjan&#39;s Algorithm","slug":"tarjans-algorithm"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"2-SAT","slug":"2-sat"},{"depth":3,"value":"Tutorial","slug":"tutorial"}],"py":[{"depth":2,"value":"SCCs","slug":"sccs"},{"depth":3,"value":"Kosaraju&#39;s Algorithm","slug":"kosarajus-algorithm"},{"depth":3,"value":"Tarjan&#39;s Algorithm","slug":"tarjans-algorithm"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"2-SAT","slug":"2-sat"},{"depth":3,"value":"Tutorial","slug":"tutorial"}]}},"moduleProblemLists":{"problemLists":[{"listId":"ex","problems":[{"uniqueId":"cses-1683","name":"Planets & Kingdoms","url":"https://cses.fi/problemset/task/1683","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["SCC"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"general","problems":[{"uniqueId":"cses-1686","name":"Coin Collector","url":"https://cses.fi/problemset/task/1686","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["SCC","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"poi-18-BikePaths","name":"2018 - Bike Paths","url":"https://szkopul.edu.pl/problemset/problem/aKKSmtjWTtDOEHDqnmQ3-eAA/site/?key=statement","source":"POI","difficulty":"Easy","isStarred":false,"tags":["SCC","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-516","name":"Grass Cownoisseur","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=516","source":"Old Gold","difficulty":"Normal","isStarred":false,"tags":["SCC"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_grass_gold.html","sketch":null}},{"uniqueId":"cf-1239D","name":"Catowice City","url":"https://codeforces.com/contest/1239/problem/D","source":"CF","difficulty":"Normal","isStarred":false,"tags":["SCC"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1534F1","name":"Falling Sand","url":"https://codeforces.com/contest/1534/problem/F2","source":"CF","difficulty":"Hard","isStarred":false,"tags":["SCC"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"poi-12-festival","name":"2012 - Festival","url":"https://szkopul.edu.pl/problemset/problem/p9uJo01RR9ouMLLAYroFuQ-7/site/?key=statement","source":"POI","difficulty":"Hard","isStarred":false,"tags":["SCC"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/POI/official/2012/editorial/fes.pdf","sketch":null}},{"uniqueId":"kattis-equivalences","name":"Proving Equivalences","url":"https://open.kattis.com/problems/equivalences","source":"Kattis","difficulty":"Hard","isStarred":false,"tags":["SCC"],"solution":null},{"uniqueId":"cses-1685","name":"New Flight Routes","url":"https://cses.fi/problemset/task/1685","source":"CSES","difficulty":"Very Hard","isStarred":false,"tags":["SCC"],"solution":null}]},{"listId":"satEx","problems":[{"uniqueId":"cses-1684","name":"Giant Pizza","url":"https://cses.fi/problemset/task/1684","source":"CSES","difficulty":"Normal","isStarred":false,"tags":[],"solution":null}]}]}},"pageContext":{"id":"SCC"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}