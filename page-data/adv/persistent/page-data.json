{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/persistent",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*- [Lazy Propogation](http://codeforces.com/blog/entry/47108?#comment-315047)*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"persistent\", title = \"Persistent Data Structures\", author = \"Andi Qu, Benjamin Qi\", description = \"What if data structures could time travel?\", prerequisites = [\"sparse-segtree\"], frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    em: \"em\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {HeaderLink, LanguageSection, CPPSection, MATHSPAN, FocusProblem, Resources, Resource, IncompleteSection, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"persistent-array\",\n      children: [_jsx(_components.a, {\n        href: \"#persistent-array\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Persistent Array\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Persistent arrays are one of the simplest persistent data structures. A\\r\\npersistent array should be able to access and update its elements at given\\r\\ntimes.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"fat-nodes\",\n      children: [_jsx(_components.a, {\n        href: \"#fat-nodes\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Fat Nodes\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"In C++, one can implement this to run in \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal O(\\\\log N)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \" time per query and\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\mathcal O(1)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \" time per update by using an array of \", _jsx(_components.code, {\n            children: \"vector\"\n          }), \"s.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"vector<pair<int, int>> arr[100001]; // The persistent array\\r\\n\\r\\nint get_item(int index, int time) {\\r\\n\\t// Gets the array item at a given index and time\\r\\n\\tauto ub = upper_bound(arr[index].begin(), arr[index].end(), make_pair(time, INT_MAX));\\r\\n\\treturn prev(ub)->second;\\r\\n}\\r\\n\\r\\nvoid update_item(int index, int value, int time) {\\r\\n\\t// Updates the array item at a given index and time\\r\\n\\t// Note that this only works if the time is later than all previous\\r\\n\\t// update times\\r\\n\\tassert(arr[index].back().first < time);\\r\\n\\tarr[index].push_back({time, value});\\r\\n}\\r\\n\\r\\nvoid init_arr(int n, int* init) {\\r\\n\\t// Initializes the persistent array, given an input array\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t\\tarr[i].push_back({0, init[i]});\\r\\n}\\n\"\n          })\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This approach (i.e. storing multiple values at each index without erasing old\\r\\nvalues) is known as \", _jsx(_components.strong, {\n        children: \"fat nodes\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Although easy to implement, fat nodes are only \", _jsx(_components.strong, {\n        children: \"partially persistent\"\n      }), \", meaning\\r\\nthat only the latest version of the data structure can be modified.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For most competitive programming problems involving persistent data structures,\\r\\nwe use \", _jsx(_components.strong, {\n        children: \"path copying\"\n      }), \" instead.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"path-copying\",\n      children: [_jsx(_components.a, {\n        href: \"#path-copying\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Path Copying\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"One can implement path copying to run in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time per query and\\r\\nupdate by using a binary-tree-like structure where array elements are the\\r\\nleaves.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is very similar to a sparse segment tree. The key differences are that we\\r\\nhave multiple roots and every time we \\\"update\\\" a node, we actually create a new\\r\\nnode in its place (hence persistence).\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"struct Node {\\r\\n\\tint val;\\r\\n\\tNode *l, *r;\\r\\n\\r\\n\\tNode(ll x) : val(x), l(nullptr), r(nullptr) {}\\r\\n\\tNode(Node *ll, Node *rr) : val(0), l(ll), r(rr) {}\\r\\n};\\r\\n\\r\\nint n, a[100001]; // The initial array and its size\\r\\nNode* roots[100001]; // The persistent array's roots\\r\\n\\r\\nNode* build(int l = 0, int r = n - 1) {\\r\\n\\tif (l == r) return new Node(a[l]);\\r\\n\\tint mid = (l + r) / 2;\\r\\n\\treturn new Node(build(l, mid), build(mid + 1, r));\\r\\n}\\r\\n\\r\\nNode* update(Node* node, int val, int pos, int l = 0, int r = n - 1) {\\r\\n\\tif (l == r) return new Node(val);\\r\\n\\tint mid = (l + r) / 2;\\r\\n\\tif (pos > mid) return new Node(node->l, update(node->r, val, pos, mid + 1, r));\\r\\n\\telse return new Node(update(node->l, val, pos, l, mid), node->r);\\r\\n}\\r\\n\\r\\nint query(Node* node, int pos, int l = 0, int r = n - 1) {\\r\\n\\tif (l == r) return node->val;\\r\\n\\tint mid = (l + r) / 2;\\r\\n\\tif (pos > mid) return query(node->r, pos, mid + 1, r);\\r\\n\\treturn query(node->l, pos, l, mid);\\r\\n}\\r\\n\\r\\nint get_item(int index, int time) {\\r\\n\\t// Gets the array item at a given index and time\\r\\n\\treturn query(roots[time], index);\\r\\n}\\r\\n\\r\\nvoid update_item(int index, int value, int prev_time, int curr_time) {\\r\\n\\t// Updates the array item at a given index and time\\r\\n\\troots[curr_time] = update(roots[prev_time], index, value);\\r\\n}\\r\\n\\r\\nvoid init_arr(int nn, int* init) {\\r\\n\\t// Initializes the persistent array, given an input array\\r\\n\\tn = nn;\\r\\n\\tfor (int i = 0; i < n; i++)\\r\\n\\t\\ta[i] = init[i];\\r\\n\\troots[0] = build();\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Path copying is \", _jsx(_components.strong, {\n        children: \"fully persistent\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"persistent-segment-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#persistent-segment-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Persistent Segment Tree\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since persistent arrays with path copying are so similar to sparse segment\\r\\ntrees, it's relatively straightforward to convert one into a persistent segment\\r\\ntree - just add range queries!\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"persistentSample\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"resources\",\n      children: [_jsx(_components.a, {\n        href: \"#resources\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resources\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"oml1111\",\n        url: \"https://drive.google.com/file/d/0BwGLW04WRv0ITEZjRWlMSFc2bk0/view?usp=sharing&resourcekey=0-1Zvsu-oMrdNsCuCIU3xGNA\",\n        title: \"PSeg Slides\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"Anudeep2011\",\n        url: \"https://blog.anudeep2011.com/persistent-segment-trees-explained-with-spoj-problems/\",\n        title: \"PSegs w/ SPOJ\",\n        children: _jsx(_components.p, {\n          children: \"not great formatting\"\n        })\n      })]\n    }), \"\\n\", \"\\n\", _jsx(IncompleteSection, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since this problem involves range queries, we'll use some type of segment tree\\r\\nto solve it. (We can also use a Fenwick tree, but that's much harder to make\\r\\npersistent.)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When dealing with problems involving multiple dimensions, it's often helpful to\\r\\nview one of those dimensions as time. In this problem, we'll view the index of\\r\\neach array as its time dimension.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using a persistent segment tree, we can then turn the problem into the\\r\\nfollowing:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Type 1 queries involve a point update on the segment tree at some time.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Type 2 queries involve a range query on the segment tree at some time.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Type 3 queries involve copying the root of the segment tree at some time and\\r\\nappending it to the array of segment tree roots.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nstruct Node {\\r\\n\\tll val;\\r\\n\\tNode *l, *r;\\r\\n\\r\\n\\tNode(ll x) : val(x), l(nullptr), r(nullptr) {}\\r\\n\\tNode(Node *ll, Node *rr) {\\r\\n\\t\\tl = ll, r = rr;\\r\\n\\t\\tval = 0;\\r\\n\\t\\tif (l) val += l->val;\\r\\n\\t\\tif (r) val += r->val;\\r\\n\\t}\\r\\n\\tNode(Node *cp) : val(cp->val), l(cp->l), r(cp->r) {}\\r\\n};\\r\\n\\r\\nint n, cnt = 1;\\r\\nll a[200001];\\r\\nNode* roots[200001];\\r\\n\\r\\nNode* build(int l = 1, int r = n) {\\r\\n\\tif (l == r) return new Node(a[l]);\\r\\n\\tint mid = (l + r) / 2;\\r\\n\\treturn new Node(build(l, mid), build(mid + 1, r));\\r\\n}\\r\\n\\r\\nNode* update(Node* node, int val, int pos, int l = 1, int r = n) {\\r\\n\\tif (l == r) return new Node(val);\\r\\n\\tint mid = (l + r) / 2;\\r\\n\\tif (pos > mid) return new Node(node->l, update(node->r, val, pos, mid + 1, r));\\r\\n\\telse return new Node(update(node->l, val, pos, l, mid), node->r);\\r\\n}\\r\\n\\r\\nll query(Node* node, int a, int b, int l = 1, int r = n) {\\r\\n\\tif (l > b || r < a) return 0;\\r\\n\\tif (l >= a && r <= b) return node->val;\\r\\n\\tint mid = (l + r) / 2;\\r\\n\\treturn query(node->l, a, b, l, mid) + query(node->r, a, b, mid + 1, r);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\tint q;\\r\\n\\tcin >> n >> q;\\r\\n\\tfor (int i = 1; i <= n; i++) cin >> a[i];\\r\\n\\troots[cnt++] = build();\\r\\n\\r\\n\\twhile (q--) {\\r\\n\\t\\tint t;\\r\\n\\t\\tcin >> t;\\r\\n\\t\\tif (t == 1) {\\r\\n\\t\\t\\tint k, i, x;\\r\\n\\t\\t\\tcin >> k >> i >> x;\\r\\n\\t\\t\\troots[k] = update(roots[k], x, i);\\r\\n\\t\\t} else if (t == 2) {\\r\\n\\t\\t\\tint k, l, r;\\r\\n\\t\\t\\tcin >> k >> l >> r;\\r\\n\\t\\t\\tcout << query(roots[k], l, r) << '\\\\n';\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tint k;\\r\\n\\t\\t\\tcin >> k;\\r\\n\\t\\t\\troots[cnt++] = new Node(roots[k]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"application-1---static-2d-range-sums-on-large-grids\",\n      children: [_jsx(_components.a, {\n        href: \"#application-1---static-2d-range-sums-on-large-grids\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Application 1 - Static 2D Range Sums on Large Grids\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Persistent segment trees can be used for online 2D static range sum queries in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time (think of it like prefix sums).\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note that 2D Fenwick trees with coordinate compression often also work for this\\r\\n(and are easier to implement), but it's still good to know this application.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"application-2---largest-interval-completely-inside-a-range\",\n      children: [_jsx(_components.a, {\n        href: \"#application-2---largest-interval-completely-inside-a-range\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Application 2 - Largest Interval Completely Inside a Range\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Consider the following problem:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Given \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"N\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n        }), \" intervals on the number line, answer \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"Q\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\\\"application/x-tex\\\">Q</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8778em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">Q</span></span></span></span>\"\n        }), \" queries of the form \\\"what\\r\\nis the largest interval completely contained inside the range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[x, y]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[x, y]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \"?\\\"\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"N, Q \\\\leq 10^5\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo separator=\\\"true\\\">,</mo><mi>Q</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">N, Q \\\\leq 10^5</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8778em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">5</span></span></span></span></span></span></span></span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since each interval has two dimensions (i.e. left and right endpoints \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"l_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">l_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" and\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">r_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \"), we can view it as a \", _jsx(_components.em, {\n        children: \"point\"\n      }), \" on the number line at \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"l_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">l_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" with \\\"value\\\"\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r_i - l_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub><mo>−</mo><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">r_i - l_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7333em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" that was inserted at time \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"r_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">r_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now, each query becomes \\\"what is the most valuable point in the range \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[x, y]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[x, y]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \"\\r\\nthat was inserted at or before time \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"y\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n      }), \"?\\\" This is much easier to handle, so we\\r\\ncan solve this problem in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(Q \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>Q</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(Q \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"segtree\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"persistent-heap\",\n      children: [_jsx(_components.a, {\n        href: \"#persistent-heap\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Persistent Heap\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Benq\",\n        title: \"Leftist Heap\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/LeftistHeap.h\"\n      })\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"heap\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  prerequisites,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Persistent Data Structures","author":"Andi Qu, Benjamin Qi","contributors":null,"id":"persistent","prerequisites":["sparse-segtree"],"description":"What if data structures could time travel?","frequency":1},"parent":{"name":"Persistent","relativePath":"6_Advanced/Persistent.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Persistent Array","slug":"persistent-array"},{"depth":3,"value":"Fat Nodes","slug":"fat-nodes"},{"depth":3,"value":"Path Copying","slug":"path-copying"},{"depth":2,"value":"Persistent Segment Tree","slug":"persistent-segment-tree"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":3,"value":"Application 1 - Static 2D Range Sums on Large Grids","slug":"application-1---static-2d-range-sums-on-large-grids"},{"depth":3,"value":"Application 2 - Largest Interval Completely Inside a Range","slug":"application-2---largest-interval-completely-inside-a-range"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Persistent Heap","slug":"persistent-heap"}],"java":[{"depth":2,"value":"Persistent Array","slug":"persistent-array"},{"depth":3,"value":"Fat Nodes","slug":"fat-nodes"},{"depth":3,"value":"Path Copying","slug":"path-copying"},{"depth":2,"value":"Persistent Segment Tree","slug":"persistent-segment-tree"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":3,"value":"Application 1 - Static 2D Range Sums on Large Grids","slug":"application-1---static-2d-range-sums-on-large-grids"},{"depth":3,"value":"Application 2 - Largest Interval Completely Inside a Range","slug":"application-2---largest-interval-completely-inside-a-range"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Persistent Heap","slug":"persistent-heap"}],"py":[{"depth":2,"value":"Persistent Array","slug":"persistent-array"},{"depth":3,"value":"Fat Nodes","slug":"fat-nodes"},{"depth":3,"value":"Path Copying","slug":"path-copying"},{"depth":2,"value":"Persistent Segment Tree","slug":"persistent-segment-tree"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":3,"value":"Application 1 - Static 2D Range Sums on Large Grids","slug":"application-1---static-2d-range-sums-on-large-grids"},{"depth":3,"value":"Application 2 - Largest Interval Completely Inside a Range","slug":"application-2---largest-interval-completely-inside-a-range"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Persistent Heap","slug":"persistent-heap"}]}},"moduleProblemLists":{"problemLists":[{"listId":"persistentSample","problems":[{"uniqueId":"cses-1737","name":"Range Queries and Copies","url":"https://cses.fi/problemset/task/1737","source":"CSES","difficulty":"Easy","isStarred":false,"tags":[],"solution":null}]},{"listId":"segtree","problems":[{"uniqueId":"cf-522D","name":"Closest Equals","url":"https://codeforces.com/problemset/problem/522/D","source":"CF","difficulty":"Easy","isStarred":false,"tags":["Persistent Segtree"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"coci-20-index","name":"2021 - Index","url":"https://evaluator.hsin.hr/tasks/HONI202167index/","source":"COCI","difficulty":"Normal","isStarred":false,"tags":["Persistent Segtree"],"solution":null},{"uniqueId":"noi-10-superpiano","name":"2010 - Super Piano","url":"https://dmoj.ca/problem/noi10p2","source":"NOI.cn","difficulty":"Normal","isStarred":false,"tags":["Persistent Segtree"],"solution":null},{"uniqueId":"ceoi-20-potion","name":"2020 - The Potion of Great Power","url":"https://codeforces.com/contest/1403/problem/A","source":"CEOI","difficulty":"Hard","isStarred":false,"tags":["Persistent Segtree","Sqrt"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"apio-17-rainbow","name":"2017 - Land of the Rainbow Gold","url":"https://dmoj.ca/problem/apio17p1","source":"APIO","difficulty":"Hard","isStarred":false,"tags":["Persistent Segtree","Euler's Formula","2DRQ"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"coci-20-specijacija","name":"2020 - Specijacija","url":"https://evaluator.hsin.hr/tasks/HONI202137specijacija/","source":"COCI","difficulty":"Very Hard","isStarred":false,"tags":["Persistent Segtree"],"solution":null},{"uniqueId":"ioi-15-teams","name":"2015 - Teams","url":"https://oj.uz/problem/view/IOI15_teams","source":"IOI","difficulty":"Very Hard","isStarred":true,"tags":["Persistent Segtree","2DRQ"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2015/41","sketch":null}}]},{"listId":"heap","problems":[{"uniqueId":"dmoj-TimeTravellingSquirrels","name":"Time Travelling Squirrels","url":"https://dmoj.ca/problem/wac4p5","source":"DMOJ","difficulty":"Very Hard","isStarred":false,"tags":null,"solution":{"kind":"label","label":"Check DMOJ","labelTooltip":"There might be a \"Read Editorial\" button on the right side of the page.","url":null,"sketch":null}},{"uniqueId":"ys-KthShortestWalk","name":"K-th Shortest Walk","url":"https://judge.yosupo.jp/problem/k_shortest_walk","source":"YS","difficulty":"Very Hard","isStarred":false,"tags":null,"solution":null}]}]}},"pageContext":{"id":"persistent"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}