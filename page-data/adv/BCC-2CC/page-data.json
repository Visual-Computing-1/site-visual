{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/BCC-2CC",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*<Resource\nsource=\"Infoarena\"\ntitle=\"Infoarena - Biconex\"\nurl=\"problema/biconex\"\n/>\n*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"BCC-2CC\", title = \"BCCs and 2CCs\", author = \"Benjamin Qi\", prerequisites = [\"dfs\", \"binary-jump\"], description = \"\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Problems: _missingComponent(\"Problems\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Spoiler: _missingComponent(\"Spoiler\")\n  }, _props.components), {Resources, Resource, HeaderLink, Problems, MATHSPAN, Spoiler, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        title: \"DFS Tree + Bridges\",\n        url: \"68138\"\n      }), _jsx(Resource, {\n        source: \"CP2\",\n        title: \"4.2.8 - Articulation Points & Bridges\"\n      })]\n    }), \"\\n\", \"\\n\", _jsxs(_components.h2, {\n      id: \"2-edge-connected-components\",\n      children: [_jsx(_components.a, {\n        href: \"#2-edge-connected-components\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"2-Edge-Connected Components\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"sam2\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(implementation)\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"with-dsu\",\n      children: [_jsx(_components.a, {\n        href: \"#with-dsu\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"With DSU\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"disrupt\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The analysis for the above problem mentions an \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(m\\\\alpha(n))\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>m</mi><mi>α</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(m\\\\alpha(n))</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.0037em;\\\">α</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">))</span></span></span></span>\"\n      }), \"\\r\\nsolution. Although this is not a two-connected component problem, we can in fact\\r\\nuse DSU to generate two-connected components.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(explanation?)\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Code\",\n      children: [_jsxs(_components.p, {\n        children: [\"The DSU operations take \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(\\\\log n)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" rather than\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(\\\\alpha(n))\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>α</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\alpha(n))</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.0037em;\\\">α</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">))</span></span></span></span>\"\n        }), \" because the DSU does not use union by size, but it's\\r\\neasy to change this.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"struct TwoEdgeCC {\\r\\n\\tstruct {\\r\\n\\t\\tvi e; void init(int n) { e = vi(n,-1); }\\r\\n\\t\\tint get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); }\\r\\n\\t\\tbool unite(int x, int y) { // set par[y] = x\\r\\n\\t\\t\\tx = get(x), y = get(y); if (x == y) return 0;\\r\\n\\t\\t\\te[x] += e[y]; e[y] = x; return 1;\\r\\n\\t\\t}\\r\\n\\t} DSU;\\r\\n\\tint N; vector<vi> adj; vi depth, par;\\r\\n\\tvpi extra;\\r\\n\\tvoid init(int _N) {\\r\\n\\t\\tN = _N; DSU.init(N);\\r\\n\\t\\tadj.rsz(N), depth.rsz(N), par = vi(N,-1);\\r\\n\\t}\\r\\n\\tvoid dfs(int x) {\\r\\n\\t\\ttrav(t,adj[x]) if (t != par[x])\\r\\n\\t\\t\\tpar[t] = x, depth[t] = depth[x]+1, dfs(t);\\r\\n\\t}\\r\\n\\tvoid ae(int a, int b) {\\r\\n\\t\\tif (DSU.unite(a,b)) adj[a].pb(b), adj[b].pb(a); // edge of forest\\r\\n\\t\\telse extra.pb({a,b}); // extra edge\\r\\n\\t}\\r\\n\\tvoid ad(int a, int b) {\\r\\n\\t\\twhile (1) {\\r\\n\\t\\t\\ta = DSU.get(a), b = DSU.get(b);\\r\\n\\t\\t\\tif (a == b) return;\\r\\n\\t\\t\\tif (depth[a] < depth[b]) swap(a,b);\\r\\n\\t\\t\\tassert(par[a] != -1 && DSU.unite(par[a],a));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvoid gen() {\\r\\n\\t\\tF0R(i,N) if (par[i] == -1) dfs(i); // independently for each connected component\\r\\n\\t\\tDSU.init(N); trav(t,extra) ad(t.f,t.s); // add non-spanning edges\\r\\n};\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"probs2\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"SRM 787 1000\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"biconnected-components\",\n      children: [_jsx(_components.a, {\n        href: \"#biconnected-components\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Biconnected_component\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Biconnected Components\"\n      })]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"bccSam\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"note that BCCs contain EDGES not VERTICES\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Related topics include\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Articulation Points\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Bridges\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Block-Cut Tree\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"GFG\",\n        title: \"Articulation Points (aka Cut Vertices)\",\n        url: \"articulation-points-or-cut-vertices-in-a-graph\",\n        children: _jsx(_components.p, {\n          children: \"maybe not completely correct\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(implementation)\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems-1\",\n      children: [_jsx(_components.a, {\n        href: \"#problems-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"gen\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"BCCs and 2CCs","author":"Benjamin Qi","contributors":null,"id":"BCC-2CC","prerequisites":["dfs","binary-jump"],"description":"","frequency":1},"parent":{"name":"BCC_2CC","relativePath":"6_Advanced/BCC_2CC.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"2-Edge-Connected Components","slug":"2-edge-connected-components"},{"depth":3,"value":"With DSU","slug":"with-dsu"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Biconnected Components","slug":"biconnected-components"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problems","slug":"problems-1"}],"java":[{"depth":2,"value":"2-Edge-Connected Components","slug":"2-edge-connected-components"},{"depth":3,"value":"With DSU","slug":"with-dsu"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Biconnected Components","slug":"biconnected-components"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problems","slug":"problems-1"}],"py":[{"depth":2,"value":"2-Edge-Connected Components","slug":"2-edge-connected-components"},{"depth":3,"value":"With DSU","slug":"with-dsu"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Biconnected Components","slug":"biconnected-components"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problems","slug":"problems-1"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sam2","problems":[{"uniqueId":"ys-TwoEdgeConnectedComponents","name":"Two-Edge-Connected Components","url":"https://judge.yosupo.jp/problem/two_edge_connected_components","source":"YS","difficulty":"Easy","isStarred":false,"tags":["2CC"],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"Split the graph into its biconnected components. See Infoarena - Biconex for how to do this."}}]},{"listId":"disrupt","problems":[{"uniqueId":"usaco-842","name":"Disruption","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=842","source":"Plat","difficulty":"Normal","isStarred":false,"tags":["Merging"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_disrupt_platinum_open18.html","sketch":null}}]},{"listId":"probs2","problems":[{"uniqueId":"ceoi-17-OneWayStreets","name":"2017 - One-Way Streets","url":"https://oj.uz/problem/view/CEOI17_oneway","source":"CEOI","difficulty":"Easy","isStarred":false,"tags":["BCC"],"solution":null}]},{"listId":"bccSam","problems":[{"uniqueId":"cses-1705","name":"Forbidden Cities","url":"https://cses.fi/problemset/task/1705","source":"CSES","difficulty":"Normal","isStarred":false,"tags":["BCC"],"solution":null}]},{"listId":"gen","problems":[{"uniqueId":"cses-2177","name":"Strongly Connected Edges","url":"https://cses.fi/problemset/task/2177","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["BCC"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"poi-08-blockade","name":"2008 - Blockade","url":"https://szkopul.edu.pl/problemset/problem/eDt8w290owtatmCjad0O0ywk/site/?key=statement","source":"POI","difficulty":"Normal","isStarred":false,"tags":["BCC"],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"Instead of counting the number of bad pairs, count the number of good pairs and subtract that from the total number of all pairs. Notice how if we remove a node, we get several connected components. We can then use biconnected components to determine the sizes of these components and so we can count the number of good pairs after removing each node."}},{"uniqueId":"apio-18-duathlon","name":"2018 - Duathlon","url":"https://oj.uz/problem/view/APIO18_duathlon","source":"APIO","difficulty":"Normal","isStarred":false,"tags":["BCC"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"poi-16-AmusingJourneys","name":"2016 - Amusing Journeys","url":"https://szkopul.edu.pl/problemset/problem/YY6-3ua-C1rt7q-97laWc0UP/site/","source":"POI","difficulty":"Normal","isStarred":false,"tags":["BCC"],"solution":null},{"uniqueId":"dmoj-investment","name":"Investment","url":"https://dmoj.ca/problem/tle17c1p6","source":"DMOJ","difficulty":"Hard","isStarred":false,"tags":["BCC"],"solution":{"kind":"label","label":"Check DMOJ","labelTooltip":"There might be a \"Read Editorial\" button on the right side of the page.","url":null,"sketch":null}},{"uniqueId":"ceoi-15-pipes","name":"2015 - Pipes","url":"https://oj.uz/problem/view/CEOI15_pipes","source":"CEOI","difficulty":"Hard","isStarred":false,"tags":["BCC"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ceoi2015.fi.muni.cz/solutions/solutions1.pdf","sketch":null}},{"uniqueId":"usaco-769","name":"Push a Box","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=769","source":"Plat","difficulty":"Very Hard","isStarred":false,"tags":["BCC"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_pushabox_platinum_dec17.html","sketch":null}}]}]}},"pageContext":{"id":"BCC-2CC"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}