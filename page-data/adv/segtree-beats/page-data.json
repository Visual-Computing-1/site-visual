{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/segtree-beats",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*(300iq insane problem??)*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"segtree-beats\", title = \"Segment Tree Beats\", author = \"Benjamin Qi, Dustin Miao\", prerequisites = [\"RURQ\"], description = \"Perform chmin and chmax range updates\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    em: \"em\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {HeaderLink, FocusProblem, MATHSPAN, LanguageSection, CPPSection, Resources, Resource, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"segment-tree-beats\",\n      children: [_jsx(_components.a, {\n        href: \"#segment-tree-beats\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Segment Tree Beats\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sam\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---the-child-and-sequence\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---the-child-and-sequence\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - The Child and Sequence\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First consider a lazy segment tree. A pseudocode for the update function looks\\r\\nsomething like:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"function update(upd_left, upd_right, upd_value, tree_node, tree_left, tree_right)\\r\\n\\tif upd_right < tree_left or tree_right < upd_left\\r\\n\\t\\treturn\\r\\n\\tif upd_left ≤ tree_left and tree_right ≤ upd_right\\r\\n\\t\\tapply update\\r\\n\\t\\treturn\\r\\n\\tpush lazy updates down\\r\\n\\r\\n\\tlet tree_mid = (tree_left + tree_right) / 2\\r\\n\\tlet left_child = 2 * tree_node\\r\\n\\tlet right_child = 2 * tree_node + 1\\r\\n\\tupdate(upd_left, upd_right, upd_value, left_child, tree_left, tree_mid)\\r\\n\\tupdate(upd_left, upd_right, upd_value, right_child, tree_mid + 1, tree_right)\\r\\n\\tmerge values from children\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At first, this problem may seem like an ordinary lazy segment tree problem, but\\r\\nthe range modulo updates prevent updates from stacking. That is, for a given\\r\\nnode, it is difficult to calculate what the sum value of the node will be after\\r\\nan update. Furthermore, in the lazy array, modulo, unlike sum, does not satisfy\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x \\\\mod a \\\\mod b = x \\\\mod (a + b)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mspace></mspace><mspace width=\\\"0.6667em\\\"/><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>a</mi><mspace></mspace><mspace width=\\\"0.6667em\\\"/><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi><mo>=</mo><mi>x</mi><mspace></mspace><mspace width=\\\"0.6667em\\\"/><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mo stretchy=\\\"false\\\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">x \\\\mod a \\\\mod b = x \\\\mod (a + b)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace allowbreak\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.6667em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace allowbreak\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.6667em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace allowbreak\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.6667em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" or any other simple identity. How do we get\\r\\naround this?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As it turns out, we can take advantage of an important property of modulo.\\r\\n\", _jsx(_components.strong, {\n        children: \"Modulo either does not affect a number, or decreases it by at least half of\\r\\nwhat it was\"\n      }), \". If the number in question is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \", and the modulo was by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"m\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\\\"application/x-tex\\\">m</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span></span></span></span>\"\n      }), \", then\\r\\nthis can be proved using casework:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"m > x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi><mo>&gt;</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">m &gt; x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \" is unaffected by \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"m\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\\\"application/x-tex\\\">m</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"m \\\\le x / 2\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi><mo>≤</mo><mi>x</mi><mi mathvariant=\\\"normal\\\">/</mi><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">m \\\\le x / 2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mord\\\">/2</span></span></span></span>\"\n        }), \", then after the modulo operation \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \" must be strictly less\\r\\nthan \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"m\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\\\"application/x-tex\\\">m</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x / 2 < m \\\\leq x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mi mathvariant=\\\"normal\\\">/</mi><mn>2</mn><mo>&lt;</mo><mi>m</mi><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x / 2 &lt; m \\\\leq x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mord\\\">/2</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x \\\\mod m = x - m\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mspace></mspace><mspace width=\\\"0.6667em\\\"/><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo>=</mo><mi>x</mi><mo>−</mo><mi>m</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x \\\\mod m = x - m</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace allowbreak\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.6667em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">m</span></span></span></span>\"\n        }), \". This then reduces to the\\r\\nsecond case.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let us ignore operations of type 3 for the time being. Because of this property\\r\\nof modulo, an element with value \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" will get decreased at most\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\lceil \\\\log a \\\\rceil\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">⌈</mo><mi>log</mi><mo>⁡</mo><mi>a</mi><mo stretchy=\\\"false\\\">⌉</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\lceil \\\\log a \\\\rceil</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">⌈</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">⌉</span></span></span></span>\"\n      }), \" times (although a greater number of updates may not\\r\\naffect the element). Taking this into account, we can slightly modify the modulo\\r\\nupdate function to encorporate these optimizations.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"function update(upd_left, upd_right, upd_value, tree_node, tree_left, tree_right)\\r\\n\\tlet cur_max = the maximum element in [tree_left, tree_right]\\r\\n\\r\\n\\tif upd_right < tree_left or tree_right < upd_left or cur_max < upd_value\\r\\n\\t\\treturn\\r\\n\\tif upd_left = upd_right\\r\\n\\t\\tapply update\\r\\n\\t\\treturn\\r\\n\\r\\n\\tlet tree_mid = (tree_left + tree_right) / 2\\r\\n\\tlet left_child = 2 * tree_node\\r\\n\\tlet right_child = 2 * tree_node + 1\\r\\n\\tupdate(upd_left, upd_right, upd_value, left_child, tree_left, tree_mid)\\r\\n\\tupdate(upd_left, upd_right, upd_value, right_child, tree_mid + 1, tree_right)\\r\\n\\tmerge values from children\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Note:\"\n      }), \" Because we are no longer doing range updates with lazy propagation,\\r\\nthere is no need for a lazy tag.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We will store \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{cur\\\\_max}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">cur_max</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{cur\\\\_max}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5257em;vertical-align:-0.0951em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">cur_max</span></span></span></span></span>\"\n      }), \" in a separate array as a separate (mergable)\\r\\nvalue. Although it is possible that a single query processes \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \"\\r\\nnodes, over all queries this amortizes to the acceptable time complexity of\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((n + q)\\\\log a)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo>+</mo><mi>q</mi><mo stretchy=\\\"false\\\">)</mo><mi>log</mi><mo>⁡</mo><mi>a</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((n + q)\\\\log a)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">q</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Consider adding in operations of type 3. Although the implementation is\\r\\nrelatively straightforward (simply a point update on segment tree), the proof of\\r\\ncomplexity from the previous section falls apart because elements can be\\r\\nincreased back to their maximum value.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Define the entropy of the array to be \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\sum_{k = 1}^n \\\\lceil \\\\log a_k \\\\rceil\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\\\"false\\\">⌈</mo><mi>log</mi><mo>⁡</mo><msub><mi>a</mi><mi>k</mi></msub><mo stretchy=\\\"false\\\">⌉</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\sum_{k = 1}^n \\\\lceil \\\\log a_k \\\\rceil</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.104em;vertical-align:-0.2997em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop op-symbol small-op\\\" style=\\\"position:relative;top:0em;\\\">∑</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8043em;\\\"><span style=\\\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mrel mtight\\\">=</span><span class=\\\"mord mtight\\\">1</span></span></span></span><span style=\\\"top:-3.2029em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">n</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2997em;\\\"><span></span></span></span></span></span></span><span class=\\\"mopen\\\">⌈</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">⌉</span></span></span></span>\"\n      }), \",\\r\\nor equivalently, the maximum number of modulo operations to decrease the array\\r\\nto its base state of all 0s. Note that each update operation runs in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{\\\\Omega}(\\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">Ω</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{\\\\Omega}(\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">Ω</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", so if there are no point updates, then the time\\r\\ncomplexity is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n \\\\log a \\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>a</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n \\\\log a \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". Each point update increases the\\r\\nentropy by a fixed amount \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\lceil \\\\log a \\\\rceil\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">⌈</mo><mi>log</mi><mo>⁡</mo><mi>a</mi><mo stretchy=\\\"false\\\">⌉</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\lceil \\\\log a \\\\rceil</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">⌈</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">⌉</span></span></span></span>\"\n      }), \". If there are \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"q_p\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>q</mi><mi>p</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">q_p</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7167em;vertical-align:-0.2861em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">q</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">p</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" point\\r\\nupdates, then the total entropy over all updates is bounded by\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n \\\\log a + q_p \\\\log a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>a</mi><mo>+</mo><msub><mi>q</mi><mi>p</mi></msub><mi>log</mi><mo>⁡</mo><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n \\\\log a + q_p \\\\log a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.9805em;vertical-align:-0.2861em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">q</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">p</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \". If we factor out these point update operations, each\\r\\nmodulo update is still bounded by the total entropy. This means that even with\\r\\npoint updates, our solution still runs in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n \\\\log a \\\\log n + q_p \\\\log a) = \\\\mathcal{O}((n + q)\\\\log n \\\\log a)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>a</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>+</mo><msub><mi>q</mi><mi>p</mi></msub><mi>log</mi><mo>⁡</mo><mi>a</mi><mo stretchy=\\\"false\\\">)</mo><mo>=</mo><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo>+</mo><mi>q</mi><mo stretchy=\\\"false\\\">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>a</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n \\\\log a \\\\log n + q_p \\\\log a) = \\\\mathcal{O}((n + q)\\\\log n \\\\log a)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0361em;vertical-align:-0.2861em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">q</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">p</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">q</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Although strictly speaking, \", _jsx(_components.strong, {\n        children: \"The Child and Sequence\"\n      }), \" is not a segment tree\\r\\nbeats problem, the techniques used in it are closely related. In short, segment\\r\\ntree beats is a technique that allows a non-polylogarithmic range update\\r\\ncomplexity that amortizes to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n \\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" or\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n \\\\log^2 n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n \\\\log^2 n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation---the-child-and-sequence\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation---the-child-and-sequence\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation - The Child and Sequence\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAXN = 100001;\\r\\n\\r\\nint N, Q;\\r\\nlong long tsum[MAXN * 4], tmax[MAXN * 4];\\r\\n\\r\\nvoid update_mod(int l, int r, long long v, int t = 1, int tl = 1, int tr = N) {\\r\\n    if (r < tl || tr < l || tmax[t] < v) {\\r\\n        return;\\r\\n    }\\r\\n    else if (tl == tr) {\\r\\n        int val = tmax[t] % v;\\r\\n        tsum[t] = tmax[t] = val;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    int tm = (tl + tr) / 2;\\r\\n    update_mod(l, r, v, t * 2, tl, tm);\\r\\n    update_mod(l, r, v, t * 2 + 1, tm + 1, tr);\\r\\n    tsum[t] = tsum[t * 2] + tsum[t * 2 + 1];\\r\\n    tmax[t] = max(tmax[t * 2], tmax[t * 2 + 1]);\\r\\n}\\r\\n\\r\\nvoid update_set(int i, long long v, int t = 1, int tl = 1, int tr = N) {\\r\\n    if (tl == tr) {\\r\\n        tsum[t] = tmax[t] = v;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    int tm = (tl + tr) / 2;\\r\\n    if (i <= tm) {\\r\\n        update_set(i, v, t * 2, tl, tm);\\r\\n    }\\r\\n    else {\\r\\n        update_set(i, v, t * 2 + 1, tm + 1, tr);\\r\\n    }\\r\\n    tsum[t] = tsum[t * 2] + tsum[t * 2 + 1];\\r\\n    tmax[t] = max(tmax[t * 2], tmax[t * 2 + 1]);\\r\\n}\\r\\n\\r\\nlong long query(int l, int r, int t = 1, int tl = 1, int tr = N) {\\r\\n    if (r < tl || tr < l) {\\r\\n        return 0;\\r\\n    }\\r\\n    else if (l <= tl && tr <= r) {\\r\\n        return tsum[t];\\r\\n    }\\r\\n\\r\\n    int tm = (tl + tr) / 2;\\r\\n    return query(l, r, t * 2, tl, tm) + query(l, r, t * 2 + 1, tm + 1, tr);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n    cin >> N >> Q;\\r\\n    for (int i = 1; i <= N; i++) {\\r\\n        long long a;\\r\\n        cin >> a;\\r\\n        update_set(i, a);\\r\\n    }\\r\\n    for (int q = 0; q < Q; q++) {\\r\\n        int t;\\r\\n        cin >> t;\\r\\n        if (t == 1) {\\r\\n            int l, r;\\r\\n            cin >> l >> r;\\r\\n            cout << query(l, r) << '\\\\n';\\r\\n        }\\r\\n        else if (t == 2) {\\r\\n            int l, r;\\r\\n            long long x;\\r\\n            cin >> l >> r >> x;\\r\\n            update_mod(l, r, x);\\r\\n        }\\r\\n        else if (t == 3) {\\r\\n            int i;\\r\\n            long long x;\\r\\n            cin >> i >> x;\\r\\n            update_set(i, x);\\r\\n        }\\r\\n    }\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CF\",\n        title: \"Intro to Segment Tree Beats\",\n        url: \"57319\"\n      })\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sam2\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---range-chmin-chmax-add-set-sum\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---range-chmin-chmax-add-set-sum\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Range Chmin Chmax Add Set Sum\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The solution to \", _jsx(_components.code, {\n        children: \"The Child and Sequence\"\n      }), \" uses a simplified but similar solution\\r\\nto segment tree beats. For the problem above, let us divide it into three\\r\\nsubtasks:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Allow only operations 0 and 3\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Allow only operations 0, 2, and 3\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"All operations are allowed\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"subtask-1\",\n      children: [_jsx(_components.a, {\n        href: \"#subtask-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Subtask 1\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Build a segment tree over the range. In each node of the segment tree, maintain\\r\\nfour values: \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{sum}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">sum</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{sum}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">sum</span></span></span></span></span>\"\n      }), \", \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mn>1</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mn>2</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", and\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mi>c</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">c</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", which correspond respectively to the sum of the elements of\\r\\nsaid range, the strict maximum value, the strict second largest value (if there\\r\\nis no such value, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"-\\\\infty\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><mi mathvariant=\\\"normal\\\">∞</mi></mrow><annotation encoding=\\\"application/x-tex\\\">-\\\\infty</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\">∞</span></span></span></span>\"\n      }), \"), and the number of occurences of the maximum\\r\\nelement. We would like to perform the following operations:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"For each \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i \\\\in [l, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">i \\\\in [l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6986em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">∈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \", let \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"A[i] = \\\\min(A[i], x)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mi>A</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo separator=\\\"true\\\">,</mo><mi>x</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">A[i] = \\\\min(A[i], x)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">min</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" (this operation will\\r\\nhenceforth be referred as \", _jsx(_components.em, {\n          children: \"chmin\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Query \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\sum_{i = l}^r A[i]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mi>A</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\sum_{i = l}^r A[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.104em;vertical-align:-0.2997em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop op-symbol small-op\\\" style=\\\"position:relative;top:0em;\\\">∑</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8043em;\\\"><span style=\\\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mrel mtight\\\">=</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span></span></span></span><span style=\\\"top:-3.2029em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2997em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The issue, again, is that in lazy propagation, it is difficult to update the sum\\r\\nto reflect the chmin update. We will use a similar strategy to the previous task\\r\\nwhere we build a seemingly slow solution, and then optimize it to pass in time.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Firstly, if the update value is larger than the maximum value in the range\\r\\n(stored in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mn>1</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \"), then we can return as the update will not effect\\r\\nany element in the range. Secondly, if the update value is between\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mn>1</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mn>2</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", the new sum can be easily calculated\\r\\nusing \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mi>c</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">c</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"function update(upd_left, upd_right, upd_value, tree_node, tree_left, tree_right)\\r\\n\\tif upd_right < tree_left or tree_right < upd_left or max1 < upd_value\\r\\n\\t\\treturn\\r\\n\\tif upd_left < tree_left and tree_right < upd_right and max2 < upd_value\\r\\n\\t\\tapply update\\r\\n\\t\\treturn\\r\\n\\tpush lazy updates down\\r\\n\\r\\n\\tlet tree_mid = (tree_left + tree_right) / 2\\r\\n\\tlet left_child = 2 * tree_node\\r\\n\\tlet right_child = 2 * tree_node + 1\\r\\n\\tupdate(upd_left, upd_right, upd_value, left_child, tree_left, tree_mid)\\r\\n\\tupdate(upd_left, upd_right, upd_value, right_child, tree_mid + 1, tree_right)\\r\\n\\tmerge values from children\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To prove that this runs in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((n + q) \\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo>+</mo><mi>q</mi><mo stretchy=\\\"false\\\">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((n + q) \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">q</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", we need to define a\\r\\nvariable \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\delta\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\delta</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03785em;\\\">δ</span></span></span></span>\"\n      }), \" that represents the sum of the number of distinct elements\\r\\nover all intervals in the segment tree. This number is bounded by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n \\\\log n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n \\\\log n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \",\\r\\nwhich is the sum of the sizes of every interval.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Why are queries slow? Because they could visit up to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" nodes in any given\\r\\nquery. Define an \", _jsx(_components.em, {\n        children: \"extra operation\"\n      }), \" to be when a query is passed onto a node's\\r\\nchildren despite being in the query range. In other words, when a node satisfies\\r\\n\", _jsx(_components.code, {\n        children: \"query_left ≤ tree_left and tree_right ≤ query_right and upd_value ≤ max2\"\n      }), \", an\\r\\nextra operation is performed.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each time an extra operation is performed, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\delta\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\delta</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03785em;\\\">δ</span></span></span></span>\"\n      }), \" decreases by at least 1,\\r\\nbecause both the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mn>1</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}_2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mn>2</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}_2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" elements are decreased to\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". Because \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\delta\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\delta</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03785em;\\\">δ</span></span></span></span>\"\n      }), \" does not increase, the complexity is bounded by\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\max \\\\delta = \\\\mathcal{O}(n \\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>⁡</mo><mi>δ</mi><mo>=</mo><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max \\\\delta = \\\\mathcal{O}(n \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03785em;\\\">δ</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"subtask-2\",\n      children: [_jsx(_components.a, {\n        href: \"#subtask-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Subtask 2\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Sum range updates can be added without much modification to the existing code,\\r\\nby simply adding another lazy tag. The proof of the time complexity from the\\r\\nprevious part breaks down, but a tentative upper bound of the algorithm is\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}((n + q) \\\\log^2 n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo>+</mo><mi>q</mi><mo stretchy=\\\"false\\\">)</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}((n + q) \\\\log^2 n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">q</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". A complete proof can be found\\r\\n\", _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/57319#part-3-the-time-complexity\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"subtask-3\",\n      children: [_jsx(_components.a, {\n        href: \"#subtask-3\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Subtask 3\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Store three more variables \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{min}_1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">min</mtext><mn>1</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{min}_1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7611em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">min</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{min}_2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">min</mtext><mn>2</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{min}_2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7611em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">min</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \", and\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{min}_c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">min</mtext><mi>c</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{min}_c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7611em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">min</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">c</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \". These will be implemented similar to their \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{max}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">max</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{max}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span></span></span></span>\"\n      }), \"\\r\\ncounterparts. Take note of the edge case when \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{min}_1 = \\\\texttt{max}_2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mtext mathvariant=\\\"monospace\\\">min</mtext><mn>1</mn></msub><mo>=</mo><msub><mtext mathvariant=\\\"monospace\\\">max</mtext><mn>2</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{min}_1 = \\\\texttt{max}_2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7611em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">min</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">max</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \"\\r\\nor vice versa.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation---range-chmin-chmax-add-range-sum\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation---range-chmin-chmax-add-range-sum\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation - Range Chmin Chmax Add Range Sum\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\nusing ll = long long;\\r\\n\\r\\nconst int MAXN = 200001;  // 1-based\\r\\n\\r\\nint N;\\r\\nll A[MAXN];\\r\\n\\r\\nstruct Node {\\r\\n\\tll sum;  // Sum tag\\r\\n\\tll max1;  // Max value\\r\\n\\tll max2;  // Second Max value\\r\\n\\tll maxc;  // Max value count\\r\\n\\tll min1;  // Min value\\r\\n\\tll min2;  // Second Min value\\r\\n\\tll minc;  // Min value count\\r\\n\\tll lazy;  // Lazy tag\\r\\n} T[MAXN * 4];\\r\\n\\r\\nvoid merge(int t) {\\r\\n\\t// sum\\r\\n\\tT[t].sum = T[t << 1].sum + T[t << 1 | 1].sum;\\r\\n\\r\\n\\t// max\\r\\n\\tif (T[t << 1].max1 == T[t << 1 | 1].max1) {\\r\\n\\t\\tT[t].max1 = T[t << 1].max1;\\r\\n\\t\\tT[t].max2 = max(T[t << 1].max2, T[t << 1 | 1].max2);\\r\\n\\t\\tT[t].maxc = T[t << 1].maxc + T[t << 1 | 1].maxc;\\r\\n\\t} else {\\r\\n\\t\\tif (T[t << 1].max1 > T[t << 1 | 1].max1) {\\r\\n\\t\\t\\tT[t].max1 = T[t << 1].max1;\\r\\n\\t\\t\\tT[t].max2 = max(T[t << 1].max2, T[t << 1 | 1].max1);\\r\\n\\t\\t\\tT[t].maxc = T[t << 1].maxc;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tT[t].max1 = T[t << 1 | 1].max1;\\r\\n\\t\\t\\tT[t].max2 = max(T[t << 1].max1, T[t << 1 | 1].max2);\\r\\n\\t\\t\\tT[t].maxc = T[t << 1 | 1].maxc;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// min\\r\\n\\tif (T[t << 1].min1 == T[t << 1 | 1].min1) {\\r\\n\\t\\tT[t].min1 = T[t << 1].min1;\\r\\n\\t\\tT[t].min2 = min(T[t << 1].min2, T[t << 1 | 1].min2);\\r\\n\\t\\tT[t].minc = T[t << 1].minc + T[t << 1 | 1].minc;\\r\\n\\t} else {\\r\\n\\t\\tif (T[t << 1].min1 < T[t << 1 | 1].min1) {\\r\\n\\t\\t\\tT[t].min1 = T[t << 1].min1;\\r\\n\\t\\t\\tT[t].min2 = min(T[t << 1].min2, T[t << 1 | 1].min1);\\r\\n\\t\\t\\tT[t].minc = T[t << 1].minc;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tT[t].min1 = T[t << 1 | 1].min1;\\r\\n\\t\\t\\tT[t].min2 = min(T[t << 1].min1, T[t << 1 | 1].min2);\\r\\n\\t\\t\\tT[t].minc = T[t << 1 | 1].minc;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid push_add(int t, int tl, int tr, ll v) {\\r\\n\\tif (v == 0) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tT[t].sum += (tr - tl + 1) *v;\\r\\n\\tT[t].max1 += v;\\r\\n\\tif (T[t].max2 != -llINF) {\\r\\n\\t\\tT[t].max2 += v;\\r\\n\\t}\\r\\n\\tT[t].min1 += v;\\r\\n\\tif (T[t].min2 != llINF) {\\r\\n\\t\\tT[t].min2 += v;\\r\\n\\t}\\r\\n\\tT[t].lazy += v;\\r\\n}\\r\\n\\r\\n// corresponds to a chmin update\\r\\nvoid push_max(int t, ll v, bool l) {\\r\\n\\tif (v >= T[t].max1) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tT[t].sum -= T[t].max1 * T[t].maxc;\\r\\n\\tT[t].max1 = v;\\r\\n\\tT[t].sum += T[t].max1 * T[t].maxc;\\r\\n\\tif (l) {\\r\\n\\t\\tT[t].min1 = T[t].max1;\\r\\n\\t} else {\\r\\n\\t\\tif (v <= T[t].min1) {\\r\\n\\t\\t\\tT[t].min1 = v;\\r\\n\\t\\t} else if (v < T[t].min2) {\\r\\n\\t\\t\\tT[t].min2 = v;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// corresponds to a chmax update\\r\\nvoid push_min(int t, ll v, bool l) {\\r\\n\\tif (v <= T[t].min1) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tT[t].sum -= T[t].min1 * T[t].minc;\\r\\n\\tT[t].min1 = v;\\r\\n\\tT[t].sum += T[t].min1 * T[t].minc;\\r\\n\\tif (l) {\\r\\n\\t\\tT[t].max1 = T[t].min1;\\r\\n\\t} else {\\r\\n\\t\\tif (v >= T[t].max1) {\\r\\n\\t\\t\\tT[t].max1 = v;\\r\\n\\t\\t} else if (v > T[t].max2) {\\r\\n\\t\\t\\tT[t].max2 = v;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid pushdown(int t, int tl, int tr) {\\r\\n\\tif (tl == tr)\\r\\n\\t\\treturn;\\r\\n\\t// sum\\r\\n\\tint tm = (tl + tr) >> 1;\\r\\n\\tpush_add(t << 1, tl, tm, T[t].lazy);\\r\\n\\tpush_add(t << 1 | 1, tm + 1, tr, T[t].lazy);\\r\\n\\tT[t].lazy = 0;\\r\\n\\r\\n\\t// max\\r\\n\\tpush_max(t << 1, T[t].max1, tl == tm);\\r\\n\\tpush_max(t << 1 | 1, T[t].max1, tm + 1 == tr);\\r\\n\\r\\n\\t// min\\r\\n\\tpush_min(t << 1, T[t].min1, tl == tm);\\r\\n\\tpush_min(t << 1 | 1, T[t].min1, tm + 1 == tr);\\r\\n}\\r\\n\\r\\nvoid build(int t=1, int tl=0, int tr=N-1) {\\r\\n\\tT[t].lazy = 0;\\r\\n\\tif (tl == tr) {\\r\\n\\t\\tT[t].sum = T[t].max1 = T[t].min1 = A[tl];\\r\\n\\t\\tT[t].maxc = T[t].minc = 1;\\r\\n\\t\\tT[t].max2 = -llINF;\\r\\n\\t\\tT[t].min2 = llINF;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tint tm = (tl + tr) >> 1;\\r\\n\\tbuild(t << 1, tl, tm);\\r\\n\\tbuild(t << 1 | 1, tm + 1, tr);\\r\\n\\tmerge(t);\\r\\n}\\r\\n\\r\\nvoid update_add(int l, int r, ll v, int t=1, int tl=0, int tr=N-1) {\\r\\n\\tif (r < tl || tr < l) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (l <= tl && tr <= r) {\\r\\n\\t\\tpush_add(t, tl, tr, v);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tpushdown(t, tl, tr);\\r\\n\\r\\n\\tint tm = (tl + tr) >> 1;\\r\\n\\tupdate_add(l, r, v, t << 1, tl, tm);\\r\\n\\tupdate_add(l, r, v, t << 1 | 1, tm + 1, tr);\\r\\n\\tmerge(t);\\r\\n}\\r\\n\\r\\nvoid update_chmin(int l, int r, ll v, int t=1, int tl=0, int tr=N-1) {\\r\\n\\tif (r < tl || tr < l || v >= T[t].max1) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (l <= tl && tr <= r && v > T[t].max2) {\\r\\n\\t\\tpush_max(t, v, tl == tr);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tpushdown(t, tl, tr);\\r\\n\\r\\n\\tint tm = (tl + tr) >> 1;\\r\\n\\tupdate_chmin(l, r, v, t << 1, tl, tm);\\r\\n\\tupdate_chmin(l, r, v, t << 1 | 1, tm + 1, tr);\\r\\n\\tmerge(t);\\r\\n}\\r\\n\\r\\nvoid update_chmax(int l, int r, ll v, int t=1, int tl=0, int tr=N-1) {\\r\\n\\tif (r < tl || tr < l || v <= T[t].min1) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (l <= tl && tr <= r && v < T[t].min2) {\\r\\n\\t\\tpush_min(t, v, tl == tr);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tpushdown(t, tl, tr);\\r\\n\\r\\n\\tint tm = (tl + tr) >> 1;\\r\\n\\tupdate_chmax(l, r, v, t << 1, tl, tm);\\r\\n\\tupdate_chmax(l, r, v, t << 1 | 1, tm + 1, tr);\\r\\n\\tmerge(t);\\r\\n}\\r\\n\\r\\nll query_sum(int l, int r, int t=1, int tl=0, int tr=N-1) {\\r\\n\\tif (r < tl || tr < l) {\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\tif (l <= tl && tr <= r) {\\r\\n\\t\\treturn T[t].sum;\\r\\n\\t}\\r\\n\\tpushdown(t, tl, tr);\\r\\n\\r\\n\\tint tm = (tl + tr) >> 1;\\r\\n\\treturn query_sum(l, r, t << 1, tl, tm) + query_sum(l, r, t << 1 | 1, tm + 1, tr);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint Q;\\r\\n\\r\\n\\tcin >> N >> Q;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tcin >> A[i];\\r\\n\\t}\\r\\n\\tbuild();\\r\\n\\tfor (int q = 0; q < Q; q++) {\\r\\n\\t\\tint t; cin >> t;\\r\\n\\t\\tif (t == 0) {\\r\\n\\t\\t\\tint l, r;\\r\\n\\t\\t\\tll x;\\r\\n\\t\\t\\tcin >> l >> r >> x;\\r\\n\\t\\t\\tupdate_chmin(l, r - 1, x);\\r\\n\\t\\t} else if (t == 1) {\\r\\n\\t\\t\\tint l, r;\\r\\n\\t\\t\\tll x;\\r\\n\\t\\t\\tcin >> l >> r >> x;\\r\\n\\t\\t\\tupdate_chmax(l, r - 1, x);\\r\\n\\t\\t} else if (t == 2) {\\r\\n\\t\\t\\tint l, r;\\r\\n\\t\\t\\tll x;\\r\\n\\t\\t\\tcin >> l >> r >> x;\\r\\n\\t\\t\\tupdate_add(l, r - 1, x);\\r\\n\\t\\t} else if (t == 3) {\\r\\n\\t\\t\\tint l, r;\\r\\n\\t\\t\\tcin >> l >> r;\\r\\n\\t\\t\\tcout << query_sum(l, r - 1) << '\\\\n';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"segTreeBeats\"\n    }), \"\\n\"]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Segment Tree Beats","author":"Benjamin Qi, Dustin Miao","contributors":null,"id":"segtree-beats","prerequisites":["RURQ"],"description":"Perform chmin and chmax range updates","frequency":1},"parent":{"name":"Segtree_Beats","relativePath":"6_Advanced/Segtree_Beats.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Segment Tree Beats","slug":"segment-tree-beats"},{"depth":3,"value":"Solution - The Child and Sequence","slug":"solution---the-child-and-sequence"},{"depth":3,"value":"Implementation - The Child and Sequence","slug":"implementation---the-child-and-sequence"},{"depth":2,"value":"Solution - Range Chmin Chmax Add Set Sum","slug":"solution---range-chmin-chmax-add-set-sum"},{"depth":3,"value":"Subtask 1","slug":"subtask-1"},{"depth":3,"value":"Subtask 2","slug":"subtask-2"},{"depth":3,"value":"Subtask 3","slug":"subtask-3"},{"depth":3,"value":"Implementation - Range Chmin Chmax Add Range Sum","slug":"implementation---range-chmin-chmax-add-range-sum"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Segment Tree Beats","slug":"segment-tree-beats"},{"depth":3,"value":"Solution - The Child and Sequence","slug":"solution---the-child-and-sequence"},{"depth":3,"value":"Implementation - The Child and Sequence","slug":"implementation---the-child-and-sequence"},{"depth":2,"value":"Solution - Range Chmin Chmax Add Set Sum","slug":"solution---range-chmin-chmax-add-set-sum"},{"depth":3,"value":"Subtask 1","slug":"subtask-1"},{"depth":3,"value":"Subtask 2","slug":"subtask-2"},{"depth":3,"value":"Subtask 3","slug":"subtask-3"},{"depth":3,"value":"Implementation - Range Chmin Chmax Add Range Sum","slug":"implementation---range-chmin-chmax-add-range-sum"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Segment Tree Beats","slug":"segment-tree-beats"},{"depth":3,"value":"Solution - The Child and Sequence","slug":"solution---the-child-and-sequence"},{"depth":3,"value":"Implementation - The Child and Sequence","slug":"implementation---the-child-and-sequence"},{"depth":2,"value":"Solution - Range Chmin Chmax Add Set Sum","slug":"solution---range-chmin-chmax-add-set-sum"},{"depth":3,"value":"Subtask 1","slug":"subtask-1"},{"depth":3,"value":"Subtask 2","slug":"subtask-2"},{"depth":3,"value":"Subtask 3","slug":"subtask-3"},{"depth":3,"value":"Implementation - Range Chmin Chmax Add Range Sum","slug":"implementation---range-chmin-chmax-add-range-sum"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sam","problems":[{"uniqueId":"cf-438D","name":"The Child and Sequence","url":"https://codeforces.com/problemset/problem/438/D","source":"CF","difficulty":"Easy","isStarred":false,"tags":["SegTreeBeats"],"solution":{"kind":"link","label":"In Module","labelTooltip":null,"url":"https://usaco.guide/adv/segtree-beats#problem-cf-438D","sketch":null}}]},{"listId":"sam2","problems":[{"uniqueId":"ys-RangeChminChmaxAddRangeSum","name":"Range Chmin Chmax Add Range Sum","url":"https://judge.yosupo.jp/problem/range_chmin_chmax_add_range_sum","source":"YS","difficulty":"Hard","isStarred":true,"tags":["SegTreeBeats"],"solution":{"kind":"link","label":"In Module","labelTooltip":null,"url":"https://usaco.guide/adv/segtree-beats#problem-ys-RangeChminChmaxAddRangeSum","sketch":null}}]},{"listId":"segTreeBeats","problems":[{"uniqueId":"hdu-5306","name":"Gorgeous Sequence","url":"http://acm.hdu.edu.cn/showproblem.php?pid=5306","source":"HDU","difficulty":"Very Easy","isStarred":true,"tags":["SegTreeBeats"],"solution":null},{"uniqueId":"csa-AndOrMax","name":"And or Max","url":"https://csacademy.com/contest/round-70/task/and-or-max","source":"CSA","difficulty":"Easy","isStarred":false,"tags":["SegTreeBeats"],"solution":{"kind":"label","label":"Check CSA","labelTooltip":"The editorial tab should be right next to the statement tab.","url":null,"sketch":null}},{"uniqueId":"cf-679E","name":"Bear and Bad Powers of 42","url":"https://codeforces.com/contest/679/problem/E","source":"CF","difficulty":"Normal","isStarred":false,"tags":["SegTreeBeats"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"he-BoxOperations","name":"Box Operations","url":"https://www.hackerrank.com/challenges/box-operations/problem","source":"HR","difficulty":"Normal","isStarred":false,"tags":["SegTreeBeats"],"solution":{"kind":"label","label":"Check HR","labelTooltip":"The editorial tab should be right next to the discussions tab.","url":null,"sketch":null}},{"uniqueId":"cf-855F","name":"Nagini","url":"https://codeforces.com/contest/855/problem/F","source":"CF","difficulty":"Normal","isStarred":false,"tags":["SegTreeBeats"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-453E","name":"Little Pony and Lord Tirek","url":"https://codeforces.com/problemset/problem/453/E","source":"CF","difficulty":"Normal","isStarred":false,"tags":["SegTreeBeats"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-793F","name":"Julia and Snail","url":"https://codeforces.com/problemset/problem/793/F","source":"CF","difficulty":"Normal","isStarred":false,"tags":["SegTreeBeats"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1572F","name":"Stations","url":"https://codeforces.com/contest/1572/problem/F","source":"CF","difficulty":"Hard","isStarred":false,"tags":["SegTreeBeats"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]}]}},"pageContext":{"id":"segtree-beats"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}