{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/interactive",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"interactive\", title = \"Interactive and Communication Problems\", author = \"Andi Qu\", description = \"Some tips and tricks\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {HeaderLink, MATHSPAN, FocusProblem, Spoiler, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In this module, we assume that \\\"interactive\\\" means problems that allow a limited\\r\\nnumber of queries and \\\"communication\\\" means problems about communicating between\\r\\ntwo separate programs.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"interactive-problems\",\n      children: [_jsx(_components.a, {\n        href: \"#interactive-problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Interactive Problems\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tip-1---exploit-the-limits\",\n      children: [_jsx(_components.a, {\n        href: \"#tip-1---exploit-the-limits\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tip 1 - Exploit the Limits\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since almost all interactive problems have a limit on the number of queries you\\r\\nmay ask, you should use that limit to guide your thinking. There's no point in\\r\\ntrying to come up with a solution that uses \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\log N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\log N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" queries when the limit is\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N^2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">N^2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are three types of interactive problems:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Problems that directly tell you the target complexity of your solution (e.g.\\r\\nIOI 2014 Rail).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Problems that only tell you the maximum number of queries you may use (e.g.\\r\\nIOI 2013 Cave).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Problems that have a hidden limit on the number of queries (e.g. IOI 2015\\r\\nScales).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The first type is nice because we get an idea of what our solution should look\\r\\nlike.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The second type is slightly less nice, but we can still approximate the target\\r\\ncomplexity (e.g. \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N = 5000\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>=</mo><mn>5000</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N = 5000</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">5000</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"Q = 70000 \\\\implies N \\\\log N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>Q</mi><mo>=</mo><mn>70000</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">Q = 70000 \\\\implies N \\\\log N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8778em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6684em;vertical-align:-0.024em;\\\"></span><span class=\\\"mord\\\">70000</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">⟹</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" queries).\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The third type is the least nice, but fortunately, we can sometimes still figure\\r\\nout the hidden limit. For example, in problems with relative scoring (like IOI\\r\\n2015 Scales), we can submit a solution that uses a fixed number of queries for\\r\\neach input and then reverse-engineer the limit from our score.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tip-2---divide-and-conquer\",\n      children: [_jsx(_components.a, {\n        href: \"#tip-2---divide-and-conquer\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tip 2 - Divide and Conquer\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In most interactive problems, the solution is to \", _jsx(_components.strong, {\n        children: \"divide and conquer\"\n      }), \". This is\\r\\nusually either binary search (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\log N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\log N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" queries) or something like merge sort\\r\\n(\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N \\\\log N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N \\\\log N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" queries)\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Whenever you see large input limits and small query limits, you should\\r\\nimmediately think of binary search.\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"interactiveDnC\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this problem, we have \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N = 512\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>=</mo><mn>512</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N = 512</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">512</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"Q \\\\leq 9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>Q</mi><mo>≤</mo><mn>9</mn></mrow><annotation encoding=\\\"application/x-tex\\\">Q \\\\leq 9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8778em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">9</span></span></span></span>\"\n      }), \". Notice how \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2^9 = 512\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mn>9</mn></msup><mo>=</mo><mn>512</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2^9 = 512</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">512</span></span></span></span>\"\n      }), \" - this\\r\\nsuggests that we should binary search.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Indeed, that's the solution - try to come up with it yourself!\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsx(_components.p, {\n        children: \"The solution is to binary search on the DFS order of the tree for the largest\\r\\nprefix without an easter egg. This works because any prefix of the DFS order is\\r\\na connected component.\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <bits/stdc++.h>\\r\\n#include \\\"grader.h\\\"\\r\\nusing namespace std;\\r\\n\\r\\nvector<int> graph[513], ord;\\r\\n\\r\\nvoid dfs(int node = 1, int parent = 0) {\\r\\n\\tord.push_back(node);\\r\\n\\tfor (int i : graph[node]) if (i != parent) dfs(i, node);\\r\\n}\\r\\n\\r\\nint findEgg(int N, vector<pair<int, int>> bridges) {\\r\\n\\tfor (int i = 1; i <= N; i++) graph[i].clear();\\r\\n\\tord.clear();\\r\\n\\tfor (pair<int, int> i : bridges) {\\r\\n\\t\\tgraph[i.first].push_back(i.second);\\r\\n\\t\\tgraph[i.second].push_back(i.first);\\r\\n\\t}\\r\\n\\tdfs();\\r\\n\\tint l = 0, r = N - 1;\\r\\n\\twhile (l != r) {\\r\\n\\t\\tint mid = (l + r + 1) / 2;\\r\\n\\t\\tif (query(vector<int>(ord.begin(), ord.begin() + mid))) r = mid - 1;\\r\\n\\t\\telse l = mid;\\r\\n\\t}\\r\\n\\treturn ord[l];\\r\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"interactiveGeneral\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"communication-problems\",\n      children: [_jsx(_components.a, {\n        href: \"#communication-problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Communication Problems\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tip-1---dont-send-everything\",\n      children: [_jsx(_components.a, {\n        href: \"#tip-1---dont-send-everything\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tip 1 - Don't Send Everything\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don't worry about not being able to send all the available information - in most\\r\\ncases, you shouldn't be able to!\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"communicationCareLess\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this problem, we're asked to store and compare an integer with several other\\r\\nintegers.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since these numbers can go up to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2^{12} - 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2^{12} - 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">12</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \", we can't just naively store and\\r\\naccess \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n      }), \" (since that would take 24 operations).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Luckily, we can still store sufficient information about \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n      }), \" - just not in\\r\\nbinary!\"]\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsx(_components.p, {\n        children: \"Here's how our algorithm works:\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Consider \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"A\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n          }), \" and \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"B\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n          }), \" in base 4\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"First, encode each prefix of \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"A\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n          }), \" \", _jsx(_components.strong, {\n            children: \"(6 operations)\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Next, binary search for the longest common prefix \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"P\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n          }), \" of \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"A\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n          }), \" and \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"B\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n          }), \" \", _jsx(_components.strong, {\n            children: \"(3\\r\\noperations)\"\n          }), \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"If this prefix is of length 6, \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"A = B\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A = B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n              })]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Otherwise, consider the digit \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"d\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\\\"application/x-tex\\\">d</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span></span></span></span>\"\n          }), \" directly after this prefix for \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"B\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n          }), \":\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"If \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"d > 1\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">d &gt; 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n              }), \", then we only need to check whether \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"4P + 3\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>4</mn><mi>P</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">4P + 3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n              }), \" is encoded\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"Otherwise, we only need to check whether \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"4P\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>4</mn><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">4P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n              }), \" is encoded\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"Check whether it is and return the answer \", _jsx(_components.strong, {\n                children: \"(1 operation)\"\n              })]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"This algorithm uses only 10 operations instead of our original 24 - a\\r\\nsignificant improvement!\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include \\\"cmp.h\\\"\\r\\n\\r\\nint delta[6]{1, 4097, 5121, 5377, 5441, 5457};\\r\\n\\r\\nvoid remember(int n) {\\r\\n\\tfor (int i = 0; i < 6; i++) bit_set((n >> i * 2) + delta[i]);\\r\\n}\\r\\n\\r\\nint compare(int b) {\\r\\n\\tint l = 0, r = 6;\\r\\n\\twhile (l != r) {\\r\\n\\t\\tint mid = (l + r) / 2;\\r\\n\\t\\tif (bit_get((b >> mid * 2) + delta[mid])) r = mid;\\r\\n\\t\\telse l = mid + 1;\\r\\n\\t}\\r\\n\\r\\n\\tif (!l) return 0;\\r\\n\\tint last_digit = (b >> l * 2 - 2) & 3;\\r\\n\\tif (last_digit > 1) {\\r\\n\\t\\tif (bit_get((((b >> l * 2) << 2) + 3) + delta[l - 1])) return -1;\\r\\n\\t\\treturn 1;\\r\\n\\t} else {\\r\\n\\t\\tif (bit_get(((b >> l * 2) << 2) + delta[l - 1])) return 1;\\r\\n\\t\\treturn -1;\\r\\n\\t}\\r\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tip-2---brute-force\",\n      children: [_jsx(_components.a, {\n        href: \"#tip-2---brute-force\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tip 2 - Brute Force\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sometimes, the amount of information that we can send is (slightly) more than\\r\\nthe amount of information we need to decode.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this case, we can simply map each piece of information we want to decode to a\\r\\npiece of information that we can send.\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"communicationPermutations\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this problem, we want to encode and decode an array of 64 integers less than\\r\\n256 using an unordered sequence of 320 integers less than 256.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The number of arrays of 64 integers less than 256 is slightly less than the\\r\\nnumber of increasing sequences of 320 integers less than 256, so we can just map\\r\\neach array to an increasing sequence (using bignums) and send that sequence.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tip-3---xor\",\n      children: [_jsx(_components.a, {\n        href: \"#tip-3---xor\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tip 3 - XOR\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"XOR has a nice property where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A \\\\oplus B \\\\oplus A = B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi><mo>⊕</mo><mi>B</mi><mo>⊕</mo><mi>A</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A \\\\oplus B \\\\oplus A = B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⊕</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⊕</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \". This lets us solve many\\r\\nproblems where the data sent is corrupted or the receiver doesn't know what data\\r\\nthe sender sent.\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"communicationXOR\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsxs(_components.p, {\n        children: [\"Let the XOR-sum of the positions with heads-up coins be \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"X\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\\\"application/x-tex\\\">X</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">X</span></span></span></span>\"\n        }), \". Notice how if we\\r\\nflip coin \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"X \\\\oplus c\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>X</mi><mo>⊕</mo><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">X \\\\oplus c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">X</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⊕</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n        }), \", then the new XOR-sum of the positions with heads-up coins is\\r\\nnow \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"This allows Shahrnaz to determine \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n        }), \" after Arnavaz flips exactly 1 coin!\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include \\\"coins.h\\\"\\r\\n\\r\\nstd::vector<int> coin_flips(std::vector<int> b, int c) {\\r\\n\\tstd::vector<int> flips(1);\\r\\n\\tint xr = c;\\r\\n\\tfor (int i = 0; i < b.size(); i++) {\\r\\n\\t\\txr ^= b[i] * i;\\r\\n\\t}\\r\\n\\tflips[0] = xr;\\r\\n\\treturn flips;\\r\\n}\\r\\n\\r\\nint find_coin(std::vector<int> b) {\\r\\n\\tint xr = 0;\\r\\n\\tfor (int i = 0; i < b.size(); i++) {\\r\\n\\t\\txr ^= b[i] * i;\\r\\n\\t}\\r\\n\\treturn xr;\\r\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems-1\",\n      children: [_jsx(_components.a, {\n        href: \"#problems-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"communicationGeneral\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"CEOI tasks can be found \", _jsx(_components.a, {\n        href: \"http://ceoi.inf.elte.hu/tasks-archive/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"here\"\n      }), \".\"]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Interactive and Communication Problems","author":"Andi Qu","contributors":null,"id":"interactive","prerequisites":null,"description":"Some tips and tricks","frequency":1},"parent":{"name":"Interactive","relativePath":"6_Advanced/Interactive.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Interactive Problems","slug":"interactive-problems"},{"depth":3,"value":"Tip 1 - Exploit the Limits","slug":"tip-1---exploit-the-limits"},{"depth":3,"value":"Tip 2 - Divide and Conquer","slug":"tip-2---divide-and-conquer"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Communication Problems","slug":"communication-problems"},{"depth":3,"value":"Tip 1 - Don&#39;t Send Everything","slug":"tip-1---dont-send-everything"},{"depth":3,"value":"Tip 2 - Brute Force","slug":"tip-2---brute-force"},{"depth":3,"value":"Tip 3 - XOR","slug":"tip-3---xor"},{"depth":3,"value":"Problems","slug":"problems-1"}],"java":[{"depth":2,"value":"Interactive Problems","slug":"interactive-problems"},{"depth":3,"value":"Tip 1 - Exploit the Limits","slug":"tip-1---exploit-the-limits"},{"depth":3,"value":"Tip 2 - Divide and Conquer","slug":"tip-2---divide-and-conquer"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Communication Problems","slug":"communication-problems"},{"depth":3,"value":"Tip 1 - Don&#39;t Send Everything","slug":"tip-1---dont-send-everything"},{"depth":3,"value":"Tip 2 - Brute Force","slug":"tip-2---brute-force"},{"depth":3,"value":"Tip 3 - XOR","slug":"tip-3---xor"},{"depth":3,"value":"Problems","slug":"problems-1"}],"py":[{"depth":2,"value":"Interactive Problems","slug":"interactive-problems"},{"depth":3,"value":"Tip 1 - Exploit the Limits","slug":"tip-1---exploit-the-limits"},{"depth":3,"value":"Tip 2 - Divide and Conquer","slug":"tip-2---divide-and-conquer"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Communication Problems","slug":"communication-problems"},{"depth":3,"value":"Tip 1 - Don&#39;t Send Everything","slug":"tip-1---dont-send-everything"},{"depth":3,"value":"Tip 2 - Brute Force","slug":"tip-2---brute-force"},{"depth":3,"value":"Tip 3 - XOR","slug":"tip-3---xor"},{"depth":3,"value":"Problems","slug":"problems-1"}]}},"moduleProblemLists":{"problemLists":[{"listId":"interactiveDnC","problems":[{"uniqueId":"InfO1Cup-17-EasterEggs","name":"2017 - Easter Eggs","url":"https://oj.uz/problem/view/info1cup17_eastereggs","source":"InfO(1) Cup","difficulty":"Easy","isStarred":false,"tags":[],"solution":null}]},{"listId":"interactiveGeneral","problems":[{"uniqueId":"ioi-13-cave","name":"2013 - Cave","url":"https://oj.uz/problem/view/IOI13_cave","source":"IOI","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2013/39","sketch":null}},{"uniqueId":"ioi-18-combo","name":"2018 - Combo","url":"https://oj.uz/problem/view/IOI18_combo","source":"IOI","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2001/27","sketch":null}},{"uniqueId":"ioi-17-TheBigPrize","name":"2017 - The Big Prize","url":"https://oj.uz/problem/view/IOI17_prize","source":"IOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2017/43","sketch":null}},{"uniqueId":"ioi-16-MessyBug","name":"2016 - Messy Bug","url":"https://oj.uz/problem/view/IOI16_messy","source":"IOI","difficulty":"Normal","isStarred":true,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2016/42","sketch":null}},{"uniqueId":"apio-16-gap","name":"2016 - Gap","url":"https://oj.uz/problem/view/APIO16_gap","source":"APIO","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ceoi-16-icc","name":"2016 - ICC","url":"https://oj.uz/problem/view/CEOI16_icc","source":"CEOI","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.ceoi2016.ro/wp-content/uploads/2016/08/icc-solution.pdf","sketch":null}},{"uniqueId":"ioi-14-rail","name":"2014 - Rail","url":"https://oj.uz/problem/view/IOI14_rail","source":"IOI","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2014/40","sketch":null}},{"uniqueId":"ioi-15-scales","name":"2015 - Scales","url":"https://oj.uz/problem/view/IOI15_scales","source":"IOI","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2015/41","sketch":null}},{"uniqueId":"ioi-15-towns","name":"2015 - Towns","url":"https://oj.uz/problem/view/IOI15_towns","source":"IOI","difficulty":"Very Hard","isStarred":true,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2015/41","sketch":null}},{"uniqueId":"ioi-18-highway","name":"2018 - Highway","url":"https://oj.uz/problem/view/IOI18_highway","source":"IOI","difficulty":"Very Hard","isStarred":true,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2001/27","sketch":null}},{"uniqueId":"ioi-17-simurgh","name":"2017 - Simurgh","url":"https://oj.uz/problem/view/IOI17_simurgh","source":"IOI","difficulty":"Very Hard","isStarred":true,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2017/43","sketch":null}},{"uniqueId":"apio-17-KoalaGame","name":"2017 - Koala Game","url":"https://oj.uz/problem/view/APIO17_koala","source":"APIO","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"communicationCareLess","problems":[{"uniqueId":"balkan-11-cmp","name":"2011 - cmp","url":"https://oj.uz/problem/view/balkan11_cmp","source":"Balkan OI","difficulty":"Easy","isStarred":false,"tags":[],"solution":null}]},{"listId":"communicationPermutations","problems":[{"uniqueId":"ioi-11-parrots","name":"2011 - Parrots","url":"https://oj.uz/problem/view/IOI11_parrots","source":"IOI","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2011/37","sketch":null}}]},{"listId":"communicationXOR","problems":[{"uniqueId":"ioi-17-coins","name":"2017 - Coins","url":"https://oj.uz/problem/view/IOI17_coins","source":"IOI","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2017/43","sketch":null}}]},{"listId":"communicationGeneral","problems":[{"uniqueId":"ioi-19-transfer","name":"2019 - Transfer","url":"https://oj.uz/problem/view/IOI19_transfer","source":"IOI","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ceoi-14-question","name":"2014 - Question","url":"https://oj.uz/problem/view/CEOI14_question_grader","source":"CEOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"joi-15-navigation","name":"2015 - Navigation","url":"https://dunjudge.me/analysis/problems/762/","source":"JOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ioi-10-saveit","name":"2010 - Saveit!","url":"https://oj.uz/problem/view/IOI10_saveit","source":"IOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2010/36","sketch":null}},{"uniqueId":"ioi-12-LastSupper","name":"2012 - Last Supper","url":"https://oj.uz/problem/view/IOI12_supper","source":"IOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2012/38","sketch":null}},{"uniqueId":"joi-18-airline","name":"2018 - Airline","url":"https://oj.uz/problem/view/JOI18_airline","source":"JOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"joi-20-StrayCat","name":"2020 - Stray Cat","url":"https://oj.uz/problem/view/JOI20_stray","source":"JOI","difficulty":"Hard","isStarred":false,"tags":[],"solution":null},{"uniqueId":"joi-19-TwoTransportations","name":"2019 - Two Transportations","url":"https://oj.uz/problem/view/JOI19_transportations","source":"JOI","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://codeforces.com/blog/entry/66022?#comment-500756","sketch":null}},{"uniqueId":"joi-14-KanjiShiritori","name":"2014 - Kanji Shiritori","url":"https://dunjudge.me/analysis/problems/1042/","source":"JOI","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":null}]}]}},"pageContext":{"id":"interactive"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}