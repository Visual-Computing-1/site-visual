{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/count-min",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"count-min\", redirects = [\"/adv/CntMin\"], title = \"Counting Minimums with Segment Tree\", author = \"Benjamin Qi, Dustin Miao\", prerequisites = [\"RURQ\"], description = \"Querying for the minimum and number of occurences of minimum in a range\", frequency = 0;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    h3: \"h3\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    h2: \"h2\",\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    Problems: _missingComponent(\"Problems\"),\n    Optional: _missingComponent(\"Optional\")\n  }, _props.components), {FocusProblem, Resources, Resource, MATHSPAN, HeaderLink, LanguageSection, CPPSection, Spoiler, Problems, Optional, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(FocusProblem, {\n      problem: \"sam\"\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Finding max and number of occurences\",\n        url: \"data_structures/segment_tree.html#toc-tgt-8\",\n        starred: true\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We would like a data structure that can efficiently handle two types of operations:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Update index \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" to value \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"v\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Report the minimum and the number of occurences of the minimum on a range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[l, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use a normal segment tree to handle range queries, but slightly modify each node and the merge operation. Let each node be a pair of values \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(\\\\texttt{val}, \\\\texttt{cnt})\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">val</mtext><mo separator=\\\"true\\\">,</mo><mtext mathvariant=\\\"monospace\\\">cnt</mtext><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(\\\\texttt{val}, \\\\texttt{cnt})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">cnt</span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{val}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">val</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{val}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span></span></span></span>\"\n      }), \" is the minimum value and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{cnt}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">cnt</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{cnt}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5536em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">cnt</span></span></span></span></span>\"\n      }), \" is the number occurences of the minimum value.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span></span></span></span>\"\n      }), \" has two children \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \", then\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"if \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a.\\\\texttt{val} < b.\\\\texttt{val}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">val</mtext><mo>&lt;</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">val</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">a.\\\\texttt{val} &lt; b.\\\\texttt{val}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6502em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c = a\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c = a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"if \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a.\\\\texttt{val} > b.\\\\texttt{val}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">val</mtext><mo>&gt;</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">val</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">a.\\\\texttt{val} &gt; b.\\\\texttt{val}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6502em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c = b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">c = b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"if \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a.\\\\texttt{val} = b.\\\\texttt{val}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">val</mtext><mo>=</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">val</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">a.\\\\texttt{val} = b.\\\\texttt{val}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span></span></span></span>\"\n        }), \", then \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"c = \\\\{a.\\\\texttt{val}, a.\\\\texttt{cnt} + b.\\\\texttt{cnt}\\\\}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>c</mi><mo>=</mo><mo stretchy=\\\"false\\\">{</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">val</mtext><mo separator=\\\"true\\\">,</mo><mi>a</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">cnt</mtext><mo>+</mo><mi>b</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">cnt</mtext><mo stretchy=\\\"false\\\">}</mo></mrow><annotation encoding=\\\"application/x-tex\\\">c = \\\\{a.\\\\texttt{val}, a.\\\\texttt{cnt} + b.\\\\texttt{cnt}\\\\}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">cnt</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">cnt</span></span><span class=\\\"mclose\\\">}</span></span></span></span>\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"const int MAXN = 2e5;\\r\\n\\r\\nstruct Node {\\r\\n\\tint val = INT32_MAX, cnt = 1;\\r\\n} tree[2 * MAXN];\\r\\n\\r\\n// combines two segment tree nodes\\r\\nNode merge(Node a, Node b) {\\r\\n\\tif (a.val < b.val) {\\r\\n\\t\\treturn a;\\r\\n\\t} else if (a.val > b.val) {\\r\\n\\t\\treturn b;\\r\\n\\t}\\r\\n\\treturn {a.val, a.cnt + b.cnt};\\r\\n}\\r\\n\\r\\n// updates the ith value to v\\r\\nvoid update(int i, int v) {\\r\\n\\tfor (tree[i += MAXN] = {v, 1}; i > 1; i >>= 1) {\\r\\n\\t\\ttree[i >> 1] = merge(tree[i], tree[i ^ 1]);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// returns the minimum and occurences between indices l and r\\r\\nNode query(int l, int r) {\\r\\n\\tNode res;\\r\\n\\tfor (l += MAXN, r += MAXN + 1; l < r; l >>= 1, r >>= 1) {\\r\\n\\t\\tif (l & 1) res = merge(res, tree[l++]);\\r\\n\\t\\tif (r & 1) res = merge(res, tree[--r]);\\r\\n\\t}\\r\\n\\treturn res;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---area-of-rectangles\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---area-of-rectangles\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Area of Rectangles\"]\n    }), \"\\n\", _jsx(Spoiler, {\n      title: \"Hint 1\",\n      children: _jsxs(_components.p, {\n        children: [\"Count the number of squares that are covered by \", _jsx(_components.strong, {\n          children: \"none\"\n        }), \" of the input rectangles.\"]\n      })\n    }), \"\\n\", _jsx(Spoiler, {\n      title: \"Hint 2\",\n      children: _jsx(_components.p, {\n        children: \"Sort the rectangles by x-coordinate and run a sweep-line.\"\n      })\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsxs(_components.p, {\n        children: [\"We can use techniques introduced in \", _jsx(_components.a, {\n          href: \"/plat/range-sweep?lang=cpp\",\n          children: \"Range Queries with Sweep Line\"\n        })]\n      }), _jsxs(_components.p, {\n        children: [\"We sweep from left to right over the \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \"-coordinates, maintaining two events for each rectangle: one for the left boundary and one for the right boundary. Maintain a Lazy Segment Tree over the \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"y\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n        }), \"-coordinates.\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"When we run into a left boundary of some rectangle with \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"y\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n          }), \"-coordinates \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"(y_0, y_1)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(y_0, y_1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \", increase each index \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"i \\\\in [y_0, y_1]\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\\\"false\\\">[</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">i \\\\in [y_0, y_1]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6986em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">∈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n          }), \" by 1\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"When we run into a right boundary of some rectangle with \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"y\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n          }), \"-coordinates \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"(y_0, y_1)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(y_0, y_1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          }), \", decrease each index \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"i \\\\in [y_0, y_1]\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\\\"false\\\">[</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">i \\\\in [y_0, y_1]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6986em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">∈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n          }), \" by 1\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Then, for each \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \", we simply need to count the number of non-zero indices which corresponds to indices that are covered by at least one rectangle. How can we do this?\"]\n      }), _jsx(_components.p, {\n        children: \"Instead of counting the area covered by at least one rectangle, let's count the amount of space covered by no rectangles. We can subtract this amount from the total number of indices to get the value we want.\"\n      }), _jsx(_components.p, {\n        children: \"We can use a Segment Tree that counts the number of occurences of the minimum value. Because the minimum value is at least zero (there can't be a negative number of rectangles at a position) the number of uncovered squares is equal to the number of squares with value 0.\"\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAXX = 1e6;\\r\\nconst int MAXN = 2 * MAXX + 1;\\r\\n \\r\\nstruct Event {\\r\\n\\tint t, x, y0, y1;\\r\\n\\t// t = 1 for left bound, -1 for right bound\\r\\n\\tbool operator<(const Event &e) { return x < e.x; }\\r\\n};\\r\\n \\r\\nint N;\\r\\nvector<Event> E;\\r\\n\\t\\r\\n// segment tree\\r\\npair<long long, long long> tree[MAXN * 4];\\r\\nint lazy[MAXN * 4];\\r\\n \\r\\npair<long long, long long> merge(pair<long long, long long> a, pair<long long, long long> b) {\\r\\n\\tif (a.first < b.first) {\\r\\n\\t\\treturn a;\\r\\n\\t}\\r\\n\\tif (a.first > b.first) {\\r\\n\\t\\treturn b;\\r\\n\\t}\\r\\n\\treturn {a.first, a.second + b.second};\\r\\n}\\r\\n \\r\\n// pushes lazy updates down to children\\r\\nvoid pushdown(int t) {\\r\\n\\tif (lazy[t]) {\\r\\n\\t\\ttree[t << 1].first += lazy[t];\\r\\n\\t\\tlazy[t << 1] += lazy[t];\\r\\n\\t\\ttree[t << 1 | 1].first += lazy[t];\\r\\n\\t\\tlazy[t << 1 | 1] += lazy[t];\\r\\n\\t\\tlazy[t] = 0;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// constructs the segment tree\\r\\nvoid build(int t = 1, int tl = 0, int tr = MAXN) {\\r\\n\\tif (tl == tr) {\\r\\n\\t\\ttree[t] = {0, 1};\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\t\\r\\n\\tint tm = (tl + tr) >> 1;\\r\\n\\tbuild(t << 1, tl, tm);\\r\\n\\tbuild(t << 1 | 1, tm + 1, tr);\\r\\n\\ttree[t] = merge(tree[t << 1], tree[t << 1 | 1]);\\r\\n}\\r\\n\\r\\n// adds v to indices l to r \\r\\nvoid update(int l, int r, int v, int t = 1, int tl = 0, int tr = MAXN) {\\r\\n\\tif (r < tl || tr < l) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (l <= tl && tr <= r) {\\r\\n\\t\\ttree[t].first += v;\\r\\n\\t\\tlazy[t] += v;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tpushdown(t);\\r\\n\\t\\r\\n\\tint tm = (tl + tr) >> 1;\\r\\n\\tupdate(l, r, v, t << 1, tl, tm);\\r\\n\\tupdate(l, r, v, t << 1 | 1, tm + 1, tr);\\r\\n\\ttree[t] = merge(tree[t << 1], tree[t << 1 | 1]);\\r\\n}\\r\\n\\r\\n// queries min and count of entire segment tree\\r\\nlong long query() {\\r\\n\\t// always maintain one element with value of zero\\r\\n\\t// so we don't have to check if zero is the minimum\\r\\n\\treturn MAXN + 1 - tree[1].second;\\r\\n} \\r\\n \\r\\nint main() {\\r\\n\\tcin >> N; \\r\\n\\tbuild();\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint x0, y0, x1, y1;\\r\\n\\t\\tcin >> x0 >> y0 >> x1 >> y1;\\r\\n\\t\\r\\n\\t\\t// make coordinates positive\\r\\n\\t\\tx0 += MAXX, y0 += MAXX;\\r\\n\\t\\tx1 += MAXX, y1 += MAXX;\\r\\n\\t\\r\\n\\t\\tE.push_back({1, x0, y0, y1 - 1});\\r\\n\\t\\tE.push_back({-1, x1, y0, y1 - 1});\\r\\n\\t}\\r\\n\\t\\r\\n\\tsort(E.begin(), E.end());\\r\\n\\t\\r\\n\\tlong long ans = 0;\\r\\n\\tupdate(E[0].y0, E[0].y1, 1);\\r\\n\\tfor (int i = 1; i < 2 * N; i++) {\\r\\n\\t\\tans += query() * (E[i].x - E[i - 1].x);\\r\\n\\t\\tupdate(E[i].y0, E[i].y1, E[i].t);\\r\\n\\t}\\r\\n\\tcout << ans << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"lazySegCnt\"\n    }), \"\\n\", _jsx(Optional, {\n      title: \"Permutation Tree\",\n      children: _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://codeforces.com/blog/entry/78898\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Tutorial\"\n        })\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  redirects,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Counting Minimums with Segment Tree","author":"Benjamin Qi, Dustin Miao","contributors":null,"id":"count-min","prerequisites":["RURQ"],"description":"Querying for the minimum and number of occurences of minimum in a range","frequency":0},"parent":{"name":"Count_Min","relativePath":"6_Advanced/Count_Min.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Solution - Area of Rectangles","slug":"solution---area-of-rectangles"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Solution - Area of Rectangles","slug":"solution---area-of-rectangles"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Solution - Area of Rectangles","slug":"solution---area-of-rectangles"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sam","problems":[{"uniqueId":"cses-1741","name":"Area of Rectangles","url":"https://cses.fi/problemset/task/1741","source":"CSES","difficulty":"Normal","isStarred":false,"tags":["Lazy SegTree"],"solution":null}]},{"listId":"lazySegCnt","problems":[{"uniqueId":"cf-1197E","name":"Culture Code","url":"https://codeforces.com/contest/1197/problem/E","source":"CF","difficulty":"Easy","isStarred":false,"tags":["DP"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"mbit-ZookeepersGathering","name":"Zookeepers' Gathering","url":"https://codeforces.com/gym/102621/problem/L","source":"mBIT","difficulty":"Normal","isStarred":false,"tags":[],"solution":null},{"uniqueId":"ioi-08-PyramidBase","name":"2008 - Pyramid Base","url":"https://oj.uz/problem/view/IOI08_pyramid_base","source":"IOI","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2008/34","sketch":null}},{"uniqueId":"hr-StrangeTree","name":"Strange Tree","url":"https://www.hackerrank.com/contests/openbracket-2017/challenges/special-path-on-a-strange-tree/problem","source":"HR","difficulty":"Hard","isStarred":false,"tags":["Lazy SegTree"],"solution":{"kind":"label","label":"Check HR","labelTooltip":"The editorial tab should be right next to the discussions tab.","url":null,"sketch":null}},{"uniqueId":"cf-997E","name":"Good Subsegments","url":"https://codeforces.com/contest/997/problem/E","source":"CF","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://codeforces.com/blog/entry/60357?#comment-441928","sketch":null}}]}]}},"pageContext":{"id":"count-min"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}