{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/offline-del",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*verified at https://codeforces.com/contest/1217/submission/62335472*/\n/*## Dynamic Insertion\n\nmention sqrt\n\n(online Aho-Corasick)\n\n<Problems problems={\"ins\"} />*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"offline-del\", title = \"Offline Deletion\", author = \"Benjamin Qi, Siyong Huang\", prerequisites = [\"dsu\"], description = \"Erasing from non-amortized insert-only data structures.\", frequency = 0;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    h3: \"h3\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Problems: _missingComponent(\"Problems\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    Warning: _missingComponent(\"Warning\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\")\n  }, _props.components), {HeaderLink, Resources, Resource, Problems, IncompleteSection, Warning, MATHSPAN, LanguageSection, CPPSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"offline-deleting-from-a-data-structure\",\n      children: [_jsx(_components.a, {\n        href: \"#offline-deleting-from-a-data-structure\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Offline Deleting from a Data Structure\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using a persistent data structure or rollbacking, you are able to simulate\\r\\ndeleting from a data structure while only using insertion operations.\"\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CP-Algorithms\",\n        title: \"Deleting from a data structure in O(T(n) log n)\",\n        url: \"https://cp-algorithms.com/data_structures/deleting_in_log_n.html\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"includes code (but no explanation) for dynamic connectivity\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"dynamic-connectivity\",\n      children: [_jsx(_components.a, {\n        href: \"#dynamic-connectivity\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Dynamic Connectivity\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"GCP\",\n        title: \"15.5.4 - Dynamic Connectivity\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Dynamic Connectivity\"\n      }), \" is the most common problem using the deleting trick.\\r\\nThe problem is to determine whether pairs of nodes are in the same connected\\r\\ncomponent while edges are being inserted and removed.\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"sam\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"dsu-with-rollback\",\n      children: [_jsx(_components.a, {\n        href: \"#dsu-with-rollback\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"DSU With Rollback\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"DSU with rollback\"\n      }), \" is a subproblem required to solve the above task.\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"rollback\"\n    }), \"\\n\", _jsx(IncompleteSection, {\n      children: _jsx(_components.p, {\n        children: \"explanation? check Guide to CP?\"\n      })\n    }), \"\\n\", _jsx(Warning, {\n      title: \"Watch Out!\",\n      children: _jsxs(_components.p, {\n        children: [\"Because path compression is amortized, it does not guarauntee\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N \\\\log^2 N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>‚Å°</mo></mrow><mn>2</mn></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N \\\\log^2 N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" runtime. You \", _jsx(_components.em, {\n          children: \"must\"\n        }), \" use merging by rank.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"int p[MN], r[MN];\\r\\nint *t[MN*40], v[MN*40], X;\\r\\nint setv(int *a, int b)\\r\\n{\\r\\n\\tif(*a != b) t[X] = a, v[X] = *a, *a = b, ++X;\\r\\n\\treturn b;\\r\\n}\\r\\nvoid rollback(int x) {for(;X>x;) --X, *t[X] = v[X];}\\r\\nint find(int n) {return p[n] ? find(p[n]) : n;}\\r\\nbool merge(int a, int b)\\r\\n{\\r\\n\\ta = find(a), b = find(b);\\r\\n\\tif(a==b) return 0;\\r\\n\\tif(r[b]>r[a]) std::swap(a,b);\\r\\n\\tif(r[a]==r[b]) setv(r+a, r[a]+1);\\r\\n\\treturn setv(p+b, a), 1;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"res\"\n    }), \"\\n\"]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Offline Deletion","author":"Benjamin Qi, Siyong Huang","contributors":null,"id":"offline-del","prerequisites":["dsu"],"description":"Erasing from non-amortized insert-only data structures.","frequency":0},"parent":{"name":"Offline_Del","relativePath":"6_Advanced/Offline_Del.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Offline Deleting from a Data Structure","slug":"offline-deleting-from-a-data-structure"},{"depth":2,"value":"Dynamic Connectivity","slug":"dynamic-connectivity"},{"depth":3,"value":"DSU With Rollback","slug":"dsu-with-rollback"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Offline Deleting from a Data Structure","slug":"offline-deleting-from-a-data-structure"},{"depth":2,"value":"Dynamic Connectivity","slug":"dynamic-connectivity"},{"depth":3,"value":"DSU With Rollback","slug":"dsu-with-rollback"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Offline Deleting from a Data Structure","slug":"offline-deleting-from-a-data-structure"},{"depth":2,"value":"Dynamic Connectivity","slug":"dynamic-connectivity"},{"depth":3,"value":"DSU With Rollback","slug":"dsu-with-rollback"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"rollback","problems":[{"uniqueId":"ys-PersistentUnionFind","name":"Persistent Union Find","url":"https://judge.yosupo.jp/problem/persistent_unionfind","source":"YS","difficulty":"Easy","isStarred":false,"tags":["DSUrb"],"solution":null},{"uniqueId":"dmoj-inaho","name":"Inaho","url":"https://dmoj.ca/problem/mmcc15p1","source":"DMOJ","difficulty":"Easy","isStarred":false,"tags":["DSUrb"],"solution":{"kind":"label","label":"Check DMOJ","labelTooltip":"There might be a \"Read Editorial\" button on the right side of the page.","url":null,"sketch":null}}]},{"listId":"sam","problems":[{"uniqueId":"ys-VertexAddComponentSum","name":"Vertex Add Component Sum","url":"https://judge.yosupo.jp/problem/dynamic_graph_vertex_add_component_sum","source":"YS","difficulty":"Normal","isStarred":false,"tags":["DSUrb"],"solution":null}]},{"listId":"res","problems":[{"uniqueId":"cf-1140F","name":"Edu F - Extending Set of Points","url":"https://codeforces.com/contest/1140/problem/F","source":"CF","difficulty":"Normal","isStarred":false,"tags":["DSUrb"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1217F","name":"Forced Online Queries Problem","url":"https://codeforces.com/contest/1217/problem/F","source":"CF","difficulty":"Hard","isStarred":false,"tags":["Dynacon"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"baltic-20-joker","name":"2020 - Joker","url":"https://codeforces.com/contest/1386/problem/C","source":"Baltic OI","difficulty":"Very Hard","isStarred":false,"tags":["D&C","DSUrb"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]}]}},"pageContext":{"id":"offline-del"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}