{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/multiplicative",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"multiplicative\", title = \"Prefix Sums of Multiplicative Functions\", author = \"Benjamin Qi\", description = \"?\", frequency = 0;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/54150\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"https://codeforces.com/blog/entry/54150\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"linear-time-sieve\",\n      children: [_jsx(_components.a, {\n        href: \"#linear-time-sieve\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Linear Time Sieve\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://judge.yosupo.jp/problem/enumerate_primes\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"https://judge.yosupo.jp/problem/enumerate_primes\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"counting-primes\",\n      children: [_jsx(_components.a, {\n        href: \"#counting-primes\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Counting Primes\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://judge.yosupo.jp/problem/counting_primes\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"https://judge.yosupo.jp/problem/counting_primes\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"totient-function\",\n      children: [_jsx(_components.a, {\n        href: \"#totient-function\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Totient Function\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://judge.yosupo.jp/problem/sum_of_totient_function\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"https://judge.yosupo.jp/problem/sum_of_totient_function\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"template<int SZ> struct Sieve {\\r\\n\\tvi pr;\\r\\n\\tint sp[SZ], phi[SZ]; // smallest prime that divides\\r\\n\\tSieve() { // above is faster\\r\\n\\t\\tmemset(sp,0,sizeof sp);\\r\\n\\t\\tphi[1] = 1;\\r\\n\\t\\tFOR(i,2,SZ) {\\r\\n\\t\\t\\tif (sp[i] == 0) {\\r\\n\\t\\t\\t\\tsp[i] = i, pr.pb(i); phi[i] = i-1;\\r\\n\\t\\t\\t} trav(p,pr) {\\r\\n\\t\\t\\t\\tif (p > sp[i] || i*p >= SZ) break;\\r\\n\\t\\t\\t\\tsp[i*p] = p;\\r\\n\\t\\t\\t\\tphi[i*p] = (p == sp[i] ? p : p-1)*phi[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\\r\\nconst int HI = 5000000;\\r\\nSieve<HI> S;\\r\\nll N;\\r\\nvmi small(HI), big;\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(); re(N); big.rsz(N/HI+2);\\r\\n\\tFOR(i,1,HI) small[i] = small[i-1]+S.phi[i];\\r\\n\\tROF(i,1,sz(big)) {\\r\\n\\t\\tll mx = N/i; big[i] = mi(mx)*(mx+1)/2; // dbg(\\\"HUH\\\",i,big[i]);\\r\\n\\t\\tfor (ll fac = 2, nex; fac <= mx; fac = nex) {\\r\\n\\t\\t\\tll quo = mx/fac; nex = mx/quo+1;\\r\\n\\t\\t\\tbig[i] -= (nex-fac)*(quo < HI ? small[quo] : big[i*fac]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tps(big[1]);\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(project euler)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(topcoder problem)\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Prefix Sums of Multiplicative Functions","author":"Benjamin Qi","contributors":null,"id":"multiplicative","prerequisites":null,"description":"?","frequency":0},"parent":{"name":"Multiplicative","relativePath":"6_Advanced/Multiplicative.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Linear Time Sieve","slug":"linear-time-sieve"},{"depth":2,"value":"Counting Primes","slug":"counting-primes"},{"depth":2,"value":"Totient Function","slug":"totient-function"}],"java":[{"depth":2,"value":"Linear Time Sieve","slug":"linear-time-sieve"},{"depth":2,"value":"Counting Primes","slug":"counting-primes"},{"depth":2,"value":"Totient Function","slug":"totient-function"}],"py":[{"depth":2,"value":"Linear Time Sieve","slug":"linear-time-sieve"},{"depth":2,"value":"Counting Primes","slug":"counting-primes"},{"depth":2,"value":"Totient Function","slug":"totient-function"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"multiplicative"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}