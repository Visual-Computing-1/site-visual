{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/fft",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*- [Counting Triplets](https://toph.co/p/counting-triplets)*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"fft\", title = \"Introduction to Fast Fourier Transform\", author = \"Benjamin Qi, Neo Wang\", prerequisites = null, description = \"Quickly multiplying polynomials\", frequency = 0;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Youtube: _missingComponent(\"Youtube\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {FocusProblem, HeaderLink, Youtube, Resources, Resource, MATHSPAN, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(FocusProblem, {\n      problem: \"sam\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sam2\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsx(Youtube, {\n      id: \"h7apO7q16V0\"\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"cp-algo\",\n        url: \"https://cp-algorithms.com/algebra/fft.html\",\n        title: \"FFT\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Implementation\"\n        })\n      }), _jsx(Resource, {\n        source: \"CSA\",\n        url: \"https://csacademy.com/blog/fast-fourier-transform-and-variations-of-it/\",\n        title: \"FFT and Variations\"\n      }), _jsx(Resource, {\n        source: \"CF\",\n        title: \"adamant - Lecture Notes\",\n        url: \"http://codeforces.com/blog/entry/55572\"\n      }), _jsx(Resource, {\n        source: \"CF\",\n        title: \"FFT / NTT: The tough made simple Pt 1\",\n        url: \"http://codeforces.com/blog/entry/43499\",\n        children: _jsx(_components.p, {\n          children: \"also see Pt 2\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---convolution-mod\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---convolution-mod\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Convolution Mod\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Benq\",\n        title: \"FFT\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/numerical/Polynomials/FFT.h\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Notice that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c_i=\\\\sum_{j=0}^i a_jb_{i-j}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>i</mi></msubsup><msub><mi>a</mi><mi>j</mi></msub><msub><mi>b</mi><mrow><mi>i</mi><mo>−</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_i=\\\\sum_{j=0}^i a_jb_{i-j}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.4004em;vertical-align:-0.4358em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop op-symbol small-op\\\" style=\\\"position:relative;top:0em;\\\">∑</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.9646em;\\\"><span style=\\\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mrel mtight\\\">=</span><span class=\\\"mord mtight\\\">0</span></span></span></span><span style=\\\"top:-3.2029em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.4358em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" is the coefficient if we were to treat\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \" as polynomials. Recall that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"ax^jbx^{i-j}=abx^i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mi>j</mi></msup><mi>b</mi><msup><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mi>j</mi></mrow></msup><mo>=</mo><mi>a</mi><mi>b</mi><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\\\"application/x-tex\\\">ax^jbx^{i-j}=abx^i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8247em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8247em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span></span></span></span></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8247em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8247em;\\\"></span><span class=\\\"mord mathnormal\\\">ab</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8247em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" is the coefficient\\r\\nof one multiplication that leads to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"c_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">c_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \". Thus, summing this up, we get the\\r\\ncoefficient of each number of the polynomial. Since this happens to be the exact\\r\\npurpose of FFT, we can simply use our favorite FFT implementation to solve this\\r\\nproblem.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\nusing db = long double; // or double, if TL is tight\\r\\nusing str = string; // yay python!\\r\\n\\r\\nusing vl = vector<ll>;\\r\\nusing vi = vector<int>;\\r\\n\\r\\n#define tcT template<class T\\r\\n#define tcTU tcT, class U\\r\\ntcT> using V = vector<T>;\\r\\ntcT, size_t SZ> using AR = array<T,SZ>;\\r\\ntcT> using PR = pair<T,T>;\\r\\n\\r\\n// pairs\\r\\n#define mp make_pair\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\n#define sz(x) int((x).size())\\r\\n\\r\\n// loops\\r\\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\\r\\n#define F0R(i,a) FOR(i,0,a)\\r\\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\\r\\n#define R0F(i,a) ROF(i,0,a)\\r\\n#define each(a,x) for (auto& a: x)\\r\\n\\r\\n// INPUT\\r\\n#define tcTUU tcT, class ...U\\r\\ntcT> void re(T& x) { cin >> x; }\\r\\ntcTUU> void re(T& t, U&... u) { re(t); re(u...); }\\r\\ntcT> void re(V<T>& x) { each(a,x) re(a); }\\r\\n\\r\\nvoid setPrec() { cout << fixed << setprecision(15); }\\r\\nvoid unsyncIO() { cin.tie(0)->sync_with_stdio(0); }\\r\\nvoid setIO() {\\r\\n\\tunsyncIO(); setPrec();\\r\\n}\\r\\n\\r\\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\\r\\ntypedef pair<int, int> pii;\\r\\n\\r\\n/**\\r\\n * Author: Ludo Pulles, chilli, Simon Lindholm\\r\\n * Date: 2019-01-09\\r\\n * License: CC0\\r\\n * Source: http://neerc.ifmo.ru/trains/toulouse/2017/fft2.pdf (do read, it's excellent)\\r\\n   Accuracy bound from http://www.daemonology.net/papers/fft.pdf\\r\\n * Description: fft(a) computes $\\\\hat f(k) = \\\\sum_x a[x] \\\\exp(2\\\\pi i \\\\cdot k x / N)$ for all $k$. N must be a power of 2.\\r\\n   Useful for convolution:\\r\\n   \\\\texttt{conv(a, b) = c}, where $c[x] = \\\\sum a[i]b[x-i]$.\\r\\n   For convolution of complex numbers or more than two vectors: FFT, multiply\\r\\n   pointwise, divide by n, reverse(start+1, end), FFT back.\\r\\n   Rounding is safe if $(\\\\sum a_i^2 + \\\\sum b_i^2)\\\\log_2{N} < 9\\\\cdot10^{14}$\\r\\n   (in practice $10^{16}$; higher for random inputs).\\r\\n   Otherwise, use NTT/FFTMod.\\r\\n * Time: O(N \\\\log N) with $N = |A|+|B|$ ($\\\\tilde 1s$ for $N=2^{22}$)\\r\\n * Status: somewhat tested\\r\\n * Details: An in-depth examination of precision for both FFT and FFTMod can be found\\r\\n * here (https://github.com/simonlindholm/fft-precision/blob/master/fft-precision.md)\\r\\n */\\r\\n\\r\\ntypedef complex<double> C;\\r\\nvoid fft(vector<C>& a) {\\r\\n\\tint n = sz(a), L = 31 - __builtin_clz(n);\\r\\n\\tstatic vector<complex<long double>> R(2, 1);\\r\\n\\tstatic vector<C> rt(2, 1);  // (^ 10% faster if double)\\r\\n\\tfor (static int k = 2; k < n; k *= 2) {\\r\\n\\t\\tR.resize(n); rt.resize(n);\\r\\n\\t\\tauto x = polar(1.0L, acos(-1.0L) / k);\\r\\n\\t\\trep(i,k,2*k) rt[i] = R[i] = i&1 ? R[i/2] * x : R[i/2];\\r\\n\\t}\\r\\n\\tvi rev(n);\\r\\n\\trep(i,0,n) rev[i] = (rev[i / 2] | (i & 1) << L) / 2;\\r\\n\\trep(i,0,n) if (i < rev[i]) swap(a[i], a[rev[i]]);\\r\\n\\tfor (int k = 1; k < n; k *= 2)\\r\\n\\t\\tfor (int i = 0; i < n; i += 2 * k) rep(j,0,k) {\\r\\n\\t\\t\\t// C z = rt[j+k] * a[i+j+k]; // (25% faster if hand-rolled)  /// include-line\\r\\n\\t\\t\\tauto x = (double *)&rt[j+k], y = (double *)&a[i+j+k];        /// exclude-line\\r\\n\\t\\t\\tC z(x[0]*y[0] - x[1]*y[1], x[0]*y[1] + x[1]*y[0]);           /// exclude-line\\r\\n\\t\\t\\ta[i + j + k] = a[i + j] - z;\\r\\n\\t\\t\\ta[i + j] += z;\\r\\n\\t\\t}\\r\\n}\\r\\n\\r\\ntypedef vector<ll> vl;\\r\\ntemplate<int M> vl convMod(const vl &a, const vl &b) {\\r\\n\\tif (a.empty() || b.empty()) return {};\\r\\n\\tvl res(sz(a) + sz(b) - 1);\\r\\n\\tint B=32-__builtin_clz(sz(res)), n=1<<B, cut=int(sqrt(M));\\r\\n\\tvector<C> L(n), R(n), outs(n), outl(n);\\r\\n\\trep(i,0,sz(a)) L[i] = C((int)a[i] / cut, (int)a[i] % cut);\\r\\n\\trep(i,0,sz(b)) R[i] = C((int)b[i] / cut, (int)b[i] % cut);\\r\\n\\tfft(L), fft(R);\\r\\n\\trep(i,0,n) {\\r\\n\\t\\tint j = -i & (n - 1);\\r\\n\\t\\toutl[j] = (L[i] + conj(L[j])) * R[i] / (2.0 * n);\\r\\n\\t\\touts[j] = (L[i] - conj(L[j])) * R[i] / (2.0 * n) / 1i;\\r\\n\\t}\\r\\n\\tfft(outl), fft(outs);\\r\\n\\trep(i,0,sz(res)) {\\r\\n\\t\\tll av = ll(real(outl[i])+.5), cv = ll(imag(outs[i])+.5);\\r\\n\\t\\tll bv = ll(imag(outl[i])+.5) + ll(real(outs[i])+.5);\\r\\n\\t\\tres[i] = ((av % M * cut + bv) % M * cut + cv) % M;\\r\\n\\t}\\r\\n\\treturn res;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO();\\r\\n\\r\\n\\tint n, m;\\r\\n\\tre(n,m);\\r\\n\\tvl A(n);\\r\\n\\tre(A);\\r\\n\\tvl B(m);\\r\\n\\tre(B);\\r\\n\\r\\n\\tauto ret = convMod<998244353>(A, B); // just change this number for mod\\r\\n\\r\\n\\tF0R(i, sz(ret)) {\\r\\n\\t\\tcout << ret[i];\\r\\n\\t\\tif(i != sz(ret)-1) cout << \\\" \\\";\\r\\n\\t}\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---convolution-mod-1097\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---convolution-mod-1097\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Convolution Mod \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^9+7\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10^9+7</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">7</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Benq\",\n        title: \"FFTMod\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/numerical/Polynomials/fftmod_old.h\",\n        children: _jsx(_components.p, {\n          children: \"NTT with three different moduli\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Notice that this is the exact same problem as Convolution Mod, so simply\\r\\nchanging the mod suffices.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\nusing db = long double; // or double, if TL is tight\\r\\nusing str = string; // yay python!\\r\\n\\r\\nusing vl = vector<ll>;\\r\\nusing vi = vector<int>;\\r\\n\\r\\n#define tcT template<class T\\r\\n#define tcTU tcT, class U\\r\\ntcT> using V = vector<T>;\\r\\ntcT, size_t SZ> using AR = array<T,SZ>;\\r\\ntcT> using PR = pair<T,T>;\\r\\n\\r\\n// pairs\\r\\n#define mp make_pair\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\n#define sz(x) int((x).size())\\r\\n\\r\\n// loops\\r\\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\\r\\n#define F0R(i,a) FOR(i,0,a)\\r\\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\\r\\n#define R0F(i,a) ROF(i,0,a)\\r\\n#define each(a,x) for (auto& a: x)\\r\\n\\r\\n// INPUT\\r\\n#define tcTUU tcT, class ...U\\r\\ntcT> void re(T& x) { cin >> x; }\\r\\ntcTUU> void re(T& t, U&... u) { re(t); re(u...); }\\r\\ntcT> void re(V<T>& x) { each(a,x) re(a); }\\r\\n\\r\\nvoid setPrec() { cout << fixed << setprecision(15); }\\r\\nvoid unsyncIO() { cin.tie(0)->sync_with_stdio(0); }\\r\\nvoid setIO() {\\r\\n\\tunsyncIO(); setPrec();\\r\\n}\\r\\n\\r\\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\\r\\ntypedef pair<int, int> pii;\\r\\n\\r\\n/**\\r\\n * Author: Ludo Pulles, chilli, Simon Lindholm\\r\\n * Date: 2019-01-09\\r\\n * License: CC0\\r\\n * Source: http://neerc.ifmo.ru/trains/toulouse/2017/fft2.pdf (do read, it's excellent)\\r\\n   Accuracy bound from http://www.daemonology.net/papers/fft.pdf\\r\\n * Description: fft(a) computes $\\\\hat f(k) = \\\\sum_x a[x] \\\\exp(2\\\\pi i \\\\cdot k x / N)$ for all $k$. N must be a power of 2.\\r\\n   Useful for convolution:\\r\\n   \\\\texttt{conv(a, b) = c}, where $c[x] = \\\\sum a[i]b[x-i]$.\\r\\n   For convolution of complex numbers or more than two vectors: FFT, multiply\\r\\n   pointwise, divide by n, reverse(start+1, end), FFT back.\\r\\n   Rounding is safe if $(\\\\sum a_i^2 + \\\\sum b_i^2)\\\\log_2{N} < 9\\\\cdot10^{14}$\\r\\n   (in practice $10^{16}$; higher for random inputs).\\r\\n   Otherwise, use NTT/FFTMod.\\r\\n * Time: O(N \\\\log N) with $N = |A|+|B|$ ($\\\\tilde 1s$ for $N=2^{22}$)\\r\\n * Status: somewhat tested\\r\\n * Details: An in-depth examination of precision for both FFT and FFTMod can be found\\r\\n * here (https://github.com/simonlindholm/fft-precision/blob/master/fft-precision.md)\\r\\n */\\r\\n\\r\\ntypedef complex<double> C;\\r\\nvoid fft(vector<C>& a) {\\r\\n\\tint n = sz(a), L = 31 - __builtin_clz(n);\\r\\n\\tstatic vector<complex<long double>> R(2, 1);\\r\\n\\tstatic vector<C> rt(2, 1);  // (^ 10% faster if double)\\r\\n\\tfor (static int k = 2; k < n; k *= 2) {\\r\\n\\t\\tR.resize(n); rt.resize(n);\\r\\n\\t\\tauto x = polar(1.0L, acos(-1.0L) / k);\\r\\n\\t\\trep(i,k,2*k) rt[i] = R[i] = i&1 ? R[i/2] * x : R[i/2];\\r\\n\\t}\\r\\n\\tvi rev(n);\\r\\n\\trep(i,0,n) rev[i] = (rev[i / 2] | (i & 1) << L) / 2;\\r\\n\\trep(i,0,n) if (i < rev[i]) swap(a[i], a[rev[i]]);\\r\\n\\tfor (int k = 1; k < n; k *= 2)\\r\\n\\t\\tfor (int i = 0; i < n; i += 2 * k) rep(j,0,k) {\\r\\n\\t\\t\\t// C z = rt[j+k] * a[i+j+k]; // (25% faster if hand-rolled)  /// include-line\\r\\n\\t\\t\\tauto x = (double *)&rt[j+k], y = (double *)&a[i+j+k];        /// exclude-line\\r\\n\\t\\t\\tC z(x[0]*y[0] - x[1]*y[1], x[0]*y[1] + x[1]*y[0]);           /// exclude-line\\r\\n\\t\\t\\ta[i + j + k] = a[i + j] - z;\\r\\n\\t\\t\\ta[i + j] += z;\\r\\n\\t\\t}\\r\\n}\\r\\n\\r\\ntypedef vector<ll> vl;\\r\\ntemplate<int M> vl convMod(const vl &a, const vl &b) {\\r\\n\\tif (a.empty() || b.empty()) return {};\\r\\n\\tvl res(sz(a) + sz(b) - 1);\\r\\n\\tint B=32-__builtin_clz(sz(res)), n=1<<B, cut=int(sqrt(M));\\r\\n\\tvector<C> L(n), R(n), outs(n), outl(n);\\r\\n\\trep(i,0,sz(a)) L[i] = C((int)a[i] / cut, (int)a[i] % cut);\\r\\n\\trep(i,0,sz(b)) R[i] = C((int)b[i] / cut, (int)b[i] % cut);\\r\\n\\tfft(L), fft(R);\\r\\n\\trep(i,0,n) {\\r\\n\\t\\tint j = -i & (n - 1);\\r\\n\\t\\toutl[j] = (L[i] + conj(L[j])) * R[i] / (2.0 * n);\\r\\n\\t\\touts[j] = (L[i] - conj(L[j])) * R[i] / (2.0 * n) / 1i;\\r\\n\\t}\\r\\n\\tfft(outl), fft(outs);\\r\\n\\trep(i,0,sz(res)) {\\r\\n\\t\\tll av = ll(real(outl[i])+.5), cv = ll(imag(outs[i])+.5);\\r\\n\\t\\tll bv = ll(imag(outl[i])+.5) + ll(real(outs[i])+.5);\\r\\n\\t\\tres[i] = ((av % M * cut + bv) % M * cut + cv) % M;\\r\\n\\t}\\r\\n\\treturn res;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO();\\r\\n\\r\\n\\tint n, m;\\r\\n\\tre(n,m);\\r\\n\\tvl A(n);\\r\\n\\tre(A);\\r\\n\\tvl B(m);\\r\\n\\tre(B);\\r\\n\\r\\n\\tauto ret = convMod<1000000007>(A, B); // just change this number for mod\\r\\n\\r\\n\\tF0R(i, sz(ret)) {\\r\\n\\t\\tcout << ret[i];\\r\\n\\t\\tif(i != sz(ret)-1) cout << \\\" \\\";\\r\\n\\t}\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"note---fft-killer\",\n      children: [_jsx(_components.a, {\n        href: \"#note---fft-killer\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Note - FFT Killer\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \\\"multiplication with arbitrary modulus\\\" described in cp-algo requires\\r\\n\", _jsx(_components.code, {\n        children: \"long double\"\n      }), \" to pass.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", \"\\n\", _jsx(Problems, {\n      problems: \"gen\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"on-a-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#on-a-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"On a Tree\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"tree\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Introduction to Fast Fourier Transform","author":"Benjamin Qi, Neo Wang","contributors":null,"id":"fft","prerequisites":null,"description":"Quickly multiplying polynomials","frequency":0},"parent":{"name":"FFT","relativePath":"6_Advanced/FFT.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Convolution Mod","slug":"solution---convolution-mod"},{"depth":2,"value":"Solution - Convolution Mod <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^9+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span>","slug":"solution---convolution-mod-1097"},{"depth":3,"value":"Note - FFT Killer","slug":"note---fft-killer"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"On a Tree","slug":"on-a-tree"}],"java":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Convolution Mod","slug":"solution---convolution-mod"},{"depth":2,"value":"Solution - Convolution Mod <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^9+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span>","slug":"solution---convolution-mod-1097"},{"depth":3,"value":"Note - FFT Killer","slug":"note---fft-killer"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"On a Tree","slug":"on-a-tree"}],"py":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Convolution Mod","slug":"solution---convolution-mod"},{"depth":2,"value":"Solution - Convolution Mod <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^9+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span>","slug":"solution---convolution-mod-1097"},{"depth":3,"value":"Note - FFT Killer","slug":"note---fft-killer"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"On a Tree","slug":"on-a-tree"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sam","problems":[{"uniqueId":"ys-ConvolutionMod","name":"Convolution Mod","url":"https://judge.yosupo.jp/problem/convolution_mod","source":"YS","difficulty":"Easy","isStarred":false,"tags":["FFT"],"solution":null}]},{"listId":"sam2","problems":[{"uniqueId":"ys-ConvolutionMod1097","name":"Convolution Mod 10^9+7","url":"https://judge.yosupo.jp/problem/convolution_mod_1000000007","source":"YS","difficulty":"Normal","isStarred":false,"tags":["FFT"],"solution":null}]},{"listId":"gen","problems":[{"uniqueId":"poi-18-polynomial","name":"2018 - Polynomial","url":"https://szkopul.edu.pl/problemset/problem/9JvSAnyf5d1FlPAEXEdUAtCz/site/","source":"POI","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"kattis-kinversions","name":"K-Inversions","url":"https://open.kattis.com/problems/kinversions","source":"Kattis","difficulty":"Easy","isStarred":false,"tags":[],"solution":null},{"uniqueId":"kattis-matchings","name":"Matchings","url":"https://open.kattis.com/problems/matchings","source":"Kattis","difficulty":"Normal","isStarred":false,"tags":[],"solution":null},{"uniqueId":"kattis-aliencodebreaking","name":"Alien Codebreaking","url":"https://open.kattis.com/problems/aliencodebreaking","source":"Kattis","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"base conversion in $mathcal{O}(Nlog^2N)$"}}]},{"listId":"tree","problems":[{"uniqueId":"ys-FrequencyTableOfTreeDistance","name":"Frequency Table of Tree Distance","url":"https://judge.yosupo.jp/problem/frequency_table_of_tree_distance","source":"YS","difficulty":"Hard","isStarred":false,"tags":["Centroid","FFT"],"solution":null},{"uniqueId":"dmoj-BigInteger","name":"Big Integer","url":"https://dmoj.ca/problem/bts17p8","source":"DMOJ","difficulty":"Very Hard","isStarred":false,"tags":["Centroid","FFT"],"solution":{"kind":"label","label":"Check DMOJ","labelTooltip":"There might be a \"Read Editorial\" button on the right side of the page.","url":null,"sketch":null}}]}]}},"pageContext":{"id":"fft"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}