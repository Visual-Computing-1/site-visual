{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/eulers-formula",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"eulers-formula\", title = \"Euler's Formula\", author = \"Benjamin Qi\", description = \"A formula for finding the number of faces in a planar graph.\", prerequisites = [\"dsu\", \"2DRQ\"], frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {HeaderLink, IncompleteSection, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"introduction\",\n      children: [_jsx(_components.a, {\n        href: \"#introduction\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Introduction\"]\n    }), \"\\n\", _jsx(IncompleteSection, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"example-1\",\n      children: [_jsx(_components.a, {\n        href: \"#example-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example 1\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"e1\"\n    }), \"\\n\", _jsx(IncompleteSection, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"example-2\",\n      children: [_jsx(_components.a, {\n        href: \"#example-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example 2\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"e2\"\n    }), \"\\n\", _jsx(IncompleteSection, {}), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"int N, h[750][750];\\r\\nll ans;\\r\\nvector<pair<int,pi>> v;\\r\\n\\r\\nint hsh(int a, int b) {\\r\\n\\treturn N*a+b;\\r\\n}\\r\\n\\r\\nconst int xd[4] = {1,0,-1,0}, yd[4] = {0,1,0,-1};\\r\\n\\r\\ntemplate<int SZ> struct DSU {\\r\\n\\tint par[SZ], sz[SZ], measure[SZ];\\r\\n\\tvi comp[SZ];\\r\\n\\tDSU() {\\r\\n\\t\\tF0R(i,SZ) par[i] = i, sz[i] = 1, measure[i] = 1;\\r\\n\\t}\\r\\n\\tbool valid(int b, int c) {\\r\\n\\t\\treturn b >= 0 && b < N && c >= 0 && c < N;\\r\\n\\t}\\r\\n\\tbool ok(int a, int b, int c) {\\r\\n\\t\\tif (!valid(b,c)) return 0;\\r\\n\\t\\treturn par[hsh(b,c)] == a;\\r\\n\\t}\\r\\n\\tvoid addPoint (int x, pi t) {\\r\\n\\t\\tpar[hsh(t.f,t.s)] = x;\\r\\n\\t\\tmeasure[x] ++;\\r\\n\\t\\tF0R(i,4) {\\r\\n\\t\\t\\tif (ok(x,t.f+xd[i],t.s+yd[i])) {\\r\\n\\t\\t\\t\\tmeasure[x] --;\\r\\n\\t\\t\\t\\tint j = (i+1)%4;\\r\\n\\t\\t\\t\\tif (ok(x,t.f+xd[j],t.s+yd[j]) &&\\r\\n\\t\\t\\t\\t\\tok(x,t.f+xd[j]+xd[i],t.s+yd[j]+yd[i])) measure[x] ++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tcomp[x].pb(hsh(t.f,t.s));\\r\\n\\t}\\r\\n\\tvoid unite(pi x, pi y) { // union-by-rank\\r\\n\\t\\tint X = hsh(x.f,x.s), Y = hsh(y.f,y.s);\\r\\n\\t\\tif (par[X] == par[Y]) return;\\r\\n\\t\\tX = par[X], Y = par[Y]; if (sz(comp[X]) < sz(comp[Y])) swap(X,Y);\\r\\n\\t\\ttrav(t,comp[Y]) addPoint(X,{t/N,t%N});\\r\\n\\t\\tcomp[Y].clear();\\r\\n\\t}\\r\\n};\\r\\n\\r\\nDSU<750*750> D;\\r\\nbool ok[750][750];\\r\\n\\r\\nvoid solve(int x, int y) {\\r\\n\\tok[x][y] = 1;\\r\\n\\tF0R(i,4) {\\r\\n\\t\\tint X = x+xd[i], Y = y+yd[i];\\r\\n\\t\\tif (X < 0 || X >= N || Y < 0 || Y >= N) continue;\\r\\n\\t\\tif (!ok[X][Y]) continue;\\r\\n\\t\\tD.unite({x,y},{X,Y});\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"valleys\\\");\\r\\n\\tre(N);\\r\\n\\tF0R(i,N) F0R(j,N) {\\r\\n\\t\\tre(h[i][j]);\\r\\n\\t\\tv.pb({h[i][j],{i,j}});\\r\\n\\t\\tD.comp[hsh(i,j)].pb(hsh(i,j));\\r\\n\\t}\\r\\n\\tsort(all(v));\\r\\n\\tF0R(i,sz(v)) {\\r\\n\\t\\tsolve(v[i].s.f,v[i].s.s);\\r\\n\\t\\tpi p = v[i].s;\\r\\n\\t\\tint q = D.par[hsh(p.f,p.s)];\\r\\n\\t\\tif (D.measure[q] == 1) ans += sz(D.comp[q]);\\r\\n\\t}\\r\\n\\tcout << ans;\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"other\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  prerequisites,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Euler's Formula","author":"Benjamin Qi","contributors":null,"id":"eulers-formula","prerequisites":["dsu","2DRQ"],"description":"A formula for finding the number of faces in a planar graph.","frequency":1},"parent":{"name":"Eulers_Formula","relativePath":"6_Advanced/Eulers_Formula.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Example 1","slug":"example-1"},{"depth":2,"value":"Example 2","slug":"example-2"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Example 1","slug":"example-1"},{"depth":2,"value":"Example 2","slug":"example-2"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Example 1","slug":"example-1"},{"depth":2,"value":"Example 2","slug":"example-2"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"e1","problems":[{"uniqueId":"apio-17-rainbow","name":"2017 - Land of the Rainbow Gold","url":"https://dmoj.ca/problem/apio17p1","source":"APIO","difficulty":"Very Hard","isStarred":false,"tags":["Persistent Segtree","Euler's Formula","2DRQ"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"e2","problems":[{"uniqueId":"usaco-950","name":"Valleys","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=950","source":"Plat","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"other","problems":[{"uniqueId":"kattis-IslandArchipelago","name":"Island Archipelago","url":"https://utipc20s.kattis.com/problems/utipc20s.islandarchipelago","source":"Kattis","difficulty":"Very Hard","isStarred":false,"tags":["Euler's Formula","DSU"],"solution":null},{"uniqueId":"cf-1392I","name":"Kevin & Grid","url":"https://codeforces.com/contest/1392/problem/I","source":"CF","difficulty":"Very Hard","isStarred":false,"tags":["Euler's Formula","FFT"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cfgym-100453100453","name":"Rectangles & Connected Regions","url":"https://codeforces.com/gym/100453","source":"CF","difficulty":"Very Hard","isStarred":false,"tags":["Euler's Formula"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"usaco-1094","name":"Paint by Letters","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1094","source":"Plat","difficulty":"Very Hard","isStarred":false,"tags":["Euler's Formula"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_prob3_platinum_jan21.html","sketch":null}}]}]}},"pageContext":{"id":"eulers-formula"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}