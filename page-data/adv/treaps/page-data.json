{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/treaps",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"treaps\", title = \"Treaps\", author = \"Benjamin Qi, Dustin Miao\", description = \"A randomized binary search tree\", prerequisites = [\"RURQ\", \"2DRQ\"], frequency = 2;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    img: \"img\",\n    h3: \"h3\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    strong: \"strong\",\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Optional: _missingComponent(\"Optional\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Problems: _missingComponent(\"Problems\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\")\n  }, _props.components), {Resources, Resource, HeaderLink, MATHSPAN, LanguageSection, CPPSection, Optional, FocusProblem, Problems, IncompleteSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"GCP\",\n        title: \"15.3 - Treaps\",\n        children: _jsx(_components.p, {\n          children: \"Splitting and merging with code\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Treap\",\n        url: \"/data_structures/treap.html\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Description and code\"\n        })\n      }), _jsx(Resource, {\n        source: \"Algorithm Tutorial\",\n        title: \"Treaps : One Tree to Rule ’em all\",\n        url: \"https://tanujkhattar.wordpress.com/2016/01/10/treaps-one-tree-to-rule-em-all-part-1/\",\n        children: _jsx(_components.p, {\n          children: \"Code and diagrams\"\n        })\n      }), _jsx(Resource, {\n        source: \"Benq\",\n        title: \"Treap presentation\",\n        url: \"https://docs.google.com/presentation/d/14xgtdDWnIBwmJRAuIdZ8FvLZcX9uRxnNoGOGAQRDIvc/edit?usp=drive_web&ouid=115931309508432537673\",\n        children: _jsx(_components.p, {\n          children: \"Description of Split and Merge\"\n        })\n      }), _jsx(Resource, {\n        source: \"CF\",\n        title: \"Merging BSTs\",\n        url: \"https://codeforces.com/blog/entry/67980\",\n        children: _jsx(_components.p, {\n          children: \"Proof of time complexity for merging treaps\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"treaps\",\n      children: [_jsx(_components.a, {\n        href: \"#treaps\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Treaps\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Like a regular binary search tree, treaps contain keys that can be inserted,\\r\\nerased, and searched for in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{\\\\Theta}(\\\\log n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">Θ</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{\\\\Theta}(\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">Θ</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". However, regular\\r\\nbinary search trees suffer from imbalancing, which causes the tree to have up to\\r\\nan \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" depth and blows up the time complexity.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.span, {\n        className: \"gatsby-resp-image-wrapper\",\n        style: {\n          position: \"relative\",\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          maxWidth: \"361px\"\n        },\n        children: [\"\\n      \", _jsxs(_components.a, {\n          className: \"gatsby-resp-image-link\",\n          href: \"/static/2a5357c2fd2bc71ffd4bbfd5230d2516/88969/unbalanced_bst.png\",\n          style: {\n            display: \"block\"\n          },\n          target: \"_blank\",\n          rel: \"noopener\",\n          children: [\"\\n    \", _jsx(_components.span, {\n            className: \"gatsby-resp-image-background-image\",\n            style: {\n              paddingBottom: \"122.11538461538463%\",\n              position: \"relative\",\n              bottom: \"0\",\n              left: \"0\",\n              display: \"block\"\n            }\n          }), \"\\n  \", _jsx(_components.img, {\n            className: \"gatsby-resp-image-image\",\n            alt: \"Unbalanced Binary Search Tree\",\n            title: \"Unbalanced Binary Search Tree\",\n            src: \"/static/2a5357c2fd2bc71ffd4bbfd5230d2516/88969/unbalanced_bst.png\",\n            srcSet: \"/static/2a5357c2fd2bc71ffd4bbfd5230d2516/f29da/unbalanced_bst.png 208w, /static/2a5357c2fd2bc71ffd4bbfd5230d2516/88969/unbalanced_bst.png 361w\",\n            sizes: \"(max-width: 361px) 100vw, 361px\",\n            style: {\n              width: \"100%\",\n              height: \"100%\",\n              margin: \"0\",\n              verticalAlign: \"middle\",\n              position: \"absolute\",\n              top: \"0\",\n              left: \"0\"\n            },\n            loading: \"lazy\"\n          }), \"\\n  \"]\n        }), \"\\n    \"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A treap is a randomized binary search tree that stores two numbers in its nodes:\\r\\na value and a priority. The values of a treap will satisfy the binary search\\r\\ntree property (where all the nodes in the left subtree are strictly smaller than\\r\\nthe current node and all the nodes in the right subtree are strictly greater\\r\\nthan the current node), and the priorities will satisfy the heap property (where\\r\\nall descendants of a node will have smaller or equal priorities).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.span, {\n        className: \"gatsby-resp-image-wrapper\",\n        style: {\n          position: \"relative\",\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          maxWidth: \"361px\"\n        },\n        children: [\"\\n      \", _jsxs(_components.a, {\n          className: \"gatsby-resp-image-link\",\n          href: \"/static/ae7b8e119faa8d11cc8aeea8d71b5d8d/88969/treap.png\",\n          style: {\n            display: \"block\"\n          },\n          target: \"_blank\",\n          rel: \"noopener\",\n          children: [\"\\n    \", _jsx(_components.span, {\n            className: \"gatsby-resp-image-background-image\",\n            style: {\n              paddingBottom: \"77.88461538461539%\",\n              position: \"relative\",\n              bottom: \"0\",\n              left: \"0\",\n              display: \"block\"\n            }\n          }), \"\\n  \", _jsx(_components.img, {\n            className: \"gatsby-resp-image-image\",\n            alt: \"Treap\",\n            title: \"Treap\",\n            src: \"/static/ae7b8e119faa8d11cc8aeea8d71b5d8d/88969/treap.png\",\n            srcSet: \"/static/ae7b8e119faa8d11cc8aeea8d71b5d8d/f29da/treap.png 208w, /static/ae7b8e119faa8d11cc8aeea8d71b5d8d/88969/treap.png 361w\",\n            sizes: \"(max-width: 361px) 100vw, 361px\",\n            style: {\n              width: \"100%\",\n              height: \"100%\",\n              margin: \"0\",\n              verticalAlign: \"middle\",\n              position: \"absolute\",\n              top: \"0\",\n              left: \"0\"\n            },\n            loading: \"lazy\"\n          }), \"\\n  \"]\n        }), \"\\n    \"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Treaps have two main operations: splitting and merging. Other operations like\\r\\ninsert, erase, and searching can be implemented in terms of these operations.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"splitting\",\n      children: [_jsx(_components.a, {\n        href: \"#splitting\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Splitting\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"split\"\n      }), \" method takes in a pointer to the root of a treap \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{root}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">root</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{root}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5536em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">root</span></span></span></span></span>\"\n      }), \" and\\r\\na value \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \", and returns two treaps denoted as \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n      }), \" and\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{right}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n      }), \". Like the name suggests, it splits the tree such that all nodes\\r\\nin \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n      }), \" have keys less than or equal to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" and all nodes in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{right}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n      }), \" have keys greater than \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can now implement it recursively. Let the left child of a node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n      }), \" be denoted\\r\\nas \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n.\\\\texttt{left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">n.\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n      }), \" and the right child as \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n.\\\\texttt{right}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi><mi mathvariant=\\\"normal\\\">.</mi><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">n.\\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord\\\">.</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{root} \\\\leq x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">root</mtext><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{root} \\\\leq x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">root</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \", then both the root and the left subtree belong to\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n        }), \". We now consider a call to \", _jsx(_components.code, {\n          children: \"split\"\n        }), \" on \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{root.right}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">root.right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{root.right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">root.right</span></span></span></span></span>\"\n        }), \"\\r\\nand note its results as \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left'}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left’</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left&#x27;}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left’</span></span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{right'}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right’</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right&#x27;}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right’</span></span></span></span></span>\"\n        }), \". Finally,\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n        }), \" contains \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left'}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left’</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left&#x27;}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left’</span></span></span></span></span>\"\n        }), \" and\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{right} = \\\\texttt{right'}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext><mo>=</mo><mtext mathvariant=\\\"monospace\\\">right’</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right} = \\\\texttt{right&#x27;}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right’</span></span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{root} > x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">root</mtext><mo>&gt;</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{root} &gt; x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5927em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">root</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \", then both the root and the right subtree belong to\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{right}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n        }), \". We now consider a call to \", _jsx(_components.code, {\n          children: \"split\"\n        }), \" on \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{root.left}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">root.left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{root.left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">root.left</span></span></span></span></span>\"\n        }), \"\\r\\nand note its results as \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left'}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left’</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left&#x27;}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left’</span></span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{right'}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right’</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right&#x27;}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right’</span></span></span></span></span>\"\n        }), \". Finally,\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{right}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n        }), \" contains \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{right'}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right’</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right&#x27;}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right’</span></span></span></span></span>\"\n        }), \" and\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{left} = \\\\texttt{left'}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext><mo>=</mo><mtext mathvariant=\\\"monospace\\\">left’</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left} = \\\\texttt{left&#x27;}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left’</span></span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"merging\",\n      children: [_jsx(_components.a, {\n        href: \"#merging\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Merging\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"merge\"\n      }), \" method inverts the \", _jsx(_components.code, {\n        children: \"split\"\n      }), \" method by taking in two treaps\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{right}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n      }), \" and returns a single treap that has the\\r\\nnodes of both treaps. It works under the assuption that all keys\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x \\\\in \\\\texttt{left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi><mo>∈</mo><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">x \\\\in \\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">∈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n      }), \" are strictly smaller than all keys \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"y \\\\in \\\\texttt{right}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi><mo>∈</mo><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">y \\\\in \\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">∈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n      }), \".\\r\\nFurthermore, we need to merge these two treaps such that the resultant treap\\r\\nstill satisfies the max heap property.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We root the resultant treap at the root node that has the higher priority, and\\r\\nrecursively call \", _jsx(_components.code, {\n        children: \"merge\"\n      }), \" on the other tree and the corresponding subtree of the\\r\\nchosen tree.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <stdlib.h>\\r\\n\\r\\nstruct Node {\\r\\n\\t// the value and priority of the node respectively\\r\\n\\tint val, pri;\\r\\n\\t// pointer to left and right child (NULL means no child)\\r\\n\\tNode *left, *right;\\r\\n\\tNode(int val) : val(val), pri(rand()), left(NULL), right(NULL) { };\\r\\n} *root;\\r\\n\\r\\n/**\\r\\n * pass in root as pointer, left and right as references\\r\\n * to a node pointer so we can modify them\\r\\n * (alternatively, we can return left and right pointers\\r\\n * as an std::pair)\\r\\n */\\r\\nvoid split(Node *root, int x, Node *&left, Node *&right) {\\r\\n\\tif (!root) {\\r\\n\\t\\tleft = right = NULL;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (root->val <= x) {\\r\\n\\t\\tsplit(root->right, x, root->right, right);\\r\\n\\t\\tleft = root;\\r\\n\\t} else {\\r\\n\\t\\tsplit(root->left, x, left, root->left);\\r\\n\\t\\tright = root;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/**\\r\\n * merge left and right pointers into root which\\r\\n * is a reference to a pointer to enable\\r\\n * modification within the function\\r\\n */\\r\\nvoid merge(Node *&root, Node *left, Node *right) {\\r\\n\\tif (!left || !right) {\\r\\n\\t\\troot = left ? left : right;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (left->pri > right->pri) {\\r\\n\\t\\tmerge(left->right, left->right, right);\\r\\n\\t\\troot = left;\\r\\n\\t} else {\\r\\n\\t\\tmerge(right->left, left, right->left);\\r\\n\\t\\troot = right;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsx(Optional, {\n      children: _jsx(_components.p, {\n        children: \"For speed / memory, use arrays of fixed size rather than pointers.\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implicit-treaps\",\n      children: [_jsx(_components.a, {\n        href: \"#implicit-treaps\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implicit Treaps\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sam2\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In their most basic form, treaps are not very useful (languages like C++\\r\\nand Java already have a built-in self-balancing binary tree that is much more\\r\\nefficient than treaps). However, with implicit treaps, we can efficiently\\r\\nperform operations on a regular array in fashion similar to segment trees and\\r\\nfenwick trees. The following operations are supported by implicit treaps:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Insert an element \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \" at position \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Delete the element at position \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Performing interval queries (sum, min, max, etc.)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Perform interval updates (add, set, reverse, etc.)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The key behind implicit treaps lies in their name. We will use the index of the\\r\\nnode to be its key. Because maintaining this value explicitely will result in up\\r\\nto \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" values to be updated per insertion/deletion, we will keep\\r\\nthis value implicitly.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The index of a node is equal to the number of nodes less than it. It is\\r\\nimportant to note that these nodes can occur both in the left subtree of the\\r\\ncurrent node as well as the node's ancestors and the left subtree of its\\r\\nancestors.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note that in an implicit treap, the merge function is largely unchanged because\\r\\nit does not depend on the key. In the split operation we go from the root down,\\r\\nso we simply maintain a running count of the size left subtree.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An implementation of the split operation may look something like:\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"void split(Node *treap, Node *&left, Node *&right, int val, int add = 0) {\\r\\n\\tif (!treap) {\\r\\n\\t\\tleft = right = NULL;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tint cur_size = add + size(treap->left); //implicit key\\r\\n\\tif (cur_size < val) {\\r\\n\\t\\tsplit(treap->right, treap->right, right, key, add + 1 + size(treap->left));\\r\\n\\t\\tleft = treap;\\r\\n\\t} else {\\r\\n\\t\\tsplit(treap->left, left, treap->left, key, add)\\r\\n\\t\\tright = treap;\\r\\n\\t}\\r\\n\\ttreap->size = 1 + size(treap->left) + size(treap->right);\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the split operation, because we are always comparing \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{cur\\\\_size}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">cur_size</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{cur\\\\_size}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7063em;vertical-align:-0.0951em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">cur_size</span></span></span></span></span>\"\n      }), \" to\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{val}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">val</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{val}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span></span></span></span>\"\n      }), \", we can simply eliminate the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{add}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">add</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{add}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">add</span></span></span></span></span>\"\n      }), \" parameter by\\r\\nsubtracting from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{val}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">val</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{val}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">val</span></span></span></span></span>\"\n      }), \" each time. Our new code looks like:\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"void split(Node *treap, Node *&left, Node *&right, int val) {\\r\\n\\tif (!treap) {\\r\\n\\t\\tleft = right = NULL;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tif (size(treap->left) < val) {\\r\\n\\t\\tsplit(treap->right, treap->right, right, val - size(treap->left) - 1);\\r\\n\\t\\tleft = treap;\\r\\n\\t} else {\\r\\n\\t\\tsplit(treap->left, left, treap->left, val);\\r\\n\\t\\tright = treap;\\r\\n\\t}\\r\\n\\ttreap->size = 1 + size(treap->left) + size(treap->right);\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"struct Node {\\r\\n\\tint val;\\r\\n\\tint weight, size;\\r\\n\\tNode *left, *right;\\r\\n\\tNode(int c) : val(c), weight(rand()), size(1), left(NULL), right(NULL) {}\\r\\n} *root;\\r\\n\\r\\nint size(Node *treap) {\\r\\n\\treturn treap ? treap->size : 0;\\r\\n}\\r\\n\\r\\nvoid split(Node *treap, Node *&left, Node *&right, int val) {\\r\\n\\tif (!treap) {\\r\\n\\t\\tleft = right = NULL;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tif (size(treap->left) < val) {\\r\\n\\t\\tsplit(treap->right, treap->right, right, val - size(treap->left) - 1);\\r\\n\\t\\tleft = treap;\\r\\n\\t} else {\\r\\n\\t\\tsplit(treap->left, left, treap->left, val);\\r\\n\\t\\tright = treap;\\r\\n\\t}\\r\\n\\ttreap->size = 1 + size(treap->left) + size(treap->right);\\r\\n}\\r\\n\\r\\nvoid merge(Node *&treap, Node *left, Node *right) {\\r\\n\\tif (left == NULL) {\\r\\n\\t\\ttreap = right;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (right == NULL) {\\r\\n\\t\\ttreap = left;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tif (left->weight < right->weight) {\\r\\n\\t\\tmerge(left->right, left->right, right);\\r\\n\\t\\ttreap = left;\\r\\n\\t} else {\\r\\n\\t\\tmerge(right->left, left, right->left);\\r\\n\\t\\ttreap = right;\\r\\n\\t}\\r\\n\\ttreap->size = 1 + size(treap->left) + size(treap->right);\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With split and merge, how do we implement the additional operations?\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Insert\"\n        }), \" can be done with one split and two merges: We split the array\\r\\nbetween the index we want to insert, create a new node with the corresponding\\r\\nvalue, and merge the three sections together.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Delete\"\n        }), \" can be done with two splits and one merge: We split the array into\\r\\nthree parts before and after the index, and merge the two parts together.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Range queries\"\n        }), \" can be performed by maintaining additional data in each\\r\\nnode. We update this data whenever we update \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{size}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">size</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{size}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">size</span></span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Range updates\"\n        }), \" can be performed by maintaining a lazy tag in each node (as\\r\\nin lazy propogation). When splitting or merging, we push these tags downwards\\r\\nand perform the corresponding operation.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"cut-and-paste---solution\",\n      children: [_jsx(_components.a, {\n        href: \"#cut-and-paste---solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Cut and Paste - Solution\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We will use implicit treaps to represent the array. For each operation, divide\\r\\nit into two phases: cut and paste. For the cut phase, we split the array into\\r\\nthree parts: \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[1, a)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>a</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[1, a)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[a, b]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[a, b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \", and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(b, n]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>b</mi><mo separator=\\\"true\\\">,</mo><mi>n</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(b, n]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". This can be accomplished using\\r\\ntwo split operations. For the paste phase, we can rearrange the sections such\\r\\nthat we merge them in the order \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[1, a)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>a</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[1, a)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(b, n]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>b</mi><mo separator=\\\"true\\\">,</mo><mi>n</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(b, n]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[a, b]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[a, b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". This can be done\\r\\nusing two merge operations.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nstruct Node {\\r\\n\\tchar val;\\r\\n\\tint weight, size;\\r\\n\\tNode *left, *right;\\r\\n\\tNode(char c) : val(c), weight(rand()), size(1), left(NULL), right(NULL) {}\\r\\n} *root;\\r\\n\\r\\ninline int size(Node *treap) {\\r\\n\\treturn treap ? treap->size : 0;\\r\\n}\\r\\n\\r\\nvoid split(Node *treap, Node *&left, Node *&right, int val) {\\r\\n\\tif (!treap) {\\r\\n\\t\\tleft = right = NULL;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tif (size(treap->left) < val) {\\r\\n\\t\\tsplit(treap->right, treap->right, right, val - size(treap->left) - 1);\\r\\n\\t\\tleft = treap;\\r\\n\\t} else {\\r\\n\\t\\tsplit(treap->left, left, treap->left, val);\\r\\n\\t\\tright = treap;\\r\\n\\t}\\r\\n\\ttreap->size = 1 + size(treap->left) + size(treap->right);\\r\\n}\\r\\n\\r\\nvoid merge(Node *&treap, Node *left, Node *right) {\\r\\n\\tif (left == NULL) {\\r\\n\\t\\ttreap = right;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (right == NULL) {\\r\\n\\t\\ttreap = left;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tif (left->weight < right->weight) {\\r\\n\\t\\tmerge(left->right, left->right, right);\\r\\n\\t\\ttreap = left;\\r\\n\\t} else {\\r\\n\\t\\tmerge(right->left, left, right->left);\\r\\n\\t\\ttreap = right;\\r\\n\\t}\\r\\n\\ttreap->size = 1 + size(treap->left) + size(treap->right);\\r\\n}\\r\\n\\r\\nostream& operator<<(ostream &os, Node *n) {\\r\\n\\tif (!n) return os;\\r\\n\\tos << n->left;\\r\\n\\tos << n->val;\\r\\n\\tos << n->right;\\r\\n\\treturn os;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint N, Q;\\r\\n\\tstring S;\\r\\n\\r\\n\\tcin >> N >> Q >> S;\\r\\n\\tfor (char c : S) {\\r\\n\\t\\tmerge(root, root, new Node(c));\\r\\n\\t}\\r\\n\\twhile (Q--) {\\r\\n\\t\\tint l, r;\\r\\n\\t\\tcin >> l >> r;\\r\\n\\t\\tNode *a, *b, *c, *d;\\r\\n\\t\\tsplit(root, a, b, l - 1);\\r\\n\\t\\tsplit(b, c, d, r - l + 1);\\r\\n\\t\\tmerge(root, a, d);\\r\\n\\t\\tmerge(root, root, c);\\r\\n\\t}\\r\\n\\tcout << root << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"impl\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://cses.fi/problemset/task/2072\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"CSES - Cut and Paste\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://cses.fi/problemset/task/2073\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"CSES - Substring Reversal\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://cses.fi/problemset/task/2074\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"CSES - Reversals and Sums\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://dmoj.ca/problem/noi05p2\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"NOI - Maintaining a Sequence\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://www.usaco.org/index.php?page=viewproblem2&cpid=402\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Old Gold - Airplane Boarding\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://csacademy.com/contest/archive/task/strings/\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"CSA - Strings\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.hackerearth.com/problem/algorithm/septembereasy-points-and-distances-d30d0e6b/description/\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"HE - Points & Distances\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://oj.uz/submission/242393\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"IOI 2013 - Game\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://codeforces.com/gym/102787\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Algorithms Thread Treaps Contest\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(IncompleteSection, {\n      children: _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Add merging treaps\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Format problems\"\n        }), \"\\n\"]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  prerequisites,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Treaps","author":"Benjamin Qi, Dustin Miao","contributors":null,"id":"treaps","prerequisites":["RURQ","2DRQ"],"description":"A randomized binary search tree","frequency":2},"parent":{"name":"Treaps","relativePath":"6_Advanced/Treaps.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Treaps","slug":"treaps"},{"depth":3,"value":"Splitting","slug":"splitting"},{"depth":3,"value":"Merging","slug":"merging"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Implicit Treaps","slug":"implicit-treaps"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Cut and Paste - Solution","slug":"cut-and-paste---solution"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Treaps","slug":"treaps"},{"depth":3,"value":"Splitting","slug":"splitting"},{"depth":3,"value":"Merging","slug":"merging"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Implicit Treaps","slug":"implicit-treaps"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Cut and Paste - Solution","slug":"cut-and-paste---solution"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Treaps","slug":"treaps"},{"depth":3,"value":"Splitting","slug":"splitting"},{"depth":3,"value":"Merging","slug":"merging"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Implicit Treaps","slug":"implicit-treaps"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Cut and Paste - Solution","slug":"cut-and-paste---solution"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"maintain","problems":[{"uniqueId":"noi-05-MaintainingASequence","name":"Maintaining a Sequence","url":"https://dmoj.ca/problem/noi05p2","source":"China NOI 2005","difficulty":"Normal","isStarred":false,"tags":[""],"solution":null}]},{"listId":"sam2","problems":[{"uniqueId":"cses-2072","name":"Cut and Paste","url":"https://cses.fi/problemset/task/2072","source":"CSES","difficulty":"Easy","isStarred":false,"tags":[],"solution":null}]},{"listId":"impl","problems":[{"uniqueId":"poi-11-TreeRotations2","name":"2011 - Tree Rotations 2","url":"https://szkopul.edu.pl/problemset/problem/b0BM0al2crQBt6zovEtJfOc6/site/?key=statement","source":"POI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"treaps"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}