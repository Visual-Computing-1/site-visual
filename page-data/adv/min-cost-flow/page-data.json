{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/adv/min-cost-flow",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*Confirmed Here: https://codeforces.com/contest/818/submission/82266882*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"min-cost-flow\", title = \"Minimum Cost Flow\", author = \"Siyong Huang, Benjamin Qi\", description = \"Triangle Inequality, Johnson's Algorithm, and Min Cost Flow\", prerequisites = [\"max-flow\"], frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Info: _missingComponent(\"Info\"),\n    Problems: _missingComponent(\"Problems\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\")\n  }, _props.components), {HeaderLink, MATHSPAN, Resources, Resource, Info, Problems, IncompleteSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"In this section I will briefly walk over my understanding of min cost flow. I\\r\\nwould highly recommend reading through\\r\\n\", _jsx(_components.a, {\n        href: \"https://cp-algorithms.com/graph/min_cost_flow.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"CP-Algorithm's Min Cost Flow\"\n      }), \"\\r\\nto understand the solution idea first. Additionally, check the\\r\\n\", _jsx(_components.a, {\n        href: \"https://www.topcoder.com/community/competitive-programming/tutorials/minimum-cost-flow-part-two-algorithms/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"TopCoder tutorial\"\n      }), \"\\r\\nfor a more detailed explanation.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"triangle-inequality\",\n      children: [_jsx(_components.a, {\n        href: \"#triangle-inequality\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Triangle Inequality\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In graph theory, the \", _jsx(_components.strong, {\n        children: \"Triangle Inequality\"\n      }), \" states that if there is an edge\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u \\\\rightarrow v\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi><mo>→</mo><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u \\\\rightarrow v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n      }), \" with weight \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"w\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\\\"application/x-tex\\\">w</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span></span></span></span>\"\n      }), \", and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"d_k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">d_k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" be the shortest path to node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \"\\r\\n(for some reasonable definition of shortest path), then \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"d_v - d_u \\\\leq w\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>d</mi><mi>v</mi></msub><mo>−</mo><msub><mi>d</mi><mi>u</mi></msub><mo>≤</mo><mi>w</mi></mrow><annotation encoding=\\\"application/x-tex\\\">d_v - d_u \\\\leq w</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">u</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Wikipedia\",\n        title: \"Triangle Inequality\",\n        url: \"https://en.wikipedia.org/wiki/Triangle_inequality\",\n        children: _jsx(_components.p, {\n          children: \"Mainly in geometry, but it has the gist of the idea.\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"johnsons-algorithm\",\n      children: [_jsx(_components.a, {\n        href: \"#johnsons-algorithm\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Johnson's Algorithm\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The main idea of \", _jsx(_components.strong, {\n        children: \"Johnson's Algorithm\"\n      }), \" is that if all edge weights are\\r\\npositive, then running Dijkstra's from each node would result in a\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(VE \\\\log E)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>V</mi><mi>E</mi><mi>log</mi><mo>⁡</mo><mi>E</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(VE \\\\log E)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" algorithm. If there are any negative edges, \", _jsx(_components.strong, {\n        children: \"Johnson's\\r\\nAlgorithm\"\n      }), \" defines a potential function \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\pi\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pi</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span></span></span></span>\"\n      }), \", such that for every edge\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u,v,w\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mo separator=\\\"true\\\">,</mo><mi>w</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u,v,w</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span></span></span></span>\"\n      }), \", the following holds: \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"w>=\\\\pi(u)-\\\\pi(v)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi><mo>&gt;</mo><mo>=</mo><mi>π</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo stretchy=\\\"false\\\">)</mo><mo>−</mo><mi>π</mi><mo stretchy=\\\"false\\\">(</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">w&gt;=\\\\pi(u)-\\\\pi(v)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". Then, each edge weight can be\\r\\ntransformed into \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"w \\\\rightarrow w + \\\\pi(v)-\\\\pi(u)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi><mo>→</mo><mi>w</mi><mo>+</mo><mi>π</mi><mo stretchy=\\\"false\\\">(</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo><mo>−</mo><mi>π</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">w \\\\rightarrow w + \\\\pi(v)-\\\\pi(u)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", resulting in positive\\r\\nweight. This condition coincides with the \", _jsx(_components.strong, {\n        children: \"Triangle Inequality\"\n      }), \", so we can\\r\\narbitrarily pick a node and run a \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(VE)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>V</mi><mi>E</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(VE)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" shortest path algorithm to\\r\\ndetermine this function.\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"GFG\",\n        title: \"Johnson's Algorithm for All-pairs shortest paths\",\n        url: \"https://www.geeksforgeeks.org/johnsons-algorithm/\"\n      }), _jsx(Resource, {\n        source: \"Wikipedia\",\n        title: \"Johnson's Algorithm\",\n        url: \"https://en.wikipedia.org/wiki/Johnson%27s_algorithm\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"minimum-cost-flow\",\n      children: [_jsx(_components.a, {\n        href: \"#minimum-cost-flow\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Minimum Cost Flow\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The general idea of Min Cost Flow is to repeatedly push flow along the shortest\\r\\npath. Since flow graphs have negative edges, each step naively would take\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(VE)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>V</mi><mi>E</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(VE)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time. To speed it up, we can use the same potential function\\r\\nfrom \", _jsx(_components.strong, {\n        children: \"Johnson's Algorithm\"\n      }), \" to employ Dijkstra for this process. In this case\\r\\nwe \", _jsx(_components.em, {\n        children: \"must\"\n      }), \" use distance from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"S\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n      }), \", the source node, as the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\pi\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pi</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span></span></span></span>\"\n      }), \" function. At each\\r\\nstep, run Dijkstra's using the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\pi\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pi</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span></span></span></span>\"\n      }), \" function, update the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\pi\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pi</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span></span></span></span>\"\n      }), \" function to\\r\\nmatch the current distances, and then push flow along the shortest path,\\r\\nreversing edges as needed. Once flow is met or the sink is unreachable,\\r\\nterminate.\"]\n    }), \"\\n\", _jsxs(Info, {\n      title: \"Important Clarification\",\n      children: [_jsxs(_components.p, {\n        children: [\"Note that the \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\pi\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pi</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span></span></span></span>\"\n        }), \" function stores values \", _jsx(_components.em, {\n          children: \"before\"\n        }), \" the edge reverses happen.\\r\\nLuckily the \", _jsx(_components.strong, {\n          children: \"triangle inequality\"\n        }), \"'s equality case is along the shortest path,\\r\\nmeaning that in a flow network it holds both forwards and backwards along edges\\r\\nin the shortest path. This means that although the \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\pi\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pi</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span></span></span></span>\"\n        }), \" function does not store\\r\\nthe shortest paths, it still satisfies the \", _jsx(_components.strong, {\n          children: \"triangle inequality\"\n        }), \" for all\\r\\nedges.\"]\n      }), _jsx(_components.p, {\n        children: _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\pi(u)-\\\\pi(v)=w \\\\implies \\\\pi(v)-\\\\pi(u)=-w\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>π</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo stretchy=\\\"false\\\">)</mo><mo>−</mo><mi>π</mi><mo stretchy=\\\"false\\\">(</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo><mo>=</mo><mi>w</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>π</mi><mo stretchy=\\\"false\\\">(</mo><mi>v</mi><mo stretchy=\\\"false\\\">)</mo><mo>−</mo><mi>π</mi><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mo stretchy=\\\"false\\\">)</mo><mo>=</mo><mo>−</mo><mi>w</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pi(u)-\\\\pi(v)=w \\\\implies \\\\pi(v)-\\\\pi(u)=-w</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.549em;vertical-align:-0.024em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">⟹</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">π</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span></span></span></span>\"\n        })\n      })]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CP-Algorithms\",\n        title: \"Minimum-cost flow\",\n        url: \"https://cp-algorithms.com/graph/min_cost_flow.html\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Note: Does not use optimal solution, but explains the concept well.\"\n        })\n      }), _jsx(Resource, {\n        source: \"TopCoder\",\n        title: \"Minimum Cost Flow Algorithms\",\n        url: \"https://www.topcoder.com/community/competitive-programming/tutorials/minimum-cost-flow-part-two-algorithms/\",\n        starred: true\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With all this being said, here is my implementation.\"\n    }), \"\\n\", \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"template<int MN, int MM>\\r\\nstruct MCF//MN = nodes, MM = edges [assume edges one-directional]\\r\\n{\\r\\npublic:\\r\\n\\tint N, M, S, T;\\r\\n\\tint flow[MM*2], cap[MM*2], hd[MN], nx[MM*2], to[MM*2], cost[MM*2];\\r\\n\\tint pi[MN], p[MN], d[MN];\\r\\n\\tint vis[MN];\\r\\n\\tvoid init(int n, int s, int t)\\r\\n\\t{\\r\\n\\t\\tN=n, S=s, T=t;\\r\\n\\t\\tmemset(hd, -1, sizeof hd);\\r\\n\\t}\\r\\n\\tvoid adde1(int a, int b, int f, int c)\\r\\n\\t{\\r\\n\\t\\tnx[M]=hd[a], hd[a]=M;\\r\\n\\t\\tto[M]=b, cost[M]=c, cap[M]=f;\\r\\n\\t\\tM++;\\r\\n\\t}\\r\\n\\tvoid adde(int a, int b, int f, int c)\\r\\n\\t{\\r\\n\\t\\tadde1(a, b, f, c);\\r\\n\\t\\tadde1(b, a, 0, -c);\\r\\n\\t}\\r\\n\\tvoid setpi()\\r\\n\\t{\\r\\n\\t\\tstd::queue<int> q;\\r\\n\\t\\tmemset(pi, 0x3e, sizeof pi);\\r\\n\\t\\tmemset(vis, 0, sizeof vis);\\r\\n\\t\\tq.push(S);\\r\\n\\t\\tpi[S] = 0;\\r\\n\\t\\tfor(int n;!q.empty();)\\r\\n\\t\\t{\\r\\n\\t\\t\\tn = q.front(); q.pop();\\r\\n\\t\\t\\tfor(int id=hd[n],x;~id;id=nx[id])\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tif(cap[id] - flow[id] <= 0) continue;\\r\\n\\t\\t\\t\\tx = to[id];\\r\\n\\t\\t\\t\\tif(ckmin(pi[x], pi[n]+cost[id]))\\r\\n\\t\\t\\t\\t\\tassert(++vis[x] <= N), q.push(x);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tstruct state\\r\\n\\t{\\r\\n\\tpublic:\\r\\n\\t\\tint n, d;\\r\\n\\t\\tbool operator > (state o) const {return d > o.d;}\\r\\n\\t};\\r\\n\\tvoid dijk()\\r\\n\\t{\\r\\n\\t\\tstd::priority_queue<state, std::vector<state>, std::greater<state> > q;\\r\\n\\t\\tmemset(p, -1, N * sizeof p[0]);\\r\\n\\t\\tmemset(vis, 0, N * sizeof vis[0]);\\r\\n\\t\\tmemset(d, 0x3e, N * sizeof d[0]);\\r\\n\\r\\n\\t\\td[S] = 0;\\r\\n\\t\\tq.push({S, 0});\\r\\n\\t\\tfor(int n;!q.empty();)\\r\\n\\t\\t{\\r\\n\\t\\t\\tn = q.top().n; q.pop();\\r\\n\\t\\t\\tif(vis[n]) continue;\\r\\n\\t\\t\\tvis[n]=1;\\r\\n\\t\\t\\tfor(int id=hd[n],x,w;~id;id=nx[id])\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tif(cap[id] - flow[id] <= 0) continue;\\r\\n\\t\\t\\t\\tx = to[id];\\r\\n\\t\\t\\t\\tw = cost[id] + pi[n] - pi[x];\\r\\n\\t\\t\\t\\tif(ckmin(d[x], w+d[n]))\\r\\n\\t\\t\\t\\t\\tp[x]=id, q.push({x, d[x]});\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tint mincost(int F)\\r\\n\\t{\\r\\n\\t\\tsetpi();\\r\\n\\t\\tint C=0;\\r\\n\\t\\twhile(F>0)\\r\\n\\t\\t{\\r\\n\\t\\t\\tdijk();\\r\\n\\t\\t\\tif(d[T] == INF)\\r\\n\\t\\t\\t\\treturn INF;\\r\\n\\t\\t\\tint c = d[T] + pi[T] - pi[S], f = F;\\r\\n\\t\\t\\tfor(int x=T;x!=S;x=to[p[x]^1])\\r\\n\\t\\t\\t\\tckmin(f, cap[p[x]]-flow[p[x]]);\\r\\n\\t\\t\\tC += c*f;\\r\\n\\t\\t\\tfor(int x=T;x!=S;x=to[p[x]^1])\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tflow[p[x]  ] += f;\\r\\n\\t\\t\\t\\tflow[p[x]^1] -= f;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tF -= f;\\r\\n\\t\\t\\tfor(int i=0;i<N;++i)\\r\\n\\t\\t\\t\\tpi[i] += d[i];\\r\\n\\t\\t}\\r\\n\\t\\treturn C;\\r\\n\\t}\\r\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also check out\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/graphs%20(12)/Flows%20(12.3)/MCMF.h\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Benq's Implementation\"\n      }), \"\\r\\nand\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/kth-competitive-programming/kactl/blob/master/content/graph/MinCostMaxFlow.h\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"KACTL's Implementation\"\n      }), \"\\r\\n(which are a lot better than mine).\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"applications\",\n      children: [_jsx(_components.a, {\n        href: \"#applications\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Applications\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"assignment-problem\",\n      children: [_jsx(_components.a, {\n        href: \"#assignment-problem\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Assignment Problem\"]\n    }), \"\\n\", _jsx(IncompleteSection, {\n      children: _jsx(_components.p, {\n        children: \"Better resources? I honestly just found some that came up in a google search.\"\n      })\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Wikipedia\",\n        title: \"Assignment Problem\",\n        url: \"https://en.wikipedia.org/wiki/Assignment_problem\"\n      }), _jsx(Resource, {\n        source: \"YouTube - Algorithms Thread\",\n        title: \"Hungarian for non Hungarians\",\n        url: \"https://www.youtube.com/watch?v=cVBzMXYc4ss\"\n      }), _jsx(Resource, {\n        source: \"Topcoder\",\n        title: \"Assignment Problem and Hungarian Algorthm\",\n        url: \"https://www.topcoder.com/community/competitive-programming/tutorials/assignment-problem-and-hungarian-algorithm/\",\n        starred: true\n      })]\n    }), \"\\n\", _jsx(IncompleteSection, {\n      children: _jsx(_components.p, {\n        children: \"More hungarian alg problems\"\n      })\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"appl\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  prerequisites,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Minimum Cost Flow","author":"Siyong Huang, Benjamin Qi","contributors":null,"id":"min-cost-flow","prerequisites":["max-flow"],"description":"Triangle Inequality, Johnson's Algorithm, and Min Cost Flow","frequency":1},"parent":{"name":"MinCostFlow","relativePath":"6_Advanced/MinCostFlow.mdx"},"fields":{"division":"adv"},"toc":{"cpp":[{"depth":2,"value":"Triangle Inequality","slug":"triangle-inequality"},{"depth":2,"value":"Johnson&#39;s Algorithm","slug":"johnsons-algorithm"},{"depth":2,"value":"Minimum Cost Flow","slug":"minimum-cost-flow"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Applications","slug":"applications"},{"depth":3,"value":"Assignment Problem","slug":"assignment-problem"}],"java":[{"depth":2,"value":"Triangle Inequality","slug":"triangle-inequality"},{"depth":2,"value":"Johnson&#39;s Algorithm","slug":"johnsons-algorithm"},{"depth":2,"value":"Minimum Cost Flow","slug":"minimum-cost-flow"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Applications","slug":"applications"},{"depth":3,"value":"Assignment Problem","slug":"assignment-problem"}],"py":[{"depth":2,"value":"Triangle Inequality","slug":"triangle-inequality"},{"depth":2,"value":"Johnson&#39;s Algorithm","slug":"johnsons-algorithm"},{"depth":2,"value":"Minimum Cost Flow","slug":"minimum-cost-flow"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Applications","slug":"applications"},{"depth":3,"value":"Assignment Problem","slug":"assignment-problem"}]}},"moduleProblemLists":{"problemLists":[{"listId":"general","problems":[{"uniqueId":"cf-237E","name":"Build String","url":"https://codeforces.com/contest/237/problem/E","source":"CF","difficulty":"Normal","isStarred":false,"tags":["MCF"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-818G","name":"Four Melodies","url":"https://codeforces.com/contest/818/problem/G","source":"CF","difficulty":"Normal","isStarred":false,"tags":["MCF"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-802N","name":"April Fools' Problem (medium)","url":"https://codeforces.com/contest/802/problem/N","source":"CF","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1316E","name":"Team Building","url":"https://codeforces.com/contest/1316/problem/E","source":"CF","difficulty":"Hard","isStarred":false,"tags":["Bitmasks","MCF"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-1307G","name":"Cow and Exercise","url":"https://codeforces.com/contest/1307/problem/G","source":"CF","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1427G","name":"One Billion Shades of Grey","url":"https://codeforces.com/contest/1427/problem/G","source":"CF","difficulty":"Very Hard","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"appl","problems":[{"uniqueId":"cf-1107F","name":"Vasya and Endless Credits","url":"https://codeforces.com/contest/1107/problem/F","source":"CF","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]}]}},"pageContext":{"id":"min-cost-flow"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}