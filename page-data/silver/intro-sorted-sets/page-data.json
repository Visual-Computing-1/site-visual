{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/silver/intro-sorted-sets",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*Hard, would recommend skipping (1700 on CF)*/\n/*Hard, do not attempt until Gold/Plat (2100 on CF)*/\n/*First solve problem for $n$-th tournament only. Extremely hard, do not attempt (2700 on CF)*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"intro-sorted-sets\", title = \"More Operations on Sorted Sets\", author = \"Darren Yao, Benjamin Qi, Andrew Wang\", contributors = \"Aadit Ambadkar\", prerequisites = [\"intro-sets\"], description = \"Using iterators with sets, finding the next element smaller or larger than a specified key in a set.\", frequency = 2, redirects = [\"intro-ordered\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Warning: _missingComponent(\"Warning\"),\n    Problems: _missingComponent(\"Problems\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    MATHDIV: _missingComponent(\"MATHDIV\")\n  }, _props.components), {LanguageSection, CPPSection, Resources, Resource, JavaSection, MATHSPAN, HeaderLink, Warning, Problems, FocusProblem, Spoiler, MATHDIV, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [\"\\n\", \"\\n\", \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"IUSACO\",\n            title: \"4.4 - Sets & Maps\",\n            children: _jsx(_components.p, {\n              children: \"module is based off this\"\n            })\n          }), _jsx(Resource, {\n            source: \"CP2\",\n            title: \"2.2.2 - Non-Linear Data Structures\",\n            children: _jsx(_components.p, {\n              children: \"see decription of BSTs and heaps\"\n            })\n          })]\n        })\n      }), _jsx(JavaSection, {\n        children: _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"IUSACO\",\n            title: \"4.3 - Sets & Maps\",\n            children: _jsx(_components.p, {\n              children: \"module is based off this\"\n            })\n          }), _jsx(Resource, {\n            source: \"CP2\",\n            title: \"2.2.2 - Non-Linear Data Structures\",\n            children: _jsx(_components.p, {\n              children: \"see decription of BSTs and heaps\"\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"In sets and maps where keys (or elements) are stored in sorted order, accessing\\r\\nor removing the next key higher or lower than some input key \", _jsx(_components.code, {\n        children: \"k\"\n      }), \" is supported.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Keep in mind that insertion and deletion will take \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time for\\r\\nsorted sets, which is more than the average \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" insertion and\\r\\ndeletion for unordered sets, but less than the worst case \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" insertion\\r\\nand deletion for unordered sets.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"using-iterators\",\n      children: [_jsx(_components.a, {\n        href: \"#using-iterators\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Using Iterators\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Bronze, we avoided discussion of any set operations involving iterators.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"CPH\",\n            title: \"4.4 - Set Iterators\",\n            starred: true\n          })\n        })\n      }), _jsxs(JavaSection, {\n        children: [_jsx(_components.p, {\n          children: \"In Java, iterators are helpful for looping through sets.\"\n        }), _jsxs(_components.p, {\n          children: [\"Iterators used with \", _jsx(_components.code, {\n            children: \"HashSet\"\n          }), \" would yield the elements in random order:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"Set<Integer> set = new HashSet<Integer>();\\r\\nset.add(1); set.add(3); set.add(0); set.add(-2);\\r\\nIterator it = set.iterator();\\r\\nwhile(it.hasNext()){\\r\\n\\tInteger i = (Integer)it.next();\\r\\n\\tSystem.out.print(i + \\\" \\\"); // returns some random order\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"But with \", _jsx(_components.code, {\n            children: \"TreeSet\"\n          }), \" the elements are in sorted order:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"Set<Integer> set = new TreeSet<Integer>();\\r\\nset.add(1); set.add(3); set.add(0); set.add(-2);\\r\\nIterator it = set.iterator();\\r\\nwhile(it.hasNext()){\\r\\n\\tInteger i = (Integer)it.next();\\r\\n\\tSystem.out.print(i + \\\" \\\"); // returns -2 0 1 3\\r\\n}\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"Instead of creating an iterator and looping with it like in C++, Java provides a\\r\\nfor-each loop which creates a hidden iterator and loops with it automatically:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"Set<Integer> set = new TreeSet<Integer>();\\r\\nset.add(1); set.add(3); set.add(0); set.add(-2);\\r\\nfor (int i : set){\\r\\n\\tSystem.out.print(i + \\\" \\\"); // returns -2 0 1 3\\r\\n}\\n\"\n          })\n        }), _jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [\"You shouldn't modify sets when traversing it with set iterators like in any\\r\\nother iterators for \", _jsx(_components.code, {\n              children: \"Collections\"\n            }), \" (this \", _jsx(_components.strong, {\n              children: \"INCLUDES\"\n            }), \" when using a for-each\\r\\nloop). The only modification possible is using the iterator \", _jsx(_components.code, {\n              children: \"remove()\"\n            }), \" method\\r\\nwhich can only be used once before calling the \", _jsx(_components.code, {\n              children: \"next()\"\n            }), \" method.\"]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"sorted-sets\",\n      children: [_jsx(_components.a, {\n        href: \"#sorted-sets\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Sorted Sets\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"The sorted \", _jsx(_components.code, {\n            children: \"std::set\"\n          }), \" also supports:\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"lower_bound\"\n            }), \": returns an iterator to the least element greater than or equal\\r\\nto some element \", _jsx(_components.code, {\n              children: \"k\"\n            }), \".\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"upper_bound\"\n            }), \": returns an iterator to the least element strictly greater than\\r\\nsome element \", _jsx(_components.code, {\n              children: \"k\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"set<int> s;\\r\\ns.insert(1); // [1]\\r\\ns.insert(14); // [1, 14]\\r\\ns.insert(9); // [1, 9, 14]\\r\\ns.insert(2); // [1, 2, 9, 14]\\r\\ncout << *s.upper_bound(7) << '\\\\n'; // 9\\r\\ncout << *s.upper_bound(9) << '\\\\n'; // 14\\r\\ncout << *s.lower_bound(5) << '\\\\n'; // 9\\r\\ncout << *s.lower_bound(9) << '\\\\n'; // 9\\r\\ncout << *s.begin() << '\\\\n'; // 1\\r\\nauto it = s.end();\\r\\ncout << *(--it) << '\\\\n'; // 14\\r\\ns.erase(s.upper_bound(6)); // [1, 2, 14]\\n\"\n          })\n        }), _jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [\"Suppose that we replace \", _jsx(_components.code, {\n              children: \"s.upper_bound(7)\"\n            }), \" with\\r\\n\", _jsx(_components.code, {\n              children: \"upper_bound(begin(s),end(s),7)\"\n            }), \", which was the syntax that we used for vectors\\r\\nin the prerequisite module. This will still output the expected results, but its\\r\\ntime complexity is linear in the size of the set \", _jsx(_components.code, {\n              children: \"s\"\n            }), \" rather than logarithmic, so\\r\\nmake sure to avoid it!\"]\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"TreeSet\"\n          }), \"s in Java allow for a multitude of additional operations:\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"first()\"\n            }), \": returns the lowest element in the set\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"last()\"\n            }), \": returns the greatest element in the set\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"lower(E v)\"\n            }), \": returns the greatest element strictly less than \", _jsx(_components.code, {\n              children: \"v\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"floor(E v)\"\n            }), \": returns the greatest element less than or equal to \", _jsx(_components.code, {\n              children: \"v\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"higher(E v)\"\n            }), \": returns the least element strictly greater than \", _jsx(_components.code, {\n              children: \"v\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"ceiling(E v)\"\n            }), \": returns the least element greater than or equal to \", _jsx(_components.code, {\n              children: \"v\"\n            })]\n          }), \"\\n\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"TreeSet<Integer> set = new TreeSet<Integer>();\\r\\nset.add(1); // [1]\\r\\nset.add(14); // [1, 14]\\r\\nset.add(9); // [1, 9, 14]\\r\\nset.add(2); // [1, 2, 9, 14]\\r\\nSystem.out.println(set.higher(7)); // 9\\r\\nSystem.out.println(set.higher(9)); // 14\\r\\nSystem.out.println(set.lower(5)); // 2\\r\\nSystem.out.println(set.first()); // 1\\r\\nSystem.out.println(set.last()); // 14\\r\\nset.remove(set.higher(6)); // [1, 2, 14]\\r\\nSystem.out.println(set.higher(23)); // ERROR, no such element exists\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"One limitation of sorted sets is that we can't efficiently access the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k^{th}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>k</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\\\"application/x-tex\\\">k^{th}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8491em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8491em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">t</span><span class=\\\"mord mathnormal mtight\\\">h</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \"\\r\\nlargest element in the set, or find the number of elements in the set greater\\r\\nthan some arbitrary \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". In C++, these operations can be handled using a data\\r\\nstructure called an \", _jsx(_components.a, {\n        href: \"/gold/PURS#order-statistic-tree\",\n        children: \"order statistic tree\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"sorted-maps\",\n      children: [_jsx(_components.a, {\n        href: \"#sorted-maps\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Sorted Maps\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"The ordered \", _jsx(_components.code, {\n            children: \"map\"\n          }), \" also allows:\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"lower_bound\"\n            }), \": returns the iterator pointing to the lowest entry not less than\\r\\nthe specified key\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"upper_bound\"\n            }), \": returns the iterator pointing to the lowest entry strictly\\r\\ngreater than the specified key respectively.\"]\n          }), \"\\n\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"map<int, int> m;\\r\\nm[3] = 5; // [(3, 5)]\\r\\nm[11] = 4; // [(3, 5); (11, 4)]\\r\\nm[10] = 491; // [(3, 5); (10, 491); (11, 4)]\\r\\ncout << m.lower_bound(10)->first << \\\" \\\" << m.lower_bound(10)->second << '\\\\n'; // 10 491\\r\\ncout << m.upper_bound(10)->first << \\\" \\\" << m.upper_bound(10)->second << '\\\\n'; // 11 4\\r\\nm.erase(11); // [(3, 5); (10, 491)]\\r\\nif (m.upper_bound(10) == m.end())\\r\\n{\\r\\n\\tcout << \\\"end\\\" << endl; // Prints end\\r\\n}\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"The ordered map additionally supports \", _jsx(_components.code, {\n            children: \"firstKey\"\n          }), \" / \", _jsx(_components.code, {\n            children: \"firstEntry\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"lastKey\"\n          }), \" /\\r\\n\", _jsx(_components.code, {\n            children: \"lastEntry\"\n          }), \", returning the lowest key/entry and the highest key/entry, as well\\r\\nas \", _jsx(_components.code, {\n            children: \"higherKey\"\n          }), \" / \", _jsx(_components.code, {\n            children: \"higherEntry\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"lowerKey\"\n          }), \" / \", _jsx(_components.code, {\n            children: \"lowerEntry\"\n          }), \", returning the\\r\\nlowest key/entry strictly higher than the specified key, or the highest\\r\\nkey/entry strictly lower than the specified key.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();\\r\\nmap.put(3, 5); // [(3, 5)]\\r\\nmap.put(11, 4); // [(3, 5); (11, 4)]\\r\\nmap.put(10, 491); // [(3, 5); (10, 491); (11, 4)]\\r\\nSystem.out.println(map.firstKey()); // 3\\r\\nSystem.out.println(map.firstEntry()); // (3, 5)\\r\\nSystem.out.println(map.lastEntry()); // (11, 4)\\r\\nSystem.out.println(map.higherEntry(4)); // (10, 491)\\r\\nmap.remove(11); // [(3, 5); (10, 491)]\\r\\nSystem.out.println(map.lowerKey(4)); // 3\\r\\nSystem.out.println(map.lowerKey(3)); // ERROR\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"multisets\",\n      children: [_jsx(_components.a, {\n        href: \"#multisets\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Multisets\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.strong, {\n        children: \"multiset\"\n      }), \" is a sorted set that allows multiple copies of the same element.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsx(_components.p, {\n          children: \"In addition to all of the regular set operations,\"\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"the \", _jsx(_components.code, {\n              children: \"count()\"\n            }), \" method returns the number of times an element is present in the\\r\\nmultiset. However, this method takes time \", _jsx(_components.strong, {\n              children: \"linear\"\n            }), \" in the number of matches\\r\\nso you shouldn't use it in a contest.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"To remove a value \", _jsx(_components.strong, {\n              children: \"once\"\n            }), \", use \", _jsx(_components.code, {\n              children: \"ms.erase(ms.find(val))\"\n            }), \".\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"To remove \", _jsx(_components.strong, {\n              children: \"all\"\n            }), \" occurrences of a value, use \", _jsx(_components.code, {\n              children: \"ms.erase(val)\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), _jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [\"Using \", _jsx(_components.code, {\n              children: \"ms.erase(val)\"\n            }), \" erases \", _jsx(_components.strong, {\n              children: \"all\"\n            }), \" instances of \", _jsx(_components.code, {\n              children: \"val\"\n            }), \" from the multiset. To remove one instance of \", _jsx(_components.code, {\n              children: \"val\"\n            }), \", use \", _jsx(_components.code, {\n              children: \"ms.erase(ms.find(val))\"\n            }), \"!\"]\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"multiset<int> ms;\\r\\nms.insert(1); // [1]\\r\\nms.insert(14); // [1, 14]\\r\\nms.insert(9); // [1, 9, 14]\\r\\nms.insert(2); // [1, 2, 9, 14]\\r\\nms.insert(9); // [1, 2, 9, 9, 14]\\r\\nms.insert(9); // [1, 2, 9, 9, 9, 14]\\r\\ncout << ms.count(4) << '\\\\n'; // 0\\r\\ncout << ms.count(9) << '\\\\n'; // 3\\r\\ncout << ms.count(14) << '\\\\n'; // 1\\r\\nms.erase(ms.find(9));\\r\\ncout << ms.count(9) << '\\\\n'; // 2\\r\\nms.erase(9);\\r\\ncout << ms.count(9) << '\\\\n'; // 0\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"While there is no multiset in Java, we can implement one using the \", _jsx(_components.code, {\n            children: \"TreeMap\"\n          }), \"\\r\\nfrom values to their respective frequencies. We declare the \", _jsx(_components.code, {\n            children: \"TreeMap\"\n          }), \"\\r\\nimplementation globally so that we can write functions for adding and removing\\r\\nelements from it. The \", _jsx(_components.code, {\n            children: \"first\"\n          }), \", \", _jsx(_components.code, {\n            children: \"last\"\n          }), \", \", _jsx(_components.code, {\n            children: \"higher\"\n          }), \", and \", _jsx(_components.code, {\n            children: \"lower\"\n          }), \" operations still\\r\\nfunction as intended; just use \", _jsx(_components.code, {\n            children: \"firstKey\"\n          }), \", \", _jsx(_components.code, {\n            children: \"lastKey\"\n          }), \", \", _jsx(_components.code, {\n            children: \"higherKey\"\n          }), \", and\\r\\n\", _jsx(_components.code, {\n            children: \"lowerKey\"\n          }), \" respectively.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"static TreeMap<Integer, Integer> multiset = new TreeMap<Integer, Integer>();\\r\\n\\r\\npublic static void main(String[] args){\\r\\n\\t...\\r\\n}\\r\\n\\r\\nstatic void add(int x){\\r\\n\\tif(multiset.containsKey(x)){\\r\\n\\t\\tmultiset.put(x, multiset.get(x) + 1);\\r\\n\\t} else {\\r\\n\\t\\tmultiset.put(x, 1);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nstatic void remove(int x){\\r\\n\\tmultiset.put(x, multiset.get(x) - 1);\\r\\n\\tif(multiset.get(x) == 0){\\r\\n\\t\\tmultiset.remove(x);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"priority-queues\",\n      children: [_jsx(_components.a, {\n        href: \"#priority-queues\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Priority Queues\"]\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsxs(_components.p, {\n        children: [\"Priority queues are \", _jsx(_components.strong, {\n          children: \"not\"\n        }), \" implemented in the same way as sets and multisets,\\r\\nbut they are included in this section because the operations that they perform\\r\\ncan also be performed with sets.\"]\n      })\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CSA\",\n        url: \"heaps\",\n        title: \"Heaps\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.strong, {\n        children: \"priority queue\"\n      }), \" (or \", _jsx(_components.strong, {\n        children: \"heap\"\n      }), \") supports the following operations: insertion\\r\\nof elements, deletion of the element considered highest priority, and retrieval\\r\\nof the highest priority element, all in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time according to\\r\\nthe number of elements in the priority queue. Priority queues are simpler and\\r\\nfaster than sets, so you should use them instead whenever possible.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h3, {\n          id: \"c\",\n          children: [_jsx(_components.a, {\n            href: \"#c\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.a, {\n            href: \"http://www.cplusplus.com/reference/queue/priority_queue/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"C++\"\n          })]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"priority_queue<int> pq;\\r\\npq.push(7); // [7]\\r\\npq.push(2); // [2, 7]\\r\\npq.push(1); // [1, 2, 7]\\r\\npq.push(5); // [1, 2, 5, 7]\\r\\ncout << pq.top() << endl; // 7\\r\\npq.pop(); // [1, 2, 5]\\r\\npq.pop(); // [1, 2]\\r\\npq.push(6); // [1, 2, 6]\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h3, {\n          id: \"java\",\n          children: [_jsx(_components.a, {\n            href: \"#java\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Java\"]\n        }), _jsxs(_components.p, {\n          children: [\"In Java, we delete and retrieve the element of \", _jsx(_components.strong, {\n            children: \"lowest\"\n          }), \" rather than highest\\r\\npriority.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\\r\\npq.add(7); // [7]\\r\\npq.add(2); // [7, 2]\\r\\npq.add(1); // [7, 2, 1]\\r\\npq.add(5); // [7, 5, 2, 1]\\r\\nSystem.out.println(pq.peek()); // 1\\r\\npq.poll(); // [7, 5, 2]\\r\\npq.poll(); // [7, 5]\\r\\npq.add(6); // [7, 6, 5]\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"introductory-problems\",\n      children: [_jsx(_components.a, {\n        href: \"#introductory-problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Introductory Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"standard\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"harder-example---bit-inversions\",\n      children: [_jsx(_components.a, {\n        href: \"#harder-example---bit-inversions\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Harder Example - Bit Inversions\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sample\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We'll use iterators extensively.\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsxs(_components.p, {\n        children: [\"Let the bit string be \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"s=s_0s_1s_2\\\\ldots,s_{n-1}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>s</mi><mo>=</mo><msub><mi>s</mi><mn>0</mn></msub><msub><mi>s</mi><mn>1</mn></msub><msub><mi>s</mi><mn>2</mn></msub><mo>‚Ä¶</mo><mo separator=\\\"true\\\">,</mo><msub><mi>s</mi><mrow><mi>n</mi><mo>‚àí</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\\\"application/x-tex\\\">s=s_0s_1s_2\\\\ldots,s_{n-1}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6389em;vertical-align:-0.2083em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">0</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">‚Ä¶</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">n</span><span class=\\\"mbin mtight\\\">‚àí</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2083em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \". In the set \", _jsx(_components.code, {\n          children: \"dif\"\n        }), \", we store\\r\\nall indices \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" such that \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"s_i\\\\neq s_{i-1}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo mathvariant=\\\"normal\\\">‚â†</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>‚àí</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\\\"application/x-tex\\\">s_i\\\\neq s_{i-1}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\"><span class=\\\"mrel\\\"><span class=\\\"mord vbox\\\"><span class=\\\"thinbox\\\"><span class=\\\"rlap\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"inner\\\"><span class=\\\"mord\\\"><span class=\\\"mrel\\\">ÓÄ†</span></span></span><span class=\\\"fix\\\"></span></span></span></span></span><span class=\\\"mrel\\\">=</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6389em;vertical-align:-0.2083em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mbin mtight\\\">‚àí</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2083em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \" (including \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i=0\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">i=0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i=n\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i=n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n        }), \"). If the\\r\\nelements of \", _jsx(_components.code, {\n          children: \"dif\"\n        }), \" are \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"0=dif_1<dif_2<\\\\cdots<dif_k=n\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mo>=</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mn>1</mn></msub><mo>&lt;</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mn>2</mn></msub><mo>&lt;</mo><mo>‚ãØ</mo><mo>&lt;</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mi>k</mi></msub><mo>=</mo><mi>n</mi></mrow><annotation encoding=\\\"application/x-tex\\\">0=dif_1&lt;dif_2&lt;\\\\cdots&lt;dif_k=n</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5782em;vertical-align:-0.0391em;\\\"></span><span class=\\\"minner\\\">‚ãØ</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span>\"\n        }), \", then the longest length is\\r\\nequal to\"]\n      }), _jsx(MATHDIV, {\n        className: \"math math-display\",\n        latex: \"\\\\max(dif_2-dif_1,dif_3-dif_2,\\\\ldots,dif_k-dif_{k-1}).\",\n        children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mi>max</mi><mo>‚Å°</mo><mo stretchy=\\\"false\\\">(</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mn>2</mn></msub><mo>‚àí</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mn>1</mn></msub><mo separator=\\\"true\\\">,</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mn>3</mn></msub><mo>‚àí</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mn>2</mn></msub><mo separator=\\\"true\\\">,</mo><mo>‚Ä¶</mo><mo separator=\\\"true\\\">,</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mi>k</mi></msub><mo>‚àí</mo><mi>d</mi><mi>i</mi><msub><mi>f</mi><mrow><mi>k</mi><mo>‚àí</mo><mn>1</mn></mrow></msub><mo stretchy=\\\"false\\\">)</mo><mi mathvariant=\\\"normal\\\">.</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(dif_2-dif_1,dif_3-dif_2,\\\\ldots,dif_k-dif_{k-1}).</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">‚àí</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">‚àí</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">‚Ä¶</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">‚àí</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mbin mtight\\\">‚àí</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">‚Äã</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2083em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mord\\\">.</span></span></span></span></span>\"\n      }), _jsxs(_components.p, {\n        children: [\"We can store each of these differences in a multiset \", _jsx(_components.code, {\n          children: \"ret\"\n        }), \"; after each\\r\\ninversion, we'll need to output the maximum element of \", _jsx(_components.code, {\n          children: \"ret\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"Inverting a bit at a 0-indexed position \", _jsx(_components.code, {\n          children: \"x\"\n        }), \" corresponds to inserting \", _jsx(_components.code, {\n          children: \"x\"\n        }), \" into\\r\\n\", _jsx(_components.code, {\n          children: \"dif\"\n        }), \" if it not currently present or removing \", _jsx(_components.code, {\n          children: \"x\"\n        }), \" if it is, and then doing the\\r\\nsame with \", _jsx(_components.code, {\n          children: \"x+1\"\n        }), \". Whenever we insert or remove an element of \", _jsx(_components.code, {\n          children: \"dif\"\n        }), \", we should\\r\\nupdate \", _jsx(_components.code, {\n          children: \"ret\"\n        }), \" accordingly.\"]\n      }), _jsxs(LanguageSection, {\n        children: [_jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\n#define sz(x) (x).size()\\r\\n\\r\\nstring s;\\r\\nint m;\\r\\nset<int> dif;\\r\\nmultiset<int> ret;\\r\\n\\r\\nvoid modify(int x) {\\r\\n\\tif (x == 0 || x == sz(s)) return;\\r\\n\\tauto it = dif.find(x);\\r\\n\\tif (it != end(dif)) {  // x is currently present in dif, remove it\\r\\n\\t\\tint a = *prev(it), b = *next(it);\\r\\n\\t\\tret.erase(ret.find(x - a)), ret.erase(ret.find(b - x)); // update ret\\r\\n\\t\\tret.insert(b - a);\\r\\n\\t\\tdif.erase(it);  // remove x from dif\\r\\n\\t} else {  // x is not currently in dif, insert it\\r\\n\\t\\tit = dif.insert(x).first;  // insert x into dif\\r\\n\\t\\t// it = iterator corresponding to x\\r\\n\\t\\tint a = *prev(it), b = *next(it);\\r\\n\\t\\tret.erase(ret.find(b - a));  // update ret\\r\\n\\t\\tret.insert(x - a), ret.insert(b - x);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tcin >> s >> m;\\r\\n\\tdif.insert(0); dif.insert(sz(s));\\r\\n\\tfor (int i = 0; i < sz(s) - 1; ++i)\\r\\n\\t\\tif (s[i] != s[i + 1]) dif.insert(i + 1); // initialize dif\\r\\n\\tfor (auto it = dif.begin(); next(it) != dif.end(); it++) {\\r\\n\\t\\tret.insert(*next(it) - *it); // initialize ret\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < m; ++i) {\\r\\n\\t\\tint x; cin >> x; // 1-indexed position\\r\\n\\t\\tmodify(x - 1); modify(x);\\r\\n\\t\\tcout << *ret.rbegin() << \\\" \\\";\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        }), _jsxs(JavaSection, {\n          children: [_jsx(Warning, {\n            children: _jsx(_components.p, {\n              children: \"Java solutions are too slow for the CSES. Use C++ instead to get AC.\"\n            })\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"\\r\\nimport java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\nclass BitInversion{\\r\\n\\tpublic static TreeMap<Integer, Integer> ret = new TreeMap<Integer, Integer>();\\r\\n\\tpublic static String s;\\r\\n\\tpublic static int m;\\r\\n\\tpublic static Set<Integer> dif = new TreeSet<Integer>();\\r\\n\\r\\n\\tpublic static void modify(int x) {\\r\\n\\t\\tif (x == 0 || x == s.length()) return;\\r\\n\\t\\tif (dif.contains(x)) { // x is currently present in dif, remove it\\r\\n\\t\\t\\tint a = dif.lower(x), b = dif.higher(x);\\r\\n\\t\\t\\tremove(x - a); remove(b - x); // update ret\\r\\n\\t\\t\\tadd(b - a);\\r\\n\\t\\t\\tdif.remove(x); // remove x from dif\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t  dif.add(x); // insert x into dif\\r\\n\\t\\t  int a = dif.lower(x), b = dif.higher(x);\\r\\n\\t\\t  remove(b - a); // update ret\\r\\n\\t\\t  add(x - a); add(b - x);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tPrintWriter out = new PrintWriter(System.out);\\r\\n\\t\\ts = sc.readLine();\\r\\n\\t\\tm = Integer.parseInt(sc.readLine());\\r\\n\\t\\tdif.add(0); dif.add(s.length());\\r\\n\\t\\tfor (int i = 0; i < s.length() - 1; i++) {\\r\\n\\t\\t\\tif(s.charAt(i) != s.charAt(i + 1)) dif.add(i + 1); // initialize dif\\r\\n\\t\\t}\\r\\n\\t\\tfor (int it : dif) {\\r\\n\\t\\t\\tif(dif.higher(it) != null) add(dif.higher(it) - it); // initialize ret\\r\\n\\t\\t}\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(sc.readLine());\\r\\n\\t\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\t\\tint x = Integer.parseInt(st.nextToken()); // 1-indexed position\\r\\n\\t\\t\\tmodify(x - 1); modify(x);\\r\\n\\t\\t\\tout.println(ret.lastKey());\\r\\n\\t\\t}\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic void add(int x){\\r\\n\\t\\tif (ret.containsKey(x)) {\\r\\n\\t\\t\\tret.put(x, ret.get(x) + 1);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tret.put(x, 1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tstatic void remove(int x){\\r\\n\\t\\tret.put(x, ret.get(x) - 1);\\r\\n\\t\\tif (ret.get(x) == 0) {\\r\\n\\t\\t\\tret.remove(x);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\n\"\n            })\n          })]\n        })]\n      }), _jsxs(_components.p, {\n        children: [\"Note that multiset has a high constant factor, so replacing \", _jsx(_components.code, {\n          children: \"ret\"\n        }), \" with a\\r\\npriority queue and an array that stores the number of times each integer occurs\\r\\nin the priority queue reduces the runtime by a factor of 2.\"]\n      }), _jsxs(LanguageSection, {\n        children: [_jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\n#define sz(x) (int)(x).size()\\r\\n\\r\\nstring s;\\r\\nint m;\\r\\nset<int> dif;\\r\\npriority_queue<int> ret;\\r\\nint cnt[200005];\\r\\n\\r\\nvoid ad(int x) { cnt[x] ++; ret.push(x);  }\\r\\nvoid modify(int x) {\\r\\n\\tif (x == 0 || x == sz(s)) return;\\r\\n\\tauto it = dif.find(x);\\r\\n\\tif (it != end(dif)) {\\r\\n\\t\\tint a = *prev(it), b = *next(it); dif.erase(it);\\r\\n\\t\\tcnt[x-a] --, cnt[b-x] --; ad(b-a);\\r\\n\\t} else {\\r\\n\\t\\tit = dif.insert(x).first;\\r\\n\\t\\tint a = *prev(it), b = *next(it);\\r\\n\\t\\tcnt[b-a] --, ad(x-a), ad(b-x);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0);\\r\\n\\tcin >> s >> m;\\r\\n\\tdif.insert(0); dif.insert(sz(s));\\r\\n\\tfor (int i = 0; i < sz(s) - 1; ++i) {\\r\\n\\t\\tif (s[i] != s[i + 1]) dif.insert(i+1);\\r\\n\\t}\\r\\n\\tfor (auto it = dif.begin(); next(it) != dif.end(); it++) {\\r\\n\\t\\tad(*next(it) - *it);\\r\\n\\t}\\r\\n\\tfor (int i = 0; i < m; ++i) {\\r\\n\\t\\tint x; cin >> x;\\r\\n\\t\\tmodify(x - 1); modify(x);\\r\\n\\t\\twhile (!cnt[ret.top()]) ret.pop();\\r\\n\\t\\t// pop elements that should no longer be present in priority queue\\r\\n\\t\\tcout << ret.top() << \\\" \\\";\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        }), _jsx(JavaSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"\\r\\nimport java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\nclass BitInversion{\\r\\n\\tpublic static PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());\\r\\n\\tpublic static String s;\\r\\n\\tpublic static int m;\\r\\n\\tpublic static TreeSet<Integer> dif = new TreeSet<Integer>();\\r\\n\\tpublic static int cnt[];\\r\\n\\tpublic static void add(int x) {\\r\\n\\t\\tcnt[x]++;\\r\\n\\t\\tpq.add(x);\\r\\n\\t}\\r\\n\\tpublic static void modify(int x) {\\r\\n\\t\\tif(x == 0 || x == s.length()) return;\\r\\n\\t\\tif(dif.contains(x)){ // x is currently present in dif, remove it\\r\\n\\t\\t\\tint a = dif.lower(x), b = dif.higher(x);\\r\\n\\t\\t\\tcnt[x - a]--; cnt[b - x]--; // update ret\\r\\n\\t\\t\\tadd(b - a);\\r\\n\\t\\t\\tdif.remove(x); // remove x from dif\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t  dif.add(x); // insert x into dif\\r\\n\\t\\t  int a = dif.lower(x), b = dif.higher(x);\\r\\n\\t\\t  cnt[b - a]--; // update ret\\r\\n\\t\\t  add(x - a); add(b - x);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tpublic static void main(String[] args) throws IOException {\\r\\n\\t\\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tPrintWriter out = new PrintWriter(System.out);\\r\\n\\t\\ts = sc.readLine();\\r\\n\\t\\tm = Integer.parseInt(sc.readLine());\\r\\n\\t\\tcnt = new int[s.length()+1];\\r\\n\\t\\tdif.add(0); dif.add(s.length());\\r\\n\\t\\tfor (int i = 0; i < s.length() - 1; i++) {\\r\\n\\t\\t\\tif(s.charAt(i) != s.charAt(i+1)) dif.add(i + 1); // initialize dif\\r\\n\\t\\t}\\r\\n\\t\\tfor (int it : dif) {\\r\\n\\t\\t\\tif(dif.higher(it) != null){\\r\\n\\t\\t\\t\\tadd(dif.higher(it) - it);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(sc.readLine());\\r\\n\\t\\tfor (int i = 0; i < m; i++){\\r\\n\\t\\t\\tint x = Integer.parseInt(st.nextToken()); // 1-indexed position\\r\\n\\t\\t\\tmodify(x - 1); modify(x);\\r\\n\\t\\t\\twhile (cnt[pq.peek()] == 0) pq.poll();\\r\\n\\t\\t\\t// pop elements that should no longer be present in priority queue\\r\\n\\t\\t\\tout.println(pq.peek());\\r\\n\\t\\t}\\r\\n\\t\\tout.close();\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\n\"\n            })\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"harder-problems\",\n      children: [_jsx(_components.a, {\n        href: \"#harder-problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Harder Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  prerequisites,\n  description,\n  frequency,\n  redirects,\n  default: MDXContent\n};\n","frontmatter":{"title":"More Operations on Sorted Sets","author":"Darren Yao, Benjamin Qi, Andrew Wang","contributors":"Aadit Ambadkar","id":"intro-sorted-sets","prerequisites":["intro-sets"],"description":"Using iterators with sets, finding the next element smaller or larger than a specified key in a set.","frequency":2},"parent":{"name":"Intro_Sorted_Sets","relativePath":"3_Silver/Intro_Sorted_Sets.mdx"},"fields":{"division":"silver"},"toc":{"cpp":[{"depth":2,"value":"Using Iterators","slug":"using-iterators"},{"depth":2,"value":"Sorted Sets","slug":"sorted-sets"},{"depth":2,"value":"Sorted Maps","slug":"sorted-maps"},{"depth":2,"value":"Multisets","slug":"multisets"},{"depth":2,"value":"Priority Queues","slug":"priority-queues"},{"depth":3,"value":"C++","slug":"c"},{"depth":2,"value":"Introductory Problems","slug":"introductory-problems"},{"depth":2,"value":"Harder Example - Bit Inversions","slug":"harder-example---bit-inversions"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Harder Problems","slug":"harder-problems"}],"java":[{"depth":2,"value":"Using Iterators","slug":"using-iterators"},{"depth":2,"value":"Sorted Sets","slug":"sorted-sets"},{"depth":2,"value":"Sorted Maps","slug":"sorted-maps"},{"depth":2,"value":"Multisets","slug":"multisets"},{"depth":2,"value":"Priority Queues","slug":"priority-queues"},{"depth":3,"value":"Java","slug":"java"},{"depth":2,"value":"Introductory Problems","slug":"introductory-problems"},{"depth":2,"value":"Harder Example - Bit Inversions","slug":"harder-example---bit-inversions"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Harder Problems","slug":"harder-problems"}],"py":[{"depth":2,"value":"Using Iterators","slug":"using-iterators"},{"depth":2,"value":"Sorted Sets","slug":"sorted-sets"},{"depth":2,"value":"Sorted Maps","slug":"sorted-maps"},{"depth":2,"value":"Multisets","slug":"multisets"},{"depth":2,"value":"Priority Queues","slug":"priority-queues"},{"depth":2,"value":"Introductory Problems","slug":"introductory-problems"},{"depth":2,"value":"Harder Example - Bit Inversions","slug":"harder-example---bit-inversions"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Harder Problems","slug":"harder-problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"standard","problems":[{"uniqueId":"cses-1091","name":"Concert Tickets","url":"https://cses.fi/problemset/task/1091","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["Sorted Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-702C","name":"Cellular Network","url":"https://codeforces.com/contest/702/problem/C","source":"CF","difficulty":"Easy","isStarred":false,"tags":["Sorted Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1163","name":"Traffic Lights","url":"https://cses.fi/problemset/task/1163","source":"CSES","difficulty":"Normal","isStarred":true,"tags":["Sorted Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1164","name":"Room Allocation","url":"https://cses.fi/problemset/task/1164","source":"CSES","difficulty":"Normal","isStarred":true,"tags":["Sorted Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"sample","problems":[{"uniqueId":"cses-1188","name":"Bit Inversions","url":"https://cses.fi/problemset/task/1188","source":"CSES","difficulty":"Hard","isStarred":false,"tags":["Sorted Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"general","problems":[{"uniqueId":"usaco-763","name":"Milk Measurement","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=763","source":"Silver","difficulty":"Normal","isStarred":false,"tags":["Sorted Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-859","name":"Convention II","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=859","source":"Silver","difficulty":"Normal","isStarred":true,"tags":["Sorted Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-1474C","name":"Array Destruction","url":"https://codeforces.com/problemset/problem/1474/C","source":"CF","difficulty":"Normal","isStarred":false,"tags":["Multiset","Sorting","Greedy"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-1000C","name":"Covered Points Count","url":"https://codeforces.com/problemset/problem/1000/C","source":"CF","difficulty":"Normal","isStarred":false,"tags":["Sorted Set","Sorting","Prefix Sums","Coordinate Compression"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-813","name":"Snow Boots","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=813","source":"Gold","difficulty":"Hard","isStarred":true,"tags":["Linked List","Sorted Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-862E","name":"Mahmoud & Ehab & Function","url":"https://codeforces.com/contest/862/problem/E","source":"CF","difficulty":"Very Hard","isStarred":false,"tags":["Sorted Set"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-878C","name":"Tournament","url":"https://codeforces.com/contest/878/problem/C","source":"CF","difficulty":"Insane","isStarred":false,"tags":["Sorted Set"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]}]}},"pageContext":{"id":"intro-sorted-sets"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}