{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/unordered-map",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"unordered-map\", redirects = [\"/gold/unordered\"], title = \"(Optional) More on Unordered Sets & Maps\", author = \"Darren Yao, Benjamin Qi\", contributors = \"Neo Wang, Nathan Gong\", description = \"Maintaining collections of distinct elements with hashing.\", frequency = 1, prerequisites = [\"intro-sets\", \"string-hashing\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    Warning: _missingComponent(\"Warning\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\")\n  }, _props.components), {Warning, Resources, Resource, HeaderLink, MATHSPAN, LanguageSection, CPPSection, JavaSection, IncompleteSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Warning, {\n      children: _jsx(_components.p, {\n        children: \"You can (almost always) use ordered sets and maps instead, but it's good to know that these exist.\"\n      })\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"IUSACO\",\n        title: \"4.4 - Sets & Maps\",\n        children: _jsx(_components.p, {\n          children: \"module is based off this\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"hashing\",\n      children: [_jsx(_components.a, {\n        href: \"#hashing\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Hashing\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Hashing\"\n      }), \" refers to assigning a unique code to every variable/object which\\r\\nallows insertions, deletions, and searches in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time, albeit with\\r\\na high constant factor, as hashing requires a large constant number of\\r\\noperations. However, as the name implies, elements are not ordered in any\\r\\nmeaningful way, so traversals of an unordered set will return elements in some\\r\\narbitrary order.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"custom-hashing\",\n      children: [_jsx(_components.a, {\n        href: \"#custom-hashing\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Custom Hashing\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"There is no built in method for hashing pairs or vectors. Namely,\\r\\n\", _jsx(_components.code, {\n            children: \"unordered_set<vector<int>>\"\n          }), \" does not work. In this case, we can use an\\r\\n\", _jsx(_components.a, {\n            href: \"/silver/intro-sorted-sets\",\n            children: \"sorted map\"\n          }), \" (which supports all of the functions used\\r\\nin the code above) or declare our own hash function.\"]\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"Mark Nelson\",\n            title: \"Hash Functions for C++ Unordered Containers\",\n            url: \"https://marknelson.us/posts/2011/09/03/hash-functions-for-c-unordered-containers.html\",\n            starred: true,\n            children: _jsxs(_components.p, {\n              children: [\"How to create user-defined hash function for \", _jsx(_components.code, {\n                children: \"unordered_map\"\n              }), \".\"]\n            })\n          })\n        }), _jsx(_components.p, {\n          children: \"The link provides an example of hashing pairs of strings, as well as other data\\r\\nstructures like pairs.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\ntypedef pair<int,int> pi;\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\nstruct hashPi {\\r\\n\\tsize_t operator()(const pi& p) const { return p.f^p.s; }\\r\\n};\\r\\n\\r\\nint main() {\\r\\n\\tunordered_map<pi,int,hashPi> um;\\r\\n}\\n\"\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\ntypedef pair<int,int> pi;\\r\\n#define f first\\r\\n#define s second\\r\\n\\r\\nnamespace std {\\r\\n\\ttemplate<> struct hash<pi> {\\r\\n\\t\\tsize_t operator()(const pi& p) const { return p.f^p.s; }\\r\\n\\t};\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tunordered_map<pi,int> um;\\r\\n}\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Java has its own hash functions for pre-defined objects like \", _jsx(_components.code, {\n            children: \"ArrayList\"\n          }), \"'s.\\r\\nHowever, a custom hash function is still needed for user-defined objects.\\r\\nIn order to create one, we can implement the \", _jsx(_components.code, {\n            children: \"hashCode\"\n          }), \" method.\"]\n        }), _jsxs(_components.p, {\n          children: [\"Additionally, in order for \", _jsx(_components.code, {\n            children: \"HashSet\"\n          }), \"'s and \", _jsx(_components.code, {\n            children: \"HashMap\"\n          }), \"'s to work with\\r\\na custom class, we must also implement the \", _jsx(_components.code, {\n            children: \"equals\"\n          }), \" method.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class HashTest {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\t// uses custom hash function in class Pair\\r\\n\\t\\tSet<Pair> set = new HashSet<>();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class Pair {\\r\\n\\t\\tpublic int first, second;\\r\\n\\r\\n\\t\\tpublic Pair(int first, int second) {\\r\\n\\t\\t\\tthis.first = first;\\r\\n\\t\\t\\tthis.second = second;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int hashCode() {\\r\\n\\t\\t\\treturn first ^ second;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic boolean equals(Object o) {\\r\\n\\t\\t\\tif (!(o instanceof Pair)) {\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tPair p = (Pair) o;\\r\\n\\t\\t\\treturn first == p.first && second == p.second;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, this hash function is quite bad; if we insert\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(0,0), (1,1), (2,2) \\\\ldots\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>0</mn><mo separator=\\\"true\\\">,</mo><mn>0</mn><mo stretchy=\\\"false\\\">)</mo><mo separator=\\\"true\\\">,</mo><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo><mo separator=\\\"true\\\">,</mo><mo stretchy=\\\"false\\\">(</mo><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn><mo stretchy=\\\"false\\\">)</mo><mo>â€¦</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(0,0), (1,1), (2,2) \\\\ldots</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">0</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">)</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">â€¦</span></span></span></span>\"\n      }), \" then they will all be mapped to the same bucket (so\\r\\nit would easily be \", _jsx(_components.strong, {\n        children: \"hacked\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {}), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"A better (and easier) way to hash custom objects is to use Java's built in\\r\\n\", _jsx(_components.code, {\n            children: \"Objects.hash()\"\n          }), \" method. This method takes in multiple objects and uses them\\r\\nto create a hash code.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class HashTest {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\t// uses custom hash function in class Pair\\r\\n\\t\\tSet<Pair> set = new HashSet<>();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class Pair {\\r\\n\\t\\tpublic int first, second;\\r\\n\\r\\n\\t\\tpublic Pair(int first, int second) {\\r\\n\\t\\t\\tthis.first = first;\\r\\n\\t\\t\\tthis.second = second;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int hashCode() {\\r\\n\\t\\t\\treturn Objects.hash(first, second);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic boolean equals(Object o) {\\r\\n\\t\\t\\tif (!(o instanceof Pair)) {\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tPair p = (Pair) o;\\r\\n\\t\\t\\treturn first == p.first && second == p.second;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"hacking\",\n      children: [_jsx(_components.a, {\n        href: \"#hacking\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Hacking\"]\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsx(_components.p, {\n        children: \"You don't need to know this for USACO, but you will need this to pass some of\\r\\nthe problems in this module.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In USACO contests, unordered sets and maps generally fine, but the built-in\\r\\nhashing algorithm for C++ is vulnerable to pathological data sets causing\\r\\nabnormally slow runtimes. Apparently\\r\\n\", _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/62393?#comment-464875\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Java\"\n      }), \" is not\\r\\nvulnerable to this, however.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsx(Resources, {\n          children: _jsx(Resource, {\n            title: \"Blowing up Unordered Map\",\n            source: \"CF\",\n            url: \"62393\",\n            starred: true,\n            children: _jsx(_components.p, {\n              children: \"Explanation of this problem and how to fix it.\"\n            })\n          })\n        }), _jsxs(_components.p, {\n          children: [\"Essentially, use \", _jsx(_components.code, {\n            children: \"unordered_map<int, int, custom_hash>\"\n          }), \" defined in the blog above\\r\\nin place of \", _jsx(_components.code, {\n            children: \"unordered_map<int, int>\"\n          }), \".\"]\n        }), _jsxs(_components.h3, {\n          id: \"another-hash-function\",\n          children: [_jsx(_components.a, {\n            href: \"#another-hash-function\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Another Hash Function\"]\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"Benq (from KACTL)\",\n            title: \"HashMap\",\n            url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/STL%20(5)/HashMap.h\",\n            starred: true\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"struct chash { /// use most bits rather than just the lowest ones\\r\\n\\tconst uint64_t C = ll(2e18*PI)+71; // large odd number\\r\\n\\tconst int RANDOM = rng(); // random 32-bit number\\r\\n\\tll operator()(ll x) const {\\r\\n\\t\\t// https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\\r\\n\\t\\treturn __builtin_bswap64((x^RANDOM)*C);\\r\\n\\t}\\r\\n};\\r\\ntemplate<class K,class V> using um = unordered_map<K,V,chash>;\\n\"\n          })\n        }), _jsx(IncompleteSection, {\n          children: _jsx(_components.p, {\n            children: \"(explain assumptions that are required for this to work)\"\n          })\n        })]\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  redirects,\n  title,\n  author,\n  contributors,\n  description,\n  frequency,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"(Optional) More on Unordered Sets & Maps","author":"Darren Yao, Benjamin Qi","contributors":"Neo Wang, Nathan Gong","id":"unordered-map","prerequisites":["intro-sets","string-hashing"],"description":"Maintaining collections of distinct elements with hashing.","frequency":1},"parent":{"name":"Unordered_Map","relativePath":"4_Gold/Unordered_Map.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Hashing","slug":"hashing"},{"depth":2,"value":"Custom Hashing","slug":"custom-hashing"},{"depth":2,"value":"Hacking","slug":"hacking"},{"depth":3,"value":"Another Hash Function","slug":"another-hash-function"}],"java":[{"depth":2,"value":"Hashing","slug":"hashing"},{"depth":2,"value":"Custom Hashing","slug":"custom-hashing"},{"depth":2,"value":"Hacking","slug":"hacking"}],"py":[{"depth":2,"value":"Hashing","slug":"hashing"},{"depth":2,"value":"Custom Hashing","slug":"custom-hashing"},{"depth":2,"value":"Hacking","slug":"hacking"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"unordered-map"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}