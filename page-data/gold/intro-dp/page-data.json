{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/intro-dp",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*Solutions for most of these problems can be found in Chapter 7 of CPH.\n*/\n/*Dynamic Programming is a huge topic, so if you want more practice,*/\n/*Here are some other classical problemsets that we found interesting.*/\n/*Finish with some more challenging Dynamic Programming problems!*/\n/*Can be very difficult.*/\n/*You might want to try easier tasks in the next few modules first.*/\n/*so skip around if you want.*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"intro-dp\", title = \"Introduction to DP\", author = \"Michael Cao, Benjamin Qi, Neo Wang\", prerequisites = [\"complete-rec\", \"modular\"], description = \"Speeding up naive recursive solutions with memoization.\", frequency = 4;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Info: _missingComponent(\"Info\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    MATHDIV: _missingComponent(\"MATHDIV\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {HeaderLink, Resources, Resource, Info, MATHSPAN, FocusProblem, MATHDIV, LanguageSection, CPPSection, JavaSection, PySection, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Dynamic Programming\"\n      }), \" (DP) is an important algorithmic technique in\\r\\nCompetitive Programming from the gold division to competitions like the\\r\\nInternational Olympiad of Informatics. By breaking down the full task into\\r\\nsub-problems, DP avoids the redundant computations of brute force solutions.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Although it is not too difficult to grasp the general ideas behind DP, the\\r\\ntechnique can be used in a diverse range of problems and is a must-know idea for\\r\\ncompetitors in the USACO Gold division.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"general-resources\",\n      children: [_jsx(_components.a, {\n        href: \"#general-resources\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"General Resources\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"7 - DP\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Great introduction that covers most classical problems. Mentions\\r\\nmemoization.\"\n        })\n      }), _jsx(Resource, {\n        source: \"TC\",\n        title: \"DP from Novice to Advanced\",\n        url: \"dynamic-programming-from-novice-to-advanced\",\n        children: _jsx(_components.p, {\n          children: \"General tutorial, great for all skill levels\"\n        })\n      }), _jsx(Resource, {\n        source: \"CPC\",\n        title: \"6 - DP\",\n        url: \"06_dynamic_programming\",\n        children: _jsx(_components.p, {\n          children: \"Contains examples with nonclassical problems\"\n        })\n      }), _jsx(Resource, {\n        source: \"CP2\",\n        title: \"3.5 - DP\",\n        children: _jsx(_components.p, {\n          children: \"Describes many ways to solve the example problem + additional classical examples\"\n        })\n      }), _jsx(Resource, {\n        source: \"HR@HackerRank\",\n        title: \"DP\",\n        url: \"https://www.hackerrank.com/topics/dynamic-programming\",\n        children: _jsx(_components.p, {\n          children: \"Covers classical problems\"\n        })\n      }), _jsx(Resource, {\n        source: \"AR\",\n        title: \"Dynamic Programming for Computing Contests\",\n        url: \"https://dp-book.com/Dynamic_Programming.pdf\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you prefer watching videos instead, here are some options:\"\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Youtube\",\n        title: \"Errichto DP #1 - Fibonacci, iteration vs recursion\",\n        url: \"https://www.youtube.com/watch?v=YBSt1jYwVfU\",\n        children: _jsx(_components.p, {\n          children: \"Great introduction video\"\n        })\n      }), _jsx(Resource, {\n        source: \"Youtube\",\n        title: \"Errichto DP #2 - Coin change, double counting\",\n        url: \"https://www.youtube.com/watch?v=1mtvm2ubHCY\",\n        children: _jsx(_components.p, {\n          children: \"Errichto DP video regarding coin change\"\n        })\n      }), _jsx(Resource, {\n        source: \"Youtube\",\n        title: \"Errichto DP #3 - Line of Wines\",\n        url: \"https://www.youtube.com/watch?v=pwpOC1dph6U\",\n        children: _jsx(_components.p, {\n          children: \"Errichto DP problem editorial\"\n        })\n      }), _jsx(Resource, {\n        source: \"Youtube\",\n        title: \"WilliamFiset DP Videos\",\n        url: \"https://www.youtube.com/watch?v=_tur2nPkIKo&list=PLDV1Zeh2NRsAsbafOroUBnNV8fhZa7P4u\",\n        children: _jsx(_components.p, {\n          children: \"Animated DP videos that pertain to interview questions\"\n        })\n      })]\n    }), \"\\n\", _jsx(Info, {\n      title: \"Pro Tip\",\n      children: _jsxs(_components.p, {\n        children: [\"It's usually a good idea to write a slower solution first. For example, if the\\r\\ncomplexity required for full points is \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" and you come up with a\\r\\nsimple \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N^2)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" solution, then you should definitely type that up\\r\\nfirst and earn some partial credit. Afterwards, you can rewrite parts of your\\r\\nslow solution until it is of the desired complexity. The slow solution might\\r\\nalso serve as something to \", _jsx(_components.a, {\n          href: \"/general/debugging-lang#stress-testing\",\n          children: \"stress test\"\n        }), \"\\r\\nagainst.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"example---frog-1\",\n      children: [_jsx(_components.a, {\n        href: \"#example---frog-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example - Frog 1\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"focus\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The problem asks us to compute the minimum total cost it takes for a frog to\\r\\ntravel from stone \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" to stone \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N (N \\\\le 10^5)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">N (N \\\\le 10^5)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">5</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" given that the frog can only\\r\\njump a distance of one or two. The cost to travel between any two stones \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" and\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \" is given by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"|h_i - h_j|\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">∣</mi><msub><mi>h</mi><mi>i</mi></msub><mo>−</mo><msub><mi>h</mi><mi>j</mi></msub><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">|h_i - h_j|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0361em;vertical-align:-0.2861em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"h_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">h_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8444em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" represents the height of stone \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"without-dynamic-programming\",\n      children: [_jsx(_components.a, {\n        href: \"#without-dynamic-programming\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Without Dynamic Programming\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(2^N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mn>2</mn><mi>N</mi></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(2^N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0913em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8413em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since there are only two options, we can use recursion to compute what would\\r\\nhappen if we jumped either \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" stone, or \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \" stones. There are two\\r\\npossibilities, so recursively computing would require computing both a left and\\r\\nright subtree. Therefore, for every additional jump, each branch splits into\\r\\ntwo, which results in an exponential time complexity.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, this can be sped up\\r\\nwith dynamic programming by keeping track of \\\"optimal states\\\" in order to avoid\\r\\ncalculating states multiple times. For example, recursively calculating jumps of length\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1,2,1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1,2,1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8389em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2,1,2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2,1,2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8389em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \" reuses the state of stone \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \". Dynamic programming provides\\r\\nthe mechanism to cache such states.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"with-dynamic-programming\",\n      children: [_jsx(_components.a, {\n        href: \"#with-dynamic-programming\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"With Dynamic Programming\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are only two options: jumping once, or jumping twice. Define\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" as the minimum cost to reach stone \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \". Therefore,\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[i+1]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i+1]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" must represent the next stone, and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[i+2]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo>+</mo><mn>2</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i+2]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" must\\r\\nrepresent the stone after that. Then, our transitions are as follows at stone\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" must be:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Jump one stone, incurring a cost of \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"|\\\\text{height}_i - \\\\text{height}_{i+1}|\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">∣</mi><msub><mtext>height</mtext><mi>i</mi></msub><mo>−</mo><msub><mtext>height</mtext><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">|\\\\text{height}_i - \\\\text{height}_{i+1}|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">height</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2175em;\\\"><span style=\\\"top:-2.4559em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2441em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0525em;vertical-align:-0.3025em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">height</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2175em;\\\"><span style=\\\"top:-2.4559em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mbin mtight\\\">+</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3025em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n          }), \":\"]\n        }), \"\\n\", _jsx(MATHDIV, {\n          className: \"math math-display\",\n          latex: \"\\\\texttt{dp}[i + 1] = \\\\min(\\\\texttt{dp}[i + 1], \\\\texttt{dp}[i] + |\\\\text{height}_i - \\\\text{height}_{i + 1}|)\",\n          children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo separator=\\\"true\\\">,</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mi mathvariant=\\\"normal\\\">∣</mi><msub><mtext>height</mtext><mi>i</mi></msub><mo>−</mo><msub><mtext>height</mtext><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi mathvariant=\\\"normal\\\">∣</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i + 1] = \\\\min(\\\\texttt{dp}[i + 1], \\\\texttt{dp}[i] + |\\\\text{height}_i - \\\\text{height}_{i + 1}|)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">min</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">height</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2175em;\\\"><span style=\\\"top:-2.4559em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2441em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0525em;vertical-align:-0.3025em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">height</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2175em;\\\"><span style=\\\"top:-2.4559em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mbin mtight\\\">+</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3025em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\">∣</span><span class=\\\"mclose\\\">)</span></span></span></span></span>\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Jump two stones, incurring a cost of\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"|\\\\text{height}_i - \\\\text{height}_{i + 2}|\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">∣</mi><msub><mtext>height</mtext><mi>i</mi></msub><mo>−</mo><msub><mtext>height</mtext><mrow><mi>i</mi><mo>+</mo><mn>2</mn></mrow></msub><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">|\\\\text{height}_i - \\\\text{height}_{i + 2}|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">height</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2175em;\\\"><span style=\\\"top:-2.4559em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2441em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0525em;vertical-align:-0.3025em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">height</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2175em;\\\"><span style=\\\"top:-2.4559em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mbin mtight\\\">+</span><span class=\\\"mord mtight\\\">2</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3025em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n          }), \":\"]\n        }), \"\\n\", _jsx(MATHDIV, {\n          className: \"math math-display\",\n          latex: \"\\\\texttt{dp}[i + 2] = \\\\min(\\\\texttt{dp}[i + 2], \\\\texttt{dp}[i] + |\\\\text{height}_i - \\\\text{height}_{i + 2}|)\",\n          children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo>+</mo><mn>2</mn><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo>+</mo><mn>2</mn><mo stretchy=\\\"false\\\">]</mo><mo separator=\\\"true\\\">,</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mi mathvariant=\\\"normal\\\">∣</mi><msub><mtext>height</mtext><mi>i</mi></msub><mo>−</mo><msub><mtext>height</mtext><mrow><mi>i</mi><mo>+</mo><mn>2</mn></mrow></msub><mi mathvariant=\\\"normal\\\">∣</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i + 2] = \\\\min(\\\\texttt{dp}[i + 2], \\\\texttt{dp}[i] + |\\\\text{height}_i - \\\\text{height}_{i + 2}|)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">min</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">height</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2175em;\\\"><span style=\\\"top:-2.4559em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2441em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0525em;vertical-align:-0.3025em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">height</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2175em;\\\"><span style=\\\"top:-2.4559em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mbin mtight\\\">+</span><span class=\\\"mord mtight\\\">2</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3025em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\">∣</span><span class=\\\"mclose\\\">)</span></span></span></span></span>\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can start with the base case that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[1] = 0\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[1] = 0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n      }), \", since the frog is\\r\\nalready on that square, and proceed to calculate\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[1], \\\\texttt{dp}[2], \\\\ldots \\\\texttt{dp}[N]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo separator=\\\"true\\\">,</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mn>2</mn><mo stretchy=\\\"false\\\">]</mo><mo separator=\\\"true\\\">,</mo><mo>…</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>N</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[1], \\\\texttt{dp}[2], \\\\ldots \\\\texttt{dp}[N]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". Note that in the code\\r\\nwe ignore \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[i]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" if \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i>N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i&gt;N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6986em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAX_N = 1e5;\\r\\n\\r\\n// height is 1-indexed so it can match up with dp\\r\\nint height[MAX_N + 1];\\r\\n// dp[N] is the minimum cost to get to the Nth stone\\r\\nint dp[MAX_N + 1];\\r\\n\\r\\nint main() {\\r\\n\\tint N;\\r\\n\\tcin >> N;\\r\\n\\tfor (int i = 1; i <= N; i++) {\\r\\n\\t\\tcin >> height[i];\\r\\n\\t}\\r\\n\\r\\n\\t// dp[1] = 0 is our base case since we're already at the first stone\\r\\n\\tdp[1] = 0;\\r\\n\\tfor (int i = 2; i <= N; i++) {\\r\\n\\t\\tdp[i] = INT32_MAX;  // initially set our values to INF\\r\\n\\t}\\r\\n\\tfor (int i = 1; i <= N; i++) {\\r\\n\\t\\tif (i + 1 <= N) {\\r\\n\\t\\t\\tdp[i + 1] = min(dp[i + 1], dp[i] + abs(height[i] - height[i + 1]));\\r\\n\\t\\t}\\r\\n\\t\\tif (i + 2 <= N) {\\r\\n\\t\\t\\tdp[i + 2] = min(dp[i + 2], dp[i] + abs(height[i] - height[i + 2]));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tcout << dp[N] << endl;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\n\\r\\nimport java.util.*;\\r\\n\\r\\n\\r\\npublic class Main {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\r\\n\\t\\t// height is 1-indexed so it can match up with dp\\r\\n\\t\\tint[] height = new int[N + 1];\\r\\n\\t\\tfor (int i = 1; i <= N; ++i) {\\r\\n\\t\\t\\theight[i] = io.nextInt();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// dp[N] is the minimum cost to get to the Nth stone\\r\\n\\t\\tint[] dp = new int[N + 1];\\r\\n\\r\\n\\t\\t// dp[1] = 0 is our base case since we're already at the first stone\\r\\n\\t\\tdp[1] = 0;\\r\\n\\t\\tfor (int i = 2; i <= N; i++) {\\r\\n\\t\\t\\tdp[i] = Integer.MAX_VALUE;  // initially set our values to INF\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 1; i <= N; ++i) {\\r\\n\\t\\t\\tif (i + 1 <= N) {\\r\\n\\t\\t\\t\\tdp[i + 1] = Math.min(\\r\\n\\t\\t\\t\\t\\tdp[i + 1], dp[i] + Math.abs(height[i] - height[i + 1])\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (i + 2 <= N) {\\r\\n\\t\\t\\t\\tdp[i + 2] = Math.min(\\r\\n\\t\\t\\t\\t\\tdp[i + 2], dp[i] + Math.abs(height[i] - height[i + 2])\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tSystem.out.println(dp[N]);\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"N = int(input())\\r\\n# height is 1-indexed so it can match up with dp\\r\\nheight = [0] + [int(s) for s in input().split()]\\r\\nassert N == len(height) - 1\\r\\n\\r\\n\\\"\\\"\\\"\\r\\ndp[N] is the minimum cost to get to the Nth stone\\r\\n(we initially set all values to INF)\\r\\n\\\"\\\"\\\"\\r\\ndp = [float(\\\"inf\\\") for _ in range(N + 1)]\\r\\n# dp[1] = 0 is our base case since we're already at the first stone\\r\\ndp[1] = 0\\r\\n\\r\\nfor i in range(1, N + 1):\\r\\n    if i + 1 <= stone_num:\\r\\n        dp[i + 1] = min(dp[i + 1], dp[i] + abs(height[i] - height[i + 1]))\\r\\n    if i + 2 <= stone_num:\\r\\n        dp[i + 2] = min(dp[i + 2], dp[i] + abs(height[i] - height[i + 2]))\\r\\n\\r\\nprint(dp[stone_num])\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"classical-problems\",\n      children: [_jsx(_components.a, {\n        href: \"#classical-problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Classical Problems\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The next few modules provide examples of some classical problems: Dynamic\\r\\nProgramming problems which are well known. However, classical doesn't\\r\\nnecessarily mean common. Since so many competitors know about these problems,\\r\\nproblemsetters rarely set direct applications of them.\"\n    }), \"\\n\", \"\\n\", _jsxs(_components.h3, {\n      id: \"problemsets\",\n      children: [_jsx(_components.a, {\n        href: \"#problemsets\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problemsets\"]\n    }), \"\\n\", \"\\n\", \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CSES\",\n        title: \"DP Section\",\n        url: \"https://cses.fi/problemset/list/\",\n        starred: true,\n        children: _jsxs(_components.p, {\n          children: [\"You should know how to do all of these once you're finished with the DP\\r\\nsection. Editorials are available\", ' ', \"\\r\\n\", _jsx(\"a\", {\n            href: \"https://codeforces.com/blog/entry/70018\",\n            children: \"here\"\n          }), \".\"]\n        })\n      }), _jsx(Resource, {\n        source: \"AC@AtCoder\",\n        title: \"DP Contest\",\n        url: \"https://atcoder.jp/contests/dp/tasks\",\n        starred: true,\n        children: _jsxs(_components.p, {\n          children: [\"Some tasks are beyond the scope of Gold. Editorials are available \", _jsx(_components.a, {\n            href: \"https://nwatx.me/post/atcoderdp\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"here\"\n          }), \".\"]\n        })\n      }), _jsx(Resource, {\n        source: \"CF@Codeforces\",\n        title: \"Beginner DP Contest\",\n        url: \"https://codeforces.com/blog/entry/86532\",\n        children: _jsxs(_components.p, {\n          children: [\"Beginner-friendly classical problems. Some tasks requires input/output\\r\\nfiles. The solutions can be found \", _jsx(\"a\", {\n            href: \"https://github.com/Farrius/div3_dp_practice\",\n            children: \"here\"\n          })]\n        })\n      }), _jsx(Resource, {\n        source: \"CF@Codeforces\",\n        title: \"DP Practice Problems\",\n        url: \"https://codeforces.com/blog/entry/67679\",\n        children: _jsx(_components.p, {\n          children: \"Good practice problems. You should be able to do most of these after completing the Gold DP module. Some problems might be out of the scope for gold.\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some of these problems will be mentioned in the next few modules.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"introductory-problems\",\n      children: [_jsx(_components.a, {\n        href: \"#introductory-problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Introductory Problems\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Easier problems that don't require many optimizations or complex states.\"\n    }), \"\\n\", _jsx(Info, {\n      title: \"Note - Ordering of DP Modules\",\n      children: _jsxs(_components.p, {\n        children: [\"You are \", _jsx(_components.strong, {\n          children: \"not\"\n        }), \" expected to complete all of the problems below before starting\\r\\nthe other DP modules. In particular, we recommend that you begin with the \\\"easy\\\"\\r\\nproblems from the \", _jsx(_components.a, {\n          href: \"/gold/knapsack\",\n          children: \"knapsack\"\n        }), \" module if this is your first\\r\\nencounter with DP.\"]\n      })\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"usacoEasy\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"harder-usaco\",\n      children: [_jsx(_components.a, {\n        href: \"#harder-usaco\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Harder USACO\"]\n    }), \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", _jsx(Problems, {\n      problems: \"usacoPast\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Introduction to DP","author":"Michael Cao, Benjamin Qi, Neo Wang","contributors":null,"id":"intro-dp","prerequisites":["complete-rec","modular"],"description":"Speeding up naive recursive solutions with memoization.","frequency":4},"parent":{"name":"Intro_DP","relativePath":"4_Gold/Intro_DP.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"General Resources","slug":"general-resources"},{"depth":2,"value":"Example - Frog 1","slug":"example---frog-1"},{"depth":3,"value":"Without Dynamic Programming","slug":"without-dynamic-programming"},{"depth":3,"value":"With Dynamic Programming","slug":"with-dynamic-programming"},{"depth":2,"value":"Classical Problems","slug":"classical-problems"},{"depth":3,"value":"Problemsets","slug":"problemsets"},{"depth":2,"value":"Introductory Problems","slug":"introductory-problems"},{"depth":2,"value":"Harder USACO","slug":"harder-usaco"}],"java":[{"depth":2,"value":"General Resources","slug":"general-resources"},{"depth":2,"value":"Example - Frog 1","slug":"example---frog-1"},{"depth":3,"value":"Without Dynamic Programming","slug":"without-dynamic-programming"},{"depth":3,"value":"With Dynamic Programming","slug":"with-dynamic-programming"},{"depth":2,"value":"Classical Problems","slug":"classical-problems"},{"depth":3,"value":"Problemsets","slug":"problemsets"},{"depth":2,"value":"Introductory Problems","slug":"introductory-problems"},{"depth":2,"value":"Harder USACO","slug":"harder-usaco"}],"py":[{"depth":2,"value":"General Resources","slug":"general-resources"},{"depth":2,"value":"Example - Frog 1","slug":"example---frog-1"},{"depth":3,"value":"Without Dynamic Programming","slug":"without-dynamic-programming"},{"depth":3,"value":"With Dynamic Programming","slug":"with-dynamic-programming"},{"depth":2,"value":"Classical Problems","slug":"classical-problems"},{"depth":3,"value":"Problemsets","slug":"problemsets"},{"depth":2,"value":"Introductory Problems","slug":"introductory-problems"},{"depth":2,"value":"Harder USACO","slug":"harder-usaco"}]}},"moduleProblemLists":{"problemLists":[{"listId":"focus","problems":[{"uniqueId":"ac-frog1","name":"Frog 1","url":"https://atcoder.jp/contests/dp/tasks/dp_a","source":"AC","difficulty":"Easy","isStarred":false,"tags":["DP"],"solution":{"kind":"label","label":"Check AC","labelTooltip":"The editorial button is right next to the problem title. If \"there is no editorial yet,\" check the \"Overall Editorial\" PDF below.","url":null,"sketch":null}}]},{"listId":"usacoEasy","problems":[{"uniqueId":"cf-1418C","name":"Mortal Kombat Tower","url":"https://codeforces.com/problemset/problem/1418/C","source":"CF","difficulty":"Easy","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-694","name":"Hoof Paper Scissors","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=694","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-993","name":"Time is Mooney","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=993","source":"Gold","difficulty":"Easy","isStarred":true,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-863","name":"Teamwork","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=863","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-945","name":"Snakes","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=945","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"dmoj-phidias","name":"Phidias","url":"https://dmoj.ca/problem/ioi04p4","source":"DMOJ","difficulty":"Normal","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-1472G","name":"Moving to the Capital","url":"https://codeforces.com/contest/1472/problem/G","source":"CF","difficulty":"Hard","isStarred":false,"tags":["DP","BFS"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]},{"listId":"usacoPast","problems":[{"uniqueId":"usaco-622","name":"Circular Barn Revisited","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=622","source":"Gold","difficulty":"Hard","isStarred":true,"tags":["DP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_cbarn2_gold_feb16.html","sketch":null}},{"uniqueId":"usaco-815","name":"Taming the Herd","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=815","source":"Gold","difficulty":"Hard","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-971","name":"Moortal Cowmbat","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=971","source":"Gold","difficulty":"Hard","isStarred":false,"tags":["DP","Prefix Sums","APSP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-673","name":"Team Building","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=673","source":"Plat","difficulty":"Hard","isStarred":false,"tags":["DP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_team_platinum_dec16.html","sketch":null}},{"uniqueId":"usaco-791","name":"Stamp Painting","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=791","source":"Gold","difficulty":"Very Hard","isStarred":false,"tags":["DP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_spainting_gold_jan18.html","sketch":null}},{"uniqueId":"usaco-1066","name":"Bovine Genetics","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1066","source":"Gold","difficulty":"Very Hard","isStarred":false,"tags":["DP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_prob2_gold_dec20.html","sketch":null}}]}]}},"pageContext":{"id":"intro-dp"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}