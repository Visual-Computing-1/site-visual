{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/faster-hashmap",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"faster-hashmap\", title = \"(Optional) A Faster Hash Table in C++\", author = \"Benjamin Qi\", description = \"Introduces gp_hash_table.\", frequency = 1, prerequisites = [\"unordered-map\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    a: \"a\",\n    strong: \"strong\",\n    h3: \"h3\",\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    Warning: _missingComponent(\"Warning\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {Resources, Resource, HeaderLink, FocusProblem, Spoiler, Warning, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        url: \"https://codeforces.com/blog/entry/60737\",\n        title: \"Chilli - Order of magnitude faster hash tables\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Introduces gp_hash_table\"\n        })\n      }), _jsx(Resource, {\n        source: \"GCC\",\n        url: \"https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/gp_hash_table.html#Resize_Policy566860465\",\n        title: \"gp_hash_table Interface\",\n        children: _jsx(_components.p, {\n          children: \"documentation\"\n        })\n      }), _jsx(Resource, {\n        source: \"Benq (from KACTL)\",\n        title: \"HashMap\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/STL%20(5)/HashMap.h\",\n        starred: true\n      })]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read / writes are much faster than \", _jsx(_components.code, {\n        children: \"unordered_map\"\n      }), \". Its actual size is always a\\r\\npower of 2. The documentation is rather confusing, so I'll just summarize the\\r\\nmost useful functions here.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <ext/pb_ds/assoc_container.hpp>\\r\\nusing namespace __gnu_pbds;\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"unordered-set\",\n      children: [_jsx(_components.a, {\n        href: \"#unordered-set\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Unordered Set\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"gp_hash_table<K,null_type>\"\n      }), \" functions similarly to \", _jsx(_components.code, {\n        children: \"unordered_set<K>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"hacking\",\n      children: [_jsx(_components.a, {\n        href: \"#hacking\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Hacking\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"gp_hash_table\"\n      }), \" is also vulnerable to hacking. The hash function mentioned in\\r\\nthe blog:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();\\r\\nstruct chash {\\r\\n\\tint operator()(int x) const { return x ^ RANDOM; }\\r\\n};\\r\\ngp_hash_table<key, int, chash> table;\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"is easily hackable (see\\r\\n\", _jsx(_components.a, {\n        href: \"https://codeforces.com/blog/entry/60737?#comment-454122\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"neal's comment\"\n      }), \"). To\\r\\navoid this, we can replace \", _jsx(_components.code, {\n        children: \"chash\"\n      }), \" with one of the custom hash functions\\r\\nmentioned \", _jsx(_components.a, {\n        href: \"/gold/unordered-map#another-hash-function\",\n        children: \"previously\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"resizing\",\n      children: [_jsx(_components.a, {\n        href: \"#resizing\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resizing\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Unordered map has\\r\\n\", _jsx(_components.a, {\n        href: \"http://www.cplusplus.com/reference/unordered_map/unordered_map/reserve/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: _jsx(_components.code, {\n          children: \"reserve\"\n        })\n      }), \".\\r\\nCalling this function before inserting any elements can result in a constant\\r\\nfactor speedup.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can modify the declaration of \", _jsx(_components.code, {\n        children: \"gp_hash_table\"\n      }), \" so that it supports the\\r\\n\", _jsx(_components.code, {\n        children: \"resize\"\n      }), \" function, which operates similarly.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"template<class K,class V> using ht = gp_hash_table<\\r\\n\\t\\tK,\\r\\n\\t\\tnull_type,\\r\\n\\t\\thash<K>,\\r\\n\\t\\tequal_to<K>,\\r\\n\\t\\tdirect_mask_range_hashing<>,\\r\\n\\t\\tlinear_probe_fn<>,\\r\\n\\t\\thash_standard_resize_policy<\\r\\n\\t\\t\\thash_exponential_size_policy<>,\\r\\n\\t\\t\\thash_load_check_resize_trigger<>,\\r\\n\\t\\t\\ttrue\\r\\n\\t\\t>\\r\\n>;\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These are the same template arguments as the default \", _jsx(_components.code, {\n        children: \"gp_hash_table\"\n      }), \", except\\r\\n\", _jsx(_components.code, {\n        children: \"false\"\n      }), \" has been changed to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \". This modification allows us to change the\\r\\nactual size of the hash table.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"int main() {\\r\\n\\tht<int,null_type> g; g.resize(5);\\r\\n\\tcout << g.get_actual_size() << \\\"\\\\n\\\"; // 8\\r\\n\\tcout << g.size() << \\\"\\\\n\\\"; // 0\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When calling \", _jsx(_components.code, {\n        children: \"g.resize(x)\"\n      }), \", \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" is rounded up to the nearest power of 2. Then\\r\\nthe actual size of \", _jsx(_components.code, {\n        children: \"g\"\n      }), \" is changed to be equal to \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" (unless \", _jsx(_components.code, {\n        children: \"x < g.size()\"\n      }), \", in\\r\\nwhich case an error is thrown).\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"GCC\",\n        url: \"https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/hash_standard_resize_policy.html\",\n        title: \"Resize Policy\",\n        children: _jsx(_components.p, {\n          children: \"documentation\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Furthermore, if we construct \", _jsx(_components.code, {\n        children: \"g\"\n      }), \" with the following arguments:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"ht<int,null_type> g({},{},{},{},{1<<16});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"then the actual size of \", _jsx(_components.code, {\n        children: \"g\"\n      }), \" is always at least \", _jsx(_components.code, {\n        children: \"1<<16\"\n      }), \" (regardless of calls to\\r\\n\", _jsx(_components.code, {\n        children: \"resize\"\n      }), \"). The last argument \", _jsx(_components.strong, {\n        children: \"must\"\n      }), \" be a power of 2 (or else errors will be\\r\\nthrown).\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solving-3sum\",\n      children: [_jsx(_components.a, {\n        href: \"#solving-3sum\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solving 3SUM\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"three\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since all the values are quite small, you can use an array instead of a hashmap.\\r\\nBut if you didn't read the constraints carefully enough, you're in luck!\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsx(Warning, {\n        children: _jsx(_components.p, {\n          children: \"Passes in 1180ms when initial capacity is specified, TLEs when it is not.\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <bits/stdc++.h> // see C++ Tips & Tricks\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\n\\r\\nusing vi = vector<int>;\\r\\n#define pb push_back\\r\\n#define rsz resize\\r\\n#define all(x) begin(x), end(x)\\r\\n#define sz(x) (int)(x).size()\\r\\n\\r\\nusing pi = pair<int,int>;\\r\\n#define f first\\r\\n#define s second\\r\\n#define mp make_pair\\r\\n\\r\\nvoid setIO(string name = \\\"\\\") { // name is nonempty for USACO file I/O\\r\\n\\tios_base::sync_with_stdio(0); cin.tie(0); // see Fast Input & Output\\r\\n\\t// alternatively, cin.tie(0)->sync_with_stdio(0);\\r\\n\\tif (sz(name)) {\\r\\n\\t\\tfreopen((name+\\\".in\\\").c_str(), \\\"r\\\", stdin); // see Input & Output\\r\\n\\t\\tfreopen((name+\\\".out\\\").c_str(), \\\"w\\\", stdout);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n#include <ext/pb_ds/assoc_container.hpp>\\r\\nusing namespace __gnu_pbds;\\r\\n\\r\\nint N,Q;\\r\\nlong long ans[5000][5000];\\r\\nvector<int> A;\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"threesum\\\");\\r\\n\\tcin >> N >> Q;\\r\\n\\tA.resize(N); for (int i = 0; i < N; ++i) cin >> A[i];\\r\\n\\tfor (int i = 0; i < N; ++i) {\\r\\n\\t\\tgp_hash_table<int,int> g({},{},{},{},{1<<13});\\r\\n\\t\\t// initialize with certain capacity, must be power of 2\\r\\n\\t\\tfor (int j = i+1; j < N; ++j) {\\r\\n\\t\\t\\tint res = -A[i]-A[j];\\r\\n\\t\\t\\tauto it = g.find(res);\\r\\n\\t\\t\\tif (it != end(g)) ans[i][j] = it->second;\\r\\n\\t\\t\\tg[A[j]] ++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i = N-1; i >= 0; --i) for (int j = i+1; j < N; ++j)\\r\\n\\t\\tans[i][j] += ans[i+1][j]+ans[i][j-1]-ans[i+1][j-1];\\r\\n\\tfor (int i = 0; i < Q; ++i) {\\r\\n\\t\\tint a,b; cin >> a >> b;\\r\\n\\t\\tcout << ans[a-1][b-1] << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"four\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  frequency,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"(Optional) A Faster Hash Table in C++","author":"Benjamin Qi","contributors":null,"id":"faster-hashmap","prerequisites":["unordered-map"],"description":"Introduces gp_hash_table.","frequency":1},"parent":{"name":"Faster_Hash","relativePath":"4_Gold/Faster_Hash.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Unordered Set","slug":"unordered-set"},{"depth":2,"value":"Hacking","slug":"hacking"},{"depth":2,"value":"Resizing","slug":"resizing"},{"depth":3,"value":"Solving 3SUM","slug":"solving-3sum"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Unordered Set","slug":"unordered-set"},{"depth":2,"value":"Hacking","slug":"hacking"},{"depth":2,"value":"Resizing","slug":"resizing"},{"depth":3,"value":"Solving 3SUM","slug":"solving-3sum"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Unordered Set","slug":"unordered-set"},{"depth":2,"value":"Hacking","slug":"hacking"},{"depth":2,"value":"Resizing","slug":"resizing"},{"depth":3,"value":"Solving 3SUM","slug":"solving-3sum"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"three","problems":[{"uniqueId":"usaco-994","name":"3SUM","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=994","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["Prefix Sums"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_threesum_gold_jan20.html","sketch":null}}]},{"listId":"four","problems":[{"uniqueId":"cses-1642","name":"Sum of Four Values","url":"https://cses.fi/problemset/task/1642","source":"CSES","difficulty":"Normal","isStarred":false,"tags":["Set"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"faster-hashmap"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}