{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/PURS",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*<Resource source=\"PAPS\" title=\"11.2.3 - Segment Trees\" />*/\n/*### Implementations\n\n<LanguageSection>\n\n<CPPSection>\n\n```cpp\ntemplate<class T> struct Seg { // comb(ID,b) = b\nconst T ID = 0; T comb(T a, T b) { return a+b; }\nint n; vector<T> seg;\nvoid init(int _n) { n = _n; seg.assign(2*n,ID); }\nvoid pull(int p) { seg[p] = comb(seg[2*p],seg[2*p+1]); }\nvoid upd(int p, T val) { // set val at position p\nseg[p += n] = val; for (p /= 2; p; p /= 2) pull(p); }\nT query(int l, int r) { // sum on interval [l, r]\nT ra = ID, rb = ID;\nfor (l += n, r += n+1; l < r; l /= 2, r /= 2) {\nif (l&1) ra = comb(ra,seg[l++]);\nif (r&1) rb = comb(seg[--r],rb);\n}\nreturn comb(ra,rb);\n}\n};\n```\n\n</CPPSection>\n\n<JavaSection>\n\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class segtree {\npublic static final int N = (int) 1e5; // limit for array size\npublic static int n; // array size\npublic static long t[] = new long[2 * N];\npublic static void main(String[] args) throws Exception {\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\nn = Integer.parseInt(br.readLine());\nStringTokenizer st = new StringTokenizer(br.readLine());\nfor (int i = 0; i < n; i++) {\nt[i + n] = Integer.parseInt(st.nextToken());\n}\nbuild();\nSystem.out.println(query(1, 3));\nmodify(1, 2);\nSystem.out.println(query(1, 3));\n\n}\n\npublic static void build() { // build the tree\nfor (int i = n - 1; i > 0; --i) t[i] = t[i << 1] + t[i << 1 | 1];\n}\n\npublic static void modify(int p, long value) { // set value at position p\nfor (t[p += n] = value; p > 1; p >>= 1) t[p >> 1] = t[p] + t[p ^ 1];\n}\n\npublic static long query(int l, int r) { // sum on interval [l, r) (0-INDEXED)\nlong res = 0;\nfor (l += n, r += n; l < r; l >>= 1, r >>= 1) {\nif ((l & 1) != 0) res += t[l++];\nif ((r & 1) != 0) res += t[--r];\n}\nreturn res;\n}\n}\n```\n\n</JavaSection>\n\n</LanguageSection>*/\n/*\n\n### Implementations\n\n<LanguageSection>\n\n<CPPSection>\n\n\n</CPPSection>\n\n<JavaSection>\n\n<IncompleteSection>\n\nhow to run this code ...\n\n</IncompleteSection>\n\n```java\npublic static long[] fwt;\npublic static long query(int a, int b) {\nreturn sum(b) - sum(a - 1);\n}\npublic static long sum(int i) {\nlong sum = 0;\nwhile (i > 0) {\nsum += fwt[i];\ni -= (i & -i); // least significant bit\n}\nreturn sum;\n}\npublic static void update(int i, long v) {\nwhile (i < fwt.length) {\nfwt[i] += v;\ni += (i & -i);\n}\n}\n```\n\n</JavaSection>\n\n</LanguageSection>*/\n/*<Resource source=\"GFG\" url=\"order-statistic-tree-using-fenwick-tree-bit\" title=\"Order Statistic Tree using BIT\"> log^2 N </Resource>*/\n/*Haircut, Balanced Photo, and Circle Cross are just variations on inversion counting.*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"PURS\", title = \"Point Update Range Sum\", author = \"Benjamin Qi, Dong Liu, Nathan Gong\", contributors = \"Andrew Wang\", prerequisites = [\"prefix-sums\"], description = \"Introduces Segment Tree, Binary Indexed Tree, and C++ Order Statistic Tree.\", frequency = 3;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    h4: \"h4\",\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Info: _missingComponent(\"Info\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {FocusProblem, MATHSPAN, HeaderLink, Info, Resources, Resource, LanguageSection, CPPSection, JavaSection, Spoiler, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(FocusProblem, {\n      problem: \"sample\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Most gold range query problems require you to support following tasks in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time each on an array of size \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Update the element at a single position (point).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Query the sum of some consecutive subarray.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Both \", _jsx(_components.strong, {\n        children: \"segment trees\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"binary indexed trees\"\n      }), \" can accomplish this.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"segment-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#segment-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Segment Tree\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"segSam\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.strong, {\n        children: \"segment tree\"\n      }), \" allows you to do point update and range query in\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time each for \", _jsx(_components.strong, {\n        children: \"any\"\n      }), \" associative operation, not just\\r\\nsummation.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"resources\",\n      children: [_jsx(_components.a, {\n        href: \"#resources\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resources\"]\n    }), \"\\n\", _jsx(Info, {\n      title: \"Pro Tip\",\n      children: _jsxs(_components.p, {\n        children: [\"You can skip more advanced applications such as \", _jsx(_components.strong, {\n          children: \"lazy propagation\"\n        }), \" for now.\\r\\nThey will be covered in \", _jsx(_components.a, {\n          href: \"/plat/seg-ext\",\n          children: \"platinum\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        title: \"EDU: Segment Tree Pt 1 Steps 1, 3, 4\",\n        url: \"https://codeforces.com/edu/course/2/lesson/4/1\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"basic operations, inversion counting\"\n        })\n      }), _jsx(Resource, {\n        source: \"CSA\",\n        title: \"Segment Trees\",\n        url: \"segment_trees\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Interactive updates.\"\n        })\n      }), _jsx(Resource, {\n        source: \"CPH\",\n        title: \"9.3 - Segment Trees\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Same implementation as AICash below.\"\n        })\n      }), _jsx(Resource, {\n        source: \"CPC\",\n        title: \"3 - Data Structures\",\n        url: \"03_data_structures\",\n        children: _jsx(_components.p, {\n          children: \"See slides after union-find. Also introduces sqrt bucketing.\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Simplest form of a Segment Tree\",\n        url: \"data_structures/segment_tree.html\",\n        children: _jsx(_components.p, {\n          children: \"\\\"Advanced versions\\\" are covered in Platinum.\"\n        })\n      })]\n    }), \"\\n\", \"\\n\", \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---dynamic-range-minimum-queries\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---dynamic-range-minimum-queries\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Dynamic Range Minimum Queries\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        title: \"AICash - Efficient and easy segment trees\",\n        url: \"18051\",\n        children: _jsx(_components.p, {\n          children: \"simple implementation\"\n        })\n      }), _jsx(Resource, {\n        source: \"Benq\",\n        title: \"SegTree\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/1D%20Range%20Queries%20(9.2)/SegTree%20(9.2).h\",\n        children: _jsx(_components.p, {\n          children: \"based off above\"\n        })\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Note that \", _jsx(_components.code, {\n            children: \"st.init(n+1)\"\n          }), \" allows us to update and query indices in the range\\r\\n\", _jsx(_components.code, {\n            children: \"[0,n+1)=[0,n]\"\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\ntemplate<class T> struct Seg { // comb(ID,b) = b\\r\\n\\tconst T ID = 1e18; T comb(T a, T b) { return min(a,b); }\\r\\n\\tint n; vector<T> seg;\\r\\n\\tvoid init(int _n) { n = _n; seg.assign(2*n,ID); }\\r\\n\\tvoid pull(int p) { seg[p] = comb(seg[2*p],seg[2*p+1]); }\\r\\n\\tvoid upd(int p, T val) { // set val at position p\\r\\n\\t\\tseg[p += n] = val; for (p /= 2; p; p /= 2) pull(p); }\\r\\n\\tT query(int l, int r) {\\t// min on interval [l, r]\\r\\n\\t\\tT ra = ID, rb = ID;\\r\\n\\t\\tfor (l += n, r += n+1; l < r; l /= 2, r /= 2) {\\r\\n\\t\\t\\tif (l&1) ra = comb(ra,seg[l++]);\\r\\n\\t\\t\\tif (r&1) rb = comb(seg[--r],rb);\\r\\n\\t\\t}\\r\\n\\t\\treturn comb(ra,rb);\\r\\n\\t}\\r\\n};\\r\\n\\r\\nSeg<int> st;\\r\\n\\r\\nint main() {\\r\\n\\tint n, q; cin >> n >> q;\\r\\n\\tst.init(n+1);\\r\\n\\tfor(int i=1; i<=n; i++) {\\r\\n\\t\\tint a; cin >> a;\\r\\n\\t\\tst.upd(i, a);\\r\\n\\t}\\r\\n\\tfor(int i=1; i<=q; i++) {\\r\\n\\t\\tint t, a, b; cin >> t >> a >> b;\\r\\n\\t\\tif (t==1) st.upd(a,b);\\r\\n\\t\\telse cout << st.query(a,b) <<\\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class DynamicRangeMinQueries {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint q = io.nextInt();\\r\\n\\r\\n\\t\\tSegmentTree seg = new SegmentTree(n);\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tseg.set(i, io.nextInt());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < q; i++) {\\r\\n\\t\\t\\tint type = io.nextInt();\\r\\n\\t\\t\\tif (type == 1) {\\r\\n\\t\\t\\t\\tint k = io.nextInt()-1;\\r\\n\\t\\t\\t\\tint u = io.nextInt();\\r\\n\\t\\t\\t\\tseg.set(k, u);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tint a = io.nextInt()-1;\\r\\n\\t\\t\\t\\tint b = io.nextInt()-1;\\r\\n\\t\\t\\t\\tio.println(seg.min(a, b));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tpublic static class SegmentTree {\\r\\n\\t\\tprivate int[] tree;\\r\\n\\t\\tprivate int n;\\r\\n\\r\\n\\t\\tpublic SegmentTree(int n) {\\r\\n\\t\\t\\tthis.n = n;\\r\\n\\t\\t\\ttree = new int[n*2];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic int min(int a, int b) {\\r\\n\\t\\t\\ta += n;\\r\\n\\t\\t\\tb += n;\\r\\n\\t\\t\\tint min = Integer.MAX_VALUE;\\r\\n\\t\\t\\twhile (a <= b) {\\r\\n\\t\\t\\t\\tif (a%2 == 1) min = Math.min(min, tree[a++]);\\r\\n\\t\\t\\t\\tif (b%2 == 0) min = Math.min(min, tree[b--]);\\r\\n\\t\\t\\t\\ta /= 2;\\r\\n\\t\\t\\t\\tb /= 2;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn min;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic void set(int index, int val) {\\r\\n\\t\\t\\tindex += n;\\r\\n\\t\\t\\ttree[index] = val;\\r\\n\\t\\t\\tfor (index /= 2; index >= 1; index /= 2) {\\r\\n\\t\\t\\t\\ttree[index] = Math.min(tree[2*index], tree[2*index+1]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---dynamic-range-sum-queries\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---dynamic-range-sum-queries\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Dynamic Range Sum Queries\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Compared to the previous problem, all we need to change are \", _jsx(_components.code, {\n            children: \"T\"\n          }), \", \", _jsx(_components.code, {\n            children: \"ID\"\n          }), \", and\\r\\n\", _jsx(_components.code, {\n            children: \"comb\"\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\ntemplate<class T> struct Seg { // comb(ID,b) = b\\r\\n\\tconst T ID = 0; T comb(T a, T b) { return a+b; }\\r\\n\\tint n; vector<T> seg;\\r\\n\\tvoid init(int _n) { n = _n; seg.assign(2*n,ID); }\\r\\n\\tvoid pull(int p) { seg[p] = comb(seg[2*p],seg[2*p+1]); }\\r\\n\\tvoid upd(int p, T val) { // set val at position p\\r\\n\\t\\tseg[p += n] = val; for (p /= 2; p; p /= 2) pull(p); }\\r\\n\\tT query(int l, int r) {\\t// sum on interval [l, r]\\r\\n\\t\\tT ra = ID, rb = ID;\\r\\n\\t\\tfor (l += n, r += n+1; l < r; l /= 2, r /= 2) {\\r\\n\\t\\t\\tif (l&1) ra = comb(ra,seg[l++]);\\r\\n\\t\\t\\tif (r&1) rb = comb(seg[--r],rb);\\r\\n\\t\\t}\\r\\n\\t\\treturn comb(ra,rb);\\r\\n\\t}\\r\\n};\\r\\n\\r\\nSeg<long long> st;\\r\\n\\r\\nint main() {\\r\\n\\tint n, q; cin >> n >> q;\\r\\n\\tst.init(n+1);\\r\\n\\tfor(int i=1; i<=n; i++) {\\r\\n\\t\\tint a; cin >> a;\\r\\n\\t\\tst.upd(i, a);\\r\\n\\t}\\r\\n\\tfor(int i=1; i<=q; i++) {\\r\\n\\t\\tint t, a, b; cin >> t >> a >> b;\\r\\n\\t\\tif (t==1) st.upd(a,b);\\r\\n\\t\\telse cout << st.query(a,b) <<\\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Compared to the previous problem, all we need to change is the way we aggregate\\r\\nvalues (change from \", _jsx(_components.code, {\n            children: \"Math.min()\"\n          }), \" to summation) and the data type we use to store\\r\\nthe query (\", _jsx(_components.code, {\n            children: \"int\"\n          }), \" to \", _jsx(_components.code, {\n            children: \"long\"\n          }), \").\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class DynamicRangeSumQueries {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint n = io.nextInt();\\r\\n\\t\\tint q = io.nextInt();\\r\\n\\r\\n\\t\\tSegmentTree seg = new SegmentTree(n);\\r\\n\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\tseg.set(i, io.nextInt());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < q; i++) {\\r\\n\\t\\t\\tint type = io.nextInt();\\r\\n\\t\\t\\tif (type == 1) {\\r\\n\\t\\t\\t\\tint k = io.nextInt()-1;\\r\\n\\t\\t\\t\\tint u = io.nextInt();\\r\\n\\t\\t\\t\\tseg.set(k, u);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tint a = io.nextInt()-1;\\r\\n\\t\\t\\t\\tint b = io.nextInt()-1;\\r\\n\\t\\t\\t\\tio.println(seg.sum(a, b));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic class SegmentTree {\\r\\n\\t\\tprivate long[] tree;\\r\\n\\t\\tprivate int n;\\r\\n\\r\\n\\t\\tpublic SegmentTree(int n) {\\r\\n\\t\\t\\tthis.n = n;\\r\\n\\t\\t\\ttree = new long[n*2];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic long sum(int a, int b) {\\r\\n\\t\\t\\ta += n;\\r\\n\\t\\t\\tb += n;\\r\\n\\t\\t\\tlong sum = 0;\\r\\n\\t\\t\\twhile (a <= b) {\\r\\n\\t\\t\\t\\tif (a%2 == 1) sum += tree[a++];\\r\\n\\t\\t\\t\\tif (b%2 == 0) sum += tree[b--];\\r\\n\\t\\t\\t\\ta /= 2;\\r\\n\\t\\t\\t\\tb /= 2;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn sum;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic void set(int index, int val) {\\r\\n\\t\\t\\tindex += n;\\r\\n\\t\\t\\ttree[index] = val;\\r\\n\\t\\t\\tfor (index /= 2; index >= 1; index /= 2) {\\r\\n\\t\\t\\t\\ttree[index] = tree[2*index] + tree[2*index+1];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"binary-indexed-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#binary-indexed-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Binary Indexed Tree\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Implementation is shorter than segment tree, but maybe more confusing at first\\r\\nglance.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"resources-1\",\n      children: [_jsx(_components.a, {\n        href: \"#resources-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resources\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CSA\",\n        title: \"Fenwick Trees\",\n        url: \"fenwick_trees\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"interactive\"\n        })\n      }), _jsx(Resource, {\n        source: \"CPH\",\n        title: \"9.2, 9.4 - Binary Indexed Tree\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"similar to above\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Fenwick Tree\",\n        url: \"data_structures/fenwick.html\",\n        children: _jsx(_components.p, {\n          children: \"also similar to above\"\n        })\n      }), _jsx(Resource, {\n        source: \"TC\",\n        title: \"Binary Indexed Trees\",\n        url: \"binary-indexed-trees\"\n      })]\n    }), \"\\n\", \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---dynamic-range-sum-queries-with-a-bit\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---dynamic-range-sum-queries-with-a-bit\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Dynamic Range Sum Queries (With a BIT)\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h4, {\n          id: \"solution-1\",\n          children: [_jsx(_components.a, {\n            href: \"#solution-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Solution 1\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\nconst int MX = 2e5+5;\\r\\n\\r\\nint n, q;\\r\\nvector<ll> bit(MX), x(MX);\\r\\n\\r\\nvoid upd(int i, ll v) {\\r\\n\\tfor (; i<=n; i+=i&(-i)) bit[i]+=v;\\r\\n}\\r\\n\\r\\nll qry(int i) {\\r\\n\\tll sum = 0;\\r\\n\\tfor(; i>0; i-=i&(-i)) sum += bit[i];\\r\\n\\treturn sum;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcin >> n >> q;\\r\\n\\tfor(int i=1; i<=n; i++) {\\r\\n\\t\\tcin >> x[i];\\r\\n\\t\\tupd(i, x[i]);\\r\\n\\t}\\r\\n\\tfor(int i=1; i<=q; i++) {\\r\\n\\t\\tint t,a,b; cin >> t >> a >> b;\\r\\n\\t\\tif (t==1) {\\r\\n\\t\\t\\tupd(a, -x[a]); // remove its current value\\r\\n\\t\\t\\tx[a]=b; upd(a, x[a]); // add its new value\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tcout << qry(b)-qry(a-1) << \\\"\\\\n\\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.h4, {\n          id: \"solution-2\",\n          children: [_jsx(_components.a, {\n            href: \"#solution-2\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Solution 2\"]\n        }), _jsx(_components.p, {\n          children: \"Writing a BIT this way has the advantage of generalizing to multiple dimensions.\"\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"CF\",\n            title: \"mouse_wireless - Multi-dimensional BITs with Templates\",\n            url: \"https://codeforces.com/blog/entry/64914\",\n            starred: true\n          }), _jsx(Resource, {\n            source: \"Benq\",\n            title: \"BIT\",\n            url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/1D%20Range%20Queries%20(9.2)/BIT%20(9.2).h\",\n            children: _jsx(_components.p, {\n              children: \"based off above\"\n            })\n          })]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"/**\\r\\n * Description: range sum queries and point updates for $D$ dimensions\\r\\n * Source: https://codeforces.com/blog/entry/64914\\r\\n * Verification: SPOJ matsum\\r\\n * Usage: \\\\texttt{BIT<int,10,10>} gives 2D BIT\\r\\n * Time: O((\\\\log N)^D)\\r\\n */\\r\\n\\r\\ntemplate <class T, int ...Ns> struct BIT {\\r\\n\\tT val = 0; void upd(T v) { val += v; }\\r\\n\\tT query() { return val; }\\r\\n};\\r\\ntemplate <class T, int N, int... Ns> struct BIT<T, N, Ns...> {\\r\\n\\tBIT<T,Ns...> bit[N+1];\\r\\n\\ttemplate<typename... Args> void upd(int pos, Args... args) { assert(pos > 0);\\r\\n\\t\\tfor (; pos<=N; pos+=pos&-pos) bit[pos].upd(args...); }\\r\\n\\ttemplate<typename... Args> T sum(int r, Args... args) {\\r\\n\\t\\tT res=0; for (;r;r-=r&-r) res += bit[r].query(args...);\\r\\n\\t\\treturn res; }\\r\\n\\ttemplate<typename... Args> T query(int l, int r, Args...\\r\\n\\t\\targs) { return sum(r,args...)-sum(l-1,args...); }\\r\\n};\\r\\n\\r\\nBIT<ll,MX> B;\\r\\nint N,Q;\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(); cin >> N >> Q;\\r\\n\\tvi x(N+1);\\r\\n\\tFOR(i,1,N+1) {\\r\\n\\t\\tre(x[i]);\\r\\n\\t\\tB.upd(i,x[i]);\\r\\n\\t}\\r\\n\\tF0R(i,Q) {\\r\\n\\t\\tint t,a,b; cin >> t >> a >> b;\\r\\n\\t\\tif (t == 1) B.upd(a,b-x[a]), x[a] = b;\\r\\n\\t\\telse cout << B.query(a,b) << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class DynamicRangeSumQueries {\\r\\n\\tstatic long[] bit;\\r\\n\\tstatic int n;\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tn = io.nextInt();\\r\\n\\t\\tint q = io.nextInt();\\r\\n\\r\\n\\t\\t// Note: we are using 1-based indexing for the BIT to function properly\\r\\n\\t\\t// \\\"arr\\\" stores the value of each item in the array for convenient use\\r\\n\\t\\tbit = new long[n+1];\\r\\n\\t\\tint[] arr = new int[n+1];\\r\\n\\t\\tfor (int i = 1; i <= n; i++) {\\r\\n\\t\\t\\tarr[i] = io.nextInt();\\r\\n\\t\\t\\tadd(i, arr[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < q; i++) {\\r\\n\\t\\t\\tint type = io.nextInt();\\r\\n\\t\\t\\tif (type == 1) {\\r\\n\\t\\t\\t\\tint k = io.nextInt();\\r\\n\\t\\t\\t\\tint u = io.nextInt();\\r\\n\\t\\t\\t\\tadd(k, -arr[k]); // Remove the BIT's current value at \\\"k\\\"\\r\\n\\t\\t\\t\\tarr[k] = u;\\r\\n\\t\\t\\t\\tadd(k, arr[k]); // Add the BIT's new value\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tint a = io.nextInt();\\r\\n\\t\\t\\t\\tint b = io.nextInt();\\r\\n\\t\\t\\t\\tio.println(query(b)-query(a-1));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tstatic void add(int j, long k) {\\r\\n\\t\\tfor (; j <= n; j += j & -j) {\\r\\n\\t\\t\\tbit[j] += k;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tstatic long query(int j) {\\r\\n\\t\\tlong res = 0;\\r\\n\\t\\tfor (; j > 0; j -= j & -j) {\\r\\n\\t\\t\\tres += bit[j];\\r\\n\\t\\t}\\r\\n\\t\\treturn res;\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"finding-k-th-element\",\n      children: [_jsx(_components.a, {\n        href: \"#finding-k-th-element\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Finding \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \"-th Element\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Suppose that we want a data structure that supports all the operations as a\\r\\n\", _jsx(_components.code, {\n        children: \"set\"\n      }), \" in C++ in addition to the following:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"order_of_key(x)\"\n        }), \": counts the number of elements in the set that are strictly\\r\\nless than \", _jsx(_components.code, {\n          children: \"x\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"find_by_order(k)\"\n        }), \": similar to \", _jsx(_components.code, {\n          children: \"find\"\n        }), \", returns the iterator corresponding to\\r\\nthe \", _jsx(_components.code, {\n          children: \"k\"\n        }), \"-th lowest element in the set (0-indexed).\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"order-statistic-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#order-statistic-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Order Statistic Tree\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Luckily, such a built-in data structure already exists in C++.\"\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        url: \"11080\",\n        title: \"adamant - Policy Based Data Structures\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"CPH\",\n        title: \"4.5 - Policy Based Data Structures\",\n        children: _jsx(_components.p, {\n          children: \"brief overview with find_by_order and order_of_key\"\n        })\n      }), _jsx(Resource, {\n        source: \"Benq\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/STL%20(5)/IndexedSet.h\",\n        title: \"Indexed Set\",\n        children: _jsx(_components.p, {\n          children: \"code\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To use indexed set locally, you need to\\r\\n\", _jsx(_components.a, {\n        href: \"/general/cpp-command#installing-g\",\n        children: \"install GCC\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"with-a-bit\",\n      children: [_jsx(_components.a, {\n        href: \"#with-a-bit\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"With a BIT\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Assumes all updates are in the range \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[1,N]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>N</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[1,N]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CF\",\n        url: \"11275\",\n        title: \"adamant - About Ordered Set\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"log N\"\n        })\n      })\n    }), \"\\n\", \"\\n\", _jsxs(_components.h3, {\n      id: \"with-a-segment-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#with-a-segment-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"With a Segment Tree\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Covered in \", _jsx(_components.a, {\n        href: \"/plat/seg-ext\",\n        children: \"Platinum\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"example---inversion-counting\",\n      children: [_jsx(_components.a, {\n        href: \"#example---inversion-counting\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example - Inversion Counting\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"inv\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsx(Spoiler, {\n      title: \"Solution\",\n      children: _jsxs(LanguageSection, {\n        children: [_jsxs(CPPSection, {\n          children: [_jsx(_components.p, {\n            children: \"Using indexed set, we can solve this in just a few lines.\"\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\n#include <ext/pb_ds/assoc_container.hpp>\\r\\nusing namespace __gnu_pbds;\\r\\ntemplate <class T> using Tree = tree<T, null_type, less<T>,\\r\\n\\trb_tree_tag, tree_order_statistics_node_update>;\\r\\n\\r\\nint main() {\\r\\n\\tint T; cin >> T;\\r\\n\\tfor (int i = 0; i < T; ++i) {\\r\\n\\t\\tint n; cin >> n;\\r\\n\\t\\tTree<int> TS; long long numInv = 0;\\r\\n\\t\\tfor (int j = 0; j < n; ++j) {\\r\\n\\t\\t\\tint x; cin >> x;\\r\\n\\t\\t\\tnumInv += j-TS.order_of_key(x); // gives # elements before it > x\\r\\n\\t\\t\\tTS.insert(x);\\r\\n\\t\\t}\\r\\n\\t\\tcout << numInv << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n            })\n          }), _jsxs(_components.p, {\n            children: [\"Note that if it were not the case that all elements of the input array were\\r\\ndistinct, then this code would be incorrect since \", _jsx(_components.code, {\n              children: \"Tree<int>\"\n            }), \" would remove\\r\\nduplicates. Instead, we would use an indexed set of pairs\\r\\n(\", _jsx(_components.code, {\n              children: \"Tree<pair<int,int>>\"\n            }), \"), where the first element of each pair would denote the\\r\\nvalue while the second would denote the position of the value in the array.\"]\n          })]\n        }), _jsxs(JavaSection, {\n          children: [_jsx(_components.p, {\n            children: \"Using a binary indexed tree, we can count the number of inversions.\"\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Main {\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tint t = Integer.parseInt(br.readLine());\\r\\n\\t\\tfor (int tt = 0; tt < t; tt++) {\\r\\n\\t\\t\\tbr.readLine();\\r\\n\\t\\t\\tint n = Integer.parseInt(br.readLine());\\r\\n\\t\\t\\tBIT = new long[(int) 1e7 + 5];\\r\\n\\t\\t\\tlong ans = 0;\\r\\n\\t\\t\\tfor (int i = 0; i < n; i++) {\\r\\n\\t\\t\\t\\tint a = Integer.parseInt(br.readLine());\\r\\n\\t\\t\\t\\ta++;\\r\\n\\t\\t\\t\\tans += i - sum(a);\\r\\n\\t\\t\\t\\tupdate(a, 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tSystem.out.println(ans);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tpublic static long[] BIT; //one indexed cannot use zero\\r\\n\\tpublic static long sum(int i) {\\r\\n\\t\\tlong sum = 0;\\r\\n\\t\\twhile (i > 0) {\\r\\n\\t\\t\\tsum += BIT[i];\\r\\n\\t\\t\\ti -= (i & -i); //least important bit\\r\\n\\t\\t}\\r\\n\\t\\treturn sum;\\r\\n\\t}\\r\\n\\tpublic static void update(int i, int v) {\\r\\n\\t\\twhile (i > 0 && i < BIT.length) {\\r\\n\\t\\t\\tBIT[i] += v;\\r\\n\\t\\t\\ti += (i & -i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"range-sum-problems\",\n      children: [_jsx(_components.a, {\n        href: \"#range-sum-problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Range Sum Problems\"]\n    }), \"\\n\", _jsx(Info, {\n      title: \"Coordinate Compression\",\n      children: _jsxs(_components.p, {\n        children: [\"If the coordinates are large (say, up to \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"10^9\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span></span></span></span>\"\n        }), \"), then you should apply\\r\\n\", _jsx(_components.a, {\n          href: \"https://www.quora.com/What-is-coordinate-compression-and-what-is-it-used-for\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"coordinate compression\"\n        }), \"\\r\\nbefore using a BIT or segment tree (though\\r\\n\", _jsx(_components.a, {\n          href: \"/plat/sparse-seg\",\n          children: \"sparse segment trees\"\n        }), \" do exist).\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"general\",\n      children: [_jsx(_components.a, {\n        href: \"#general\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"General\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"practice\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"usaco\",\n      children: [_jsx(_components.a, {\n        href: \"#usaco\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"USACO\"]\n    }), \"\\n\", \"\\n\", _jsx(Problems, {\n      problems: \"usaco\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A hint regarding Sleepy Cow Sort: There is only one correct output.\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Point Update Range Sum","author":"Benjamin Qi, Dong Liu, Nathan Gong","contributors":"Andrew Wang","id":"PURS","prerequisites":["prefix-sums"],"description":"Introduces Segment Tree, Binary Indexed Tree, and C++ Order Statistic Tree.","frequency":3},"parent":{"name":"PURS","relativePath":"4_Gold/PURS.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Segment Tree","slug":"segment-tree"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution - Dynamic Range Minimum Queries","slug":"solution---dynamic-range-minimum-queries"},{"depth":3,"value":"Solution - Dynamic Range Sum Queries","slug":"solution---dynamic-range-sum-queries"},{"depth":2,"value":"Binary Indexed Tree","slug":"binary-indexed-tree"},{"depth":3,"value":"Resources","slug":"resources-1"},{"depth":3,"value":"Solution - Dynamic Range Sum Queries (With a BIT)","slug":"solution---dynamic-range-sum-queries-with-a-bit"},{"depth":4,"value":"Solution 1","slug":"solution-1"},{"depth":4,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Finding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-th Element","slug":"finding-k-th-element"},{"depth":3,"value":"Order Statistic Tree","slug":"order-statistic-tree"},{"depth":3,"value":"With a BIT","slug":"with-a-bit"},{"depth":3,"value":"With a Segment Tree","slug":"with-a-segment-tree"},{"depth":2,"value":"Example - Inversion Counting","slug":"example---inversion-counting"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Range Sum Problems","slug":"range-sum-problems"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"USACO","slug":"usaco"}],"java":[{"depth":2,"value":"Segment Tree","slug":"segment-tree"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution - Dynamic Range Minimum Queries","slug":"solution---dynamic-range-minimum-queries"},{"depth":3,"value":"Solution - Dynamic Range Sum Queries","slug":"solution---dynamic-range-sum-queries"},{"depth":2,"value":"Binary Indexed Tree","slug":"binary-indexed-tree"},{"depth":3,"value":"Resources","slug":"resources-1"},{"depth":3,"value":"Solution - Dynamic Range Sum Queries (With a BIT)","slug":"solution---dynamic-range-sum-queries-with-a-bit"},{"depth":2,"value":"Finding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-th Element","slug":"finding-k-th-element"},{"depth":3,"value":"Order Statistic Tree","slug":"order-statistic-tree"},{"depth":3,"value":"With a BIT","slug":"with-a-bit"},{"depth":3,"value":"With a Segment Tree","slug":"with-a-segment-tree"},{"depth":2,"value":"Example - Inversion Counting","slug":"example---inversion-counting"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Range Sum Problems","slug":"range-sum-problems"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"USACO","slug":"usaco"}],"py":[{"depth":2,"value":"Segment Tree","slug":"segment-tree"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution - Dynamic Range Minimum Queries","slug":"solution---dynamic-range-minimum-queries"},{"depth":3,"value":"Solution - Dynamic Range Sum Queries","slug":"solution---dynamic-range-sum-queries"},{"depth":2,"value":"Binary Indexed Tree","slug":"binary-indexed-tree"},{"depth":3,"value":"Resources","slug":"resources-1"},{"depth":3,"value":"Solution - Dynamic Range Sum Queries (With a BIT)","slug":"solution---dynamic-range-sum-queries-with-a-bit"},{"depth":2,"value":"Finding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-th Element","slug":"finding-k-th-element"},{"depth":3,"value":"Order Statistic Tree","slug":"order-statistic-tree"},{"depth":3,"value":"With a BIT","slug":"with-a-bit"},{"depth":3,"value":"With a Segment Tree","slug":"with-a-segment-tree"},{"depth":2,"value":"Example - Inversion Counting","slug":"example---inversion-counting"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Range Sum Problems","slug":"range-sum-problems"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"USACO","slug":"usaco"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sample","problems":[{"uniqueId":"cses-1648","name":"Dynamic Range Sum Queries","url":"https://cses.fi/problemset/task/1648","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["PURS"],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"Can also do range XOR queries w/ update."}}]},{"listId":"segSam","problems":[{"uniqueId":"cses-1649","name":"Dynamic Range Minimum Queries","url":"https://cses.fi/problemset/task/1649","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["PURQ"],"solution":null}]},{"listId":"inv","problems":[{"uniqueId":"spoj-InversionCounting","name":"Inversion Counting","url":"https://www.spoj.com/problems/INVCNT","source":"SPOJ","difficulty":"Easy","isStarred":false,"tags":["PURS"],"solution":null}]},{"listId":"practice","problems":[{"uniqueId":"cses-1651","name":"Range Update Queries","url":"https://cses.fi/problemset/task/1651","source":"CSES","difficulty":"Easy","isStarred":true,"tags":["PURS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"kattis-megainversions","name":"Mega Inversions","url":"https://open.kattis.com/problems/megainversions","source":"Kattis","difficulty":"Easy","isStarred":false,"tags":["PURS","Inversions"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1749","name":"List Removals","url":"https://cses.fi/problemset/task/1749","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["PURS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1144","name":"Salary Queries","url":"https://cses.fi/problemset/task/1144","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["PURS","Coordinate Compress"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1748","name":"Increasing Subsequence II","url":"https://cses.fi/problemset/task/1748","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["PURS","Coordinate Compress"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1734","name":"Distinct Values Queries","url":"https://cses.fi/problemset/task/1734","source":"CSES","difficulty":"Normal","isStarred":true,"tags":["PURS","Offline"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"usaco","problems":[{"uniqueId":"usaco-1041","name":"Haircut","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1041","source":"Gold","difficulty":"Easy","isStarred":true,"tags":["PURS","Inversions"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-693","name":"Balanced Photo","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=693","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["PURS","Inversions"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-719","name":"Circle Cross","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=719","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["PURS","Inversions"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-898","name":"Sleepy Cow Sort","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=898","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["PURS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-720","name":"Mincross","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=720","source":"Plat","difficulty":"Easy","isStarred":false,"tags":["PURS","Inversions"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_mincross_platinum_feb17.html","sketch":null}},{"uniqueId":"usaco-532","name":"Cow Hopscotch","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=532","source":"Old Gold","difficulty":"Hard","isStarred":false,"tags":["PURS"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_hopscotch_gold.html","sketch":null}}]}]}},"pageContext":{"id":"PURS"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}