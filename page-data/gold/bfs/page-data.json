{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/bfs",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*NOTE: general problems were RANDOMLY STARRED. please review!*/\n/*<Resource source=\"CPH\" title=\"12.2 - Breadth-First Search\">example, implementation</Resource>\n<Resource source=\"cp-algo\" title=\"\" url=\"graph/01_bfs.html\" />\n<Resource\nsource=\"IUSACO\"\ntitle=\"10.4 - Graph Traversal Algorithms\"\n/>\n<Resource source=\"CP2\" title=\"4.2.2 - BFS\" />*/\n/*\n<JavaSection>\n\nImplementation of the CSAcademy article's problem in Java:\n\n<br />\n\n```java\nimport java.util.*;\nimport java.io.*;\n\nclass Main {\n\nstatic ArrayList<Integer> edges[];\nstatic int dist[];\nstatic boolean visited[];\n\nstatic void bfs(int startNode) {\nQueue<Integer> q = new ArrayDeque<Integer>(); // You can choose any implementation\n// of Queue (such as LinkedList), though I believe ArrayDeque is faster (?)\nq.add(startNode);\nvisited[startNode] = true;\ndist[startNode] = 0;\n\nwhile(!q.isEmpty()) {\nint currentNode = q.poll();\n\nfor(int adj : edges[currentNode]) {\nif(!visited[adj]) {\nvisited[adj] = true;\ndist[adj] = dist[currentNode]+1;\nq.add(adj);\n}\n}\n}\n}\n\npublic static void main (String[] args) throws Exception {\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\nStringTokenizer st = new StringTokenizer(br.readLine());\nint N = Integer.parseInt(st.nextToken());\nint M = Integer.parseInt(st.nextToken());\n\nint start = Integer.parseInt(st.nextToken());\nstart--;\n\nedges = new ArrayList[N];\ndist = new int[N];\nvisited = new boolean[N];\nfor(int i = 0; i < N; i++) {\nedges[i] = new ArrayList<Integer>();\ndist[i] = -1;\n}\n\nfor(int i = 0; i < M; i++) {\nst = new StringTokenizer(br.readLine());\nint a = Integer.parseInt(st.nextToken());\nint b = Integer.parseInt(st.nextToken());\na--; b--;\nedges[a].add(b);\n}\n\nbfs(start);\n\nPrintWriter pw = new PrintWriter(System.out);\n\nfor(int i : dist) pw.print(i + \" \");\npw.println();\npw.close();\n}\n}\n```\n\n</JavaSection>\n*/\n/*Sometimes, when a Dijkstra runs too slowly, you need to use a 0/1 BFS instead.*/\n/*### Example: What's Up With Gravity?\n\n<FocusProblem problem=\"grav\" />\n\nIn this problem, let's connect two cells $(u, v)$ in the grid if you can reach $v$ from $u$ by flipping gravity, going left, or going right. Also, we should only store cells where CB doesn't fall in the direction of gravity.\n\nNow, we're given a weighted graph and we need to find the shortest path. Since the edge weights on the graph are only 1 if we change gravity and 0 otherwise, we can run a 0/1 BFS.*/\n/*which runs much faster than Dijkstra's algorithm.\n*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"bfs\", title = \"Breadth First Search (BFS)\", author = \"Benjamin Qi, Andi Qu, Neo Wang\", contributors = \"Qi Wang\", prerequisites = [\"dfs\", \"flood-fill\"], description = \"Traversing a graph in a way such that vertices closer to the starting vertex are processed first.\", frequency = 2;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    p: \"p\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Warning: _missingComponent(\"Warning\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Info: _missingComponent(\"Info\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {HeaderLink, Resources, Resource, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, Warning, FocusProblem, Info, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [\"\\n\", _jsxs(_components.h2, {\n      id: \"queues--deques\",\n      children: [_jsx(_components.a, {\n        href: \"#queues--deques\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Queues & Deques\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"4.5 - Queues, Deques\"\n      }), _jsx(Resource, {\n        source: \"PAPS\",\n        title: \"3.2, 6.3 - Queues\"\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"queues\",\n      children: [_jsx(_components.a, {\n        href: \"#queues\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Queues\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A queue is a First In First Out (FIFO) data structure that supports three\\r\\noperations, all in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h4, {\n          id: \"c\",\n          children: [_jsx(_components.a, {\n            href: \"#c\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.a, {\n            href: \"http://www.cplusplus.com/reference/queue/queue/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"C++\"\n          })]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"push\"\n            }), \": inserts at the back of the queue\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"pop\"\n            }), \": deletes from the front of the queue\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"front\"\n            }), \": retrieves the element at the front without removing it.\"]\n          }), \"\\n\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"queue<int> q;\\r\\nq.push(1); // [1]\\r\\nq.push(3); // [3, 1]\\r\\nq.push(4); // [4, 3, 1]\\r\\nq.pop(); // [4, 3]\\r\\ncout << q.front() << endl; // 3\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h4, {\n          id: \"java\",\n          children: [_jsx(_components.a, {\n            href: \"#java\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Java\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"add\"\n            }), \": insertion at the back of the queue\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"poll\"\n            }), \": deletion from the front of the queue\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"peek\"\n            }), \": which retrieves the element at the front without removing it\"]\n          }), \"\\n\"]\n        }), _jsxs(_components.p, {\n          children: [\"Java doesn't actually have a \", _jsx(_components.code, {\n            children: \"Queue\"\n          }), \" class; it's only an interface. The most\\r\\ncommonly used implementation is the \", _jsx(_components.code, {\n            children: \"LinkedList\"\n          }), \", declared as follows:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"Queue<Integer> q = new LinkedList<Integer>();\\r\\nq.add(1); // [1]\\r\\nq.add(3); // [3, 1]\\r\\nq.add(4); // [4, 3, 1]\\r\\nq.poll(); // [4, 3]\\r\\nSystem.out.println(q.peek()); // 3\\n\"\n          })\n        })]\n      }), _jsxs(PySection, {\n        children: [_jsxs(_components.h4, {\n          id: \"python\",\n          children: [_jsx(_components.a, {\n            href: \"#python\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Python\"]\n        }), _jsxs(_components.p, {\n          children: [\"Python has a \", _jsx(_components.code, {\n            children: \"queue\"\n          }), \" built-in module.\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"Queue.put(n)\"\n            }), \": Inserts element to the back of the queue.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"Queue.get()\"\n            }), \": Gets and removes the front element. If the queue\\r\\nis empty, this will wait forever, creating a TLE error.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"Queue.queue[n]\"\n            }), \": Gets the nth element without removing it. Set\\r\\nn to 0 for the first element.\"]\n          }), \"\\n\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"from queue import Queue\\r\\n\\r\\nq = Queue()      # []\\r\\nq.put(1)         # [1]\\r\\nq.put(2)         # [1, 2]\\r\\nv = q.queue[0]   # v = 1, q = [1, 2]\\r\\nv = q.get()      # v = 1, q = [2]\\r\\nv = q.get()      # v = 2, q = []\\r\\nv = q.get()      # Code waits forever, creating TLE error.\\n\"\n          })\n        }), _jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [\"Python's \", _jsx(_components.code, {\n              children: \"queue.Queue()\"\n            }), \" uses Locks to maintain a threadsafe synchronization, so it's quite slow.\\r\\nTo avoid TLE, use \", _jsx(_components.code, {\n              children: \"collections.deque()\"\n            }), \" instead for a faster version of a queue.\"]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"deques\",\n      children: [_jsx(_components.a, {\n        href: \"#deques\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Deques\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.strong, {\n        children: \"deque\"\n      }), \" (usually pronounced \\\"deck\\\") stands for double ended queue and is a\\r\\ncombination of a stack and a queue, in that it supports \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \"\\r\\ninsertions and deletions from both the front and the back of the deque. Not very\\r\\ncommon in Bronze / Silver.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h4, {\n          id: \"c-1\",\n          children: [_jsx(_components.a, {\n            href: \"#c-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.a, {\n            href: \"http://www.cplusplus.com/reference/deque/deque/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"C++\"\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"The four methods for adding and removing are \", _jsx(_components.code, {\n            children: \"push_back\"\n          }), \", \", _jsx(_components.code, {\n            children: \"pop_back\"\n          }), \",\\r\\n\", _jsx(_components.code, {\n            children: \"push_front\"\n          }), \", and \", _jsx(_components.code, {\n            children: \"pop_front\"\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"deque<int> d;\\r\\nd.push_front(3);  // [3]\\r\\nd.push_front(4);  // [4, 3]\\r\\nd.push_back(7);  // [4, 3, 7]\\r\\nd.pop_front();  // [3, 7]\\r\\nd.push_front(1);  // [1, 3, 7]\\r\\nd.pop_back();  // [1, 3]\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"You can also access deques in constant time like an array in constant time with\\r\\nthe \", _jsx(_components.code, {\n            children: \"[]\"\n          }), \" operator. For example, to access the element \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\texttt{i}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">i</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{i}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">i</span></span></span></span></span>\"\n          }), \" for some\\r\\ndeque \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\texttt{dq}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dq</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dq}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dq</span></span></span></span></span>\"\n          }), \", do \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"\\\\texttt{dq[i]}\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dq[i]</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dq[i]}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.9167em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dq[i]</span></span></span></span></span>\"\n          }), \".\"]\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h4, {\n          id: \"java-1\",\n          children: [_jsx(_components.a, {\n            href: \"#java-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Java\"]\n        }), _jsxs(_components.p, {\n          children: [\"In Java, the deque class is called \", _jsx(_components.code, {\n            children: \"ArrayDeque\"\n          }), \". The four methods for adding and\\r\\nremoving are \", _jsx(_components.code, {\n            children: \"addFirst\"\n          }), \" , \", _jsx(_components.code, {\n            children: \"removeFirst\"\n          }), \", \", _jsx(_components.code, {\n            children: \"addLast\"\n          }), \", and \", _jsx(_components.code, {\n            children: \"removeLast\"\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"ArrayDeque<Integer> deque = new ArrayDeque<Integer>();\\r\\ndeque.addFirst(3);  // [3]\\r\\ndeque.addFirst(4);  // [4, 3]\\r\\ndeque.addLast(7);  // [4, 3, 7]\\r\\ndeque.removeFirst();  // [3, 7]\\r\\ndeque.addFirst(1);  // [1, 3, 7]\\r\\ndeque.removeLast();  // [1, 3]\\n\"\n          })\n        })]\n      }), _jsxs(PySection, {\n        children: [_jsxs(_components.h4, {\n          id: \"python-1\",\n          children: [_jsx(_components.a, {\n            href: \"#python-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Python\"]\n        }), _jsxs(_components.p, {\n          children: [\"In Python, \", _jsx(_components.code, {\n            children: \"collections.deque()\"\n          }), \" is used for a deque data structure. The four methods for adding and removing are \", _jsx(_components.code, {\n            children: \"appendleft\"\n          }), \", \", _jsx(_components.code, {\n            children: \"popleft\"\n          }), \", \", _jsx(_components.code, {\n            children: \"append\"\n          }), \", and \", _jsx(_components.code, {\n            children: \"pop\"\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"d = collections.deque()\\r\\nd.appendleft(3)  # [3]\\r\\nd.appendleft(4)  # [4, 3]\\r\\nd.append(7)  # [4, 3, 7]\\r\\nd.popleft()  # [3, 7]\\r\\nd.appendleft(1)  # [1, 3, 7]\\r\\nd.pop()  # [1, 3]\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"breadth-first-search\",\n      children: [_jsx(_components.a, {\n        href: \"#breadth-first-search\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Breadth First Search\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sampleNormal\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"resources\",\n      children: [_jsx(_components.a, {\n        href: \"#resources\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resources\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CSA\",\n        title: \"BFS\",\n        url: \"breadth_first_search\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"interactive, implementation\"\n        })\n      }), _jsx(Resource, {\n        source: \"PAPS\",\n        title: \"12.1 - BFS\",\n        children: _jsx(_components.p, {\n          children: \"grid, 8-puzzle examples\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"BFS\",\n        url: \"graph/breadth-first-search.html\",\n        children: _jsx(_components.p, {\n          children: \"common applications\"\n        })\n      }), _jsx(Resource, {\n        source: \"KA@KhanAcademy\",\n        title: \"BFS and its uses\",\n        url: \"https://www.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses\"\n      }), _jsx(Resource, {\n        source: \"Youtube\",\n        title: \"Breadth First Search Algorithm\",\n        url: \"https://www.youtube.com/watch?v=oDqjPvD54Ss\",\n        children: _jsx(_components.p, {\n          children: \"If you prefer a video format\"\n        })\n      })]\n    }), \"\\n\", \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---message-route\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---message-route\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Message Route\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(V+E)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>V</mi><mo>+</mo><mi>E</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(V+E)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can observe is that there are many possible shortest paths to output.\\r\\nFortunately, the problem states that we can print any valid solution. Notice\\r\\nthat like every other BFS problem, the distance of each node increases by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \"\\r\\nwhen we travel to the next level of unvisited nodes. However, the problem\\r\\nrequires that we add additional information - in this case, the path. When we\\r\\ntraverse from node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \", we can set the parent of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"b\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n      }), \". After the\\r\\nBFS is complete, this allows us to backtrack through the parents which\\r\\nultimately leads us to our starting node. We know to terminate at node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \"\\r\\nbecause it's the starting node. If there is no path to our end node, then its\\r\\ndistance will remain at\\r\\n\", _jsx(_components.a, {\n        href: \"https://en.cppreference.com/w/c/types/limits\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: _jsx(_components.code, {\n          children: \"INT_MAX\"\n        })\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For the test input, we start with the following parent array.\"\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tbody\", {\n          children: [_jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Node\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"3\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"4\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"5\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Parent\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Distance\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"INT_MAX\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"INT_MAX\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"INT_MAX\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"INT_MAX\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After visiting children of node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \":\"]\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tbody\", {\n          children: [_jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Node\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"3\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"4\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"5\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Parent\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              className: \"bg-green-200 dark:bg-green-800\",\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              className: \"bg-green-200 dark:bg-green-800\",\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              className: \"bg-green-200 dark:bg-green-800\",\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Distance\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              className: \"bg-green-200 dark:bg-green-800\",\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              className: \"bg-green-200 dark:bg-green-800\",\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              className: \"bg-green-200 dark:bg-green-800\",\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"INT_MAX\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After visiting node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"5\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\\\"application/x-tex\\\">5</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">5</span></span></span></span>\"\n      }), \" from node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"4\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\\\"application/x-tex\\\">4</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span></span></span></span>\"\n      }), \":\"]\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsx(\"table\", {\n        className: \"text-center\",\n        children: _jsxs(\"tbody\", {\n          children: [_jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Node\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"2\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"3\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"4\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"5\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Parent\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              className: \"bg-green-200 dark:bg-green-800\",\n              children: \"4\"\n            })]\n          }), _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Distance\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"0\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\r\\n\", _jsx(\"td\", {\n              className: \"bg-green-200 dark:bg-green-800\",\n              children: \"2\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To determine the path, we can backtrack from node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"n \\\\rightarrow 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>n</mi><mo>→</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">n \\\\rightarrow 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \", in this\\r\\ncase \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"5 \\\\rightarrow 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>5</mn><mo>→</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">5 \\\\rightarrow 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \", pushing each value that we backtrack into a vector. The\\r\\npath we take is\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"5 \\\\rightarrow \\\\texttt{parent}[5]=4 \\\\rightarrow \\\\texttt{parent}[4] =1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>5</mn><mo>→</mo><mtext mathvariant=\\\"monospace\\\">parent</mtext><mo stretchy=\\\"false\\\">[</mo><mn>5</mn><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mn>4</mn><mo>→</mo><mtext mathvariant=\\\"monospace\\\">parent</mtext><mo stretchy=\\\"false\\\">[</mo><mn>4</mn><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">5 \\\\rightarrow \\\\texttt{parent}[5]=4 \\\\rightarrow \\\\texttt{parent}[4] =1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">parent</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">5</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">→</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">parent</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">4</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" which\\r\\ncorresponds to the vector \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[5, 4, 1]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>5</mn><mo separator=\\\"true\\\">,</mo><mn>4</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[5, 4, 1]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">5</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". We break at node \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" because it was the\\r\\ninitial starting node. Finally, we reverse the vector and print out its length\\r\\n(in this case, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing vi = vector<int>;\\r\\n#define pb push_back\\r\\n\\r\\nint main() {\\r\\n\\tint N, M; cin >> N >> M;\\r\\n\\tvi dist(N+1,INT_MAX), parent(N+1);\\r\\n\\tvector<vi> adj(N+1);\\r\\n\\twhile (M--) {\\r\\n\\t\\tint a,b; cin >> a >> b;\\r\\n\\t\\tadj[a].pb(b), adj[b].pb(a);\\r\\n\\t}\\r\\n\\tqueue<int> q;\\r\\n\\tdist[1] = 0; q.push(1);\\r\\n\\twhile (!q.empty()) {\\r\\n\\t\\tint x = q.front(); q.pop();\\r\\n\\t\\tfor (int t: adj[x]) if (dist[t] == INT_MAX) {\\r\\n\\t\\t\\tdist[t] = dist[x]+1; parent[t] = x;\\r\\n\\t\\t\\tq.push(t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (dist[N] == INT_MAX) cout << \\\"IMPOSSIBLE\\\";\\r\\n\\telse {\\r\\n\\t\\tcout << dist[N]+1 << \\\"\\\\n\\\";\\r\\n\\t\\tvi v{N}; while (v.back() != 1) v.pb(parent[v.back()]);\\r\\n\\t\\treverse(begin(v), end(v));\\r\\n\\t\\tfor (int t: v) cout << t << \\\" \\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\n\\r\\nimport java.util.*;\\r\\n\\r\\n\\r\\npublic class Solution {\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n\\r\\n\\tprivate static Map<Integer, LinkedList<Integer>> adj = new HashMap<>();\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\r\\n\\t\\tint n = io.nextInt(), m = io.nextInt();\\r\\n\\t\\tfor(int i = 0; i < m; i++) {\\r\\n\\t\\t\\tint a = io.nextInt(), b = io.nextInt();\\r\\n\\t\\t\\tif(adj.get(a) == null) {\\r\\n\\t\\t\\t\\tadj.put(a, new LinkedList<>());\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif(adj.get(b) == null) {\\r\\n\\t\\t\\t\\tadj.put(b, new LinkedList<>());\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tadj.get(a).add(b);\\r\\n\\t\\t\\tadj.get(b).add(a);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint[] prev = new int[n+1], dist = new int[n+1];\\r\\n\\t\\tArrays.fill(dist, Integer.MAX_VALUE);\\r\\n\\t\\tdist[1] = 1;\\r\\n\\r\\n\\t\\tQueue<Integer> bfs = new LinkedList<>();\\r\\n\\t\\tbfs.add(1);\\r\\n\\r\\n\\t\\twhile(!bfs.isEmpty()) {\\r\\n\\t\\t\\tint top = bfs.poll();\\r\\n\\t\\t\\tif(dist[top] == Integer.MAX_VALUE) continue;\\r\\n\\t\\t\\tif(adj.get(top) != null) {\\r\\n\\t\\t\\t\\tfor(int e : adj.get(top)) {\\r\\n\\t\\t\\t\\t\\tif(dist[e] == Integer.MAX_VALUE) {\\r\\n\\t\\t\\t\\t\\t\\tdist[e] = dist[top] + 1;\\r\\n\\t\\t\\t\\t\\t\\tprev[e] = top;\\r\\n\\t\\t\\t\\t\\t\\tbfs.add(e);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif(dist[n] == Integer.MAX_VALUE) {\\r\\n\\t\\t\\tSystem.out.println(\\\"IMPOSSIBLE\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tSystem.out.println(dist[n]);\\r\\n\\t\\t\\tint[] res = new int[dist[n]];\\r\\n\\t\\t\\tint i = dist[n]-1;\\r\\n\\t\\t\\tfor(int x = n; x != 0; x = prev[x]) {\\r\\n\\t\\t\\t\\tres[i--] = x;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfor(int a : res) System.out.print(a + \\\" \\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsx(Info, {\n      title: \"Pro Tip\",\n      children: _jsxs(_components.p, {\n        children: [\"In the gold division, the problem statement will almost never directly be,\\r\\n\\\"Given an unweighted graph, find the shortest path between node \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"u\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"v\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n        }), \".\\\"\\r\\nInstead, the difficulty in many BFS problems are converting the problem into a\\r\\ngraph on which we can run BFS and get the answer.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"01-bfs\",\n      children: [_jsx(_components.a, {\n        href: \"#01-bfs\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"0/1 BFS\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A 0/1 BFS finds the shortest path in a graph where the weights on the edges can\\r\\nonly be 0 or 1, and runs in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(V + E)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>V</mi><mo>+</mo><mi>E</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(V + E)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" using a deque. Read the\\r\\nresource below for an explanation of how the algorithm works.\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"0-1 BFS\",\n        url: \"graph/01_bfs.html\",\n        children: _jsx(_components.p, {\n          children: \"common applications\"\n        })\n      })\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sampleZeroOne\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(NM)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(NM)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">NM</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can use the following greedy strategy to find our answer:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Run flood fill to find each connected component with the same tracks.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Construct a graph where the nodes are the connected components and there are\\r\\nedges between adjacent connected components.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The answer is the maximum distance from the node containing \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"(1, 1)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(1, 1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" to\\r\\nanother node. We can use BFS to find this distance.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For a detailed proof of why this works, see\\r\\n\", _jsx(_components.a, {\n        href: \"https://boi2013.informatik-olympiade.de/wp-content/uploads/2013/05/tracks-spoiler.pdf\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"the official editorial\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Although this gives us an \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(NM)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(NM)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">NM</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" solution, there is a simpler solution\\r\\nusing 0/1 BFS!\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Consider the graph with an edge between each pair of adjacent cells with tracks,\\r\\nwhere the weight is 0 if the tracks are the same and 1 otherwise. The answer is\\r\\nsimply the longest shortest-path from the top left cell. This is because going\\r\\nfrom one track to another same one is like not leaving a node (hence the cost is\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n      }), \"), while going from one track to a different one is like traversing the edge\\r\\nbetween two nodes (hence the cost is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since the weight of each edge is either 0 or 1 and we want the shortest paths\\r\\nfrom the top left cell to each other cell, we can apply 0/1 BFS. The time\\r\\ncomplexity of this solution is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O(NM)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O(NM)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">NM</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint dx[4]{1, -1, 0, 0}, dy[4]{0, 0, 1, -1};\\r\\n\\r\\nint n, m, depth[4000][4000], ans = 1;\\r\\nstring snow[4000];\\r\\n\\r\\nbool inside(int x, int y) {\\r\\n\\treturn (x > -1 && x < n && y > -1 && y < m && snow[x][y] != '.');\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tiostream::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\r\\n\\tcin >> n >> m;\\r\\n\\tfor (int i = 0; i < n; i++) cin >> snow[i];\\r\\n\\r\\n\\tdeque<pair<int, int>> q;\\r\\n\\tq.push_back({0, 0});\\r\\n\\tdepth[0][0] = 1;\\r\\n\\r\\n\\twhile (q.size()) {\\r\\n\\t\\tpair<int, int> c = q.front();\\r\\n\\t\\tq.pop_front();\\r\\n\\t\\tans = max(ans, depth[c.first][c.second]);\\r\\n\\r\\n\\t\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\t\\tint x = c.first + dx[i], y = c.second + dy[i];\\r\\n\\t\\t\\tif (inside(x, y) && depth[x][y] == 0) {\\r\\n\\t\\t\\t\\tif (snow[x][y] == snow[c.first][c.second]) {\\r\\n\\t\\t\\t\\t\\tdepth[x][y] = depth[c.first][c.second];\\r\\n\\t\\t\\t\\t\\tq.push_front({x, y});\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tdepth[x][y] = depth[c.first][c.second] + 1;\\r\\n\\t\\t\\t\\t\\tq.push_back({x, y});\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tcout << ans;\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      }), _jsxs(JavaSection, {\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class tracks {\\r\\n\\tstatic final int[] dx = {0, 0, -1, 1};\\r\\n\\tstatic final int[] dy = {-1, 1, 0, 0};\\r\\n\\tstatic int N = 1, H, W;\\r\\n\\tstatic int[][] grid, count;\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tFastIO io = new FastIO();\\r\\n\\r\\n\\t\\tH = io.nextInt();\\r\\n\\t\\tW = io.nextInt();\\r\\n\\t\\tgrid = new int[H][W];\\r\\n\\r\\n\\t\\tfor (int i = 0; i < H; i++) {\\r\\n\\t\\t\\tString line = io.next();\\r\\n\\t\\t\\tfor (int j = 0; j < W; j++) {\\r\\n\\t\\t\\t\\tgrid[i][j] = (line.charAt(j) == 'F')?1:(line.charAt(j) == 'R')?2:-1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.println(bfs());\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\tprivate static int bfs() {\\r\\n\\t\\tcount = new int[H][W];\\r\\n\\r\\n\\t\\tLinkedList<int[]> q = new LinkedList<>();\\r\\n\\t\\tq.add(new int[]{0,0});\\r\\n\\t\\tcount[0][0] = 1;\\r\\n\\r\\n\\t\\twhile (!q.isEmpty()) {\\r\\n\\t\\t\\tint[] curr = q.poll();\\r\\n\\r\\n\\t\\t\\tN = Math.max(N, count[curr[0]][curr[1]]);\\r\\n\\r\\n\\t\\t\\tfor (int i = 0; i < 4; i++) {\\r\\n\\t\\t\\t\\tint nx = curr[0] + dx[i];\\r\\n\\t\\t\\t\\tint ny = curr[1] + dy[i];\\r\\n\\r\\n\\t\\t\\t\\tif(nx < 0 || ny < 0 || nx >= H || ny >= W) continue;\\r\\n\\t\\t\\t\\tif(count[nx][ny] > 0) continue;\\r\\n\\t\\t\\t\\tif(grid[nx][ny] == -1) continue;\\r\\n\\t\\t\\t\\tif(grid[nx][ny] != grid[curr[0]][curr[1]]) {\\r\\n\\t\\t\\t\\t\\tcount[nx][ny] = count[curr[0]][curr[1]] + 1;\\r\\n\\t\\t\\t\\t\\tq.addLast(new int[]{nx, ny});\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tcount[nx][ny] = count[curr[0]][curr[1]];\\r\\n\\t\\t\\t\\t\\tq.addFirst(new int[]{nx, ny});\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn N;\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{FastIO}\\r\\n\\tprivate static class FastIO extends PrintWriter {\\r\\n\\t\\tprivate InputStream stream;\\r\\n\\t\\tprivate byte[] buf = new byte[1<<16];\\r\\n\\t\\tprivate int curChar, numChars;\\r\\n\\r\\n\\t\\t// standard input\\r\\n\\t\\tpublic FastIO() { this(System.in,System.out); }\\r\\n\\t\\tpublic FastIO(InputStream i, OutputStream o) {\\r\\n\\t\\t\\tsuper(o);\\r\\n\\t\\t\\tstream = i;\\r\\n\\t\\t}\\r\\n\\t\\t// file input\\r\\n\\t\\tpublic FastIO(String i, String o) throws IOException {\\r\\n\\t\\t\\tsuper(new FileWriter(o));\\r\\n\\t\\t\\tstream = new FileInputStream(i);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// throws InputMismatchException() if previously detected end of file\\r\\n\\t\\tprivate int nextByte() {\\r\\n\\t\\t\\tif (numChars == -1) throw new InputMismatchException();\\r\\n\\t\\t\\tif (curChar >= numChars) {\\r\\n\\t\\t\\t\\tcurChar = 0;\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\tnumChars = stream.read(buf);\\r\\n\\t\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (numChars == -1) return -1; // end of file\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn buf[curChar++];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// to read in entire lines, replace c <= ' '\\r\\n\\t\\t// with a function that checks whether c is a line break\\r\\n\\t\\tpublic String next() {\\r\\n\\t\\t\\tint c; do { c = nextByte(); } while (c <= ' ');\\r\\n\\t\\t\\tStringBuilder res = new StringBuilder();\\r\\n\\t\\t\\tdo { res.appendCodePoint(c); c = nextByte(); } while (c > ' ');\\r\\n\\t\\t\\treturn res.toString();\\r\\n\\t\\t}\\r\\n\\t\\tpublic int nextInt() { // nextLong() would be implemented similarly\\r\\n\\t\\t\\tint c; do { c = nextByte(); } while (c <= ' ');\\r\\n\\t\\t\\tint sgn = 1; if (c == '-') { sgn = -1; c = nextByte(); }\\r\\n\\t\\t\\tint res = 0;\\r\\n\\t\\t\\tdo {\\r\\n\\t\\t\\t\\tif (c < '0' || c > '9')\\r\\n\\t\\t\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t\\t\\tres = 10*res+c-'0';\\r\\n\\t\\t\\t\\tc = nextByte();\\r\\n\\t\\t\\t} while (c > ' ');\\r\\n\\t\\t\\treturn res * sgn;\\r\\n\\t\\t}\\r\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\r\\n\\t}\\r\\n\\t//EndCodeSnip\\r\\n}\\n\"\n          })\n        }), _jsx(Warning, {\n          children: _jsx(_components.p, {\n            children: \"Due to oj.uz's grading constraints for Java, this solution will TLE on the judge.\"\n          })\n        })]\n      })]\n    }), \"\\n\", \"\\n\", \"\\n\", \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\",\n      hideSuggestProblemButton: true\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Breadth First Search (BFS)","author":"Benjamin Qi, Andi Qu, Neo Wang","contributors":"Qi Wang","id":"bfs","prerequisites":["dfs","flood-fill"],"description":"Traversing a graph in a way such that vertices closer to the starting vertex are processed first.","frequency":2},"parent":{"name":"BFS","relativePath":"4_Gold/BFS.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Queues &amp; Deques","slug":"queues--deques"},{"depth":3,"value":"Queues","slug":"queues"},{"depth":4,"value":"C++","slug":"c"},{"depth":3,"value":"Deques","slug":"deques"},{"depth":4,"value":"C++","slug":"c-1"},{"depth":2,"value":"Breadth First Search","slug":"breadth-first-search"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution - Message Route","slug":"solution---message-route"},{"depth":2,"value":"0/1 BFS","slug":"01-bfs"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Queues &amp; Deques","slug":"queues--deques"},{"depth":3,"value":"Queues","slug":"queues"},{"depth":4,"value":"Java","slug":"java"},{"depth":3,"value":"Deques","slug":"deques"},{"depth":4,"value":"Java","slug":"java-1"},{"depth":2,"value":"Breadth First Search","slug":"breadth-first-search"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution - Message Route","slug":"solution---message-route"},{"depth":2,"value":"0/1 BFS","slug":"01-bfs"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Queues &amp; Deques","slug":"queues--deques"},{"depth":3,"value":"Queues","slug":"queues"},{"depth":4,"value":"Python","slug":"python"},{"depth":3,"value":"Deques","slug":"deques"},{"depth":4,"value":"Python","slug":"python-1"},{"depth":2,"value":"Breadth First Search","slug":"breadth-first-search"},{"depth":3,"value":"Resources","slug":"resources"},{"depth":3,"value":"Solution - Message Route","slug":"solution---message-route"},{"depth":2,"value":"0/1 BFS","slug":"01-bfs"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sampleNormal","problems":[{"uniqueId":"cses-1667","name":"Message Route","url":"https://cses.fi/problemset/task/1667","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["BFS"],"solution":null}]},{"listId":"sampleZeroOne","problems":[{"uniqueId":"baltic-13-TracksInTheSnow","name":"2013 - Tracks in the Snow","url":"https://oj.uz/problem/view/BOI13_tracks","source":"Baltic OI","difficulty":"Easy","isStarred":false,"tags":["BFS"],"solution":null}]},{"listId":"general","problems":[{"uniqueId":"cses-1193","name":"Labyrinth","url":"https://cses.fi/problemset/task/1193","source":"CSES","difficulty":"Easy","isStarred":true,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1194","name":"Monsters","url":"https://cses.fi/problemset/task/1194","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-620","name":"Milk Pails","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=620","source":"Silver","difficulty":"Easy","isStarred":false,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1707","name":"Graph Girth","url":"https://cses.fi/problemset/task/1707","source":"CSES","difficulty":"Normal","isStarred":true,"tags":["Cycle"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"csa-bfsdfs","name":"BFS-DFS","url":"https://csacademy.com/contest/archive/task/bfs-dfs","source":"CSA","difficulty":"Normal","isStarred":false,"tags":["BFS","DFS"],"solution":{"kind":"label","label":"Check CSA","labelTooltip":"The editorial tab should be right next to the statement tab.","url":null,"sketch":null}},{"uniqueId":"usaco-491","name":"Piggyback","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=491","source":"Old Silver","difficulty":"Normal","isStarred":false,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-671","name":"Lasers and Mirrors","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=671","source":"Gold","difficulty":"Normal","isStarred":true,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-790","name":"Cow At Large","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=790","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-282","name":"What's Up With Gravity?","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=282","source":"Old Silver","difficulty":"Normal","isStarred":false,"tags":["BFS"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_gravity.html","sketch":null}},{"uniqueId":"usaco-1090","name":"Telephone","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1090","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ioi-09-mecho","name":"2009 - Mecho","url":"https://oj.uz/problem/view/IOI09_mecho","source":"IOI","difficulty":"Normal","isStarred":false,"tags":["BFS","Binary Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1670","name":"Swap Game","url":"https://cses.fi/problemset/task/1670/","source":"CSES","difficulty":"Normal","isStarred":false,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ioi-00-walls","name":"Walls","url":"https://dmoj.ca/problem/ioi00p4","source":"IOI","difficulty":"Hard","isStarred":false,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-695","name":"Cow Navigation","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=695","source":"Gold","difficulty":"Hard","isStarred":true,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-575","name":"Bessie's Dream","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=575","source":"Gold","difficulty":"Hard","isStarred":false,"tags":["BFS"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_dream_gold_dec15.html","sketch":null}},{"uniqueId":"usaco-1065","name":"Replication","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1065","source":"Gold","difficulty":"Hard","isStarred":false,"tags":["BFS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-765","name":"A Pie for a Pie","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=765","source":"Gold","difficulty":"Very Hard","isStarred":false,"tags":["BFS"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_piepie_gold_dec17.html","sketch":null}}]}]}},"pageContext":{"id":"bfs"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}