{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/dsu",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*\n<Resource\nsource=\"CPC\"\ntitle=\"3 - Data Structures\"\nurl=\"03_data_structures\"\n/>*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"dsu\", title = \"Disjoint Set Union\", author = \"Benjamin Qi, Andrew Wang, Nathan Gong\", contributors = \"Michael Cao\", prerequisites = [\"dfs\"], description = \"The Disjoint Set Union (DSU) data structure allows you to add edges to an initially empty graph and test whether two vertices of the graph are connected.\", frequency = 3;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    em: \"em\",\n    h3: \"h3\",\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Optional: _missingComponent(\"Optional\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {FocusProblem, HeaderLink, Resources, Resource, Optional, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(FocusProblem, {\n      problem: \"sample\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"resources\",\n      children: [_jsx(_components.a, {\n        href: \"#resources\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resources\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        title: \"EDU: DSU\",\n        url: \"https://codeforces.com/edu/course/2/lesson/7\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"video explanation + problems for DSU\"\n        })\n      }), _jsx(Resource, {\n        source: \"CSA\",\n        title: \"Disjoint Data Sets\",\n        url: \"disjoint_data_sets\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"both optimizations, diagrams\"\n        })\n      }), _jsx(Resource, {\n        source: \"PAPS\",\n        title: \"11.1 - Disjoint Sets\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"both optimizations, no diagrams\"\n        })\n      }), _jsx(Resource, {\n        source: \"CPH\",\n        title: \"15.2 - Union-Find\",\n        children: _jsx(_components.p, {\n          children: \"small to large, diagrams\"\n        })\n      }), _jsx(Resource, {\n        source: \"IUSACO\",\n        title: \"10.6 - Disjoint-Set Data Structure\",\n        children: _jsx(_components.p, {\n          children: \"path compression, diagrams\"\n        })\n      }), _jsx(Resource, {\n        source: \"TC\",\n        title: \"Disjoint Set Data Structures\",\n        url: \"disjoint-set-data-structures\",\n        children: _jsx(_components.p, {\n          children: \"diagrams\"\n        })\n      })]\n    }), \"\\n\", \"\\n\", _jsx(Optional, {\n      title: \"DSU Complexity Proofs\",\n      children: _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://en.wikipedia.org/wiki/Proof_of_O(log*n)_time_complexity_of_union%E2%80%93find\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\underline{\\\\log^* n}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><munder accentunder=\\\"true\\\"><mrow><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mo>∗</mo></msup><mi>n</mi></mrow><mo stretchy=\\\"true\\\">‾</mo></munder></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\underline{\\\\log^* n}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1675em;vertical-align:-0.3944em;\\\"></span><span class=\\\"mord underline\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.773em;\\\"><span style=\\\"top:-2.6456em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"underline-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.773em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mbin mtight\\\">∗</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3944em;\\\"><span></span></span></span></span></span></span></span></span>\"\n            })\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://dl.acm.org/doi/pdf/10.1145/321879.321884\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\underline{\\\\alpha (m,n)}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><munder accentunder=\\\"true\\\"><mrow><mi>α</mi><mo stretchy=\\\"false\\\">(</mo><mi>m</mi><mo separator=\\\"true\\\">,</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><mo stretchy=\\\"true\\\">‾</mo></munder></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\underline{\\\\alpha (m,n)}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.2em;vertical-align:-0.45em;\\\"></span><span class=\\\"mord underline\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.75em;\\\"><span style=\\\"top:-2.59em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"underline-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.0037em;\\\">α</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.45em;\\\"><span></span></span></span></span></span></span></span></span>\"\n            })\n          })\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As the implementation is quite simple, you may prefer to use this in place of\\r\\nDFS for computing connected components.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Check PAPS for the explanation. \", _jsx(_components.code, {\n            children: \"e[x]\"\n          }), \" contains the negation of the size of\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"x\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n          }), \"'s component if \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"x\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n          }), \" is the representative of its component, and the parent of\\r\\n\", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"x\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n          }), \" otherwise.\"]\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"Benq (from KACTL)\",\n            url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/graphs%20(12)/DSU/DSU%20(7.6).h\",\n            title: \"DSU\"\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nstruct DSU {\\r\\n\\tvector<int> e;\\r\\n\\tDSU(int N) { e = vector<int>(N, -1); }\\r\\n\\r\\n\\t// get representive component (uses path compression)\\r\\n\\tint get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); }\\r\\n\\r\\n\\tbool same_set(int a, int b) { return get(a) == get(b); }\\r\\n\\r\\n\\tint size(int x) { return -e[get(x)]; }\\r\\n\\r\\n\\tbool unite(int x, int y) {  // union by size\\r\\n\\t\\tx = get(x), y = get(y);\\r\\n\\t\\tif (x == y) return false;\\r\\n\\t\\tif (e[x] > e[y]) swap(x, y);\\r\\n\\t\\te[x] += e[y]; e[y] = x;\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n};\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\n\\r\\npublic class DisjointSets {\\r\\n\\tint[] parents;  // 0-indexed\\r\\n\\tint[] sizes;\\r\\n\\r\\n\\tpublic DisjointSets(int size) {\\r\\n\\t\\tsizes = new int[size];\\r\\n\\t\\tparents = new int[size];\\r\\n\\t\\tArrays.fill(sizes, 1);\\r\\n\\t\\tArrays.fill(parents, -1);\\r\\n\\t}\\r\\n\\r\\n\\t// finds the \\\"representative\\\" node in a's component\\r\\n\\tpublic int find(int x) {\\r\\n\\t\\treturn parents[x] == -1 ? x : (parents[x] = find(parents[x]));\\r\\n\\t}\\r\\n\\r\\n\\t// returns whether the merge changed connectivity\\r\\n\\tpublic boolean union(int x, int y) {\\r\\n\\t\\tint xRoot = find(x);\\r\\n\\t\\tint yRoot = find(y);\\r\\n\\t\\tif (xRoot == yRoot) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t\\tif (sizes[xRoot] < sizes[yRoot]) {\\r\\n\\t\\t\\tparents[xRoot] = yRoot;\\r\\n\\t\\t\\tsizes[yRoot] += sizes[xRoot];\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tparents[yRoot] = xRoot;\\r\\n\\t\\t\\tsizes[xRoot] += sizes[yRoot];\\r\\n\\t\\t}\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t// returns whether two nodes are in the same connected component\\r\\n\\tpublic boolean connected(int x, int y) {\\r\\n\\t\\treturn find(x) == find(y);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"class DisjointSets:\\r\\n\\tdef __init__(self, size: int) -> None:\\r\\n\\t\\tself.parents = [-1 for _ in range(size)]\\r\\n\\t\\tself.sizes = [1 for _ in range(size)]\\r\\n\\r\\n\\t# finds the \\\"representative\\\" node in a's component\\r\\n\\tdef find(self, x: int) -> int:\\r\\n\\t\\tif self.parents[x] == -1:\\r\\n\\t\\t\\treturn x\\r\\n\\t\\tself.parents[x] = self.find(self.parents[x])\\r\\n\\t\\treturn self.parents[x]\\r\\n\\r\\n\\t# returns whether the merge changed connectivity\\r\\n\\tdef union(self, x: int, y: int) -> bool:\\r\\n\\t\\tx_root = self.find(x)\\r\\n\\t\\ty_root = self.find(y)\\r\\n\\t\\tif x_root == y_root:\\r\\n\\t\\t\\treturn False\\r\\n\\r\\n\\t\\tif self.sizes[x_root] < self.sizes[y_root]:\\r\\n\\t\\t\\tx_root, y_root = y_root, x_root\\r\\n\\t\\tself.parents[y_root] = x_root\\r\\n\\t\\tself.sizes[x_root] += self.sizes[y_root]\\r\\n\\t\\treturn True\\r\\n\\r\\n\\t# returns whether two nodes are in the same connected component\\r\\n\\tdef connected(self, x: int, y: int) -> bool:\\r\\n\\t\\treturn self.find(x) == self.find(y)\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---focus-problem\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---focus-problem\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Focus Problem\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(Q \\\\log ^*N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>Q</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mo>∗</mo></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(Q \\\\log ^*N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.023em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.773em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mbin mtight\\\">∗</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Without union find, we would have to represent the graph with an adjacency list\\r\\nand use \", _jsx(_components.a, {\n        href: \"/silver/flood-fill\",\n        children: \"flood fill\"\n      }), \" to calculate\\r\\nconnected components. This approach takes \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(NQ)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>Q</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(NQ)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">NQ</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time, which is too\\r\\nslow, motivating us to use \", _jsx(_components.strong, {\n        children: \"union find\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By representing the graph with the union find data structure, we can use its\\r\\nmethods to both \", _jsx(_components.em, {\n        children: \"unite\"\n      }), \" vertices and check if two vertices \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">u_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"v_i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">v_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" are\\r\\nin the same connected component using only \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log^*N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mo>∗</mo></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log^*N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.023em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.773em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mbin mtight\\\">∗</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time. This\\r\\nreduces the overall time complexity to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(Q \\\\log ^*N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>Q</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mo>∗</mo></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(Q \\\\log ^*N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.023em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.773em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mbin mtight\\\">∗</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", which is a\\r\\nsubstantial improvement and allows us to pass all test cases.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nstruct DSU {\\r\\n\\tvector<int> e;\\r\\n\\tDSU(int N) { e = vector<int>(N, -1); }\\r\\n\\r\\n\\t// get representive component (uses path compression)\\r\\n\\tint get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); }\\r\\n\\r\\n\\tbool same_set(int a, int b) { return get(a) == get(b); }\\r\\n\\r\\n\\tint size(int x) { return -e[get(x)]; }\\r\\n\\r\\n\\tbool unite(int x, int y) {  // union by size\\r\\n\\t\\tx = get(x), y = get(y);\\r\\n\\t\\tif (x == y) return false;\\r\\n\\t\\tif (e[x] > e[y]) swap(x, y);\\r\\n\\t\\te[x] += e[y]; e[y] = x; return true;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nint main() {\\r\\n\\tint node_num, query_num;\\r\\n\\tcin >> node_num >> query_num;\\r\\n\\tDSU dsu(node_num);\\r\\n\\r\\n\\tfor (int i = 0; i < query_num; i++) {\\r\\n\\t\\tint type, u, v;\\r\\n\\t\\tcin >> type >> u >> v;\\r\\n\\t\\tif (type == 0) {\\r\\n\\t\\t\\tdsu.unite(u, v);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tcout << dsu.same_set(u, v) << endl;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Main {\\r\\n\\tprivate static class DisjointSets {\\r\\n\\t\\tint[] parents;  // 0-indexed\\r\\n\\t\\tint[] sizes;\\r\\n\\t\\tpublic DisjointSets(int size) {\\r\\n\\t\\t\\tsizes = new int[size];\\r\\n\\t\\t\\tparents = new int[size];\\r\\n\\t\\t\\tArrays.fill(sizes, 1);\\r\\n\\t\\t\\tArrays.fill(parents, -1);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// finds the \\\"representative\\\" node in a's component\\r\\n\\t\\tpublic int find(int x) {\\r\\n\\t\\t\\treturn parents[x] == -1 ? x : (parents[x] = find(parents[x]));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// returns whether the merge changed connectivity\\r\\n\\t\\tpublic boolean union(int x, int y) {\\r\\n\\t\\t\\tint xRoot = find(x);\\r\\n\\t\\t\\tint yRoot = find(y);\\r\\n\\t\\t\\tif (xRoot == yRoot) {\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (sizes[xRoot] < sizes[yRoot]) {\\r\\n\\t\\t\\t\\tparents[xRoot] = yRoot;\\r\\n\\t\\t\\t\\tsizes[yRoot] += sizes[xRoot];\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tparents[yRoot] = xRoot;\\r\\n\\t\\t\\t\\tsizes[xRoot] += sizes[yRoot];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// returns whether two nodes are in the same connected component\\r\\n\\t\\tpublic boolean connected(int x, int y) {\\r\\n\\t\\t\\treturn find(x) == find(y);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\t\\tint size = io.nextInt();\\r\\n\\t\\tint queryNum = io.nextInt();\\r\\n\\r\\n\\t\\tDisjointSets dsu = new DisjointSets(size);\\r\\n\\t\\tfor (int i = 0; i < queryNum; i++) {\\r\\n\\t\\t\\tint type = io.nextInt();\\r\\n\\t\\t\\tint u = io.nextInt();\\r\\n\\t\\t\\tint v = io.nextInt();\\r\\n\\t\\t\\tif (type == 0) {\\r\\n\\t\\t\\t\\tdsu.union(u, v);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tif (dsu.connected(u, v)) {\\r\\n\\t\\t\\t\\t\\tio.println(1);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tio.println(0);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"class DisjointSets:\\r\\n\\tdef __init__(self, size: int) -> None:\\r\\n\\t\\tself.parents = [-1 for _ in range(size)]\\r\\n\\t\\tself.sizes = [1 for _ in range(size)]\\r\\n\\r\\n\\t# finds the \\\"representative\\\" node in a's component\\r\\n\\tdef find(self, x: int) -> int:\\r\\n\\t\\tif self.parents[x] == -1:\\r\\n\\t\\t\\treturn x\\r\\n\\t\\tself.parents[x] = self.find(self.parents[x])\\r\\n\\t\\treturn self.parents[x]\\r\\n\\r\\n\\t# returns whether the merge changed connectivity\\r\\n\\tdef union(self, x: int, y: int) -> bool:\\r\\n\\t\\tx_root = self.find(x)\\r\\n\\t\\ty_root = self.find(y)\\r\\n\\t\\tif x_root == y_root:\\r\\n\\t\\t\\treturn False\\r\\n\\r\\n\\t\\tif self.sizes[x_root] < self.sizes[y_root]:\\r\\n\\t\\t\\tx_root, y_root = y_root, x_root\\r\\n\\t\\tself.parents[y_root] = x_root\\r\\n\\t\\tself.sizes[x_root] += self.sizes[y_root]\\r\\n\\t\\treturn True\\r\\n\\r\\n\\t# returns whether two nodes are in the same connected component\\r\\n\\tdef connected(self, x: int, y: int) -> bool:\\r\\n\\t\\treturn self.find(x) == self.find(y)\\r\\n\\r\\n\\r\\nsize, query_num = [int(i) for i in input().split()]\\r\\n\\r\\ndsu = DisjointSets(size)\\r\\nfor _ in range(query_num):\\r\\n\\tq_type, u, v = [int(i) for i in input().split()]\\r\\n\\tif q_type == 0:\\r\\n\\t\\tdsu.union(u, v)\\r\\n\\telse:\\r\\n\\t\\tprint(1 if dsu.connected(u, v) else 0)\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"standard\",\n      children: [_jsx(_components.a, {\n        href: \"#standard\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Standard\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You should already be familiar with the DFS / Binary Search solutions to\\r\\n\\\"Wormhole Sort\\\" and \\\"Moocast.\\\"\"\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"harder\",\n      children: [_jsx(_components.a, {\n        href: \"#harder\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Harder\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don't worry about solving these if this is the first time you've encountered\\r\\nDSU.\"\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"harder\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Disjoint Set Union","author":"Benjamin Qi, Andrew Wang, Nathan Gong","contributors":"Michael Cao","id":"dsu","prerequisites":["dfs"],"description":"The Disjoint Set Union (DSU) data structure allows you to add edges to an initially empty graph and test whether two vertices of the graph are connected.","frequency":3},"parent":{"name":"DSU","relativePath":"4_Gold/DSU.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution - Focus Problem","slug":"solution---focus-problem"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"Standard","slug":"standard"},{"depth":3,"value":"Harder","slug":"harder"}],"java":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution - Focus Problem","slug":"solution---focus-problem"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"Standard","slug":"standard"},{"depth":3,"value":"Harder","slug":"harder"}],"py":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Solution - Focus Problem","slug":"solution---focus-problem"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":3,"value":"Standard","slug":"standard"},{"depth":3,"value":"Harder","slug":"harder"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sample","problems":[{"uniqueId":"ys-UnionFind","name":"Union Find","url":"https://judge.yosupo.jp/problem/unionfind","source":"YS","difficulty":"Easy","isStarred":false,"tags":["DSU"],"solution":null}]},{"listId":"general","problems":[{"uniqueId":"cses-1676","name":"Road Construction","url":"https://cses.fi/problemset/task/1676","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-646","name":"Closing the Farm","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=646","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-789","name":"Mootube","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=789","source":"Gold","difficulty":"Easy","isStarred":true,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-992","name":"Wormhole Sort","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=992","source":"Silver","difficulty":"Easy","isStarred":true,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-669","name":"Moocast","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=669","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-245","name":"Tractor","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=245","source":"Old Silver","difficulty":"Easy","isStarred":false,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"csa-MountainTime","name":"Mountain Time","url":"https://csacademy.com/contest/archive/task/mountain-time","source":"CSA","difficulty":"Normal","isStarred":false,"tags":["DSU"],"solution":{"kind":"label","label":"Check CSA","labelTooltip":"The editorial tab should be right next to the statement tab.","url":null,"sketch":null}}]},{"listId":"harder","problems":[{"uniqueId":"cses-2101","name":"New Roads Queries","url":"https://cses.fi/problemset/task/2101/","source":"CSES","difficulty":"Hard","isStarred":false,"tags":["DSU","Merging"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-384","name":"Ski Course Rating","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=384","source":"Old Gold","difficulty":"Hard","isStarred":false,"tags":["DSU"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_skilevel.html","sketch":null}},{"uniqueId":"onlinejudgeorg-war","name":"War","url":"https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=0&problem=1099","source":"onlinejudge.org","difficulty":"Hard","isStarred":false,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"baltic-16-park","name":"2016 - Park","url":"https://oj.uz/problem/view/BOI16_park","source":"Baltic OI","difficulty":"Very Hard","isStarred":false,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-1042","name":"Favorite Colors","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1042","source":"Gold","difficulty":"Very Hard","isStarred":true,"tags":["DSU"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_fcolor_gold_open20.html","sketch":null}},{"uniqueId":"usaco-950","name":"Valleys","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=950","source":"Plat","difficulty":"Very Hard","isStarred":false,"tags":["DSU"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"dsu"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}