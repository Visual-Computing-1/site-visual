{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/paths-grids",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*### Paths in a Grid (and related)*/\n/*Interesting applications of \"number of paths on a grid,\" some of which don't directly present a grid in the problem, but can be modelled as one.*/\n/*Asterisk> Such as Longest Common Subsequence. </Asterisk>*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"paths-grids\", title = \"Paths on Grids\", author = \"Nathan Chen, Michael Cao, Benjamin Qi, Andrew Wang\", contributors = \"Maggie Liu\", prerequisites = [\"intro-dp\"], description = \"Counting the number of \\\"special\\\" paths on a grid, and how some string problems can be solved using grids.\", frequency = 2;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    em: \"em\",\n    tbody: \"tbody\",\n    td: \"td\",\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    MATHDIV: _missingComponent(\"MATHDIV\"),\n    Problems: _missingComponent(\"Problems\"),\n    Optional: _missingComponent(\"Optional\")\n  }, _props.components), {FocusProblem, HeaderLink, Resources, Resource, MATHSPAN, LanguageSection, CPPSection, JavaSection, PySection, MATHDIV, Problems, Optional, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [\"\\n\", \"\\n \\n\", \"\\n\", _jsx(FocusProblem, {\n      problem: \"sam\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"pathSam\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CPH\",\n        title: \"7.3 - Paths in a Grid\",\n        starred: true\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A common archetype of DP Problems involves a 2D grid of square cells (like graph\\r\\npaper), and we have to analyze \\\"paths.\\\" A \", _jsx(_components.strong, {\n        children: \"path\"\n      }), \" is a sequence of cells whose\\r\\nmovement is restricted to one direction on the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \"-axis and one direction on the\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"y\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n      }), \"-axis (for example, you may only be able to move down or to the right).\\r\\nUsually, the path also has to start in one corner of the grid and end on another\\r\\ncorner. The problem may ask you to count the number of paths that satisfy some\\r\\nproperty, or it may ask you to find the max/min of some quantity over all paths.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Usually, the sub-problems in this type of DP are a sub-rectangle of the whole\\r\\ngrid. For example, consider a problem in which we count the number of paths from\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(1, 1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(1, 1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(N, M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo separator=\\\"true\\\">,</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(N, M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" when we can only move in the positive \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \"-direction and the\\r\\npositive \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"y\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n      }), \"-direction.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[x][y]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[x][y]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" be the number of paths in the sub-rectangle whose\\r\\ncorners are \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(1, 1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(1, 1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". We know that the first cell in a path counted\\r\\nby \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[x][y]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[x][y]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(1, 1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(1, 1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", and we know the last cell is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\\r\\nHowever, the second-to-last cell can either be \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x-1, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x-1, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" or \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y-1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y-1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". Thus,\\r\\nif we pretend to append the cell \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" to the paths that end on \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x-1, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x-1, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" or\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y-1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y-1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", we construct paths that end on \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \". Working backwards like that\\r\\nmotivates the following recurrence:\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[x][y] = \\\\texttt{dp}[x-1][y] + \\\\texttt{dp}[x][y-1]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[x][y] = \\\\texttt{dp}[x-1][y] + \\\\texttt{dp}[x][y-1]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". We can use this\\r\\nrecurrence to calculate \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[N][M]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>N</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>M</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[N][M]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". Keep in mind that\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[1][1] = 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[1][1] = 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" because the path to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(1, 1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(1, 1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" is just a single cell. In\\r\\ngeneral, thinking about how you can append cells to paths will help you\\r\\nconstruct the correct DP recurrence.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using the DP recurrence, it's important that you compute the DP values in\\r\\nan order such that the dp-value for a cell is known before you use it to compute\\r\\nthe dp-value for another cell. In the example problem above, it's fine to\\r\\niterate through each row from \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n      }), \" to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"M-1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">M-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"\\r\\nfor(int i = 0; i < M; i++) {\\r\\n\\tfor(int j = 0; j < N; j++) {\\r\\n\\t\\tif(j > 0) dp[j][i] += dp[j - 1][i];\\r\\n\\t\\tif(i > 0) dp[j][i] += dp[j][i - 1];\\r\\n\\t}\\r\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"\\r\\nfor(int i = 0; i < M; i++) {\\r\\n\\tfor(int j = 0; j < N; j++) {\\r\\n\\t\\tif(j > 0) dp[j][i] += dp[j - 1][i];\\r\\n\\t\\tif(i > 0) dp[j][i] += dp[j][i - 1];\\r\\n\\t}\\r\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"for i in range(M):\\r\\n\\tfor j in range(N):\\r\\n\\t\\tif j > 0:\\r\\n\\t\\t\\tdp[j][i] += dp[j - 1][i]\\r\\n\\t\\tif i > 0:\\r\\n\\t\\t\\tdp[j][i] += dp[j][i - 1]\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note how the coordinates in the code are in the form (x coordinate, y\\r\\ncoordinate). Most of the time, it's more convenient to think of points as (row,\\r\\ncolumn) instead, which swaps the order of the coordinates, though the code uses\\r\\nthe former format to be consistent with the definition of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{dp}[x][y]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[x][y]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---grid-paths\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---grid-paths\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Grid Paths\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this problem, we are directly given a 2D grid of cells, and we have to count\\r\\nthe number of paths from corner to corner that can only go down (positive \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"y\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n      }), \"\\r\\ndirection) and to the right (positive \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" direction), with a special catch. The\\r\\npath can't use a cell marked with an asterisk.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We come close to being able to use our original recurrence, but we have to\\r\\nmodify it. Basically, if a cell \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" is normal, we can use the recurrence\\r\\nnormally. But, if cell \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(x, y)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(x, y)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" has an asterisk, the dp-value is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n      }), \", because no\\r\\npath can end on a trap.\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"\\r \\\\texttt{dp}[x][y] =\\r \\\\begin{cases}\\r \\\\texttt{dp}[x-1][y] + \\\\texttt{dp}[x][y-1] & \\\\text{if $(x, y)$ is not a trap} \\\\\\\\\\r 0, & \\\\text{if $(x, y)$ is a trap}\\r \\\\end{cases}\\r \\r\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable rowspacing=\\\"0.36em\\\" columnalign=\\\"left left\\\" columnspacing=\\\"1em\\\"><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mtext>if </mtext><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mstyle><mtext> is not a trap</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mn>0</mn><mo separator=\\\"true\\\">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mtext>if </mtext><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mo stretchy=\\\"false\\\">(</mo><mi>x</mi><mo separator=\\\"true\\\">,</mo><mi>y</mi><mo stretchy=\\\"false\\\">)</mo></mstyle><mtext> is a trap</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">\\r \\\\texttt{dp}[x][y] =\\r \\\\begin{cases}\\r \\\\texttt{dp}[x-1][y] + \\\\texttt{dp}[x][y-1] &amp; \\\\text{if $(x, y)$ is not a trap} \\\\\\\\\\r 0, &amp; \\\\text{if $(x, y)$ is a trap}\\r \\\\end{cases}\\r \\r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3em;vertical-align:-1.25em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"mpunct\\\">,</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"><span></span></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">if </span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord\\\"> is not a trap</span></span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">if </span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord\\\"> is a trap</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"><span></span></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The code for the DP recurrence doesn't change much:\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\ntypedef long long ll;\\r\\n\\r\\nbool ok[1000][1000];\\r\\nll dp[1000][1000];\\r\\n\\r\\nint main() {\\r\\n\\tios_base::sync_with_stdio(false);\\r\\n\\tcin.tie(NULL);\\r\\n\\r\\n\\tint n; cin >> n;\\r\\n\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\tstring s;\\r\\n\\t\\tcin >> s;\\r\\n\\t\\tfor(int j = 0; j < n; j++) {\\r\\n\\t\\t\\tif(s[j] == '.') ok[i][j] = true;\\r\\n\\t\\t\\telse ok[i][j] = false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tdp[0][0] = 1;\\r\\n\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\tfor(int j = 0; j < n; j++) {\\r\\n\\t\\t\\tif(!ok[i][j]) dp[i][j] = 0;\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tif(i > 0) dp[i][j] += dp[i - 1][j];\\r\\n\\t\\t\\t\\tif(j > 0) dp[i][j] += dp[i][j - 1];\\r\\n\\t\\t\\t\\tdp[i][j] %= 1000000007;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tcout << dp[n - 1][n - 1] << \\\"\\\\n\\\";\\r\\n\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"\\r\\nimport java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Main {\\r\\n\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\r\\n\\t\\tint N = Integer.parseInt(br.readLine());\\r\\n\\t\\tlong dp[][] = new long[N][N];\\r\\n\\t\\tboolean ok[][] = new boolean[N][N];\\r\\n\\t\\tfor(int i = 0; i < N; i++) {\\r\\n\\t\\t\\tString s = br.readLine();\\r\\n\\t\\t\\tfor(int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tif(s.charAt(j) == '.') ok[i][j] = true;\\r\\n\\t\\t\\t\\telse ok[i][j] = false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdp[0][0] = 1;\\r\\n\\t\\tfor(int i = 0; i < N; i++) {\\r\\n\\t\\t\\tfor(int j = 0; j < N; j++) {\\r\\n\\t\\t\\t\\tif(!ok[i][j]) dp[i][j] = 0;\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tif(i > 0) dp[i][j] += dp[i - 1][j];\\r\\n\\t\\t\\t\\t\\tif(j > 0) dp[i][j] += dp[i][j - 1];\\r\\n\\t\\t\\t\\t\\tdp[i][j] %= 1000000007;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tSystem.out.println(dp[N - 1][N - 1]);\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"n = int(input())\\r\\nok = [[char == \\\".\\\" for char in input()] for _ in range(n)]\\r\\ndp = [[0] * n for _ in range(n)]\\r\\ndp[0][0] = 1\\r\\n\\r\\nfor i in range(n):\\r\\n\\tfor j in range(n):\\r\\n\\t\\t# if current square is a trap\\r\\n\\t\\tif not ok[i][j]:\\r\\n\\t\\t\\tdp[i][j] = 0\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\tif i - 1 >= 0:\\r\\n\\t\\t\\t# add paths ending on the square above\\r\\n\\t\\t\\tdp[i][j] += dp[i - 1][j]\\r\\n\\t\\tif j - 1 >= 0:\\r\\n\\t\\t\\t# add paths ending on the square to the left\\r\\n\\t\\t\\tdp[i][j] += dp[i][j - 1]\\r\\n\\t\\tdp[i][j] %= int(1e9 + 7)\\r\\n\\r\\nprint(dp[n - 1][n - 1])\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note how the coordinates are now in the form (row, column) when reading in the\\r\\ninput.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---longest-common-subsequence\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---longest-common-subsequence\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Longest Common Subsequence\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Programiz\",\n        url: \"https://www.programiz.com/dsa/longest-common-subsequence\",\n        title: \"Longest Common Subsequence\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"GFG\",\n        url: \"https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/\",\n        title: \"Longest Common Subsequence\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The\\r\\n\", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Longest_common_subsequence_problem\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"longest common subsequence\"\n      }), \"\\r\\nis a classical string problem, but where's the grid?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In fact, we can create a grid to solve it. Think about the following algorithm\\r\\nto create any (not necessarily the longest) subsequence between two strings \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span></span></span></span>\"\n      }), \"\\r\\nand \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span></span></span></span>\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"We start with two pointers, \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \", and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n        }), \", each beginning at \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"0\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"We do some \\\"action\\\" at each time step, until there are no more available\\r\\n\\\"actions\\\". An \\\"action\\\" can be any of the following:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Increase the value of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" by \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" (only works if \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i < |A|\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>A</mi><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i &lt; |A|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6986em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n        }), \").\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Increase the value of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n        }), \" by \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" (only works if \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j < |B|\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>B</mi><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j &lt; |B|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n        }), \").\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Increase the value of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n        }), \" by \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" only if \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"A_i = B_j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>=</mo><msub><mi>B</mi><mi>j</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">A_i = B_j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.9694em;vertical-align:-0.2861em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \". Append that\\r\\ncharacter \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"A_i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">A_i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \" (or \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"B_j\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>B</mi><mi>j</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">B_j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.9694em;vertical-align:-0.2861em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n        }), \") to the common subsequence. (only works if\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i < |A|\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>A</mi><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i &lt; |A|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6986em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"j < |B|\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>B</mi><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j &lt; |B|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n        }), \").\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"We know that this process creates a common subsequence because characters\\r\\nwhich are common to both strings are found from left to right.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This algorithm can also be illustrated on a grid. Let \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"A := xabcd\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>A</mi><mo>:</mo><mo>=</mo><mi>x</mi><mi>a</mi><mi>b</mi><mi>c</mi><mi>d</mi></mrow><annotation encoding=\\\"application/x-tex\\\">A := xabcd</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mord mathnormal\\\">ab</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord mathnormal\\\">d</span></span></span></span>\"\n      }), \" and\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"B := yazc\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>B</mi><mo>:</mo><mo>=</mo><mi>y</mi><mi>a</mi><mi>z</mi><mi>c</mi></mrow><annotation encoding=\\\"application/x-tex\\\">B := yazc</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">zc</span></span></span></span>\"\n      }), \". Then, the current state of the algorithm can be defined as a\\r\\nspecific point \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(i, j)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>i</mi><mo separator=\\\"true\\\">,</mo><mi>j</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(i, j)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" using the values of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \" that we discussed\\r\\npreviously. The process of increasing pointers can be seen as moving right (if\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" is increased), moving down (if \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \" is increased), or moving diagonally (if\\r\\nboth \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"j\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n      }), \" increase). See that each diagonal movement adds one to the\\r\\nlength of the common subsequence.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, we re-phrase \\\"the length of the longest increasing subsequence\\\" as \\\"the\\r\\nmaximum number of 'diagonal movements' (\\\"action 3\\\" in the above algorithm) in a\\r\\npath from the top-left corner to the bottom-right corner on the grid.\\\" Thus, we\\r\\nhave constructed a grid-type DP problem.\"\n    }), \"\\n\", _jsxs(\"center\", {\n      children: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {}), _jsx(_components.th, {\n              children: _jsx(_components.em, {\n                children: \"x\"\n              })\n            }), _jsx(_components.th, {\n              children: _jsx(_components.em, {\n                children: \"a\"\n              })\n            }), _jsx(_components.th, {\n              children: _jsx(_components.em, {\n                children: \"b\"\n              })\n            }), _jsx(_components.th, {\n              children: _jsx(_components.em, {\n                children: \"c\"\n              })\n            }), _jsx(_components.th, {\n              children: _jsx(_components.em, {\n                children: \"d\"\n              })\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"y\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"0\"\n              })\n            }), _jsx(_components.td, {\n              children: \"0\"\n            }), _jsx(_components.td, {\n              children: \"0\"\n            }), _jsx(_components.td, {\n              children: \"0\"\n            }), _jsx(_components.td, {\n              children: \"0\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"a\"\n              })\n            }), _jsx(_components.td, {\n              children: \"0\"\n            }), _jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"1\"\n              })\n            }), _jsx(_components.td, {\n              children: \"1\"\n            }), _jsx(_components.td, {\n              children: \"1\"\n            }), _jsx(_components.td, {\n              children: \"1\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"z\"\n              })\n            }), _jsx(_components.td, {\n              children: \"0\"\n            }), _jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"1\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"1\"\n              })\n            }), _jsx(_components.td, {\n              children: \"1\"\n            }), _jsx(_components.td, {\n              children: \"1\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"c\"\n              })\n            }), _jsx(_components.td, {\n              children: \"0\"\n            }), _jsx(_components.td, {\n              children: \"1\"\n            }), _jsx(_components.td, {\n              children: \"1\"\n            }), _jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"2\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"2\"\n              })\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the above grid, see how the bolded path has diagonal movements at characters\\r\\n\\\"a\\\" and \\\"c\\\". That means the longest common subsequence between \\\"xabcd\\\" and\\r\\n\\\"yazc\\\" is \\\"ac\\\".\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Based on the three \\\"actions\\\", which are also the three possible movements of the\\r\\npath, we can create a DP-recurrence to find the longest common subsequence:\"\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"\\\\texttt{dp}[i][j] =\\r \\\\begin{cases}\\r \\\\max(\\\\texttt{dp}[i-1][j], \\\\texttt{dp}[i][j-1]) & \\\\text{if }A_i \\\\neq B_j \\\\\\\\\\r \\\\texttt{dp}[i-1][j-1]+1, & \\\\text{if }A_i = B_j\\r \\\\end{cases}\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>j</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable rowspacing=\\\"0.36em\\\" columnalign=\\\"left left\\\" columnspacing=\\\"1em\\\"><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>j</mi><mo stretchy=\\\"false\\\">]</mo><mo separator=\\\"true\\\">,</mo><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mtext>if </mtext><msub><mi>A</mi><mi>i</mi></msub><mo mathvariant=\\\"normal\\\">≠</mo><msub><mi>B</mi><mi>j</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mtext mathvariant=\\\"monospace\\\">dp</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\\\"false\\\">]</mo><mo>+</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mtext>if </mtext><msub><mi>A</mi><mi>i</mi></msub><mo>=</mo><msub><mi>B</mi><mi>j</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{dp}[i][j] =\\r \\\\begin{cases}\\r \\\\max(\\\\texttt{dp}[i-1][j], \\\\texttt{dp}[i][j-1]) &amp; \\\\text{if }A_i \\\\neq B_j \\\\\\\\\\r \\\\texttt{dp}[i-1][j-1]+1, &amp; \\\\text{if }A_i = B_j\\r \\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3em;vertical-align:-1.25em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">])</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">dp</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"><span></span></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">if </span></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\"><span class=\\\"mrel\\\"><span class=\\\"mord vbox\\\"><span class=\\\"thinbox\\\"><span class=\\\"rlap\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"inner\\\"><span class=\\\"mord\\\"><span class=\\\"mrel\\\"></span></span></span><span class=\\\"fix\\\"></span></span></span></span></span><span class=\\\"mrel\\\">=</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord text\\\"><span class=\\\"mord\\\">if </span></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2861em;\\\"><span></span></span></span></span></span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"><span></span></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"class Solution {\\r\\npublic:\\r\\n\\tint longestCommonSubsequence(string a, string b) {\\r\\n\\t\\tint dp[a.size()][b.size()];\\r\\n\\t\\tfor (int i = 0; i < a.size(); i++) {\\r\\n\\t\\t\\tfill(dp[i], dp[i] + b.size(), 0);\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < a.size(); i++) {\\r\\n\\t\\t\\tif(a[i] == b[0]) dp[i][0] = 1;\\r\\n\\t\\t\\tif(i != 0) dp[i][0] = max(dp[i][0], dp[i - 1][0]);\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < b.size(); i++) {\\r\\n\\t\\t\\tif(a[0] == b[i]) dp[0][i] = 1;\\r\\n\\t\\t\\tif(i != 0) dp[0][i] = max(dp[0][i], dp[0][i - 1]);\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 1; i < a.size(); i++) {\\r\\n\\t\\t\\tfor (int j = 1; j < b.size(); j++) {\\r\\n\\t\\t\\t\\tif(a[i] == b[j]) {\\r\\n\\t\\t\\t\\t\\tdp[i][j] = dp[i - 1][j - 1] + 1;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn dp[a.size() - 1][b.size() - 1];\\r\\n\\t}\\r\\n};\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"Ben - shorter version using macros:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//BeginCodeSnip{Benq Template}\\n#include <bits/stdc++.h>\\nusing namespace std;\\n \\nusing ll = long long;\\nusing db = long double; // or double, if TL is tight\\nusing str = string; // yay python!\\n\\nusing pi = pair<int,int>;\\nusing pl = pair<ll,ll>;\\nusing pd = pair<db,db>;\\n\\nusing vi = vector<int>;\\nusing vb = vector<bool>;\\nusing vl = vector<ll>;\\nusing vd = vector<db>; \\nusing vs = vector<str>;\\nusing vpi = vector<pi>;\\nusing vpl = vector<pl>; \\nusing vpd = vector<pd>;\\n\\n#define tcT template<class T\\n#define tcTU tcT, class U\\n// ^ lol this makes everything look weird but I'll try it\\ntcT> using V = vector<T>; \\ntcT, size_t SZ> using AR = array<T,SZ>; \\ntcT> using PR = pair<T,T>;\\n\\n// pairs\\n#define mp make_pair\\n#define f first\\n#define s second\\n\\n// vectors\\n// oops size(x), rbegin(x), rend(x) need C++17\\n#define sz(x) int((x).size())\\n#define bg(x) begin(x)\\n#define all(x) bg(x), end(x)\\n#define rall(x) x.rbegin(), x.rend() \\n#define sor(x) sort(all(x)) \\n#define rsz resize\\n#define ins insert \\n#define ft front()\\n#define bk back()\\n#define pb push_back\\n#define eb emplace_back \\n#define pf push_front\\n#define rtn return\\n\\n#define lb lower_bound\\n#define ub upper_bound \\ntcT> int lwb(V<T>& a, const T& b) { return int(lb(all(a),b)-bg(a)); }\\n\\n// loops\\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\\n#define F0R(i,a) FOR(i,0,a)\\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\\n#define R0F(i,a) ROF(i,0,a)\\n#define rep(a) F0R(_,a)\\n#define each(a,x) for (auto& a: x)\\n\\nconst int MOD = 1e9+7; // 998244353;\\nconst int MX = 2e5+5;\\nconst ll INF = 1e18; // not too close to LLONG_MAX\\nconst db PI = acos((db)-1);\\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); \\ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\\n\\n// bitwise ops\\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\\nconstexpr int bits(int x) { // assert(x >= 0); // make C++11 compatible until USACO updates ...\\n\\treturn x == 0 ? 0 : 31-__builtin_clz(x); } // floor(log2(x)) \\nconstexpr int p2(int x) { return 1<<x; }\\nconstexpr int msk2(int x) { return p2(x)-1; }\\n\\nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\\n\\ntcT> bool ckmin(T& a, const T& b) {\\n\\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\\ntcT> bool ckmax(T& a, const T& b) {\\n\\treturn a < b ? a = b, 1 : 0; }\\n\\ntcTU> T fstTrue(T lo, T hi, U f) {\\n\\thi ++; assert(lo <= hi); // assuming f is increasing\\n\\twhile (lo < hi) { // find first index such that f is true \\n\\t\\tT mid = lo+(hi-lo)/2;\\n\\t\\tf(mid) ? hi = mid : lo = mid+1; \\n\\t} \\n\\treturn lo;\\n}\\ntcTU> T lstTrue(T lo, T hi, U f) {\\n\\tlo --; assert(lo <= hi); // assuming f is decreasing\\n\\twhile (lo < hi) { // find first index such that f is true \\n\\t\\tT mid = lo+(hi-lo+1)/2;\\n\\t\\tf(mid) ? lo = mid : hi = mid-1;\\n\\t} \\n\\treturn lo;\\n}\\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\\n\\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\\ntcTU> void erase(T& t, const U& u) { // don't erase\\n\\tauto it = t.find(u); assert(it != end(t));\\n\\tt.erase(it); } // element that doesn't exist from (multi)set\\n\\n#define tcTUU tcT, class ...U\\n\\ninline namespace Helpers {\\n\\t//////////// is_iterable\\n\\t// https://stackoverflow.com/questions/13830158/check-if-a-variable-type-is-iterable\\n\\t// this gets used only when we can call begin() and end() on that type\\n\\ttcT, class = void> struct is_iterable : false_type {};\\n\\ttcT> struct is_iterable<T, void_t<decltype(begin(declval<T>())),\\n\\t                                  decltype(end(declval<T>()))\\n\\t                                 >\\n\\t                       > : true_type {};\\n\\ttcT> constexpr bool is_iterable_v = is_iterable<T>::value;\\n\\n\\t//////////// is_readable\\n\\ttcT, class = void> struct is_readable : false_type {};\\n\\ttcT> struct is_readable<T,\\n\\t        typename std::enable_if_t<\\n\\t            is_same_v<decltype(cin >> declval<T&>()), istream&>\\n\\t        >\\n\\t    > : true_type {};\\n\\ttcT> constexpr bool is_readable_v = is_readable<T>::value;\\n\\n\\t//////////// is_printable\\n\\t// // https://nafe.es/posts/2020-02-29-is-printable/\\n\\ttcT, class = void> struct is_printable : false_type {};\\n\\ttcT> struct is_printable<T,\\n\\t        typename std::enable_if_t<\\n\\t            is_same_v<decltype(cout << declval<T>()), ostream&>\\n\\t        >\\n\\t    > : true_type {};\\n\\ttcT> constexpr bool is_printable_v = is_printable<T>::value;\\n}\\n\\ninline namespace Input {\\n\\ttcT> constexpr bool needs_input_v = !is_readable_v<T> && is_iterable_v<T>;\\n\\ttcTUU> void re(T& t, U&... u);\\n\\ttcTU> void re(pair<T,U>& p); // pairs\\n\\n\\t// re: read\\n\\ttcT> typename enable_if<is_readable_v<T>,void>::type re(T& x) { cin >> x; } // default\\n\\ttcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; } // complex\\n\\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i); // ex. vectors, arrays\\n\\ttcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\\n\\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i) {\\n\\t\\teach(x,i) re(x); }\\n\\ttcTUU> void re(T& t, U&... u) { re(t); re(u...); } // read multiple\\n\\n\\t// rv: resize and read vectors\\n\\tvoid rv(size_t) {}\\n\\ttcTUU> void rv(size_t N, V<T>& t, U&... u);\\n\\ttemplate<class...U> void rv(size_t, size_t N2, U&... u);\\n\\ttcTUU> void rv(size_t N, V<T>& t, U&... u) {\\n\\t\\tt.rsz(N); re(t);\\n\\t\\trv(N,u...); }\\n\\ttemplate<class...U> void rv(size_t, size_t N2, U&... u) {\\n\\t\\trv(N2,u...); }\\n\\n\\t// dumb shortcuts to read in ints\\n\\tvoid decrement() {} // subtract one from each\\n\\ttcTUU> void decrement(T& t, U&... u) { --t; decrement(u...); }\\n\\t#define ints(...) int __VA_ARGS__; re(__VA_ARGS__);\\n\\t#define int1(...) ints(__VA_ARGS__); decrement(__VA_ARGS__);\\n}\\n\\ninline namespace ToString {\\n\\ttcT> constexpr bool needs_output_v = !is_printable_v<T> && is_iterable_v<T>;\\n\\n\\t// ts: string representation to print\\n\\ttcT> typename enable_if<is_printable_v<T>,str>::type ts(T v) {\\n\\t\\tstringstream ss; ss << fixed << setprecision(15) << v;\\n\\t\\treturn ss.str(); } // default\\n\\ttcT> str bit_vec(T t) { // bit vector to string\\n\\t\\tstr res = \\\"{\\\"; F0R(i,sz(t)) res += ts(t[i]);\\n\\t\\tres += \\\"}\\\"; return res; }\\n\\tstr ts(V<bool> v) { return bit_vec(v); }\\n\\ttemplate<size_t SZ> str ts(bitset<SZ> b) { return bit_vec(b); } // bit vector\\n\\ttcTU> str ts(pair<T,U> p); // pairs\\n\\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v); // vectors, arrays\\n\\ttcTU> str ts(pair<T,U> p) { return \\\"(\\\"+ts(p.f)+\\\", \\\"+ts(p.s)+\\\")\\\"; }\\n\\ttcT> typename enable_if<is_iterable_v<T>,str>::type ts_sep(T v, str sep) {\\n\\t\\t// convert container to string w/ separator sep\\n\\t\\tbool fst = 1; str res = \\\"\\\";\\n\\t\\tfor (const auto& x: v) {\\n\\t\\t\\tif (!fst) res += sep;\\n\\t\\t\\tfst = 0; res += ts(x);\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n\\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v) {\\n\\t\\treturn \\\"{\\\"+ts_sep(v,\\\", \\\")+\\\"}\\\"; }\\n\\n\\t// for nested DS\\n\\ttemplate<int, class T> typename enable_if<!needs_output_v<T>,vs>::type \\n\\t  ts_lev(const T& v) { return {ts(v)}; }\\n\\ttemplate<int lev, class T> typename enable_if<needs_output_v<T>,vs>::type \\n\\t  ts_lev(const T& v) {\\n\\t\\tif (lev == 0 || !sz(v)) return {ts(v)};\\n\\t\\tvs res;\\n\\t\\tfor (const auto& t: v) {\\n\\t\\t\\tif (sz(res)) res.bk += \\\",\\\";\\n\\t\\t\\tvs tmp = ts_lev<lev-1>(t);\\n\\t\\t\\tres.ins(end(res),all(tmp));\\n\\t\\t}\\n\\t\\tF0R(i,sz(res)) {\\n\\t\\t\\tstr bef = \\\" \\\"; if (i == 0) bef = \\\"{\\\";\\n\\t\\t\\tres[i] = bef+res[i];\\n\\t\\t}\\n\\t\\tres.bk += \\\"}\\\";\\n\\t\\treturn res;\\n\\t}\\n}\\n\\ninline namespace Output {\\n\\ttemplate<class T> void pr_sep(ostream& os, str, const T& t) { os << ts(t); }\\n\\ttemplate<class T, class... U> void pr_sep(ostream& os, str sep, const T& t, const U&... u) {\\n\\t\\tpr_sep(os,sep,t); os << sep; pr_sep(os,sep,u...); }\\n\\t// print w/ no spaces\\n\\ttemplate<class ...T> void pr(const T&... t) { pr_sep(cout,\\\"\\\",t...); } \\n\\t// print w/ spaces, end with newline\\n\\tvoid ps() { cout << \\\"\\\\n\\\"; }\\n\\ttemplate<class ...T> void ps(const T&... t) { pr_sep(cout,\\\" \\\",t...); ps(); } \\n\\t// debug to cerr\\n\\ttemplate<class ...T> void dbg_out(const T&... t) {\\n\\t\\tpr_sep(cerr,\\\" | \\\",t...); cerr << endl; }\\n\\tvoid loc_info(int line, str names) {\\n\\t\\tcerr << \\\"Line(\\\" << line << \\\") -> [\\\" << names << \\\"]: \\\"; }\\n\\ttemplate<int lev, class T> void dbgl_out(const T& t) {\\n\\t\\tcerr << \\\"\\\\n\\\\n\\\" << ts_sep(ts_lev<lev>(t),\\\"\\\\n\\\") << \\\"\\\\n\\\" << endl; }\\n\\t#ifdef LOCAL\\n\\t\\t#define dbg(...) loc_info(__LINE__,#__VA_ARGS__), dbg_out(__VA_ARGS__)\\n\\t\\t#define dbgl(lev,x) loc_info(__LINE__,#x), dbgl_out<lev>(x)\\n\\t#else // don't actually submit with this\\n\\t\\t#define dbg(...) 0\\n\\t\\t#define dbgl(lev,x) 0\\n\\t#endif\\n}\\n\\ninline namespace FileIO {\\n\\tvoid setIn(str s)  { freopen(s.c_str(), \\\"r\\\", stdin); }\\n\\tvoid setOut(str s) { freopen(s.c_str(), \\\"w\\\", stdout); }\\n\\tvoid setIO(str s = \\\"\\\") {\\n\\t\\tcin.tie(0)->sync_with_stdio(0); // unsync C / C++ I/O streams\\n\\t\\t// cin.exceptions(cin.failbit);\\n\\t\\t// throws exception when do smth illegal\\n\\t\\t// ex. try to read letter into int\\n\\t\\tif (sz(s)) setIn(s+\\\".in\\\"), setOut(s+\\\".out\\\"); // for old USACO\\n\\t}\\n}\\n//EndCodeSnip\\nclass Solution {\\r\\npublic:\\r\\n\\tint longestCommonSubsequence(str a, str b) {\\r\\n\\t\\tV<vi> dp(sz(a) + 1, vi(sz(b) + 1));\\r\\n\\t\\tF0R(i, sz(a) + 1) F0R(j, sz(b) + 1) {\\r\\n\\t\\t\\tif (i < sz(a)) ckmax(dp[i + 1][j], dp[i][j]);\\r\\n\\t\\t\\tif (j < sz(b)) ckmax(dp[i][j + 1], dp[i][j]);\\r\\n\\t\\t\\tif (i < sz(a) && j < sz(b))\\r\\n\\t\\t\\t\\tckmax(dp[i + 1][j + 1], dp[i][j] + (a[i] == b[j]));\\r\\n\\t\\t}\\r\\n\\t\\treturn dp[sz(a)][sz(b)];\\r\\n\\t}\\r\\n};\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"class Solution {\\r\\n\\tpublic int longestCommonSubsequence(String a, String b) {\\r\\n\\t\\tint[][] dp = new int[a.length()][b.length()];\\r\\n\\t\\tfor (int i = 0; i < a.length(); i++) {\\r\\n\\t\\t\\tif(a.charAt(i) == b.charAt(0)) dp[i][0] = 1;\\r\\n\\t\\t\\tif(i != 0) dp[i][0] = Math.max(dp[i][0], dp[i-1][0]);\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < b.length(); i++) {\\r\\n\\t\\t\\tif(a.charAt(0) == b.charAt(i)) {\\r\\n\\t\\t\\t\\tdp[0][i] = 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(i != 0) dp[0][i] = Math.max(dp[0][i], dp[0][i-1]);\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 1; i < a.length(); i++) {\\r\\n\\t\\t\\tfor (int j = 1; j < b.length(); j++) {\\r\\n\\t\\t\\t\\tif(a.charAt(i) == b.charAt(j)) {\\r\\n\\t\\t\\t\\t\\tdp[i][j] = dp[i-1][j-1]+1;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tdp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn dp[a.length()-1][b.length()-1];\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"class Solution:\\r\\n\\tdef longestCommonSubsequence(self, a: str, b: str) -> int:\\r\\n\\t\\tdp = [[0] * (len(b) + 1)  for _ in range(len(a) + 1)]\\r\\n\\t\\tfor i in range(1, len(a) + 1):\\r\\n\\t\\t\\tfor j in range(1, len(b) + 1):\\r\\n\\t\\t\\t\\tif a[i - 1] == b[j - 1]:\\r\\n\\t\\t\\t\\t\\tdp[i][j] = dp[i - 1][j - 1] + 1\\r\\n\\t\\t\\t\\telse:\\r\\n\\t\\t\\t\\t\\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\\r\\n\\t\\treturn dp[len(a)][len(b)]\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"pathsGrid\"\n    }), \"\\n\", _jsxs(Optional, {\n      children: [_jsx(_components.p, {\n        children: \"Don't expect you to solve this task at this level, but you might find it\\r\\ninteresting:\"\n      }), _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://oj.uz/problem/view/IZhO13_rowords\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Circular Longest Common Subsequence\"\n        })\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Paths on Grids","author":"Nathan Chen, Michael Cao, Benjamin Qi, Andrew Wang","contributors":"Maggie Liu","id":"paths-grids","prerequisites":["intro-dp"],"description":"Counting the number of \"special\" paths on a grid, and how some string problems can be solved using grids.","frequency":2},"parent":{"name":"Paths_Grids","relativePath":"4_Gold/Paths_Grids.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Grid Paths","slug":"solution---grid-paths"},{"depth":2,"value":"Solution - Longest Common Subsequence","slug":"solution---longest-common-subsequence"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Grid Paths","slug":"solution---grid-paths"},{"depth":2,"value":"Solution - Longest Common Subsequence","slug":"solution---longest-common-subsequence"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Grid Paths","slug":"solution---grid-paths"},{"depth":2,"value":"Solution - Longest Common Subsequence","slug":"solution---longest-common-subsequence"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sam","problems":[{"uniqueId":"cses-1638","name":"Grid Paths","url":"https://cses.fi/problemset/task/1638","source":"CSES","difficulty":"Easy","isStarred":true,"tags":["DP"],"solution":null}]},{"listId":"pathSam","problems":[{"uniqueId":"lc-LongestCommonSubsequence","name":"Longest Common Subsequence","url":"https://leetcode.com/problems/longest-common-subsequence/","source":"LC","difficulty":"Easy","isStarred":true,"tags":["DP"],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"dp[first i characters in first string][first j characters in second string] -> longest common subsequence, transition if s[i] = t[j] for strings s and t"}}]},{"listId":"pathsGrid","problems":[{"uniqueId":"cses-1746","name":"Array Description","url":"https://cses.fi/problemset/task/1746","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1639","name":"Edit Distance","url":"https://cses.fi/problemset/task/1639","source":"CSES","difficulty":"Easy","isStarred":true,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-670","name":"Cow Checklist","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=670","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-598","name":"Radio Contact","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=598","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-718","name":"Why Did the Cow Cross the Road II","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=718","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-553","name":"Palindromic Paths","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=553","source":"Old Gold","difficulty":"Hard","isStarred":false,"tags":["DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"paths-grids"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}