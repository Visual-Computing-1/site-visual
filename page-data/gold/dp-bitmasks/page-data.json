{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/dp-bitmasks",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*\nIn particular those that involve making GCD equal to $1$, may be optimized using a sort of bitmask over primes.\n*/\n/*\nTherefore, if we have a reasonably short list of primes (perhaps $\\leq 20$), then we can simply represent numbers with their prime divisors bitmask and change the NT problem to a bitmask problem.\n(Similar ideas can be used to tackle Professional Layer/Nora's Toy Boxes)\n\nHowever, in less restricted cases, there are usually much more than just 20 bits.\nSuppose the upper limit on input integers is $100000$.\nThere are $9592$ primes that are less than $100000$, and if each of those primes represents a bit, then we would have way too many possible bitmasks.\nHowever, with only $100000$ distinct integers, clearly we do not need to consider all $2^{9592}$ bitmasks.\n\nNotice how masks like $0b1100 \\dots 000$ (which corresponds to $99991 \\times 99989 = 9998000099$) exceed the maximum limit on the input.\nThus, they would never actually be used.\nIn fact, the vast majority of the $2^{9592}$ masks are unusable in the same way;\nwe only care about the masks which correspond to integers less than the upper limit, which in this case is $100000$.\n\nAdditionally, bitmasks of length $9592$ are extraordinarily long.\nSince we know a conservative bound of $100000$ different bitmasks anyways, one may consider trying to assign each bitmask to an integer between $1$ and $100000$.\nIn fact, the simplest way to do this is just to assign each bitmask to the integer it corresponds to -- ignoring the mask altogether!\n(Notice how not all integers actually correspond to a bitmask. The bitmask corresponding to $4$, for example, would be represented by the integer $2$)\n*/\n/*Operating like this makes it easier to think about and apply PIE or SOS wrt numbers and GCDs.*/\n/*(Similar ideas can be used to tackle Gold Experience)*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"dp-bitmasks\", title = \"Bitmask DP\", author = \"Michael Cao, Siyong Huang\", contributors = \"Andrew Wang, Neo Wang\", prerequisites = [\"intro-bitwise\", \"intro-dp\"], description = \"DP problems that require iterating over subsets.\", frequency = 1, redirects = [\"/plat/dp-bitmasks\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    Info: _missingComponent(\"Info\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    MATHDIV: _missingComponent(\"MATHDIV\"),\n    Problems: _missingComponent(\"Problems\"),\n    Asterisk: _missingComponent(\"Asterisk\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\")\n  }, _props.components), {Info, HeaderLink, FocusProblem, Resources, Resource, Spoiler, MATHSPAN, MATHDIV, Problems, Asterisk, IncompleteSection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Info, {\n      title: \"Pro Tip\",\n      children: _jsx(_components.p, {\n        children: \"You can often use this to solve subtasks.\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"bitmask-dp\",\n      children: [_jsx(_components.a, {\n        href: \"#bitmask-dp\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Bitmask DP\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sam\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"10.5 - DP on Bits, 19.2 - Hamiltonian Paths\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Elevator Rides, SOS, Hamiltonian\"\n        })\n      }), _jsx(Resource, {\n        source: \"NW@nwatx\",\n        title: \"A Primer on Bitmask DP\",\n        url: \"https://nwatx.me/post/dpbitmasks\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"PAPS\",\n        title: \"9.4 - Subset DP\",\n        children: _jsx(_components.p, {\n          children: \"example - similar to Hamiltonian\"\n        })\n      }), _jsx(Resource, {\n        source: \"CF\",\n        title: \"DP Over Subsets\",\n        url: \"337\",\n        children: _jsx(_components.p, {\n          children: \"Hamiltonian walks\"\n        })\n      }), _jsx(Resource, {\n        source: \"DPCC@DP for Computing Contests\",\n        title: \"Bitmasking\",\n        url: \"https://dp-book.com/Dynamic_Programming.pdf#page=37\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Diagram\"\n        })\n      }), _jsx(Resource, {\n        source: \"HE@HackerEarth\",\n        title: \"DP and Bit Masking\",\n        url: \"https://www.hackerearth.com/practice/algorithms/dynamic-programming/bit-masking/tutorial/\"\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsxs(_components.p, {\n        children: [\"Let \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"dp[S][i]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>S</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">dp[S][i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \" be the number of routes that visit all the cities in the subset\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"S\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n        }), \" and end at city \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \". The transitions will then be:\"]\n      }), _jsx(MATHDIV, {\n        className: \"math math-display\",\n        latex: \"dp[S][i] = \\\\sum_{x \\\\in adj[i]} dp[S \\\\setminus \\\\{i\\\\}][x] \\\\text{ if $x \\\\in S$}\",\n        children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>S</mi><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>a</mi><mi>d</mi><mi>j</mi><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow></munder><mi>d</mi><mi>p</mi><mo stretchy=\\\"false\\\">[</mo><mi>S</mi><mo>∖</mo><mo stretchy=\\\"false\\\">{</mo><mi>i</mi><mo stretchy=\\\"false\\\">}</mo><mo stretchy=\\\"false\\\">]</mo><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mrow><mtext> if </mtext><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mi>x</mi><mo>∈</mo><mi>S</mi></mstyle></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">dp[S][i] = \\\\sum_{x \\\\in adj[i]} dp[S \\\\setminus \\\\{i\\\\}][x] \\\\text{ if $x \\\\in S$}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.566em;vertical-align:-1.516em;\\\"></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.05em;\\\"><span style=\\\"top:-1.809em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">x</span><span class=\\\"mrel mtight\\\">∈</span><span class=\\\"mord mathnormal mtight\\\">a</span><span class=\\\"mord mathnormal mtight\\\">d</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mopen mtight\\\">[</span><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mclose mtight\\\">]</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∑</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.516em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∖</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">}]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mord text\\\"><span class=\\\"mord\\\"> if </span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">∈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span></span></span>\"\n      }), _jsxs(_components.p, {\n        children: [\"where \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"S \\\\setminus \\\\{i\\\\}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi><mo>∖</mo><mo stretchy=\\\"false\\\">{</mo><mi>i</mi><mo stretchy=\\\"false\\\">}</mo></mrow><annotation encoding=\\\"application/x-tex\\\">S \\\\setminus \\\\{i\\\\}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∖</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">}</span></span></span></span>\"\n        }), \" is the subset \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"S\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n        }), \" without city \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \".\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\n\\r\\nconst int MAX_N = 20;\\r\\nconst ll MOD = (ll) 1e9 + 7;\\r\\n\\r\\nll dp[1 << MAX_N][MAX_N];\\r\\n// come_from[i] contains the cities that can fly to i\\r\\nvector<int> come_from[MAX_N];\\r\\n\\r\\nint main() {\\r\\n\\tint city_num;\\r\\n\\tint flight_num;\\r\\n\\tcin >> city_num >> flight_num;\\r\\n\\tfor (int f = 0; f < flight_num; f++) {\\r\\n\\t\\tint start, end;\\r\\n\\t\\tcin >> start >> end;\\r\\n\\t\\tcome_from[--end].push_back(--start);\\r\\n\\t}\\r\\n\\t\\r\\n\\tdp[1][0] = 1;\\r\\n\\tfor (int s = 2; s < 1 << city_num; s++) {\\r\\n\\t\\t// only consider subsets that have the first city\\r\\n\\t\\tif ((s & (1 << 0)) == 0)\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t// also only consider subsets with the last city if it's the full subset\\r\\n\\t\\tif ((s & (1 << (city_num - 1))) && s != ((1 << city_num) - 1))\\r\\n\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\tfor (int end = 0; end < city_num; end++) {\\r\\n\\t\\t\\tif ((s & (1 << end)) == 0)\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// the subset that doesn't include the current end\\r\\n\\t\\t\\tint prev = s - (1 << end);\\r\\n\\t\\t\\tfor (int j : come_from[end]) {\\r\\n\\t\\t\\t\\tif ((s & (1 << j))) {\\r\\n\\t\\t\\t\\t\\tdp[s][end] += dp[prev][j];\\r\\n\\t\\t\\t\\t\\tdp[s][end] %= MOD;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\t\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << dp[(1 << city_num) - 1][city_num - 1] << '\\\\n';\\r\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"application---bitmask-over-primes\",\n      children: [_jsx(_components.a, {\n        href: \"#application---bitmask-over-primes\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Application - Bitmask over Primes\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"rough-idea\",\n      children: [_jsx(_components.a, {\n        href: \"#rough-idea\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Rough Idea\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In some number theory problems, it helps to represent each number were\\r\\nrepresented by a bitmask of its prime divisors. For example, the set\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\{6, 10, 15 \\\\}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">{</mo><mn>6</mn><mo separator=\\\"true\\\">,</mo><mn>10</mn><mo separator=\\\"true\\\">,</mo><mn>15</mn><mo stretchy=\\\"false\\\">}</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\{6, 10, 15 \\\\}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord\\\">6</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">10</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">15</span><span class=\\\"mclose\\\">}</span></span></span></span>\"\n      }), \" can be represented by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\{0b011, 0b101, 0b110 \\\\}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">{</mo><mn>0</mn><mi>b</mi><mn>011</mn><mo separator=\\\"true\\\">,</mo><mn>0</mn><mi>b</mi><mn>101</mn><mo separator=\\\"true\\\">,</mo><mn>0</mn><mi>b</mi><mn>110</mn><mo stretchy=\\\"false\\\">}</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\{0b011, 0b101, 0b110 \\\\}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord\\\">0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">011</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">101</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">110</span><span class=\\\"mclose\\\">}</span></span></span></span>\"\n      }), \" (in\\r\\nbinary)\", _jsxs(Asterisk, {\n        children: [\"The \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"0b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">0b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        }), \" prefix simply means that the number is\\r\\nbinary\"]\n      }), \", where the bits correspond to divisibility by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[2, 3, 5]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>2</mn><mo separator=\\\"true\\\">,</mo><mn>3</mn><mo separator=\\\"true\\\">,</mo><mn>5</mn><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[2, 3, 5]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">3</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">5</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then, here are some equivalent operations between masks and these integers:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Bitwise AND is GCD\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Bitwise OR is LCM\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Iterating over bits is iterating over prime divisors\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Iterating over submasks is iterating over divisors\"\n      }), \"\\n\"]\n    }), \"\\n\", \"\\n\", _jsxs(_components.p, {\n      children: [\"Choosing a set with GCD \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" is equivalent to choosing a set of bitmasks that AND\\r\\nto \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n      }), \". For example, we can see that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\{6, 10 \\\\}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">{</mo><mn>6</mn><mo separator=\\\"true\\\">,</mo><mn>10</mn><mo stretchy=\\\"false\\\">}</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\{6, 10 \\\\}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord\\\">6</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">10</span><span class=\\\"mclose\\\">}</span></span></span></span>\"\n      }), \" doesn't have GCD \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" because\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0b011 \\\\& 0b101 = 0b001 \\\\neq 0\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mi>b</mi><mn>011</mn><mi mathvariant=\\\"normal\\\">&amp;</mi><mn>0</mn><mi>b</mi><mn>101</mn><mo>=</mo><mn>0</mn><mi>b</mi><mn>001</mn><mo mathvariant=\\\"normal\\\">≠</mo><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0b011 \\\\&amp; 0b101 = 0b001 \\\\neq 0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">011&amp;0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">101</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">001</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\"><span class=\\\"mrel\\\"><span class=\\\"mord vbox\\\"><span class=\\\"thinbox\\\"><span class=\\\"rlap\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"inner\\\"><span class=\\\"mord\\\"><span class=\\\"mrel\\\"></span></span></span><span class=\\\"fix\\\"></span></span></span></span></span><span class=\\\"mrel\\\">=</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n      }), \". On the other hand, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\{6, 10, 15 \\\\}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">{</mo><mn>6</mn><mo separator=\\\"true\\\">,</mo><mn>10</mn><mo separator=\\\"true\\\">,</mo><mn>15</mn><mo stretchy=\\\"false\\\">}</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\{6, 10, 15 \\\\}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">{</span><span class=\\\"mord\\\">6</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">10</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">15</span><span class=\\\"mclose\\\">}</span></span></span></span>\"\n      }), \" has GCD \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \"\\r\\nbecause \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0b011 \\\\& 0b101 \\\\& 0b110 = 0b000 = 0\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mi>b</mi><mn>011</mn><mi mathvariant=\\\"normal\\\">&amp;</mi><mn>0</mn><mi>b</mi><mn>101</mn><mi mathvariant=\\\"normal\\\">&amp;</mi><mn>0</mn><mi>b</mi><mn>110</mn><mo>=</mo><mn>0</mn><mi>b</mi><mn>000</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0b011 \\\\&amp; 0b101 \\\\&amp; 0b110 = 0b000 = 0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">011&amp;0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">101&amp;0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">110</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mord\\\">000</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", \"\\n\", \"\\n\", \"\\n\", _jsx(IncompleteSection, {\n      children: _jsx(_components.p, {\n        children: \"Maybe this is just standard NT, but I've always thought about it as a bitmask.\\r\\nAlso, any tutorials or more problems of this type?\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems-1\",\n      children: [_jsx(_components.a, {\n        href: \"#problems-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"bitmask_nt\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  prerequisites,\n  description,\n  frequency,\n  redirects,\n  default: MDXContent\n};\n","frontmatter":{"title":"Bitmask DP","author":"Michael Cao, Siyong Huang","contributors":"Andrew Wang, Neo Wang","id":"dp-bitmasks","prerequisites":["intro-bitwise","intro-dp"],"description":"DP problems that require iterating over subsets.","frequency":1},"parent":{"name":"DP_Bitmasks","relativePath":"4_Gold/DP_Bitmasks.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Bitmask DP","slug":"bitmask-dp"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Application - Bitmask over Primes","slug":"application---bitmask-over-primes"},{"depth":3,"value":"Rough Idea","slug":"rough-idea"},{"depth":3,"value":"Problems","slug":"problems-1"}],"java":[{"depth":2,"value":"Bitmask DP","slug":"bitmask-dp"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Application - Bitmask over Primes","slug":"application---bitmask-over-primes"},{"depth":3,"value":"Rough Idea","slug":"rough-idea"},{"depth":3,"value":"Problems","slug":"problems-1"}],"py":[{"depth":2,"value":"Bitmask DP","slug":"bitmask-dp"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Application - Bitmask over Primes","slug":"application---bitmask-over-primes"},{"depth":3,"value":"Rough Idea","slug":"rough-idea"},{"depth":3,"value":"Problems","slug":"problems-1"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sam","problems":[{"uniqueId":"cses-1690","name":"Hamiltonian Flights","url":"https://cses.fi/problemset/task/1690","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["Bitmasks"],"solution":null}]},{"listId":"general","problems":[{"uniqueId":"ac-matching","name":"Matching","url":"https://atcoder.jp/contests/dp/tasks/dp_o?lang=en","source":"AC","difficulty":"Easy","isStarred":false,"tags":["Bitmasks","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-1316E","name":"Team Building","url":"https://codeforces.com/contest/1316/problem/E","source":"CF","difficulty":"Easy","isStarred":false,"tags":["Bitmasks","MinCostFlow"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-494","name":"Guard Mark","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=494","source":"Old Gold","difficulty":"Easy","isStarred":false,"tags":["Bitmasks","DP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_guard_gold.html","sketch":null}},{"uniqueId":"usaco-1089","name":"Uddered but not Herd","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=1089","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["Bitmasks","DP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_prob1_gold_jan21.html","sketch":null}},{"uniqueId":"usaco-515","name":"Moovie Mooving","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=515","source":"Old Gold","difficulty":"Easy","isStarred":false,"tags":["Bitmasks","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1653","name":"Elevator Rides","url":"https://cses.fi/problemset/task/1653","source":"CSES","difficulty":"Normal","isStarred":false,"tags":["Bitmasks","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"izho-14-bank","name":"2014 - Bank","url":"https://oj.uz/problem/view/IZhO14_bank","source":"IZhO","difficulty":"Normal","isStarred":false,"tags":["Bitmasks","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ys-MaxIndepSet","name":"Max Indep Set","url":"https://judge.yosupo.jp/problem/maximum_independent_set","source":"YS","difficulty":"Normal","isStarred":false,"tags":["Bitmasks","Meet in Middle","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"kattis-catandmice","name":"Cat & Mice","url":"https://open.kattis.com/problems/catandmice","source":"Kattis","difficulty":"Normal","isStarred":false,"tags":["Bitmasks","DP","Geometry","Binary Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"izho-17-LongestBeautifulSequence","name":"2017 - Longest beautiful sequence","url":"https://oj.uz/problem/view/IZhO17_subsequence","source":"IZhO","difficulty":"Hard","isStarred":false,"tags":["Bitmasks","DP"],"solution":null},{"uniqueId":"coci-16-burza","name":"2016 - Burza","url":"https://oj.uz/problem/view/COCI16_burza","source":"COCI","difficulty":"Hard","isStarred":true,"tags":["Bitmasks","DP","Game Theory","Sqrt"],"solution":null},{"uniqueId":"usaco-1209","name":"Redistributing Gifts","url":"http://usaco.org/index.php?page=viewproblem2&cpid=1209","source":"Gold","difficulty":"Hard","isStarred":false,"tags":["Bitmasks","DP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_prob1_gold_feb22.html","sketch":null}},{"uniqueId":"ceoi-19-AmusementPark","name":"2019 - Amusement Park","url":"https://oj.uz/problem/view/CEOI19_amusementpark","source":"CEOI","difficulty":"Very Hard","isStarred":false,"tags":["Bitmasks","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ioi-07-training","name":"2007 - Training","url":"https://oj.uz/problem/view/IOI07_training","source":"IOI","difficulty":"Very Hard","isStarred":true,"tags":["Bitmasks","DP","Tree","DFS"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2007/33","sketch":null}}]},{"listId":"bitmask_nt","problems":[{"uniqueId":"cf-1043F","name":"Make it One","url":"https://codeforces.com/contest/1043/problem/F","source":"CF","difficulty":"Hard","isStarred":false,"tags":["DP","Combinatorics"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1103D","name":"Professional Layer","url":"https://codeforces.com/contest/1103/problem/D","source":"CF","difficulty":"Very Hard","isStarred":false,"tags":["DP","Bitmasks","NT"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1148G","name":"Gold Experience","url":"https://codeforces.com/contest/1148/problem/G","source":"CF","difficulty":"Insane","isStarred":false,"tags":["Bitmasks","NT","Binary Search"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1292F","name":"Nora's Toy Boxes","url":"https://codeforces.com/contest/1292/problem/F","source":"CF","difficulty":"Insane","isStarred":false,"tags":["DP","Bitmasks","Combinatorics"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]}]}},"pageContext":{"id":"dp-bitmasks"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}