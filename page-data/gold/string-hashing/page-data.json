{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/string-hashing",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*## Adjacency Lists\n\n(elaborate)\n\n<Problems problems={\"adj\"} />\n*/\n/*<Warning>\n\nConstraints for \"Bull in a China Shop\" are incorrect, should say $R,C\\le 500$. Also, time + memory limits are unnecessarily tight ...\n\n</Warning>*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"string-hashing\", title = \"String Hashing\", author = \"Benjamin Qi, Andi Qu\", contributors = \"Andrew Wang, Kevin Sheng\", description = \"Quickly test equality of substrings with a small probability of failure.\", frequency = 1, prerequisites = [\"modular\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    h3: \"h3\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Optional: _missingComponent(\"Optional\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    MATHDIV: _missingComponent(\"MATHDIV\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {HeaderLink, Resources, Resource, Optional, LanguageSection, CPPSection, JavaSection, PySection, MATHDIV, MATHSPAN, FocusProblem, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"26.3 - String Hashing\",\n        starred: true,\n        children: \"good intro\"\n      }), \"\\r\\n\", _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"String Hashing\",\n        url: \"string/string-hashing.html\",\n        starred: true,\n        children: \"code\"\n      }), \"\\r\\n\", _jsx(Resource, {\n        source: \"PAPS\",\n        title: \"14.3 - Hashing\",\n        starred: true,\n        children: \"many applications\"\n      })]\n    }), \"\\n\", _jsxs(Optional, {\n      children: [_jsxs(_components.p, {\n        children: [\"If \\\"small\\\" isn't a satisfying-enough answer for \\\"what's the probability of\\r\\ncollision?\\\", then you should check out\\r\\n\", _jsx(_components.a, {\n          href: \"http://rng-58.blogspot.com/2017/02/hashing-and-probability-of-collision.html\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"rng-58's blog post talking about hashing\"\n        }), \".\\r\\nThis blog post talks about the Schwarz-Zippel lemma and how that can be used to\\r\\ncalculate the probability of a collision.\"]\n      }), _jsx(_components.p, {\n        children: \"It also explains how to hash rooted trees - an uncommon technique, but still\\r\\nuseful to know!\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation---single-base\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation---single-base\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation - Single Base\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As mentioned in the articles above, there is no need to calculate modular\\r\\ninverses.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <vector>\\r\\n#include <string>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nclass HashedString {\\r\\n\\tprivate:\\r\\n\\t\\t// change M and P if you want\\r\\n\\t\\tstatic const long long M = 1e9 + 9;\\r\\n\\t\\tstatic const long long P = 9973;\\r\\n\\r\\n\\t\\t// pow[i] contains P^i % M\\r\\n\\t\\tstatic vector<long long> pow;\\r\\n\\r\\n\\t\\t// p_hash[i] is the hash of the first i characters of the given string\\r\\n\\t\\tvector<long long> p_hash;\\r\\n\\tpublic:\\r\\n\\t\\tHashedString(const string& s) : p_hash(s.size() + 1) {\\r\\n\\t\\t\\twhile (pow.size() < s.size()) {\\r\\n\\t\\t\\t\\tpow.push_back((pow.back() * P) % M);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tp_hash[0] = 0;\\r\\n\\t\\t\\tfor (int i = 0; i < s.size(); i++) {\\r\\n\\t\\t\\t\\tp_hash[i + 1] = ((p_hash[i] * P) % M + s[i]) % M;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlong long getHash(int start, int end) {\\r\\n\\t\\t\\tlong long raw_val = (\\r\\n\\t\\t\\t\\tp_hash[end + 1] - (p_hash[start] * pow[end - start + 1])\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\treturn (raw_val % M + M) % M;\\r\\n\\t\\t}\\r\\n};\\r\\nvector<long long> HashedString::pow = {1};\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\n\\r\\npublic class HashedString {\\r\\n\\t// Change M and P if you want\\r\\n\\tpublic static final long M = (long) 1e9 + 9;\\r\\n\\tpublic static final long P = 9973;\\r\\n\\r\\n\\t// pow[i] contains P^i % M\\r\\n\\tprivate static ArrayList<Long> pow = new ArrayList<>();\\r\\n\\r\\n\\t// pHash[i] is the hash of the first i characters of the given string\\r\\n\\tprivate long[] pHash;\\r\\n\\r\\n\\tpublic HashedString(String s) {\\r\\n\\t\\tif (pow.isEmpty()) {\\r\\n\\t\\t\\tpow.add(1L);\\r\\n\\t\\t}\\r\\n\\t\\twhile (pow.size() < s.length()) {\\r\\n\\t\\t\\tpow.add((pow.get(pow.size() - 1) * P) % M);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tpHash = new long[s.length() + 1];\\r\\n\\t\\tpHash[0] = 0;\\r\\n\\t\\tfor (int i = 0; i < s.length(); i++) {\\r\\n\\t\\t\\tpHash[i + 1] = ((pHash[i] * P) % M + s.charAt(i)) % M;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic long getHash(int start, int end) {\\r\\n\\t\\tlong rawVal = pHash[end + 1] - (pHash[start] * pow.get(end - start + 1));\\r\\n\\t\\treturn (rawVal % M + M) % M;\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"class HashedString:\\r\\n\\t# Change M and P if you want\\r\\n\\tM = int(1e9) + 9\\r\\n\\tP = 9973\\r\\n\\r\\n\\t# pow[i] contains P^i % M\\r\\n\\t_pow = [1]\\r\\n\\r\\n\\tdef __init__(self, s: str):\\r\\n\\t\\twhile len(self._pow) < len(s):\\r\\n\\t\\t\\tself._pow.append((self._pow[-1] * self.P) % self.M)\\r\\n\\r\\n\\t\\t# p_hash[i] is the hash of the first i characters of the given string\\r\\n\\t\\tself._p_hash = [0 for _ in range(len(s) + 1)]\\r\\n\\t\\tfor i in range(len(s)):\\r\\n\\t\\t\\tself._p_hash[i + 1] = (\\r\\n\\t\\t\\t\\t((self._p_hash[i] * self.P) % self.M + ord(s[i]))\\r\\n\\t\\t\\t) % self.M\\r\\n\\r\\n\\tdef get_hash(self, start: int, end: int) -> int:\\r\\n\\t\\traw_val = (\\r\\n\\t\\t\\tself._p_hash[end + 1]\\r\\n\\t\\t\\t- (self._p_hash[start] * self._pow[end - start + 1])\\r\\n\\t\\t)\\r\\n\\t\\treturn raw_val % self.M\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This implementation calculates\"\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"\\\\texttt{hsh}[i] = \\\\left(\\\\sum_{x = 0}^i P^{i - x} \\\\cdot S[x]\\\\right) \\\\bmod M\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">hsh</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">(</mo><munderover><mo>∑</mo><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><mi>i</mi></munderover><msup><mi>P</mi><mrow><mi>i</mi><mo>−</mo><mi>x</mi></mrow></msup><mo>⋅</mo><mi>S</mi><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo fence=\\\"true\\\">)</mo></mrow><mtext> </mtext><mo lspace=\\\"0.22em\\\" rspace=\\\"0.22em\\\"><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow></mo><mtext> </mtext><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{hsh}[i] = \\\\left(\\\\sum_{x = 0}^i P^{i - x} \\\\cdot S[x]\\\\right) \\\\bmod M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">hsh</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3.0788em;vertical-align:-1.2671em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">(</span></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.8117em;\\\"><span style=\\\"top:-1.8829em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">x</span><span class=\\\"mrel mtight\\\">=</span><span class=\\\"mord mtight\\\">0</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∑</span></span></span><span style=\\\"top:-4.3em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.2671em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8747em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mathnormal mtight\\\">x</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mclose delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">)</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The hash of any particular substring \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"S[a : b]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo>:</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">S[a : b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" is then calculated as\"]\n    }), \"\\n\", _jsx(MATHDIV, {\n      className: \"math math-display\",\n      latex: \"\\\\left(\\\\sum_{x = a}^b P^{b - x} \\\\cdot S[x] \\\\right) \\\\bmod M = (\\\\texttt{hsh}[b] - \\\\texttt{hsh}[a] \\\\cdot P^{b - a + 1}) \\\\bmod M\",\n      children: \"<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\" display=\\\"block\\\"><semantics><mrow><mrow><mo fence=\\\"true\\\">(</mo><munderover><mo>∑</mo><mrow><mi>x</mi><mo>=</mo><mi>a</mi></mrow><mi>b</mi></munderover><msup><mi>P</mi><mrow><mi>b</mi><mo>−</mo><mi>x</mi></mrow></msup><mo>⋅</mo><mi>S</mi><mo stretchy=\\\"false\\\">[</mo><mi>x</mi><mo stretchy=\\\"false\\\">]</mo><mo fence=\\\"true\\\">)</mo></mrow><mtext> </mtext><mo lspace=\\\"0.22em\\\" rspace=\\\"0.22em\\\"><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow></mo><mtext> </mtext><mi>M</mi><mo>=</mo><mo stretchy=\\\"false\\\">(</mo><mtext mathvariant=\\\"monospace\\\">hsh</mtext><mo stretchy=\\\"false\\\">[</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo><mo>−</mo><mtext mathvariant=\\\"monospace\\\">hsh</mtext><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo stretchy=\\\"false\\\">]</mo><mo>⋅</mo><msup><mi>P</mi><mrow><mi>b</mi><mo>−</mo><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy=\\\"false\\\">)</mo><mtext> </mtext><mo lspace=\\\"0.22em\\\" rspace=\\\"0.22em\\\"><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow></mo><mtext> </mtext><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\left(\\\\sum_{x = a}^b P^{b - x} \\\\cdot S[x] \\\\right) \\\\bmod M = (\\\\texttt{hsh}[b] - \\\\texttt{hsh}[a] \\\\cdot P^{b - a + 1}) \\\\bmod M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3.0861em;vertical-align:-1.25em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">(</span></span><span class=\\\"mop op-limits\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.8361em;\\\"><span style=\\\"top:-1.9em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">x</span><span class=\\\"mrel mtight\\\">=</span><span class=\\\"mord mathnormal mtight\\\">a</span></span></span></span><span style=\\\"top:-3.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span><span class=\\\"mop op-symbol large-op\\\">∑</span></span></span><span style=\\\"top:-4.3em;margin-left:0em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.05em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">b</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8991em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">b</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mathnormal mtight\\\">x</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">]</span><span class=\\\"mclose delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">)</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">hsh</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">hsh</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1491em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8991em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">b</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mathnormal mtight\\\">a</span><span class=\\\"mbin mtight\\\">+</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span></span>\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"using prefix sums. This is nice because the highest power of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"P\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\\\"application/x-tex\\\">P</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span></span></span></span>\"\n      }), \" in that\\r\\npolynomial will always be \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"P^{b - a}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mi>P</mi><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow></msup></mrow><annotation encoding=\\\"application/x-tex\\\">P^{b - a}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8491em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8491em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">b</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mathnormal mtight\\\">a</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^9 + 9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>9</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10^9 + 9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">9</span></span></span></span>\"\n      }), \" is prime, the probability of collision when using this hash is\\r\\nat most \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\frac{N}{10^9 + 9} < 10^{-4}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mfrac><mi>N</mi><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>9</mn></mrow></mfrac><mo>&lt;</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>4</mn></mrow></msup></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{N}{10^9 + 9} &lt; 10^{-4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.2757em;vertical-align:-0.4033em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8723em;\\\"><span style=\\\"top:-2.655em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">1</span><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7463em;\\\"><span style=\\\"top:-2.786em;margin-right:0.0714em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.5em;\\\"></span><span class=\\\"sizing reset-size3 size1 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mbin mtight\\\">+</span><span class=\\\"mord mtight\\\">9</span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.4033em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">−</span><span class=\\\"mord mtight\\\">4</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \", by the Schwarz-Zippel lemma. This means\\r\\nthat if you select any two \", _jsx(_components.strong, {\n        children: \"different\"\n      }), \" strings of length at most \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" and a\\r\\nrandom base modulo \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^9 + 9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>9</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10^9 + 9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">9</span></span></span></span>\"\n      }), \" (e.g. \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"9973\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>9973</mn></mrow><annotation encoding=\\\"application/x-tex\\\">9973</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">9973</span></span></span></span>\"\n      }), \" in the code), the probability that\\r\\nthey hash to the same value is at most \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^{-4}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>4</mn></mrow></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^{-4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">−</span><span class=\\\"mord mtight\\\">4</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"implementation---multiple-bases\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation---multiple-bases\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation - Multiple Bases\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        title: \"dacin21 - Anti-Hash Tests\",\n        url: \"60442\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"regarding CF educational rounds in particular\"\n        })\n      }), _jsx(Resource, {\n        source: \"Benq\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/strings%20(14)/Light/HashRange%20(14.2).h\",\n        title: \"HashRange\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It's generally a good idea to use two randomized bases rather than just one to\\r\\ndecrease the probability that two random strings hash to the same value.\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"ex\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---searching-for-strings\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---searching-for-strings\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Searching For Strings\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"one-hash\",\n      children: [_jsx(_components.a, {\n        href: \"#one-hash\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"One Hash\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O((|N| + |H|) \\\\cdot \\\\Sigma)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>N</mi><mi mathvariant=\\\"normal\\\">∣</mi><mo>+</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>H</mi><mi mathvariant=\\\"normal\\\">∣</mi><mo stretchy=\\\"false\\\">)</mo><mo>⋅</mo><mi mathvariant=\\\"normal\\\">Σ</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O((|N| + |H|) \\\\cdot \\\\Sigma)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord\\\">∣</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.08125em;\\\">H</span><span class=\\\"mord\\\">∣</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">Σ</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\Sigma\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">Σ</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\Sigma</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord\\\">Σ</span></span></span></span>\"\n      }), \" is\\r\\nthe size of the alphabet.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We'll use a \", _jsx(_components.a, {\n        href: \"/gold/sliding\",\n        children: \"sliding window\"\n      }), \" over \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"H\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\\\"application/x-tex\\\">H</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.08125em;\\\">H</span></span></span></span>\"\n      }), \" to find the \\\"matches\\\" with\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since we don't care about relative order when comparing two substrings, we can\\r\\nstore frequency tables of the characters in the current window and in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \". When\\r\\nwe slide the window, at most two values in that table change. To compare two\\r\\nsubstrings, we simply compare the 26 values in each table.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we only needed to count the number of matches, then the above alone would\\r\\nsuffice (in fact, \", _jsx(_components.a, {\n        href: \"https://dmoj.ca/problem/ioi06p1\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"IOI 2006 Writing\"\n      }), \" is just\\r\\nthat). However, we need to count the \", _jsx(_components.strong, {\n        children: \"distinct\"\n      }), \" permutations of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"H\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\\\"application/x-tex\\\">H</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.08125em;\\\">H</span></span></span></span>\"\n      }), \", so\\r\\nwe need to be a bit more clever.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One way to solve this is by storing the polynomial hashes of each match in a\\r\\nhashset, since we expect different permutations to have different polynomial\\r\\nhashes. The answer would simply be the size of that hashset at the end.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since the test data for this particular problem is very strong, we will probably\\r\\nget hash collisions with only one hash. To remedy this, we use two hashes for\\r\\neach match - this significantly decreases the probability of collisions.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the base \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"9973\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>9973</mn></mrow><annotation encoding=\\\"application/x-tex\\\">9973</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">9973</span></span></span></span>\"\n      }), \" with the two modulos \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^9 + 9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>9</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10^9 + 9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">9</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^9 + 7\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10^9 + 7</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">7</span></span></span></span>\"\n      }), \" works for\\r\\nthis problem. (Note that using two bases with the same modulo works too.)\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nconst ll P = 9973, M1 = 1e9 + 9, M2 = 1e9 + 7;\\r\\n\\r\\nint freq_target[26], freq_curr[26];\\r\\nstring n, h;\\r\\n\\r\\nint main() {\\r\\n\\tcin.tie(0)->sync_with_stdio(0);\\r\\n\\tcin >> n >> h;\\r\\n\\tif (n.size() > h.size()) return cout << 0, 0;\\r\\n\\r\\n\\tset<pair<ll, ll>> good;\\r\\n\\tll poly1 = 0, poly2 = 0, p_pow1 = 1, p_pow2 = 1;\\r\\n\\tfor (int i = 0; i < n.size(); i++) {\\r\\n\\t\\t// Update frequency table\\r\\n\\t\\tfreq_target[n[i] - 'a']++, freq_curr[h[i] - 'a']++;\\r\\n\\t\\t// Compute polynomial hashes\\r\\n\\t\\tpoly1 = (poly1 * P + (h[i] - 'a')) % M1;\\r\\n\\t\\tpoly2 = (poly2 * P + (h[i] - 'a')) % M2;\\r\\n\\t\\t// p_pow1 and p_pow2 will be used to **update** the polynomial hashes\\r\\n\\t\\tp_pow1 = p_pow1 * P % M1;\\r\\n\\t\\tp_pow2 = p_pow2 * P % M2;\\r\\n\\t}\\r\\n\\t{\\r\\n\\t\\tbool match = true;\\r\\n\\t\\tfor (int j = 0; j < 26; j++) match &= freq_curr[j] == freq_target[j];\\r\\n\\t\\tif (match) good.insert({poly1, poly2});\\r\\n\\t}\\r\\n\\r\\n\\tfor (int i = n.size(); i < h.size(); i++) {\\r\\n\\t\\t// Update frequency table\\r\\n\\t\\tfreq_curr[h[i] - 'a']++;\\r\\n\\t\\tfreq_curr[h[i - n.size()] - 'a']--;\\r\\n\\t\\t// Update polynomial hashes\\r\\n\\t\\tpoly1 = (poly1 * P - p_pow1 * (h[i - n.size()] - 'a') % M1 + (h[i] - 'a') + M1) % M1;\\r\\n\\t\\tpoly2 = (poly2 * P - p_pow2 * (h[i - n.size()] - 'a') % M2 + (h[i] - 'a') + M2) % M2;\\r\\n\\r\\n\\t\\tbool match = true;\\r\\n\\t\\tfor (int j = 0; j < 26; j++) match &= freq_curr[j] == freq_target[j];\\r\\n\\t\\tif (match) good.insert({poly1, poly2});\\r\\n\\t}\\r\\n\\r\\n\\tcout << good.size() << '\\\\n';\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"two-hashes\",\n      children: [_jsx(_components.a, {\n        href: \"#two-hashes\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Two Hashes\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal O((|N| + |H|) \\\\log M)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mo stretchy=\\\"false\\\">(</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>N</mi><mi mathvariant=\\\"normal\\\">∣</mi><mo>+</mo><mi mathvariant=\\\"normal\\\">∣</mi><mi>H</mi><mi mathvariant=\\\"normal\\\">∣</mi><mo stretchy=\\\"false\\\">)</mo><mi>log</mi><mo>⁡</mo><mi>M</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal O((|N| + |H|) \\\\log M)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">((</span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord\\\">∣</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.08125em;\\\">H</span><span class=\\\"mord\\\">∣</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An alternative solution without frequency tables would be to hash the substrings\\r\\nthat we're trying to match. Since order doesn't matter, we need to modify our\\r\\nhash function slightly.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In particular, instead of computing the \", _jsx(_components.strong, {\n        children: \"polynomial\"\n      }), \" hash of the substrings,\\r\\ncompute the product \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(P + s_1)(P + s_2) \\\\cdots (P + s_k) \\\\bmod M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>P</mi><mo>+</mo><msub><mi>s</mi><mn>1</mn></msub><mo stretchy=\\\"false\\\">)</mo><mo stretchy=\\\"false\\\">(</mo><mi>P</mi><mo>+</mo><msub><mi>s</mi><mn>2</mn></msub><mo stretchy=\\\"false\\\">)</mo><mo>⋯</mo><mo stretchy=\\\"false\\\">(</mo><mi>P</mi><mo>+</mo><msub><mi>s</mi><mi>k</mi></msub><mo stretchy=\\\"false\\\">)</mo><mtext> </mtext><mo lspace=\\\"0.22em\\\" rspace=\\\"0.22em\\\"><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow></mo><mtext> </mtext><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">(P + s_1)(P + s_2) \\\\cdots (P + s_k) \\\\bmod M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">⋯</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" as the hash\\r\\n(again, using two modulos). This hash is nice because the relative order of the\\r\\nletters doesn't matter, as multiplication is commutative.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since this hash requires the modular inverse, there's an extra \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\log M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\log M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" factor\\r\\nin the time complexity.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Alternative hashes (e.g. computing the sum\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"(P + s_1)^2 + (P + s_2)^2 + \\\\dots + (P + s_k)^2 \\\\bmod M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>P</mi><mo>+</mo><msub><mi>s</mi><mn>1</mn></msub><msup><mo stretchy=\\\"false\\\">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\\\"false\\\">(</mo><mi>P</mi><mo>+</mo><msub><mi>s</mi><mn>2</mn></msub><msup><mo stretchy=\\\"false\\\">)</mo><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><mo stretchy=\\\"false\\\">(</mo><mi>P</mi><mo>+</mo><msub><mi>s</mi><mi>k</mi></msub><msup><mo stretchy=\\\"false\\\">)</mo><mn>2</mn></msup><mtext> </mtext><mo lspace=\\\"0.22em\\\" rspace=\\\"0.22em\\\"><mrow><mi mathvariant=\\\"normal\\\">m</mi><mi mathvariant=\\\"normal\\\">o</mi><mi mathvariant=\\\"normal\\\">d</mi></mrow></mo><mtext> </mtext><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">(P + s_1)^2 + (P + s_2)^2 + \\\\dots + (P + s_k)^2 \\\\bmod M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\"><span class=\\\"mclose\\\">)</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\"><span class=\\\"mclose\\\">)</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"minner\\\">⋯</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\"><span class=\\\"mclose\\\">)</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.0556em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \") also work for other\\r\\nhashing problems, but the test cases are too strong for that to pass here.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nconst ll P = 9973, M1 = 1e9 + 9, M2 = 1e9 + 7;\\r\\n\\r\\nll inv(ll base, ll MOD) {\\r\\n\\tll ans = 1, expo = MOD - 2;\\r\\n\\twhile (expo) {\\r\\n\\t\\tif (expo & 1) ans = ans * base % MOD;\\r\\n\\t\\texpo >>= 1;\\r\\n\\t\\tbase = base * base % MOD;\\r\\n\\t}\\r\\n\\treturn ans;\\r\\n}\\r\\n\\r\\nstring n, h;\\r\\n\\r\\nint main() {\\r\\n\\tcin.tie(0)->sync_with_stdio(0);\\r\\n\\tcin >> n >> h;\\r\\n\\tif (n.size() > h.size()) return cout << 0, 0;\\r\\n\\r\\n\\tset<pair<ll, ll>> good;\\r\\n\\tll n_hsh1 = 1, h_hsh1 = 1, n_hsh2 = 1, h_hsh2 = 1;\\r\\n\\tll poly1 = 0, poly2 = 0, p_pow1 = 1, p_pow2 = 1;\\r\\n\\tfor (int i = 0; i < n.size(); i++) {\\r\\n\\t\\t// Compute product hashes\\r\\n\\t\\tn_hsh1 = n_hsh1 * (P + n[i] - 'a') % M1;\\r\\n\\t\\tn_hsh2 = n_hsh2 * (P + n[i] - 'a') % M2;\\r\\n\\t\\th_hsh1 = h_hsh1 * (P + h[i] - 'a') % M1;\\r\\n\\t\\th_hsh2 = h_hsh2 * (P + h[i] - 'a') % M2;\\r\\n\\t\\t// Compute polynomial hashes\\r\\n\\t\\tpoly1 = (poly1 * P + (h[i] - 'a')) % M1;\\r\\n\\t\\tpoly2 = (poly2 * P + (h[i] - 'a')) % M2;\\r\\n\\t\\t// p_pow1 and p_pow2 will be used to **update** the polynomial hashes\\r\\n\\t\\tp_pow1 = p_pow1 * P % M1;\\r\\n\\t\\tp_pow2 = p_pow2 * P % M2;\\r\\n\\t}\\r\\n\\tif (n_hsh1 == h_hsh1 && n_hsh2 == h_hsh2) good.insert({poly1, poly2});\\r\\n\\r\\n\\tfor (int i = n.size(); i < h.size(); i++) {\\r\\n\\t\\t// Update product hashes using modular inverse\\r\\n\\t\\th_hsh1 = h_hsh1 * inv(P + h[i - n.size()] - 'a', M1) % M1 * (P + h[i] - 'a') % M1;\\r\\n\\t\\th_hsh2 = h_hsh2 * inv(P + h[i - n.size()] - 'a', M2) % M2 * (P + h[i] - 'a') % M2;\\r\\n\\t\\t// Update polynomial hashes\\r\\n\\t\\tpoly1 = (poly1 * P - p_pow1 * (h[i - n.size()] - 'a') % M1 + (h[i] - 'a') + M1) % M1;\\r\\n\\t\\tpoly2 = (poly2 * P - p_pow2 * (h[i - n.size()] - 'a') % M2 + (h[i] - 'a') + M2) % M2;\\r\\n\\r\\n\\t\\tif (n_hsh1 == h_hsh1 && n_hsh2 == h_hsh2) good.insert({poly1, poly2});\\r\\n\\t}\\r\\n\\r\\n\\tcout << good.size() << '\\\\n';\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"general\"\n    }), \"\\n\"]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  description,\n  frequency,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"String Hashing","author":"Benjamin Qi, Andi Qu","contributors":"Andrew Wang, Kevin Sheng","id":"string-hashing","prerequisites":["modular"],"description":"Quickly test equality of substrings with a small probability of failure.","frequency":1},"parent":{"name":"String_Hashing","relativePath":"4_Gold/String_Hashing.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Implementation - Single Base","slug":"implementation---single-base"},{"depth":2,"value":"Implementation - Multiple Bases","slug":"implementation---multiple-bases"},{"depth":2,"value":"Solution - Searching For Strings","slug":"solution---searching-for-strings"},{"depth":3,"value":"One Hash","slug":"one-hash"},{"depth":3,"value":"Two Hashes","slug":"two-hashes"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Implementation - Single Base","slug":"implementation---single-base"},{"depth":2,"value":"Implementation - Multiple Bases","slug":"implementation---multiple-bases"},{"depth":2,"value":"Solution - Searching For Strings","slug":"solution---searching-for-strings"},{"depth":3,"value":"One Hash","slug":"one-hash"},{"depth":3,"value":"Two Hashes","slug":"two-hashes"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Implementation - Single Base","slug":"implementation---single-base"},{"depth":2,"value":"Implementation - Multiple Bases","slug":"implementation---multiple-bases"},{"depth":2,"value":"Solution - Searching For Strings","slug":"solution---searching-for-strings"},{"depth":3,"value":"One Hash","slug":"one-hash"},{"depth":3,"value":"Two Hashes","slug":"two-hashes"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"ex","problems":[{"uniqueId":"ccc-SearchingForStrings","name":"Searching For Strings","url":"https://dmoj.ca/problem/ccc20s3","source":"CCC","difficulty":"Easy","isStarred":false,"tags":["Hashing"],"solution":{"kind":"label","label":"Check DMOJ","labelTooltip":"There might be a \"Read Editorial\" button on the right side of the page.","url":null,"sketch":null}}]},{"listId":"general","problems":[{"uniqueId":"ceoi-17-PalindromicPartitions","name":"2017 - Palindromic Partitions","url":"https://cses.fi/165/list/","source":"CEOI","difficulty":"Easy","isStarred":false,"tags":["Greedy","Hashing"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://csacademy.com/contest/ceoi-2017-day-2/task/palindromic-partitions/solution/","sketch":null}},{"uniqueId":"cf-835D","name":"Palindromic Characteristics","url":"https://codeforces.com/contest/835/problem/D","source":"CF","difficulty":"Easy","isStarred":false,"tags":["DP","Hashing"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"cf-1056E","name":"Check Transcription","url":"https://codeforces.com/problemset/problem/1056/E","source":"CF","difficulty":"Easy","isStarred":false,"tags":["Hashing"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"usaco-741","name":"Bovine Genomics","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=741","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["Hashing"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-599","name":"Lights Out","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=599","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["Hashing","Simulation"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"rmi-17-Hangman2","name":"2017 - Hangman 2","url":"https://csacademy.com/contest/rmi-2017-day-1/task/hangman2/","source":"RMI","difficulty":"Normal","isStarred":false,"tags":["Hashing"],"solution":null},{"uniqueId":"coci-17-osmosmjerka","name":"2017 - Osmosmjerka","url":"https://oj.uz/problem/view/COCI17_osmosmjerka","source":"COCI","difficulty":"Normal","isStarred":false,"tags":["Hashing","Probability"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COCI/official/2017/contest4_solutions","sketch":null}},{"uniqueId":"coci-21-sateliti","name":"2021 - Sateliti","url":"https://evaluator.hsin.hr/tasks/HONI202135sateliti/","source":"COCI","difficulty":"Hard","isStarred":true,"tags":["Hashing","Binary Search"],"solution":null},{"uniqueId":"cf-822E","name":"Liar","url":"https://codeforces.com/contest/822/problem/E","source":"CF","difficulty":"Hard","isStarred":false,"tags":["DP","Hashing"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}},{"uniqueId":"baltic-18-genetics","name":"2018 - Genetics","url":"https://boi18-day2-open.kattis.com/problems/genetics2","source":"Baltic OI","difficulty":"Hard","isStarred":true,"tags":["Hashing"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://boi2018.progolymp.se/spoiler-day2.pdf","sketch":null}},{"uniqueId":"coci-16-zamjene","name":"2016 - Zamjene","url":"https://oj.uz/problem/view/COCI16_zamjene","source":"COCI","difficulty":"Very Hard","isStarred":false,"tags":["Hashing","DSU"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COCI/official/2017/contest2_solutions","sketch":null}},{"uniqueId":"coi-16-palinilap","name":"2016 - Palinilap","url":"https://oj.uz/problem/view/COI16_palinilap","source":"COI","difficulty":"Very Hard","isStarred":false,"tags":["Hashing","Binary Search"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COI/official/2016/solutions.pdf","sketch":null}}]}]}},"pageContext":{"id":"string-hashing"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}