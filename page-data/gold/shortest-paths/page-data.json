{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/gold/shortest-paths",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*All Pairs Shortest Path (APSP)*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"shortest-paths\", redirects = [\"/gold/sp\"], title = \"Shortest Paths with Non-Negative Edge Weights\", author = \"Benjamin Qi, Andi Qu, Qi Wang, Neo Wang\", prerequisites = [\"bfs\", \"custom-cpp-stl\"], description = \"Introduces Bellman-Ford, Floyd-Warshall, Dijkstra.\", frequency = 3;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h4: \"h4\",\n    strong: \"strong\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Optional: _missingComponent(\"Optional\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    Problems: _missingComponent(\"Problems\"),\n    Warning: _missingComponent(\"Warning\")\n  }, _props.components), {HeaderLink, Resources, Resource, Optional, FocusProblem, MATHSPAN, LanguageSection, CPPSection, JavaSection, Problems, Warning, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Nearly all Gold shortest path problems involve Dijkstra. However, it's a good\\r\\nidea to learn Bellman-Ford and Floyd-Warshall first since they're simpler.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"bellman-ford\",\n      children: [_jsx(_components.a, {\n        href: \"#bellman-ford\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Bellman-Ford\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CPH\",\n        title: \"13.1 - Bellman-Ford\",\n        children: _jsx(_components.p, {\n          children: \"up to but not including \\\"Negative Cycles\\\"\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"floyd-warshall\",\n      children: [_jsx(_components.a, {\n        href: \"#floyd-warshall\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Floyd-Warshall\"]\n    }), \"\\n\", \"\\n\", _jsxs(_components.h3, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"13.3 - Floyd-Warshall\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"example calculation, code\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Floyd-Warshall\",\n        url: \"graph/all-pair-shortest-path-floyd-warshall.html\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"code, why it works\"\n        })\n      }), _jsx(Resource, {\n        source: \"PAPS\",\n        title: \"12.3.3 - Floyd-Warshall\",\n        children: _jsx(_components.p, {\n          children: \"code, why it works\"\n        })\n      }), _jsx(Resource, {\n        source: \"CP2\",\n        title: \"4.5 - All-Pairs Shortest Paths\"\n      })]\n    }), \"\\n\", _jsxs(Optional, {\n      title: \"Incorrect Floyd-Warshall\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://arxiv.org/pdf/1904.01210.pdf\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Paper\"\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"A common mistake in implementing the Floyd–Warshall algorithm is to misorder\\r\\nthe triply nested loops (The correct order is \", _jsx(_components.code, {\n            children: \"KIJ\"\n          }), \"). The incorrect \", _jsx(_components.code, {\n            children: \"IJK\"\n          }), \" and\\r\\n\", _jsx(_components.code, {\n            children: \"IKJ\"\n          }), \" algorithms do not give correct solutions for some instance. However, we\\r\\ncan prove that if these are repeated three times, we obtain the correct\\r\\nsolutions.\"]\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"It would be emphasized that these fixes (repeating incorrect algorithms three\\r\\ntimes) have the same time complexity as the correct Floyd–Warshall algorithm\\r\\nup to constant factors. Therefore, our results suggest that, if one is\\r\\nconfused by the order of the triply nested loops, one can repeat the procedure\\r\\nthree times just to be safe.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problem\",\n      children: [_jsx(_components.a, {\n        href: \"#problem\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problem\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"apspSam\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"explanation\",\n      children: [_jsx(_components.a, {\n        href: \"#explanation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Explanation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This problem asks us to compute shortest paths between any two vertices. Hence,\\r\\nFloyd-Warshall is suitable because of the low \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N (N \\\\le 500)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>≤</mo><mn>500</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">N (N \\\\le 500)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">500</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \", and the inclusion of negative weights.\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^3)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^3)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\nll INF = 1e18;\\r\\n\\r\\nint main() {\\r\\n\\tios::sync_with_stdio(0);\\r\\n\\tcin.tie(0);\\r\\n\\tint n, m, q;\\r\\n\\tcin >> n >> m >> q;\\r\\n\\r\\n\\tvector<vector<ll>> mat(n, vector<ll>(n, INF));\\r\\n\\r\\n\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\tint u, v, w;\\r\\n\\t\\tcin >> u >> v >> w, u--, v--;\\r\\n\\t\\tif (w < mat[u][v]) mat[u][v] = mat[v][u] = w;\\r\\n\\t}\\r\\n\\r\\n\\t// floyd-warshall\\r\\n\\tfor (int k = 0; k < n; k++)\\r\\n\\t\\tfor (int i = 0; i < n; i++)\\r\\n\\t\\t\\tfor (int j = i + 1; j < n; j++)\\r\\n\\t\\t\\t\\tif (mat[i][k] + mat[k][j] < mat[i][j])\\r\\n\\t\\t\\t\\t\\tmat[i][j] = mat[j][i] = mat[i][k] + mat[k][j];\\r\\n\\r\\n\\twhile (q--) {\\r\\n\\t\\tint u, v;\\r\\n\\t\\tcin >> u >> v, u--, v--;\\r\\n\\t\\tif (u == v) mat[u][v] = 0;\\r\\n\\t\\tif (mat[u][v] == INF) mat[u][v] = -1;\\r\\n\\t\\tcout << mat[u][v] << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\n\\r\\npublic class Main {\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tKattio io = new Kattio();\\r\\n\\r\\n\\t\\tint n = io.nextInt(), m = io.nextInt(), q = io.nextInt();\\r\\n\\r\\n\\t\\tlong[][] mat = new long[n][n];\\r\\n\\t\\tlong INF = (long)1e18;\\r\\n\\r\\n\\t\\tfor(long[] row : mat) {\\r\\n\\t\\t\\tArrays.fill(row, INF);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (int i = 0; i < m; i++) {\\r\\n\\t\\t\\tint u = io.nextInt(), v = io.nextInt(), w = io.nextInt();\\r\\n\\t\\t\\tu--; v--;\\r\\n\\t\\t\\tif (w < mat[u][v]) mat[u][v] = mat[v][u] = w;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// floyd-warshall\\r\\n\\t\\tfor (int k = 0; k < n; k++)\\r\\n\\t\\t\\tfor (int i = 0; i < n; i++)\\r\\n\\t\\t\\t\\tfor (int j = i + 1; j < n; j++)\\r\\n\\t\\t\\t\\t\\tif (mat[i][k] + mat[k][j] < mat[i][j])\\r\\n\\t\\t\\t\\t\\t\\tmat[i][j] = mat[j][i] = mat[i][k] + mat[k][j];\\r\\n\\r\\n\\t\\twhile (q-- > 0) {\\r\\n\\t\\t\\tint u = io.nextInt(), v = io.nextInt();\\r\\n\\t\\t\\tu--; v--;\\r\\n\\t\\t\\tif (u == v) mat[u][v] = 0;\\r\\n\\t\\t\\tif (mat[u][v] == INF) mat[u][v] = -1;\\r\\n\\t\\t\\tio.println(mat[u][v]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Used as the first step of the following:\"\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"apsp\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"dijkstra\",\n      children: [_jsx(_components.a, {\n        href: \"#dijkstra\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Dijkstra\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tutorial-1\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"mathcalon2\",\n      children: [_jsx(_components.a, {\n        href: \"#mathcalon2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Dijkstra (Dense Graphs)\",\n        url: \"graph/dijkstra.html\"\n      })\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"mathcalomlog-n\",\n      children: [_jsx(_components.a, {\n        href: \"#mathcalomlog-n\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(M\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(M\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"13.2 - Dijkstra\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"code\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Dijkstra (Sparse Graphs)\",\n        url: \"graph/dijkstra_sparse.html\"\n      }), _jsx(Resource, {\n        source: \"CPC\",\n        title: \"8 - Shortest Paths\",\n        url: \"08_graphs_2\"\n      }), _jsx(Resource, {\n        source: \"CP2\",\n        title: \"4.4.3 - SSSP on Weighted Graph\"\n      })]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"mathcalomlog-n-implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#mathcalomlog-n-implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(M\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(M\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" Implementation\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Benq\",\n        title: \"Dijkstra\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/graphs%20(12)/Basics/Dijkstra%20(7.3).h\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problem-1\",\n      children: [_jsx(_components.a, {\n        href: \"#problem-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problem\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sample\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Time Complexity:\"\n      }), \" \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N + M\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N + M\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Recall from the second prerequisite module that we can use \", _jsx(_components.code, {\n            children: \"greater<>\"\n          }), \" to make\\r\\nthe top element of a priority queue the least instead of the greatest.\\r\\nAlternatively, you can negate distances before placing them into the priority\\r\\nqueue, but that's more confusing.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nusing ll = long long;\\r\\n#define pb push_back\\r\\n\\r\\nvector<pair<int, int>> graph[100000];\\r\\n// Adjacency list of (neighbour, edge weight)\\r\\nll dist[100000];\\r\\nint N;\\r\\n\\r\\nvoid dijkstra(int src) { // Source and destination\\r\\n\\tfor (int i = 0; i < N; ++i) dist[i] = LLONG_MAX;\\r\\n\\t// Set all distances to infinity\\r\\n\\r\\n\\tusing T = pair<ll,int>; priority_queue<T,vector<T>,greater<T>> pq;\\r\\n\\tdist[src] = 0; // The shortest path from a node to itself is 0\\r\\n\\tpq.push({0, src});\\r\\n\\r\\n\\twhile (pq.size()) {\\r\\n\\t\\tll cdist; int node; tie(cdist, node) = pq.top(); pq.pop();\\r\\n\\t\\tif (cdist != dist[node]) continue;\\r\\n\\t\\tfor (pair<int, int> i : graph[node]) {\\r\\n\\t\\t\\t// If we can reach a neighbouring node faster,\\r\\n\\t\\t\\t// we update its minimum distance\\r\\n\\t\\t\\tif (cdist+i.second < dist[i.first]) {\\r\\n\\t\\t\\t\\tpq.push({dist[i.first] = cdist+i.second, i.first});\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tint M; cin >> N >> M;\\r\\n\\tfor (int i = 0; i < M; ++i) {\\r\\n\\t\\tint a,b,c; cin >> a >> b >> c;\\r\\n\\t\\tgraph[a-1].pb({b-1,c});\\r\\n\\t}\\r\\n\\tdijkstra(0);\\r\\n\\tfor (int i = 0; i < N; ++i) cout << dist[i] << \\\" \\\";\\r\\n}\\n\"\n          })\n        })]\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class test {\\r\\n\\tstatic class Pair<K, V> {\\r\\n\\t\\tpublic K a;\\r\\n\\t\\tpublic V b;\\r\\n\\t\\tpublic Pair(K a, V b) {\\r\\n\\t\\t\\tthis.a = a;\\r\\n\\t\\t\\tthis.b = b;\\r\\n\\t\\t}\\r\\n\\t\\tpublic K getKey() {\\r\\n\\t\\t\\treturn a;\\r\\n\\t\\t}\\r\\n\\t\\tpublic V getValue() {\\r\\n\\t\\t\\treturn b;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tstatic ArrayList<Pair<Integer, Integer>> graph[];\\r\\n\\tstatic long dist[];\\r\\n\\tstatic int N;\\r\\n\\r\\n\\tstatic void dijkstra(int src) {\\r\\n\\t\\t//Set all distances to infinity\\r\\n\\t\\tfor (int i = 0; i < N; ++i)\\r\\n\\t\\t\\tdist[i] = Long.MAX_VALUE;\\r\\n\\t\\tPriorityQueue<Pair<Long, Integer>> pq = new PriorityQueue<Pair<Long, Integer>>\\r\\n\\t\\t\\t((a, b) -> Long.compare(a.getKey(), b.getKey()));\\r\\n\\t\\tdist[src] = 0; // The shortest path from a node to itself is 0\\r\\n\\t\\tpq.add(new Pair<Long, Integer>(0L, src));\\r\\n\\t\\twhile(!pq.isEmpty()) {\\r\\n\\t\\t\\tPair<Long, Integer> p = pq.poll();\\r\\n\\t\\t\\tlong cdist = p.getKey();\\r\\n\\t\\t\\tint node = p.getValue();\\r\\n\\t\\t\\tif(cdist != dist[node])\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\tfor (Pair<Integer, Integer> i : graph[node]) {\\r\\n\\t\\t\\t\\t// If we can reach a neighbouring node faster,\\r\\n\\t\\t\\t\\t// we update its minimum distance\\r\\n\\t\\t\\t\\tif(cdist+i.getValue() < dist[i.getKey()]) {\\r\\n\\t\\t\\t\\t\\tdist[i.getKey()] = cdist + i.getValue();\\r\\n\\t\\t\\t\\t\\tpq.add(new Pair<Long, Integer>(dist[i.getKey()], i.getKey()));\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tN = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint M = Integer.parseInt(st.nextToken());\\r\\n\\t\\tgraph = new ArrayList[N];\\r\\n\\t\\tdist = new long[N];\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tgraph[i] = new ArrayList<Pair<Integer, Integer>>();\\r\\n\\t\\t}\\r\\n\\t\\tfor (int i = 0; i < M; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tint a = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint b = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tint c = Integer.parseInt(st.nextToken());\\r\\n\\t\\t\\tgraph[a - 1].add(new Pair<Integer, Integer>(b - 1, c));\\r\\n\\t\\t}\\r\\n\\t\\tdijkstra(0);\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tSystem.out.print(dist[i] + \\\" \\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(Warning, {\n      children: [_jsxs(_components.p, {\n        children: [\"It's important to include \", _jsx(_components.code, {\n          children: \"continue\"\n        }), \". This ensures that when all edge weights\\r\\nare non-negative, we will never go through the adjacency list of any vertex more\\r\\nthan once. Removing it will cause TLE on the last test case of the above\\r\\nproblem!\"]\n      }), _jsxs(_components.p, {\n        children: [\"The last test case contains 100000 destinations and 149997 flights. City 1 has\\r\\nflights to cities 2 through 50000. Cities 2 through 50000 have flights to\\r\\ncity 50001. City 50001 has flights to cities 50002 through 100000. Without the\\r\\n\", _jsx(_components.code, {\n          children: \"continue\"\n        }), \", after the program pops cities 1 through 50000 off the queue, the\\r\\npriority queue will contain 49999 routes that end at city 50001. Every one of\\r\\nthe 49999 times city 50001 is popped off the queue and processed, we must\\r\\niterate over all of its outgoing flights (to cities 50002 through 100000). This\\r\\nresults in a runtime of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\Theta(N^2\\\\log N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">Θ</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\Theta(N^2\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">Θ</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \", which will TLE.\"]\n      }), _jsxs(_components.p, {\n        children: [\"On the other hand, if we did include the \", _jsx(_components.code, {\n          children: \"continue\"\n        }), \", the program will never\\r\\niterate through the adjacency list of city 50001 after processing it for the\\r\\nfirst time.\"]\n      })]\n    }), \"\\n\", _jsx(Optional, {\n      title: \"Faster Dijkstra\",\n      children: _jsxs(_components.p, {\n        children: [\"Can be done in \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(M+N\\\\log N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>M</mi><mo>+</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(M+N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" with\\r\\n\", _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Fibonacci_heap\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Fibonacci heap\"\n        }), \". In practice\\r\\nthough, this is rarely faster, since the Fibonacci heap has a bad constant\\r\\nfactor.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems-1\",\n      children: [_jsx(_components.a, {\n        href: \"#problems-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"dijk\",\n      hideSuggestProblemButton: true\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  redirects,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Shortest Paths with Non-Negative Edge Weights","author":"Benjamin Qi, Andi Qu, Qi Wang, Neo Wang","contributors":null,"id":"shortest-paths","prerequisites":["bfs","custom-cpp-stl"],"description":"Introduces Bellman-Ford, Floyd-Warshall, Dijkstra.","frequency":3},"parent":{"name":"Shortest_Paths","relativePath":"4_Gold/Shortest_Paths.mdx"},"fields":{"division":"gold"},"toc":{"cpp":[{"depth":2,"value":"Bellman-Ford","slug":"bellman-ford"},{"depth":2,"value":"Floyd-Warshall","slug":"floyd-warshall"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problem","slug":"problem"},{"depth":4,"value":"Explanation","slug":"explanation"},{"depth":4,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Dijkstra","slug":"dijkstra"},{"depth":3,"value":"Tutorial","slug":"tutorial-1"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>","slug":"mathcalon2"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(M\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>","slug":"mathcalomlog-n"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(M\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> Implementation","slug":"mathcalomlog-n-implementation"},{"depth":3,"value":"Problem","slug":"problem-1"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Problems","slug":"problems-1"}],"java":[{"depth":2,"value":"Bellman-Ford","slug":"bellman-ford"},{"depth":2,"value":"Floyd-Warshall","slug":"floyd-warshall"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problem","slug":"problem"},{"depth":4,"value":"Explanation","slug":"explanation"},{"depth":4,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Dijkstra","slug":"dijkstra"},{"depth":3,"value":"Tutorial","slug":"tutorial-1"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>","slug":"mathcalon2"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(M\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>","slug":"mathcalomlog-n"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(M\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> Implementation","slug":"mathcalomlog-n-implementation"},{"depth":3,"value":"Problem","slug":"problem-1"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Problems","slug":"problems-1"}],"py":[{"depth":2,"value":"Bellman-Ford","slug":"bellman-ford"},{"depth":2,"value":"Floyd-Warshall","slug":"floyd-warshall"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problem","slug":"problem"},{"depth":4,"value":"Explanation","slug":"explanation"},{"depth":4,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Dijkstra","slug":"dijkstra"},{"depth":3,"value":"Tutorial","slug":"tutorial-1"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>","slug":"mathcalon2"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(M\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>","slug":"mathcalomlog-n"},{"depth":4,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(M\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> Implementation","slug":"mathcalomlog-n-implementation"},{"depth":3,"value":"Problem","slug":"problem-1"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Problems","slug":"problems-1"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sample","problems":[{"uniqueId":"cses-1671","name":"Shortest Routes I","url":"https://cses.fi/problemset/task/1671","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["SP"],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"equivalent to [Kattis SSSP Non-Negative](https://open.kattis.com/problems/shortestpath1)"}}]},{"listId":"dijk","problems":[{"uniqueId":"cses-1195","name":"Flight Discount","url":"https://cses.fi/problemset/task/1195","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-969","name":"Milk Pumping","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=969","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-717","name":"Why Did the Cow Cross the Road","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=717","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-861","name":"Fine Dining","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=861","source":"Gold","difficulty":"Easy","isStarred":false,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-899","name":"Shortcut","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=899","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1202","name":"Investigation","url":"https://cses.fi/problemset/task/1202","source":"CSES","difficulty":"Normal","isStarred":true,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"kattis-robotturtles","name":"Robot Turtles","url":"https://open.kattis.com/problems/robotturtles","source":"Kattis","difficulty":"Normal","isStarred":false,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1196","name":"Flight Routes","url":"https://cses.fi/problemset/task/1196","source":"CSES","difficulty":"Normal","isStarred":false,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ioi-11-crocodile","name":"2011 - Crocodile","url":"https://oj.uz/problem/view/IOI11_crocodile","source":"IOI","difficulty":"Hard","isStarred":false,"tags":["SP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2011/37","sketch":null}},{"uniqueId":"joi-18-CommuterPass","name":"2018 - Commuter Pass","url":"https://oj.uz/problem/view/JOI18_commuter_pass","source":"JOI","difficulty":"Hard","isStarred":true,"tags":["SP","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"joi-21-robot","name":"2021 - Robot","url":"https://oj.uz/problem/view/JOI21_ho_t4","source":"JOI","difficulty":"Hard","isStarred":true,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"apio-11-FindThePath","name":"2011 - Find the Path","url":"https://dmoj.ca/problem/apio11p2","source":"APIO","difficulty":"Hard","isStarred":false,"tags":["SP","Geometry"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"balkan-12-ShortestPaths","name":"2012 - Shortest Paths","url":"https://www.acmicpc.net/problem/5250","source":"Balkan OI","difficulty":"Hard","isStarred":true,"tags":["SP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"balkan-15-circus","name":"2015 - Circus","url":"https://oj.uz/problem/view/Balkan15_CIRCUS","source":"Balkan OI","difficulty":"Very Hard","isStarred":false,"tags":["SP","Stack"],"solution":null}]},{"listId":"apspSam","problems":[{"uniqueId":"cses-1672","name":"Shortest Routes II","url":"https://cses.fi/problemset/task/1672","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["APSP"],"solution":null}]},{"listId":"apsp","problems":[{"uniqueId":"usaco-971","name":"Moortal Cowmbat","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=971","source":"Gold","difficulty":"Hard","isStarred":false,"tags":["APSP","DP"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"shortest-paths"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}