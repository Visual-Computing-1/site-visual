{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/plat/sparse-segtree",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"sparse-segtree\", redirects = [\"/plat/sparse-seg\"], title = \"Sparse Segment Trees\", author = \"Andi Qu\", prerequisites = [\"RURQ\"], description = \"Querying big ranges.\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    em: \"em\",\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    Info: _missingComponent(\"Info\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Optional: _missingComponent(\"Optional\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {FocusProblem, MATHSPAN, HeaderLink, IncompleteSection, Resources, Resource, Info, LanguageSection, CPPSection, Optional, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(FocusProblem, {\n      problem: \"sparseSample\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"In problems where the query range is at most something like \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^6\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^6</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \", a normal\\r\\nsegment tree suffices. However, as soon as we move to bigger ranges (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^{12}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^{12}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">12</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \"\\r\\nin some cases), a normal segment tree results in MLE.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Luckily, we can still use a segment tree to solve these types of problems.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"resources\",\n      children: [_jsx(_components.a, {\n        href: \"#resources\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resources\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The main idea is that we don't have to store all the nodes at all times - we\\r\\ncreate nodes only when needed. In a normal segment tree, an update only affects\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" nodes, so in a sparse segment tree, we only store\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(Q \\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>Q</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(Q \\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">Q</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" nodes!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can implement this efficiently using pointers to a node's children - just\\r\\nlike a trie! (Then again, a segment tree is basically a fancier binary trie.)\"\n    }), \"\\n\", _jsx(IncompleteSection, {}), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Benq\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/1D%20Range%20Queries%20(9.2)/SparseSeg%20(9.2).h\",\n        title: \"Implementation\"\n      })\n    }), \"\\n\", _jsx(Info, {\n      title: \"Pro Tip\",\n      children: _jsx(_components.p, {\n        children: \"Sparse Segment Tree is more commonly referred to as \\\"Dynamic Segment Tree.\\\"\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We need to support two operations on a range:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Count the number of red-ripe trees in a range (range sum)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Set all trees in a range to red-ripe (range paint)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use a segment tree with lazy propagation to solve this, but the query\\r\\nrange is up to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \", so we have to use a sparse segment tree.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Luckily, lazy propagation still works here.\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\n#pragma GCC optimize(\\\"O3\\\")\\r\\n#define FOR(i, x, y) for (int i = x; i < y; i++)\\r\\n#define MOD 1000000007\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nstruct Node {\\r\\n\\tint sum, lazy, tl, tr, l, r;\\r\\n\\tNode() : sum(0), lazy(0), l(-1), r(-1) {}\\r\\n};\\r\\n\\r\\nconst int MAXN = 123456;\\r\\nNode segtree[64 * MAXN];\\r\\nint cnt = 2;\\r\\n\\r\\nvoid push_lazy(int node) {\\r\\n\\tif (segtree[node].lazy) {\\r\\n\\t\\tsegtree[node].sum = segtree[node].tr - segtree[node].tl + 1;\\r\\n\\t\\tint mid = (segtree[node].tl + segtree[node].tr) / 2;\\r\\n\\t\\tif (segtree[node].l == -1) {\\r\\n\\t\\t\\tsegtree[node].l = cnt++;\\r\\n\\t\\t\\tsegtree[segtree[node].l].tl = segtree[node].tl;\\r\\n\\t\\t\\tsegtree[segtree[node].l].tr = mid;\\r\\n\\t\\t}\\r\\n\\t\\tif (segtree[node].r == -1) {\\r\\n\\t\\t\\tsegtree[node].r = cnt++;\\r\\n\\t\\t\\tsegtree[segtree[node].r].tl = mid + 1;\\r\\n\\t\\t\\tsegtree[segtree[node].r].tr = segtree[node].tr;\\r\\n\\t\\t}\\r\\n\\t\\tsegtree[segtree[node].l].lazy = segtree[segtree[node].r].lazy = 1;\\r\\n\\t\\tsegtree[node].lazy = 0;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid update(int node, int l, int r) {\\r\\n\\tpush_lazy(node);\\r\\n\\tif (l == segtree[node].tl && r == segtree[node].tr) {\\r\\n\\t\\tsegtree[node].lazy = 1;\\r\\n\\t\\tpush_lazy(node);\\r\\n\\t} else {\\r\\n\\t\\tint mid = (segtree[node].tl + segtree[node].tr) / 2;\\r\\n\\t\\tif (segtree[node].l == -1) {\\r\\n\\t\\t\\tsegtree[node].l = cnt++;\\r\\n\\t\\t\\tsegtree[segtree[node].l].tl = segtree[node].tl;\\r\\n\\t\\t\\tsegtree[segtree[node].l].tr = mid;\\r\\n\\t\\t}\\r\\n\\t\\tif (segtree[node].r == -1) {\\r\\n\\t\\t\\tsegtree[node].r = cnt++;\\r\\n\\t\\t\\tsegtree[segtree[node].r].tl = mid + 1;\\r\\n\\t\\t\\tsegtree[segtree[node].r].tr = segtree[node].tr;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (l > mid) update(segtree[node].r, l, r);\\r\\n\\t\\telse if (r <= mid) update(segtree[node].l, l, r);\\r\\n\\t\\telse {\\r\\n\\t\\t\\tupdate(segtree[node].l, l, mid);\\r\\n\\t\\t\\tupdate(segtree[node].r, mid + 1, r);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpush_lazy(segtree[node].l);\\r\\n\\t\\tpush_lazy(segtree[node].r);\\r\\n\\t\\tsegtree[node].sum = segtree[segtree[node].l].sum + segtree[segtree[node].r].sum;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint query(int node, int l, int r) {\\r\\n\\tpush_lazy(node);\\r\\n\\tif (l == segtree[node].tl && r == segtree[node].tr) return segtree[node].sum;\\r\\n\\telse {\\r\\n\\t\\tint mid = (segtree[node].tl + segtree[node].tr) / 2;\\r\\n\\t\\tif (segtree[node].l == -1) {\\r\\n\\t\\t\\tsegtree[node].l = cnt++;\\r\\n\\t\\t\\tsegtree[segtree[node].l].tl = segtree[node].tl;\\r\\n\\t\\t\\tsegtree[segtree[node].l].tr = mid;\\r\\n\\t\\t}\\r\\n\\t\\tif (segtree[node].r == -1) {\\r\\n\\t\\t\\tsegtree[node].r = cnt++;\\r\\n\\t\\t\\tsegtree[segtree[node].r].tl = mid + 1;\\r\\n\\t\\t\\tsegtree[segtree[node].r].tr = segtree[node].tr;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (l > mid) return query(segtree[node].r, l, r);\\r\\n\\t\\telse if (r <= mid) return query(segtree[node].l, l, r);\\r\\n\\t\\telse return query(segtree[node].l, l, mid) + query(segtree[node].r, mid + 1, r);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tiostream::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\tint m;\\r\\n\\tcin >> m;\\r\\n\\r\\n\\tsegtree[1].sum = 0; segtree[1].lazy = 0;\\r\\n\\tsegtree[1].tl = 1; segtree[1].tr = 1e9;\\r\\n\\r\\n\\tint c = 0;\\r\\n\\tFOR(_, 0, m) {\\r\\n\\t\\tint d, x, y;\\r\\n\\t\\tcin >> d >> x >> y;\\r\\n\\t\\tif (d == 1) {\\r\\n\\t\\t\\tc = query(1, x + c, y + c);\\r\\n\\t\\t\\tcout << c << '\\\\n';\\r\\n\\t\\t} else update(1, x + c, y + c);\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsx(Optional, {\n      children: _jsxs(_components.p, {\n        children: [\"It's possible to reduce the memory of a sparse segment tree to \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \",\\r\\nas described \", _jsx(_components.a, {\n          href: \"https://codeforces.com/blog/entry/83969\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"here\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some of these problems are solvable with a normal segment tree if you use\\r\\ncoordinate compression. Sparse segment trees are rarely ever \", _jsx(_components.em, {\n        children: \"required\"\n      }), \" to solve\\r\\na particular problem, but they can make things a lot more convenient.\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"sparseGeneral\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  redirects,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Sparse Segment Trees","author":"Andi Qu","contributors":null,"id":"sparse-segtree","prerequisites":["RURQ"],"description":"Querying big ranges.","frequency":1},"parent":{"name":"Sparse_Segtree","relativePath":"5_Plat/Sparse_Segtree.mdx"},"fields":{"division":"plat"},"toc":{"cpp":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Solution","slug":"solution"},{"depth":3,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sparseSample","problems":[{"uniqueId":"izho-12-MonkeyAndAppletrees","name":"2012 - Monkey and Apple-trees","url":"https://oj.uz/problem/view/IZhO12_apple","source":"IZhO","difficulty":"Normal","isStarred":false,"tags":[],"solution":null}]},{"listId":"sparseGeneral","problems":[{"uniqueId":"ioi-05-mountain","name":"2005 - Mountain","url":"https://dmoj.ca/problem/ioi05p3","source":"IOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/files/ioi2005solutions.pdf","sketch":null}},{"uniqueId":"balkan-15-happiness","name":"2015 - Happiness","url":"https://oj.uz/problem/view/Balkan15_HAPPINESS","source":"Balkan OI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"sparse-segtree"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}