{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/plat/RURQ",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"RURQ\", title = \"Range Update Range Query\", author = \"Benjamin Qi\", prerequisites = [\"PURS\"], description = \"Lazy updates on segment trees and two binary indexed trees in conjunction.\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    Problems: _missingComponent(\"Problems\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, FocusProblem, Resources, Resource, IncompleteSection, Problems, Spoiler, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"bit-revisited\",\n      children: [_jsx(_components.a, {\n        href: \"#bit-revisited\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"BIT Revisited\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"bitSample\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Binary Indexed Trees can support range increments in addition to range sum\\r\\nqueries.\"\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"GFG\",\n        title: \"Range Update Point Query\",\n        url: \"binary-indexed-tree-range-updates-point-queries/\"\n      }), _jsx(Resource, {\n        source: \"GFG\",\n        title: \"Range Update Range Query\",\n        url: \"binary-indexed-tree-range-update-range-queries/\"\n      }), _jsx(Resource, {\n        source: \"bmerry\",\n        title: \"Interval Trees\",\n        url: \"https://saco-evaluator.org.za/presentations/2014%20Camp%202/Interval%20Trees%20(Bruce%20Merry).pdf#page=36\",\n        starred: true\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Benq\",\n        title: \"BITrange\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/1D%20Range%20Queries%20(9.2)/BITrange.h\"\n      })\n    }), \"\\n\", _jsx(IncompleteSection, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"bitProb\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"lazy-segment-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#lazy-segment-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Lazy Segment Tree\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"lazySample\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---range-updates--sums\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---range-updates--sums\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Range Updates & Sums\"]\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsx(_components.p, {\n        children: \"This question asks you to support the following types of queries:\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Add a value to all elements within the range \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"[a,b]\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[a,b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Set all values within the range \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"[a,b]\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[a,b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n            }), \" to a certain value.\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Find the sum of all values in range \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"[a,b]\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[a,b]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Consider the first two types of queries. A lazy tag will be created in each node\\r\\nof the tree for each type. In this solution, \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{lzAdd}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzAdd</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzAdd}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzAdd</span></span></span></span></span>\"\n        }), \" will represent the\\r\\nlazy tag for the range add query and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\texttt{lzSet}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzSet</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzSet}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzSet</span></span></span></span></span>\"\n        }), \" will represent the lazy\\r\\ntag for the range set query.\"]\n      }), _jsx(_components.p, {\n        children: \"Given the two different types of update queries, a total of four different\\r\\nsituations might take place after any update:\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Range add when \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\texttt{lzSet}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzSet</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzSet}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzSet</span></span></span></span></span>\"\n            }), \" equals 0: Simply add the new value to the\\r\\npre-existing value.\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Range add when \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\texttt{lzSet}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzSet</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzSet}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzSet</span></span></span></span></span>\"\n            }), \" doesn't equal 0: Add the new value to\\r\\n\", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\texttt{lzSet}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzSet</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzSet}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzSet</span></span></span></span></span>\"\n            }), \" and clear \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\texttt{lzAdd}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzAdd</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzAdd}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzAdd</span></span></span></span></span>\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Range set when \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\texttt{lzAdd}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzAdd</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzAdd}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzAdd</span></span></span></span></span>\"\n            }), \" equals 0: Simply update the \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\texttt{lzSet}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzSet</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzSet}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzSet</span></span></span></span></span>\"\n            }), \"\\r\\nvalue.\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Range set when \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\texttt{lzAdd}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzAdd</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzAdd}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzAdd</span></span></span></span></span>\"\n            }), \" doesn't equal 0: Again, simply update the\\r\\n\", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\texttt{lzSet}\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">lzSet</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{lzSet}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">lzSet</span></span></span></span></span>\"\n            }), \" value since a set update will override all previous add\\r\\nupdates.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Given the mechanics behind the \", _jsx(_components.code, {\n          children: \"pushdown\"\n        }), \" function, all you need is a regular\\r\\nrange-sum segment tree to solve the question.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"\\r\\n#include <iostream>\\r\\nusing ll = long long;\\r\\nusing namespace std;\\r\\n\\r\\nconst int maxN = 2e5+5;\\r\\n\\r\\nint N,Q;\\r\\nint a[maxN];\\r\\n\\r\\nstruct node{\\r\\n\\tll val;\\r\\n\\tll lzAdd;\\r\\n\\tll lzSet;\\r\\n\\tnode(){};\\r\\n}tree[maxN<<2];\\r\\n\\r\\n#define lc p<<1\\r\\n#define rc (p<<1)+1\\r\\n\\r\\ninline void pushup(int p){\\r\\n\\ttree[p].val = tree[lc].val + tree[rc].val;\\r\\n\\treturn;\\r\\n}\\r\\n\\r\\nvoid pushdown(int p, int l, int mid, int r){\\r\\n\\t//lazy: range set\\r\\n\\tif(tree[p].lzSet != 0){\\r\\n\\t\\ttree[lc].lzSet = tree[rc].lzSet = tree[p].lzSet;\\r\\n\\t\\ttree[lc].val = (mid-l+1) * tree[p].lzSet;\\r\\n\\t\\ttree[rc].val = (r-mid) * tree[p].lzSet;\\r\\n\\t\\ttree[lc].lzAdd = tree[rc].lzAdd = 0;\\r\\n\\t\\ttree[p].lzSet = 0;\\r\\n\\t}\\r\\n\\telse if(tree[p].lzAdd != 0){ //lazy: range add\\r\\n\\t\\tif(tree[lc].lzSet == 0)tree[lc].lzAdd += tree[p].lzAdd;\\r\\n\\t\\telse {\\r\\n\\t\\t\\ttree[lc].lzSet += tree[p].lzAdd;\\r\\n\\t\\t\\ttree[lc].lzAdd = 0;\\r\\n\\t\\t}\\r\\n\\t\\tif(tree[rc].lzSet == 0)tree[rc].lzAdd += tree[p].lzAdd;\\r\\n\\t\\telse{\\r\\n\\t\\t\\ttree[rc].lzSet += tree[p].lzAdd;\\r\\n\\t\\t\\ttree[rc].lzAdd = 0;\\r\\n\\t\\t}\\r\\n\\t\\ttree[lc].val += (mid-l+1) * tree[p].lzAdd;\\r\\n\\t\\ttree[rc].val += (r-mid) * tree[p].lzAdd;\\r\\n\\t\\ttree[p].lzAdd = 0;\\r\\n\\t}\\r\\n\\treturn;\\r\\n}\\r\\n\\r\\nvoid build(int p, int l, int r){\\r\\n\\ttree[p].lzAdd = tree[p].lzSet = 0;\\r\\n\\tif(l == r){\\r\\n\\t\\ttree[p].val = a[l];\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tint mid = (l+r)>>1;\\r\\n\\tbuild(lc,l,mid);\\r\\n\\tbuild(rc,mid+1,r);\\r\\n\\tpushup(p);\\r\\n\\treturn;\\r\\n}\\r\\n\\r\\nvoid add(int p, int l, int r, int a, int b, ll val){\\r\\n\\tif(a > r || b < l)return;\\r\\n\\tif(a <= l && r <= b){\\r\\n\\t\\ttree[p].val += (r-l+1) * val;\\r\\n\\t\\tif(tree[p].lzSet == 0)tree[p].lzAdd += val;\\r\\n\\t\\telse tree[p].lzSet += val;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tint mid = (l+r)>>1;\\r\\n\\tpushdown(p,l,mid,r);\\r\\n\\tadd(lc,l,mid,a,b,val);\\r\\n\\tadd(rc,mid+1,r,a,b,val);\\r\\n\\tpushup(p);\\r\\n\\treturn;\\r\\n}\\r\\n\\r\\nvoid set(int p, int l, int r, int a, int b, ll val){\\r\\n\\tif(a > r || b < l)return;\\r\\n\\tif(a <= l && r <= b){\\r\\n\\t\\ttree[p].val = (r-l+1) * val;\\r\\n\\t\\ttree[p].lzAdd = 0;\\r\\n\\t\\ttree[p].lzSet = val;\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tint mid = (l+r)>>1;\\r\\n\\tpushdown(p,l,mid,r);\\r\\n\\tset(lc,l,mid,a,b,val);\\r\\n\\tset(rc,mid+1,r,a,b,val);\\r\\n\\tpushup(p);\\r\\n\\treturn;\\r\\n}\\r\\n\\r\\nll query(int p, int l, int r, int a, int b){\\r\\n\\tif(a > r || b < l)return 0;\\r\\n\\tif(a <= l && r <= b)return tree[p].val;\\r\\n\\tint mid = (l+r)>>1;\\r\\n\\tpushdown(p,l,mid,r);\\r\\n\\treturn query(lc,l,mid,a,b) + query(rc,mid+1,r,a,b);\\r\\n}\\r\\n\\r\\nsigned main(){\\r\\n\\tios_base::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\tcin >> N >> Q;\\r\\n\\tfor(int i = 1; i <= N; ++i)cin >> a[i];\\r\\n\\tbuild(1,1,N);\\r\\n\\tfor(int i = 1; i <= Q; ++i){\\r\\n\\t\\tint k; cin >> k;\\r\\n\\t\\tint a,b,x;\\r\\n\\t\\tif(k == 1){\\r\\n\\t\\t\\tcin >> a >> b >> x;\\r\\n\\t\\t\\tadd(1,1,N,a,b,x);\\r\\n\\t\\t}\\r\\n\\t\\tif(k == 2){\\r\\n\\t\\t\\tcin >> a >> b >> x;\\r\\n\\t\\t\\tset(1,1,N,a,b,x);\\r\\n\\t\\t}\\r\\n\\t\\tif(k == 3){\\r\\n\\t\\t\\tcin >> a >> b;\\r\\n\\t\\t\\tll res = query(1,1,N,a,b);\\r\\n\\t\\t\\tcout << res << '\\\\n';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\r\\n\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        title: \"EDU: Segment Tree Pt 2\",\n        url: \"https://codeforces.com/edu/course/2/lesson/5\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"CPH\",\n        title: \"28.1 - Segment Trees Revisited\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"short description\"\n        })\n      }), _jsx(Resource, {\n        source: \"CSA\",\n        title: \"Segment Trees\",\n        url: \"segment_trees\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"interactive\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Segment Tree\",\n        url: \"data_structures/segment_tree.html\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"adding on segments, assigning\"\n        })\n      }), _jsx(Resource, {\n        source: \"CF\",\n        title: \"Efficient and easy segment trees\",\n        url: \"18051\",\n        children: _jsx(_components.p, {\n          children: \"code is more confusing than recursive version\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems-1\",\n      children: [_jsx(_components.a, {\n        href: \"#problems-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"lazySegTree\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Range Update Range Query","author":"Benjamin Qi","contributors":null,"id":"RURQ","prerequisites":["PURS"],"description":"Lazy updates on segment trees and two binary indexed trees in conjunction.","frequency":1},"parent":{"name":"RURQ","relativePath":"5_Plat/RURQ.mdx"},"fields":{"division":"plat"},"toc":{"cpp":[{"depth":2,"value":"BIT Revisited","slug":"bit-revisited"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Lazy Segment Tree","slug":"lazy-segment-tree"},{"depth":3,"value":"Solution - Range Updates &amp; Sums","slug":"solution---range-updates--sums"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problems","slug":"problems-1"}],"java":[{"depth":2,"value":"BIT Revisited","slug":"bit-revisited"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Lazy Segment Tree","slug":"lazy-segment-tree"},{"depth":3,"value":"Solution - Range Updates &amp; Sums","slug":"solution---range-updates--sums"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problems","slug":"problems-1"}],"py":[{"depth":2,"value":"BIT Revisited","slug":"bit-revisited"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Lazy Segment Tree","slug":"lazy-segment-tree"},{"depth":3,"value":"Solution - Range Updates &amp; Sums","slug":"solution---range-updates--sums"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Problems","slug":"problems-1"}]}},"moduleProblemLists":{"problemLists":[{"listId":"bitSample","problems":[{"uniqueId":"spoj-HorribleQueries","name":"Horrible Queries","url":"https://www.spoj.com/problems/HORRIBLE","source":"SPOJ","difficulty":"Easy","isStarred":false,"tags":["1DRQ"],"solution":null}]},{"listId":"bitProb","problems":[{"uniqueId":"cses-1736","name":"Polynomial Queries","url":"https://cses.fi/problemset/task/1736","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["1DRQ"],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"equivalent to https://dmoj.ca/problem/acc3p4"}},{"uniqueId":"baltic-11-GrowingTrees","name":"2011 - Growing Trees","url":"https://oj.uz/problem/view/BOI11_grow","source":"Baltic OI","difficulty":"Normal","isStarred":false,"tags":["1DRQ","Binary Search"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"ioi-07-sails","name":"2007 - Sails","url":"http://oj.uz/problem/view/IOI07_sails","source":"IOI","difficulty":"Normal","isStarred":true,"tags":["1DRQ","Binary Search"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2007/33","sketch":null}}]},{"listId":"lazySample","problems":[{"uniqueId":"cses-1735","name":"Range Updates & Sums","url":"https://cses.fi/problemset/task/1735","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["Lazy SegTree"],"solution":null}]},{"listId":"lazySegTree","problems":[{"uniqueId":"ys-RangeAffineRangeSum","name":"Range Affine Range Sum","url":"https://judge.yosupo.jp/problem/range_affine_range_sum","source":"YS","difficulty":"Easy","isStarred":false,"tags":["Lazy SegTree"],"solution":null},{"uniqueId":"usaco-578","name":"Counting Haybales","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=578","source":"Plat","difficulty":"Easy","isStarred":false,"tags":["Lazy SegTree"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_haybales_platinum_dec15.html","sketch":null}},{"uniqueId":"cses-2166","name":"Prefix Sum Queries","url":"https://cses.fi/problemset/task/2166","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["Lazy SegTree"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-418","name":"The Lazy Cow","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=418","source":"Old Gold","difficulty":"Easy","isStarred":false,"tags":["Lazy SegTree"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_lazy_gold.html","sketch":null}},{"uniqueId":"ioi-14-wall","name":"2014 - Wall","url":"https://oj.uz/problem/view/IOI14_wall","source":"IOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/page/ioi-2014/40","sketch":null}},{"uniqueId":"ioi-05-mountain","name":"2005 - Mountain","url":"https://dmoj.ca/problem/ioi05p3","source":"IOI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/files/ioi2005solutions.pdf","sketch":null}},{"uniqueId":"usaco-973","name":"Snow-Cow","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=973","source":"Plat","difficulty":"Normal","isStarred":false,"tags":["Lazy SegTree"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_snowcow_platinum_dec19.html","sketch":null}},{"uniqueId":"joi-18-BubbleSort2","name":"2018 - Bubble Sort 2","url":"https://oj.uz/problem/view/JOI18_bubblesort2","source":"JOI","difficulty":"Very Hard","isStarred":false,"tags":["Lazy SegTree"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://s3-ap-northeast-1.amazonaws.com/data.cms.ioi-jp.org/open-2018/2018-open-bubblesort2-sol-en.pdf","sketch":null}},{"uniqueId":"dmoj-VictorIdentifiesSoftware","name":"Victor Identifies Software","url":"https://dmoj.ca/problem/dmopc20c1p6","source":"DMOJ","difficulty":"Very Hard","isStarred":false,"tags":["Lazy SegTree"],"solution":{"kind":"label","label":"Check DMOJ","labelTooltip":"There might be a \"Read Editorial\" button on the right side of the page.","url":null,"sketch":null}}]}]}},"pageContext":{"id":"RURQ"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}