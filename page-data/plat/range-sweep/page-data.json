{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/plat/range-sweep",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"range-sweep\", title = \"Range Queries with Sweep Line\", author = \"Benjamin Qi, Andi Qu, Dong Liu\", prerequisites = [\"PURS\", \"lis\"], description = \"Solving 2D grid problems using 1D range queries.\", frequency = 2;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {FocusProblem, HeaderLink, IncompleteSection, MATHSPAN, LanguageSection, CPPSection, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(FocusProblem, {\n      problem: \"sample\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sample2\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsx(IncompleteSection, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---intersection-points\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---intersection-points\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Intersection Points\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can sweep from bottom to top (by the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"y\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n      }), \" coordinate); storing two events for\\r\\nvertical segments (one for start and one for end) and one event for horizontal\\r\\nsegments.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can use a Binary Indexed Tree to store the number of \", _jsx(_components.strong, {\n        children: \"active\"\n      }), \" vertical\\r\\nsegments for each \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" coordinate.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then, every time we encounter the start of a vertical segment, we increment the\\r\\ncounter for \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" in the BIT.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similarly, we decrement the counter for \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" every time we see the end of a\\r\\nvertical segment.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When we encounter a horizontal segment, we would query the number of active\\r\\nranges in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[x_1, x_2]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\\\"true\\\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[x_1, x_2]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \" where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x_1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">x_1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" is the lower \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" coordinate and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x_2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\\\"application/x-tex\\\">x_2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \" is the\\r\\nupper \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \" coordinate of the segment.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Our answer would be the sum of all the queries.\"\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint bit[2000005];\\r\\n\\r\\nvoid update(int i, int x) {\\r\\n\\tfor (; i < 2000005; i += i & (-i))\\r\\n\\t\\tbit[i] += x;\\r\\n}\\r\\nint query(int i) {\\r\\n\\tint sum = 0;\\r\\n\\tfor (; i > 0; i -= i & (-i))\\r\\n\\t\\tsum += bit[i];\\r\\n\\treturn sum;\\r\\n}\\r\\n\\r\\nint n;\\r\\nvector<array<int, 4>> v;\\r\\n\\r\\nint main() {\\r\\n\\tcin.tie(0)->sync_with_stdio(0);\\r\\n\\r\\n\\tcin >> n;\\r\\n\\tfor (int i = 0, x1, y1, x2, y2; i < n; ++i) {\\r\\n\\t\\tcin >> x1 >> y1 >> x2 >> y2;\\r\\n\\t\\tif (y1 == y2)\\r\\n\\t\\t\\tv.push_back({y1, 2, x1, x2});\\r\\n\\t\\telse {\\r\\n\\t\\t\\tv.push_back({y1, 1, x1, 1});\\r\\n\\t\\t\\tv.push_back({y2, 3, x1, 1});\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tsort(begin(v), end(v));\\r\\n\\r\\n\\tlong long ans = 0;\\r\\n\\tfor (auto x : v) {\\r\\n\\t\\tx[2] += 1000001, x[3] += 1000001;\\r\\n\\t\\tif (x[1] == 1)\\r\\n\\t\\t\\tupdate(x[2], 1);\\r\\n\\t\\telse if (x[1] == 2)\\r\\n\\t\\t\\tans += query(x[3]) - query(x[2] - 1);\\r\\n\\t\\telse\\r\\n\\t\\t\\tupdate(x[2], -1);\\r\\n\\t}\\r\\n\\tcout << ans << '\\\\n';\\r\\n}\\n\"\n          })\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---springboards\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---springboards\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Springboards\"]\n    }), \"\\n\", _jsx(IncompleteSection, {}), \"\\n\", _jsx(_components.p, {\n      children: \"The problem boils down to having a data structure that supports the following\\r\\noperations:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Add a pair \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"(a,b)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">(</mo><mi>a</mi><mo separator=\\\"true\\\">,</mo><mi>b</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">(a,b)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"For any \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \", query the minimum value of \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        }), \" over all pairs satisfying\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a\\\\le x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a\\\\le x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7719em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/adv/springboards\",\n        children: \"other module\"\n      }), \" describes a simpler way of doing this,\\r\\nthough it's probably more straightforward to do coordinate compression and use a\\r\\nmin segtree. The latter approach is shown below.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"/**\\r\\n * Description: 1D point update, range query where \\\\texttt{comb} is\\r\\n \\t* any associative operation. If $N=2^p$ then \\\\texttt{seg[1]==query(0,N-1)}.\\r\\n * Time: O(\\\\log N)\\r\\n * Source:\\r\\n\\t* http://codeforces.com/blog/entry/18051\\r\\n\\t* KACTL\\r\\n * Verification: SPOJ Fenwick\\r\\n */\\r\\n\\r\\ntemplate<class T> struct Seg { // comb(ID,b) = b\\r\\n\\tconst T ID = 0; T comb(T a, T b) { return min(a,b); }\\r\\n\\tint n; vector<T> seg;\\r\\n\\tvoid init(int _n) { n = _n; seg.assign(2*n,ID); }\\r\\n\\tvoid pull(int p) { seg[p] = comb(seg[2*p],seg[2*p+1]); }\\r\\n\\tvoid upd(int p, T val) { // set val at position p\\r\\n\\t\\tckmin(seg[p += n],val); for (p /= 2; p; p /= 2) pull(p); }\\r\\n\\tT query(int l, int r) {\\t// sum on interval [l, r]\\r\\n\\t\\tT ra = ID, rb = ID;\\r\\n\\t\\tfor (l += n, r += n+1; l < r; l /= 2, r /= 2) {\\r\\n\\t\\t\\tif (l&1) ra = comb(ra,seg[l++]);\\r\\n\\t\\t\\tif (r&1) rb = comb(seg[--r],rb);\\r\\n\\t\\t}\\r\\n\\t\\treturn comb(ra,rb);\\r\\n\\t}\\r\\n};\\r\\n\\r\\nSeg<int> S;\\r\\nint N,P;\\r\\nint ans[MX];\\r\\nvi distinct_y;\\r\\n\\r\\nint query_min(int ind) { return S.query(0,ind); }\\r\\nvoid ins(int ind, int val) { S.upd(ind,val); }\\r\\nint y_index(int y) {return lb(all(distinct_y),y)-begin(distinct_y); }\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(\\\"boards\\\");\\r\\n\\tcin >> N >> P;\\r\\n\\tvector<pair<pair<int,int>,pair<int,int>>> ev;\\r\\n\\tfor (int i = 0; i < P; ++i) {\\r\\n\\t\\tpair<int,int> a,b;\\r\\n\\t\\tcin >> a.f >> a.s >> b.f >> b.s;\\r\\n\\t\\tev.push_back({a,{i,-1}}); // start point\\r\\n\\t\\tev.push_back({b,{i,1}}); // end point\\r\\n\\t\\tdistinct_y.pb(a.s);\\r\\n\\t\\tdistinct_y.pb(b.s);\\r\\n\\t}\\r\\n\\tsort(all(distinct_y));\\r\\n\\tsort(begin(ev),end(ev));\\r\\n\\tS.init(2*P);\\r\\n\\tins(0,0);\\r\\n\\tfor (auto& t: ev) {\\r\\n\\t\\tif (t.s.s == -1) {\\r\\n\\t\\t\\tans[t.s.f] = t.f.f+t.f.s+query_min(y_index(t.f.s));\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tins(y_index(t.f.s),ans[t.s.f]-t.f.f-t.f.s);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tcout << query_min(2*P-1)+2*N;\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"sweep\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Relating to LIS:\"\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"numLIS\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Range Queries with Sweep Line","author":"Benjamin Qi, Andi Qu, Dong Liu","contributors":null,"id":"range-sweep","prerequisites":["PURS","lis"],"description":"Solving 2D grid problems using 1D range queries.","frequency":2},"parent":{"name":"Range_Sweep","relativePath":"5_Plat/Range_Sweep.mdx"},"fields":{"division":"plat"},"toc":{"cpp":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Intersection Points","slug":"solution---intersection-points"},{"depth":2,"value":"Solution - Springboards","slug":"solution---springboards"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Intersection Points","slug":"solution---intersection-points"},{"depth":2,"value":"Solution - Springboards","slug":"solution---springboards"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Tutorial","slug":"tutorial"},{"depth":2,"value":"Solution - Intersection Points","slug":"solution---intersection-points"},{"depth":2,"value":"Solution - Springboards","slug":"solution---springboards"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sample","problems":[{"uniqueId":"cses-1740","name":"Intersection Points","url":"https://cses.fi/problemset/task/1740","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["PURS"],"solution":null}]},{"listId":"sample2","problems":[{"uniqueId":"usaco-995","name":"Springboards","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=995","source":"Gold","difficulty":"Normal","isStarred":false,"tags":["PURQ"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_boards_gold_jan20.html","sketch":null}}]},{"listId":"sweep","problems":[{"uniqueId":"he-TwinPermutations","name":"Twin Permutations","url":"https://www.hackerearth.com/practice/data-structures/advanced-data-structures/fenwick-binary-indexed-trees/practice-problems/algorithm/mancunian-and-twin-permutations-d988930c/","source":"HE","difficulty":"Easy","isStarred":false,"tags":["PURS"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-816","name":"Slingshot","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=816","source":"Plat","difficulty":"Normal","isStarred":false,"tags":["PURQ"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_slingshot_platinum_feb18.html","sketch":null}},{"uniqueId":"cses-1742","name":"Robot Path","url":"https://cses.fi/problemset/task/1742","source":"CSES","difficulty":"Hard","isStarred":false,"tags":["PURQ"],"solution":null},{"uniqueId":"izho-19-HedgehogDaniyarAndAlgorithms","name":"2019 - Hedgehog Daniyar and Algorithms","url":"https://oj.uz/problem/view/IZhO19_sortbooks","source":"IZhO","difficulty":"Hard","isStarred":false,"tags":[],"solution":null}]},{"listId":"numLIS","problems":[{"uniqueId":"balkan-11-trapezoid","name":"2011 - Trapezoid","url":"https://oj.uz/problem/view/balkan11_trapezoid","source":"Balkan OI","difficulty":"Hard","isStarred":true,"tags":["DP","PURS"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://boi2011.ro/resurse/tasks/trapezoid-sol.pdf","sketch":null}},{"uniqueId":"coci-16-zoltan","name":"2016 - Zoltan","url":"https://oj.uz/problem/view/COCI16_zoltan","source":"COCI","difficulty":"Hard","isStarred":true,"tags":["DP","PURS"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COCI/official/2017/contest3_solutions/solutions.pdf","sketch":null}},{"uniqueId":"usaco-865","name":"Sort It Out","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=865","source":"Plat","difficulty":"Very Hard","isStarred":false,"tags":["DP"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_itout_platinum_dec18.html","sketch":null}}]}]}},"pageContext":{"id":"range-sweep"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}