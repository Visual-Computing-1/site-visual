{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/plat/segtree-ext",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"segtree-ext\", redirects = [\"/plat/seg-ext\"], title = \"More Applications of Segment Tree\", author = \"Benjamin Qi, Andi Qu\", prerequisites = [\"PURS\"], description = \"Walking on a Segment Tree, Non-Commutative Combiner Functions\", frequency = 3;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {Resources, Resource, HeaderLink, FocusProblem, MATHSPAN, Spoiler, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        title: \"EDU: Segment Tree Pt 1 Step 2\",\n        url: \"https://codeforces.com/edu/course/2/lesson/4/2\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"both of these topics\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Segment Tree - More complex queries\",\n        url: \"data_structures/segment_tree.html#toc-tgt-8\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Includes these two applications and more.\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"walking-on-a-segment-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#walking-on-a-segment-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Walking on a Segment Tree\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"walkSam\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You want to support queries of the following form on an array \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"a_1,\\\\ldots,a_N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\\\"true\\\">,</mo><mo>…</mo><mo separator=\\\"true\\\">,</mo><msub><mi>a</mi><mi>N</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">a_1,\\\\ldots,a_N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3283em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n      }), \"\\r\\n(along with point updates).\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Find the first \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"i\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n        }), \" such that \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a_i\\\\ge x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>≥</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a_i\\\\ge x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.786em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Of course, you can do this in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log^2N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log^2N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time with a max segment\\r\\ntree and binary searching on the first \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"i\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n      }), \" such that\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\max(a_1,\\\\ldots,a_i)\\\\ge x\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\\\"true\\\">,</mo><mo>…</mo><mo separator=\\\"true\\\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\\\"false\\\">)</mo><mo>≥</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(a_1,\\\\ldots,a_i)\\\\ge x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3011em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n      }), \". But try to do this in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---hotel-queries\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---hotel-queries\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Hotel Queries\"]\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsx(_components.p, {\n        children: \"Instead of binary searching and querying the segment tree separately, let's do\\r\\nthem together!\"\n      }), _jsxs(_components.p, {\n        children: [\"Assume that you know that the answer is in some range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[l, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \". Let\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"mid = \\\\left \\\\lfloor{\\\\frac{l + r}{2}}\\\\right \\\\rfloor\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mrow><mo fence=\\\"true\\\">⌊</mo><mfrac><mrow><mi>l</mi><mo>+</mo><mi>r</mi></mrow><mn>2</mn></mfrac><mo fence=\\\"true\\\">⌋</mo></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">mid = \\\\left \\\\lfloor{\\\\frac{l + r}{2}}\\\\right \\\\rfloor</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">mi</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.2301em;vertical-align:-0.35em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size1\\\">⌊</span></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8801em;\\\"><span style=\\\"top:-2.655em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mbin mtight\\\">+</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span><span class=\\\"mclose delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size1\\\">⌋</span></span></span></span></span></span>\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\max(a_l, \\\\dots, a_{mid}) \\\\geq x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>a</mi><mi>l</mi></msub><mo separator=\\\"true\\\">,</mo><mo>…</mo><mo separator=\\\"true\\\">,</mo><msub><mi>a</mi><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></msub><mo stretchy=\\\"false\\\">)</mo><mo>≥</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(a_l, \\\\dots, a_{mid}) \\\\geq x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">mi</span><span class=\\\"mord mathnormal mtight\\\">d</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \", then we know that the answer is in the\\r\\nrange \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[l, mid]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, mid]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">mi</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \". Otherwise, the answer is in the range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[mid + 1, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[mid + 1, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">mi</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"Imagine that the segment tree is a decision tree. We start at the root and move\\r\\ndown. When we're at some node that contains \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\max(a_l, \\\\dots, a_r)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>a</mi><mi>l</mi></msub><mo separator=\\\"true\\\">,</mo><mo>…</mo><mo separator=\\\"true\\\">,</mo><msub><mi>a</mi><mi>r</mi></msub><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(a_l, \\\\dots, a_r)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" and we know\\r\\nthat the answer is in the range \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[l, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \", we move to the left child if\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\max(a_l, \\\\dots, a_{mid}) \\\\geq x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>a</mi><mi>l</mi></msub><mo separator=\\\"true\\\">,</mo><mo>…</mo><mo separator=\\\"true\\\">,</mo><msub><mi>a</mi><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></msub><mo stretchy=\\\"false\\\">)</mo><mo>≥</mo><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(a_l, \\\\dots, a_{mid}) \\\\geq x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">mi</span><span class=\\\"mord mathnormal mtight\\\">d</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≥</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \"; otherwise, we move to the right child.\"]\n      }), _jsxs(_components.p, {\n        children: [\"This is convenient because \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\max(a_l, \\\\dots, a_{mid})\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><msub><mi>a</mi><mi>l</mi></msub><mo separator=\\\"true\\\">,</mo><mo>…</mo><mo separator=\\\"true\\\">,</mo><msub><mi>a</mi><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></msub><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\max(a_l, \\\\dots, a_{mid})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">mi</span><span class=\\\"mord mathnormal mtight\\\">d</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" is already stored in the\\r\\nleft child, so we can find it in \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(1)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" time.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MAXN = 200001;\\r\\n\\r\\nint n;\\r\\nint segtree[4 * MAXN], a[MAXN];\\r\\n\\r\\nvoid build(int l = 1, int r = n, int node = 1) {\\r\\n\\tif (l == r) segtree[node] = a[l];\\r\\n\\telse {\\r\\n\\t\\tint mid = (l + r) / 2;\\r\\n\\t\\tbuild(l, mid, node * 2);\\r\\n\\t\\tbuild(mid + 1, r, node * 2 + 1);\\r\\n\\t\\tsegtree[node] = max(segtree[node * 2], segtree[node * 2 + 1]);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nvoid queryupdate(int val, int l = 1, int r = n, int node = 1) {\\r\\n\\tif (l == r) {\\r\\n\\t\\tsegtree[node] -= val;\\r\\n\\t\\tcout << l << ' ';\\r\\n\\t} else {\\r\\n\\t\\tint mid = (l + r) / 2;\\r\\n\\t\\tif (segtree[node * 2] >= val) queryupdate(val, l, mid, node * 2);\\r\\n\\t\\telse queryupdate(val, mid + 1, r, node * 2 + 1);\\r\\n\\r\\n\\t\\tsegtree[node] = max(segtree[node * 2], segtree[node * 2 + 1]);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tiostream::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\tint q;\\r\\n\\tcin >> n >> q;\\r\\n\\tfor (int i = 1; i <= n; i++) cin >> a[i];\\r\\n\\tbuild();\\r\\n\\r\\n\\twhile (q--) {\\r\\n\\t\\tint x;\\r\\n\\t\\tcin >> x;\\r\\n\\t\\tif (segtree[1] < x) cout << \\\"0 \\\";\\r\\n\\t\\telse queryupdate(x);\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"walk\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"non-commutative-combiner-functions\",\n      children: [_jsx(_components.a, {\n        href: \"#non-commutative-combiner-functions\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Non-Commutative Combiner Functions\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Previously, we only considered commutative operations like \", _jsx(_components.code, {\n        children: \"+\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"max\"\n      }), \".\\r\\nHowever, segment trees allow you to answer range queries for any associative\\r\\noperation.\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"combSam\"\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"combSam2\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---point-set-range-composite\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---point-set-range-composite\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Point Set Range Composite\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The segment tree from the prerequisite module should suffice. You can also use\\r\\ntwo BITs as described\\r\\n\", _jsx(_components.a, {\n        href: \"https://ioinformatics.org/journal/v9_2015_39_44.pdf\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"here\"\n      }), \", although it's more\\r\\ncomplicated.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"using T = AR<mi,2>;\\r\\nT comb(const T& a, const T& b) { return {a[0]*b[0],a[1]*b[0]+b[1]}; }\\r\\n\\r\\ntemplate<class T> struct BIT {\\r\\n\\tconst T ID = {1,0};\\r\\n\\tint SZ = 1; V<T> x, bit[2];\\r\\n\\tvoid init(int N) {\\r\\n\\t\\twhile (SZ <= N) SZ *= 2;\\r\\n\\t\\tx = V<T>(SZ+1,ID); F0R(i,2) bit[i] = x;\\r\\n\\t\\tFOR(i,1,N+1) re(x[i]);\\r\\n\\t\\tbuild();\\r\\n\\t}\\r\\n\\tvoid build() {\\r\\n\\t\\tFOR(i,1,SZ) {\\r\\n\\t\\t\\tbit[0][i] = comb(bit[0][i],x[i]);\\r\\n\\t\\t\\tint j = i+(i&-i); assert(j <= SZ);\\r\\n\\t\\t\\tbit[0][j] = comb(bit[0][j],bit[0][i]);\\r\\n\\t\\t}\\r\\n\\t\\tROF(i,1,SZ) {\\r\\n\\t\\t\\tbit[1][i] = comb(x[i],bit[1][i]);\\r\\n\\t\\t\\tint j = i-(i&-i);\\r\\n\\t\\t\\tbit[1][j] = comb(bit[1][i],bit[1][j]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvoid upd0(int p) {\\r\\n\\t\\tT lans = ID, rans = ID;\\r\\n\\t\\tfor (int P = p, lo = p-1, hi = p+1; P < SZ; P += P&-P) {\\r\\n\\t\\t\\tfor (;hi < P;hi += hi&-hi) rans = comb(rans,bit[1][hi]);\\r\\n\\t\\t\\tfor(;lo > P-(P&-P);lo -= lo&-lo) lans = comb(bit[0][lo],lans);\\r\\n\\t\\t\\tassert(lo == P-(P&-P));\\r\\n\\t\\t\\tbit[0][P] = comb(lans,x[p]);\\r\\n\\t\\t\\tif (p != P) bit[0][P] = comb(bit[0][P],comb(rans,x[P]));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvoid upd1(int p) {\\r\\n\\t\\tT lans = ID, rans = ID;\\r\\n\\t\\tfor (int P = p, lo = p-1, hi = p+1; P; P -= P&-P) {\\r\\n\\t\\t\\tfor (;hi < P+(P&-P); hi += hi&-hi) rans = comb(rans,bit[1][hi]);\\r\\n\\t\\t\\tfor (;lo > P; lo -= lo&-lo) lans = comb(bit[0][lo],lans);\\r\\n\\t\\t\\tassert(hi == P+(P&-P));\\r\\n\\t\\t\\tbit[1][P] = comb(x[p],rans);\\r\\n\\t\\t\\tif (p != P) bit[1][P] = comb(comb(x[P],lans),bit[1][P]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvoid upd(int p, T u) { assert(0 < p && p < SZ);\\r\\n\\t\\tx[p] = u; upd0(p); upd1(p); }\\r\\n\\tT query(int a, int b) { assert(0 < a && a <= b && b < SZ);\\r\\n\\t\\tT lans = ID, rans = ID;\\r\\n\\t\\tfor (int A; (A = a+(a&-a)) <= b; a = A) lans = comb(lans,bit[1][a]);\\r\\n\\t\\tfor (int B; (B = b-(b&-b)) >= a; b = B) rans = comb(bit[0][b],rans);\\r\\n\\t\\tassert(a == b); return comb(comb(lans,x[a]),rans);\\r\\n\\t}\\r\\n};\\r\\n\\r\\nBIT<T> B;\\r\\nint N,Q;\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(); re(N,Q);\\r\\n\\tB.init(N);\\r\\n\\tF0R(i,Q) {\\r\\n\\t\\tint t,p,c,d; re(t,p,c,d); ++p;\\r\\n\\t\\tif (t == 0) {\\r\\n\\t\\t\\tB.upd(p,{c,d});\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tT res = B.query(p,c);\\r\\n\\t\\t\\tps(res[0]*d+res[1]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---subarray-sum-queries\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---subarray-sum-queries\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Subarray Sum Queries\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hint: In each node of the segment tree, you'll need to store four pieces of\\r\\ninformation.\"\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsxs(_components.p, {\n        children: [\"In each node of the segment tree that stores information about the range\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"[l, r]\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n        }), \" we store the following information:\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"The maximum subarray sum in the range \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"[l, r]\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n          }), \". (Let this be \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"G\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\\\"application/x-tex\\\">G</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">G</span></span></span></span>\"\n          }), \")\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The maximum subarray sum in the range \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"[l, r]\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n          }), \" if it must contain \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"a_l\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mi>l</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">a_l</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3361em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.01968em;\\\">l</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n          }), \". (Let\\r\\nthis be \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"L\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\\\"application/x-tex\\\">L</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\">L</span></span></span></span>\"\n          }), \")\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The maximum subarray sum in the range \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"[l, r]\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mi>l</mi><mo separator=\\\"true\\\">,</mo><mi>r</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[l, r]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n          }), \" if it must contain \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"a_r\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msub><mi>a</mi><mi>r</mi></msub></mrow><annotation encoding=\\\"application/x-tex\\\">a_r</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.5806em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.1514em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.02778em;\\\">r</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span>\"\n          }), \". (Let\\r\\nthis be \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"R\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\\\"application/x-tex\\\">R</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">R</span></span></span></span>\"\n          }), \")\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The total sum of the range. (Let this be \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"S\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n          }), \")\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"When we combine two nodes \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"u\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n        }), \" (left child) and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"v\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\\\"application/x-tex\\\">v</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span></span></span></span>\"\n        }), \" (right child) to make node\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"w\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\\\"application/x-tex\\\">w</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span></span></span></span>\"\n        }), \",\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"w.G = \\\\max(u.G, v.G, u.R + v.L)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>G</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>G</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>G</mi><mo separator=\\\"true\\\">,</mo><mi>u</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>R</mi><mo>+</mo><mi>v</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">w.G = \\\\max(u.G, v.G, u.R + v.L)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">R</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"w.L = \\\\max(u.L, u.S + v.L)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi><mo separator=\\\"true\\\">,</mo><mi>u</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi><mo>+</mo><mi>v</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>L</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">w.L = \\\\max(u.L, u.S + v.L)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"w.R = \\\\max(u.R + v.S, v.R)\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>R</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\\\"false\\\">(</mo><mi>u</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>R</mi><mo>+</mo><mi>v</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi><mo separator=\\\"true\\\">,</mo><mi>v</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>R</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">w.R = \\\\max(u.R + v.S, v.R)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">R</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mop\\\">max</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">R</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">R</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"w.S = u.S + v.S\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>w</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi><mo>=</mo><mi>u</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi><mo>+</mo><mi>v</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>S</mi></mrow><annotation encoding=\\\"application/x-tex\\\">w.S = u.S + v.S</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span></span></span></span>\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"We can thus handle updates and queries efficiently.\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cpp\",\n          children: \"#include <bits/stdc++.h>\\r\\ntypedef long long ll;\\r\\nusing namespace std;\\r\\n\\r\\nconst ll MAXN = 200001;\\r\\n\\r\\nstruct Node {\\r\\n\\tll g_max, l_max, r_max, sum;\\r\\n\\tNode operator +(Node b) {\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tmax(max(g_max, b.g_max), r_max + b.l_max),\\r\\n\\t\\t\\tmax(l_max, sum + b.l_max),\\r\\n\\t\\t\\tmax(b.r_max, r_max + b.sum),\\r\\n\\t\\t\\tsum + b.sum\\r\\n\\t\\t};\\r\\n\\t}\\r\\n};\\r\\n\\r\\nll n, a[MAXN];\\r\\nNode segtree[4 * MAXN];\\r\\n\\r\\nvoid build(ll l = 1, ll r = n, ll node = 1) {\\r\\n\\tif (l == r) segtree[node] = {max(0ll, a[l]), max(0ll, a[l]), max(0ll, a[l]), a[l]};\\r\\n\\telse {\\r\\n\\t\\tll mid = (l + r) / 2;\\r\\n\\t\\tbuild(l, mid, node * 2);\\r\\n\\t\\tbuild(mid + 1, r, node * 2 + 1);\\r\\n\\t\\tsegtree[node] = segtree[node * 2] + segtree[node * 2 + 1];\\r\\n\\t}\\r\\n}\\r\\nvoid update(ll pos, ll val, ll l = 1, ll r = n, ll node = 1) {\\r\\n\\tif (l == r) segtree[node] = {max(0ll, val), max(0ll, val), max(0ll, val), val};\\r\\n\\telse {\\r\\n\\t\\tll mid = (l + r) / 2;\\r\\n\\t\\tif (pos > mid) update(pos, val, mid + 1, r, node * 2 + 1);\\r\\n\\t\\telse update(pos, val, l, mid, node * 2);\\r\\n\\t\\tsegtree[node] = segtree[node * 2] + segtree[node * 2 + 1];\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tiostream::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\tll q;\\r\\n\\tcin >> n >> q;\\r\\n\\tfor (int i = 1; i <= n; i++) cin >> a[i];\\r\\n\\tbuild();\\r\\n\\r\\n\\twhile (q--) {\\r\\n\\t\\tll x, y;\\r\\n\\t\\tcin >> x >> y;\\r\\n\\t\\tupdate(x, y);\\r\\n\\t\\tcout << segtree[1].g_max << '\\\\n';\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems-1\",\n      children: [_jsx(_components.a, {\n        href: \"#problems-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"comb\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  redirects,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"More Applications of Segment Tree","author":"Benjamin Qi, Andi Qu","contributors":null,"id":"segtree-ext","prerequisites":["PURS"],"description":"Walking on a Segment Tree, Non-Commutative Combiner Functions","frequency":3},"parent":{"name":"Segtree_Ext","relativePath":"5_Plat/Segtree_Ext.mdx"},"fields":{"division":"plat"},"toc":{"cpp":[{"depth":2,"value":"Walking on a Segment Tree","slug":"walking-on-a-segment-tree"},{"depth":3,"value":"Solution - Hotel Queries","slug":"solution---hotel-queries"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Non-Commutative Combiner Functions","slug":"non-commutative-combiner-functions"},{"depth":3,"value":"Solution - Point Set Range Composite","slug":"solution---point-set-range-composite"},{"depth":3,"value":"Solution - Subarray Sum Queries","slug":"solution---subarray-sum-queries"},{"depth":3,"value":"Problems","slug":"problems-1"}],"java":[{"depth":2,"value":"Walking on a Segment Tree","slug":"walking-on-a-segment-tree"},{"depth":3,"value":"Solution - Hotel Queries","slug":"solution---hotel-queries"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Non-Commutative Combiner Functions","slug":"non-commutative-combiner-functions"},{"depth":3,"value":"Solution - Point Set Range Composite","slug":"solution---point-set-range-composite"},{"depth":3,"value":"Solution - Subarray Sum Queries","slug":"solution---subarray-sum-queries"},{"depth":3,"value":"Problems","slug":"problems-1"}],"py":[{"depth":2,"value":"Walking on a Segment Tree","slug":"walking-on-a-segment-tree"},{"depth":3,"value":"Solution - Hotel Queries","slug":"solution---hotel-queries"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"Non-Commutative Combiner Functions","slug":"non-commutative-combiner-functions"},{"depth":3,"value":"Solution - Point Set Range Composite","slug":"solution---point-set-range-composite"},{"depth":3,"value":"Solution - Subarray Sum Queries","slug":"solution---subarray-sum-queries"},{"depth":3,"value":"Problems","slug":"problems-1"}]}},"moduleProblemLists":{"problemLists":[{"listId":"walkSam","problems":[{"uniqueId":"cses-1143","name":"Hotel Queries","url":"https://cses.fi/problemset/task/1143","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["PURQ"],"solution":null}]},{"listId":"walk","problems":[{"uniqueId":"usaco-231","name":"Seating","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=231","source":"Old Gold","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_seating.html","sketch":null}},{"uniqueId":"usaco-624","name":"Load Balancing","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=624","source":"Plat","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-1179C","name":"Serge and Dining Room","url":"https://codeforces.com/contest/1179/problem/C","source":"CF","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]},{"listId":"combSam","problems":[{"uniqueId":"ys-PointSetRangeComposite","name":"Point Set Range Composite","url":"https://judge.yosupo.jp/problem/point_set_range_composite","source":"YS","difficulty":"Easy","isStarred":false,"tags":["PURQ"],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"Order of operations matters!"}}]},{"listId":"combSam2","problems":[{"uniqueId":"cses-1190","name":"Subarray Sum Queries","url":"https://cses.fi/problemset/task/1190","source":"CSES","difficulty":"Normal","isStarred":false,"tags":["PURQ"],"solution":null}]},{"listId":"comb","problems":[{"uniqueId":"cses-2206","name":"Pizzeria Queries","url":"https://cses.fi/problemset/task/2206","source":"CSES","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-495","name":"Marathon","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=495","source":"Old Gold","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_marathon_gold.html","sketch":null}},{"uniqueId":"cses-1188","name":"Bit Inversions","url":"https://cses.fi/problemset/task/1188","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["PURQ"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-365","name":"Optimal Milking","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=365","source":"Old Gold","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_optmilk.html","sketch":null}},{"uniqueId":"poi-14-cards","name":"2014 - Cards","url":"https://szkopul.edu.pl/problemset/problem/qpsk3ygf8MU7D_1Es0oc_xd8/site/?key=statement","source":"POI","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"coci-21-sjeckanje","name":"2021 - Sjeckanje","url":"https://oj.uz/problem/view/COCI21_sjeckanje","source":"COCI","difficulty":"Hard","isStarred":false,"tags":[],"solution":null},{"uniqueId":"usaco-577","name":"High Card Low Card","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=577","source":"Plat","difficulty":"Hard","isStarred":false,"tags":["PURQ","Greedy"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_cardgame_platinum_dec15.html","sketch":null}},{"uniqueId":"balkan-18-election","name":"2018 - Election","url":"https://oj.uz/problem/view/BOI18_election","source":"Balkan OI","difficulty":"Hard","isStarred":false,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"segtree-ext"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}