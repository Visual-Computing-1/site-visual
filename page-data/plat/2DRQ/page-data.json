{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/plat/2DRQ",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*- GP of Serbia 2020 B*/\n/*- USACO Camp - \"Cows Play Global Thermonuclear War\" (2D case)*/\n/*\n## Sparse Segment Tree\n\nWe can also use a sparse segment tree to handle subrectangle sums on a large grid (up to $2 \\cdot 10^5 \\times 2 \\cdot 10^5$) with not very many (up to $2 \\cdot 10^5$) non-zero cells! (E.g. in [APIO 2017 Rainbow](https://oj.uz/problem/view/APIO17_rainbow))\n\nThe main idea is to store prefix sums of the rows. Since there are few non-zero cells, we update the prefix sums very few times.\n\nHere is an implementation of the above idea:\n\n<LanguageSection>\n\n<CPPSection>\n\n```cpp\nconst int MAXN = 2e5, MAXSEG = (6e5 + 9) * 19 + 1;\n\nint cnt = 1, segtree[MAXSEG], left_c[MAXSEG], right_c[MAXSEG];\n\nstruct Segtree {\nset<int> data[MAXN + 1];\nint roots[MAXN + 2];\n\nvoid add(int x, int y) { data[x].insert(y); }\n\nvoid build() {\nfor (int i = 1; i <= MAXN; i++) {\nroots[i + 1] = roots[i];\nfor (int j : data[i]) update(j, roots[i + 1]);\n}\n}\n\nvoid update(int pos, int &node, int l = 1, int r = MAXN) {\nsegtree[cnt] = segtree[node] + 1;\nleft_c[cnt] = left_c[node];\nright_c[cnt] = right_c[node];\nnode = cnt++;\n\nif (l == r) return;\nint mid = (l + r) / 2;\nif (pos > mid) update(pos, right_c[node], mid + 1, r);\nelse update(pos, left_c[node], l, mid);\n}\n\nint query(int l1, int r1, int l2, int r2) {\nif (l2 > r2) return 0;\nreturn query(l2, r2, roots[r1 + 1], 1, MAXN) - query(l2, r2, roots[l1], 1, MAXN);\n}\nint query(int a, int b, int node, int l, int r) {\nif (a > r || b < l) return 0;\nif (a <= l && b >= r) return segtree[node];\nint mid = (l + r) / 2;\nreturn query(a, b, left_c[node], l, mid) + query(a, b, right_c[node], mid + 1, r);\n}\n};\n```\n\n</CPPSection>\n\n</LanguageSection>*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"2DRQ\", title = \"2D Range Queries\", author = \"Benjamin Qi, Andi Qu\", prerequisites = [\"sparse-segtree\"], description = \"Extending Range Queries to 2D (and beyond).\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Problems: _missingComponent(\"Problems\"),\n    Optional: _missingComponent(\"Optional\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Info: _missingComponent(\"Info\")\n  }, _props.components), {HeaderLink, Resources, Resource, FocusProblem, LanguageSection, CPPSection, Problems, Optional, MATHSPAN, Info, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"2d-rmq\",\n      children: [_jsx(_components.a, {\n        href: \"#2d-rmq\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"2D RMQ\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CF\",\n        title: \"retrograd - Multi-Dimensional RMQ\",\n        url: \"53810\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Quite rare, I've only needed this once.\"\n    }), \"\\n\", \"\\n\", _jsxs(_components.h2, {\n      id: \"2d-bit\",\n      children: [_jsx(_components.a, {\n        href: \"#2d-bit\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"2D BIT\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"bitSam\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tutorial\",\n      children: [_jsx(_components.a, {\n        href: \"#tutorial\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tutorial\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"GFG\",\n        title: \"2D BIT\",\n        url: \"two-dimensional-binary-indexed-tree-or-fenwick-tree\"\n      }), _jsx(Resource, {\n        source: \"TC\",\n        title: \"Binary Indexed Trees\",\n        url: \"binary-indexed-trees\"\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Essentially, we just nest the loops that one would find in a 1D BIT to get\\r\\nN-dimensional BITs. We can then use\\r\\n\", _jsx(_components.a, {\n        href: \"https://brilliant.org/wiki/principle-of-inclusion-and-exclusion-pie/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"PIE\"\n      }), \" to\\r\\nquery subrectangles.\"]\n    }), \"\\n\", _jsx(LanguageSection, {\n      children: _jsxs(CPPSection, {\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint bit[1001][1001];\\r\\nint n;\\r\\n\\r\\nvoid update(int x, int y, int val) {\\r\\n\\tfor (; x <= n; x += (x & (-x))) {\\r\\n\\t\\tfor (int i = y; i <= n; i += (i & (-i))) {\\r\\n\\t\\t\\tbit[x][i] += val;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nint query(int x1, int y1, int x2, int y2) {\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = x2; i; i -= (i & (-i))) {\\r\\n\\t\\tfor (int j = y2; j; j -= (j & (-j))) {\\r\\n\\t\\t\\tans += bit[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i = x2; i; i -= (i & (-i))) {\\r\\n\\t\\tfor (int j = y1 - 1; j; j -= (j & (-j))) {\\r\\n\\t\\t\\tans -= bit[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i = x1 - 1; i; i -= (i & (-i))) {\\r\\n\\t\\tfor (int j = y2; j; j -= (j & (-j))) {\\r\\n\\t\\t\\tans -= bit[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (int i = x1 - 1; i; i -= (i & (-i))) {\\r\\n\\t\\tfor (int j = y1 - 1; j; j -= (j & (-j))) {\\r\\n\\t\\t\\tans += bit[i][j];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn ans;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tiostream::sync_with_stdio(false);\\r\\n\\tcin.tie(0);\\r\\n\\tint q;\\r\\n\\tcin >> n >> q;\\r\\n\\tfor (int i = 1; i <= n; i++) for (int j = 1; j <= n; j++) {\\r\\n\\t\\tchar c;\\r\\n\\t\\tcin >> c;\\r\\n\\t\\tif (c == '*') update(j, i, 1);\\r\\n\\t}\\r\\n\\twhile (q--) {\\r\\n\\t\\tint t;\\r\\n\\t\\tcin >> t;\\r\\n\\t\\tif (t == 1) {\\r\\n\\t\\t\\tint x, y;\\r\\n\\t\\t\\tcin >> y >> x;\\r\\n\\t\\t\\tif (query(x, y, x, y)) update(x, y, -1);\\r\\n\\t\\t\\telse update(x, y, 1);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tint y1, x1, y2, x2;\\r\\n\\t\\t\\tcin >> y1 >> x1 >> y2 >> x2;\\r\\n\\t\\t\\tcout << query(x1, y1, x2, y2) << '\\\\n';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn 0;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"alternative-implementation\",\n          children: [_jsx(_components.a, {\n            href: \"#alternative-implementation\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Alternative Implementation\"]\n        }), _jsxs(_components.p, {\n          children: [\"Using the multidimensional implementation mentioned\\r\\n\", _jsx(_components.a, {\n            href: \"/gold/PURS/#solution-2\",\n            children: \"here\"\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"template <class T, int ...Ns> struct BIT {\\r\\n\\tT val = 0;\\r\\n\\tvoid upd(T v) { val += v; }\\r\\n\\tT query() { return val; }\\r\\n};\\r\\n\\r\\ntemplate <class T, int N, int... Ns> struct BIT<T, N, Ns...> {\\r\\n\\tBIT<T,Ns...> bit[N + 1];\\r\\n\\ttemplate<typename... Args> void upd(int pos, Args... args) {\\r\\n\\t\\tfor (; pos <= N; pos += (pos&-pos)) bit[pos].upd(args...);\\r\\n\\t}\\r\\n\\ttemplate<typename... Args> T sum(int r, Args... args) {\\r\\n\\t\\tT res = 0; for (; r; r -= (r&-r)) res += bit[r].query(args...);\\r\\n\\t\\treturn res;\\r\\n\\t}\\r\\n\\ttemplate<typename... Args> T query(int l, int r, Args... args) {\\r\\n\\t\\treturn sum(r,args...)-sum(l-1,args...);\\r\\n\\t}\\r\\n}; // BIT<int,10,10> gives a 2D BIT\\r\\n\\r\\nBIT<int,1000,1000> B;\\r\\nint n,q;\\r\\n\\r\\nint main() {\\r\\n\\tsetIO(); re(n,q);\\r\\n\\tF0R(i,n) {\\r\\n\\t\\tstring s; re(s);\\r\\n\\t\\tF0R(j,n) if (s[j] == '*') B.upd(i+1,j+1,1);\\r\\n\\t}\\r\\n\\tF0R(i,q) {\\r\\n\\t\\tint t; re(t);\\r\\n\\t\\tif (t == 1) {\\r\\n\\t\\t\\tint y,x; re(y,x);\\r\\n\\t\\t\\tif (B.query(y,y,x,x)) B.upd(y,x,-1);\\r\\n\\t\\t\\telse B.upd(y,x,1);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tint y1,x1,y2,x2; re(y1,x1,y2,x2);\\r\\n\\t\\t\\tps(B.query(y1,y2,x1,x2));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"bit\"\n    }), \"\\n\", _jsx(Optional, {\n      title: \"Range Update and Range Query in Higher Dimensions\",\n      children: _jsxs(_components.p, {\n        children: [\"Lazy propagation on segment trees does not extend to higher dimensions. However,\\r\\nyou can extend the 1D BIT solution to solve range increment range sum in higher\\r\\ndimensions as well! See \", _jsx(_components.a, {\n          href: \"https://arxiv.org/pdf/1311.6093.pdf\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"this paper\"\n        }), \" for\\r\\ndetails.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"2d-offline-sum-queries\",\n      children: [_jsx(_components.a, {\n        href: \"#2d-offline-sum-queries\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"2D Offline Sum Queries\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/bqi343/USACO/tree/master/Implementations/content/data-structures/2D%20Range%20Queries%20(15.2)\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"my implementations\"\n      }), \".\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"offSam\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The intended complexity is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log^2 N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log^2 N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" with a good constant factor.\\r\\nThis requires updating points and querying rectangle sums \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" times for points\\r\\nwith coordinates in the range \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"[1,N]\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo stretchy=\\\"false\\\">[</mo><mn>1</mn><mo separator=\\\"true\\\">,</mo><mi>N</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">[1,N]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n      }), \". However, the 2D BITs mentioned above use\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" memory, which is too much.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution---soriyas-programming-project\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---soriyas-programming-project\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Soriya's Programming Project\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since we know all of the updates and queries beforehand, we can reduce the\\r\\nmemory usage while maintaining a decent constant factor.\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"idea-1---use-an-unordered-map-instead-of-a-2d-array\",\n      children: [_jsx(_components.a, {\n        href: \"#idea-1---use-an-unordered-map-instead-of-a-2d-array\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Idea 1 - Use an unordered map instead of a 2D array.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Bad idea ... This gives \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log^2N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log^2N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" memory and time and the constant\\r\\nfactors for both are terrible.\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"idea-2---compress-the-points-to-be-updated-so-that-you-only-need-mathcalonlog-n-memory\",\n      children: [_jsx(_components.a, {\n        href: \"#idea-2---compress-the-points-to-be-updated-so-that-you-only-need-mathcalonlog-n-memory\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Idea 2 - Compress the points to be updated so that you only need \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" memory.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This doesn't require knowing the queries beforehand.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/1D%20Range%20Queries%20(9.2)/BIToff.h\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"my 1D offline BIT\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/data-structures/2D%20Range%20Queries%20(15.2)/BIT2DOff%20(15.2).h\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"my 2D offline BIT\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It's a bit difficult to pass the above problem within the time limit. Make sure\\r\\nto use fast input (and not \", _jsx(_components.code, {\n        children: \"endl\"\n      }), \")!\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/thecodingwizard/competitive-programming/blob/master/DMOJ/Soriyas%20Programming%20Project.cpp\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"thecodingwizard's implementation with 2D offline BIT above\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"idea-3---use-divide--conquer-with-a-1d-bit\",\n      children: [_jsx(_components.a, {\n        href: \"#idea-3---use-divide--conquer-with-a-1d-bit\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Idea 3 - Use divide & conquer with a 1D BIT\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The fastest way.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"mentioned in\\r\\n\", _jsx(_components.a, {\n          href: \"https://robert1003.github.io/2020/01/31/cdq-divide-and-conquer.html\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"this article\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/thecodingwizard/competitive-programming/blob/master/DMOJ/Soriya%20Programming%20Project%201d%20BIT%20cdq%20dnc.cpp\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"thecodingwizard's (messy) implementation\"\n        }), \"\\r\\nbased off above\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems-1\",\n      children: [_jsx(_components.a, {\n        href: \"#problems-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"off\"\n    }), \"\\n\", \"\\n\", _jsxs(_components.h2, {\n      id: \"2d-segment-tree\",\n      children: [_jsx(_components.a, {\n        href: \"#2d-segment-tree\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"2D Segment Tree\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A segment tree of (maybe sparse) segment trees.\"\n    }), \"\\n\", _jsx(Info, {\n      title: \"Pro Tip\",\n      children: _jsxs(_components.p, {\n        children: [\"This is \", _jsx(_components.strong, {\n          children: \"not\"\n        }), \" the same as \", _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Quadtree\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Quadtree\"\n        }), \".\\r\\nIf the coordinates go up to \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"C\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\\\"application/x-tex\\\">C</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span></span></span></span>\"\n        }), \", then 2D segment tree queries run in\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(\\\\log^2C)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>C</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log^2C)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" time each but some queries make Quadtree take \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\Theta(C)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">Θ</mi><mo stretchy=\\\"false\\\">(</mo><mi>C</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\Theta(C)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">Θ</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \"\\r\\ntime!\"]\n      })\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CPH\",\n        title: \"28.2 (Sparse SegTree), 28.4 (2D)\",\n        children: _jsx(_components.p, {\n          children: \"Brief description\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation-1\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"USACO\",\n        title: \"Analysis - Mowing the Field\",\n        url: \"http://www.usaco.org/current/data/sol_mowing_platinum_jan16.html\",\n        children: _jsx(_components.p, {\n          children: \"Code\"\n        })\n      }), _jsx(Resource, {\n        source: \"cp-algo\",\n        title: \"Simple 2D Segment Tree\",\n        url: \"https://cp-algorithms.com/data_structures/segment_tree.html#toc-tgt-11\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"More code\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"note---memory-usage\",\n      children: [_jsx(_components.a, {\n        href: \"#note---memory-usage\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Note - Memory Usage\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Naively, inserting \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" elements into a sparse segment tree requires\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log C)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>C</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log C)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" memory, giving a bound of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N\\\\log^2C)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>C</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log^2C)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.1484em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\"><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8984em;\\\"><span style=\\\"top:-3.1473em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" on 2D\\r\\nsegment tree memory. This is usually too much for \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N=C=10^5\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>=</mo><mi>C</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">N=C=10^5</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">5</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" and 256 MB\\r\\n(although it sufficed for \\\"Mowing the Field\\\" due to the 512MB memory limit).\\r\\nPossible ways to get around this:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Use arrays of fixed size rather than pointers.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Reduce the memory usage of sparse segment tree to \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" while\\r\\nmaintaining the same \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N\\\\log C)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>C</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log C)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" insertion time (see the solution\\r\\nfor IOI Game below for details).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.a, {\n          href: \"/adv/treaps\",\n          children: \"BBSTs\"\n        }), \" instead of sparse segment trees. \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \"\\r\\nmemory, \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N\\\\log N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N\\\\log N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \" insertion time.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problems-2\",\n      children: [_jsx(_components.a, {\n        href: \"#problems-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Can also try the USACO problems from above.\"\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"seg\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"2D Range Queries","author":"Benjamin Qi, Andi Qu","contributors":null,"id":"2DRQ","prerequisites":["sparse-segtree"],"description":"Extending Range Queries to 2D (and beyond).","frequency":1},"parent":{"name":"2DRQ","relativePath":"5_Plat/2DRQ.mdx"},"fields":{"division":"plat"},"toc":{"cpp":[{"depth":2,"value":"2D RMQ","slug":"2d-rmq"},{"depth":2,"value":"2D BIT","slug":"2d-bit"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Alternative Implementation","slug":"alternative-implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"2D Offline Sum Queries","slug":"2d-offline-sum-queries"},{"depth":3,"value":"Solution - Soriya&#39;s Programming Project","slug":"solution---soriyas-programming-project"},{"depth":4,"value":"Idea 1 - Use an unordered map instead of a 2D array.","slug":"idea-1---use-an-unordered-map-instead-of-a-2d-array"},{"depth":4,"value":"Idea 2 - Compress the points to be updated so that you only need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(N\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> memory.","slug":"idea-2---compress-the-points-to-be-updated-so-that-you-only-need-mathcalonlog-n-memory"},{"depth":4,"value":"Idea 3 - Use divide &amp; conquer with a 1D BIT","slug":"idea-3---use-divide--conquer-with-a-1d-bit"},{"depth":3,"value":"Problems","slug":"problems-1"},{"depth":2,"value":"2D Segment Tree","slug":"2d-segment-tree"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Note - Memory Usage","slug":"note---memory-usage"},{"depth":3,"value":"Problems","slug":"problems-2"}],"java":[{"depth":2,"value":"2D RMQ","slug":"2d-rmq"},{"depth":2,"value":"2D BIT","slug":"2d-bit"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"2D Offline Sum Queries","slug":"2d-offline-sum-queries"},{"depth":3,"value":"Solution - Soriya&#39;s Programming Project","slug":"solution---soriyas-programming-project"},{"depth":4,"value":"Idea 1 - Use an unordered map instead of a 2D array.","slug":"idea-1---use-an-unordered-map-instead-of-a-2d-array"},{"depth":4,"value":"Idea 2 - Compress the points to be updated so that you only need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(N\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> memory.","slug":"idea-2---compress-the-points-to-be-updated-so-that-you-only-need-mathcalonlog-n-memory"},{"depth":4,"value":"Idea 3 - Use divide &amp; conquer with a 1D BIT","slug":"idea-3---use-divide--conquer-with-a-1d-bit"},{"depth":3,"value":"Problems","slug":"problems-1"},{"depth":2,"value":"2D Segment Tree","slug":"2d-segment-tree"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Note - Memory Usage","slug":"note---memory-usage"},{"depth":3,"value":"Problems","slug":"problems-2"}],"py":[{"depth":2,"value":"2D RMQ","slug":"2d-rmq"},{"depth":2,"value":"2D BIT","slug":"2d-bit"},{"depth":3,"value":"Tutorial","slug":"tutorial"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":3,"value":"Problems","slug":"problems"},{"depth":2,"value":"2D Offline Sum Queries","slug":"2d-offline-sum-queries"},{"depth":3,"value":"Solution - Soriya&#39;s Programming Project","slug":"solution---soriyas-programming-project"},{"depth":4,"value":"Idea 1 - Use an unordered map instead of a 2D array.","slug":"idea-1---use-an-unordered-map-instead-of-a-2d-array"},{"depth":4,"value":"Idea 2 - Compress the points to be updated so that you only need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(N\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> memory.","slug":"idea-2---compress-the-points-to-be-updated-so-that-you-only-need-mathcalonlog-n-memory"},{"depth":4,"value":"Idea 3 - Use divide &amp; conquer with a 1D BIT","slug":"idea-3---use-divide--conquer-with-a-1d-bit"},{"depth":3,"value":"Problems","slug":"problems-1"},{"depth":2,"value":"2D Segment Tree","slug":"2d-segment-tree"},{"depth":3,"value":"Implementation","slug":"implementation-1"},{"depth":3,"value":"Note - Memory Usage","slug":"note---memory-usage"},{"depth":3,"value":"Problems","slug":"problems-2"}]}},"moduleProblemLists":{"problemLists":[{"listId":"bitSam","problems":[{"uniqueId":"cses-1739","name":"Forest Queries II","url":"https://cses.fi/problemset/task/1739","source":"CSES","difficulty":"Easy","isStarred":false,"tags":["2DRQ","BIT"],"solution":{"kind":"sketch","label":null,"labelTooltip":null,"url":null,"sketch":"Just implement a 2D BIT. See [thecodingwizard's implementation](https://github.com/thecodingwizard/competitive-programming/blob/master/cses/Forest%20Queries%20II.cpp)."}}]},{"listId":"bit","problems":[{"uniqueId":"dmoj-CrowdedCities","name":"Crowded Cities","url":"https://dmoj.ca/problem/bfs17p6","source":"DMOJ","difficulty":"Normal","isStarred":false,"tags":["2DRQ","BIT"],"solution":{"kind":"label","label":"Check DMOJ","labelTooltip":"There might be a \"Read Editorial\" button on the right side of the page.","url":null,"sketch":null}},{"uniqueId":"ioi-07-pairs","name":"2007 - Pairs","url":"https://oj.uz/problem/view/IOI07_pairs","source":"IOI","difficulty":"Normal","isStarred":false,"tags":["3DRQ","BIT"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://ioinformatics.org/files/ioi2007solutions.pdf","sketch":null}}]},{"listId":"offSam","problems":[{"uniqueId":"dmoj-SoriyasProgrammingProject","name":"Soriya's Programming Project","url":"https://dmoj.ca/problem/dmopc19c7p5","source":"DMOJ","difficulty":"Normal","isStarred":false,"tags":["D&C","2DRQ","BIT"],"solution":{"kind":"label","label":"Check DMOJ","labelTooltip":"There might be a \"Read Editorial\" button on the right side of the page.","url":null,"sketch":null}}]},{"listId":"off","problems":[{"uniqueId":"usaco-722","name":"Friendcross","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=722","source":"Plat","difficulty":"Normal","isStarred":false,"tags":["2DRQ","BIT"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-601","name":"Mowing the Field","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=601","source":"Plat","difficulty":"Normal","isStarred":false,"tags":["2DRQ","BIT"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_mowing_platinum_jan16.html","sketch":null}},{"uniqueId":"apio-19-StreetLamps","name":"2019 - Street Lamps","url":"https://oj.uz/problem/view/APIO19_street_lamps","source":"APIO","difficulty":"Normal","isStarred":false,"tags":["2DRQ","BIT"],"solution":null}]},{"listId":"seg","problems":[{"uniqueId":"poi-06-Tetris3D","name":"2006 - Tetris 3D","url":"https://szkopul.edu.pl/problemset/problem/OQjANSOOD_-c38gh8p6g3Gxp/site/?key=statement","source":"POI","difficulty":"Hard","isStarred":false,"tags":["2DRQ","Lazy SegTree"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/POI/official/2006/editorial/tet.pdf","sketch":null}},{"uniqueId":"ioi-13-game","name":"2013 - Game","url":"https://oj.uz/problem/view/IOI13_game","source":"IOI","difficulty":"Hard","isStarred":false,"tags":["2DRQ","Sparse SegTree"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"joi-17-golf","name":"2017 - Golf","url":"https://oj.uz/problem/view/JOI17_golf","source":"JOI","difficulty":"Very Hard","isStarred":false,"tags":["2DRQ","SegTree"],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://s3-ap-northeast-1.amazonaws.com/data.cms.ioi-jp.org/open-2017/2017-open-golf-sol-en.pdf","sketch":null}}]}]}},"pageContext":{"id":"2DRQ"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}