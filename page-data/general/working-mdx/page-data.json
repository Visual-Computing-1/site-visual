{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/working-mdx",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"working-mdx\", title = \"Working With MDX\", author = \"Nathan Wang\", description = \"Explanation of the frontmatter that precedes every module and solution, a list of custom components that may be used within modules or solutions.\", prerequisites = [\"modules\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    em: \"em\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    h4: \"h4\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Optional: _missingComponent(\"Optional\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    Info: _missingComponent(\"Info\"),\n    Warning: _missingComponent(\"Warning\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    TextTooltip: _missingComponent(\"TextTooltip\"),\n    Asterisk: _missingComponent(\"Asterisk\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Quiz: _missingComponent(\"Quiz\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {HeaderLink, Optional, Spoiler, Info, Warning, Resources, Resource, TextTooltip, Asterisk, IncompleteSection, LanguageSection, CPPSection, JavaSection, PySection, Quiz, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"We're using \", _jsx(_components.a, {\n        href: \"https://mdxjs.com/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MDX\"\n      }), \", a superset of Markdown, using the\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/wooorm/xdm\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"XDM compiler\"\n      }), \". HTML and React components are\\r\\nsupported, so it is possible to add interactivity / custom components to each\\r\\nmodule.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"frontmatter\",\n      children: [_jsx(_components.a, {\n        href: \"#frontmatter\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Frontmatter\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://jekyllrb.com/docs/front-matter/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Frontmatter\"\n      }), \" is the stuff in the\\r\\nbeginning of each module that's surrounded by three dashes. Frontmatter is\\r\\nwritten in \", _jsx(_components.a, {\n        href: \"https://yaml.org/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"YAML\"\n      }), \". It stores the \\\"metadata\\\" for each module.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"ID\"\n        }), \": \", _jsx(_components.em, {\n          children: \"Required\"\n        }), \". The ID of the module. Ex: \", _jsx(_components.code, {\n          children: \"getting-started\"\n        }), \", or\\r\\n\", _jsx(_components.code, {\n          children: \"containers\"\n        }), \". This ID is used to identify the module, so make sure it is\\r\\n\", _jsx(_components.strong, {\n          children: \"unique\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"all lowercase with dashes only\"\n        }), \". The URL will be generated\\r\\nbased off this.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Title\"\n        }), \": \", _jsx(_components.em, {\n          children: \"Required\"\n        }), \". The title of the module. Ex: \", _jsx(_components.code, {\n          children: \"Getting Started\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Author\"\n        }), \": \", _jsx(_components.em, {\n          children: \"Required\"\n        }), \". The author of the module. Ex: \", _jsx(_components.code, {\n          children: \"Unknown\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Contributors\"\n        }), \": \", _jsx(_components.em, {\n          children: \"Optional\"\n        }), \". The people who contributed code and/or short\\r\\nexplanations to the module.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Description\"\n        }), \": \", _jsx(_components.em, {\n          children: \"Required\"\n        }), \". A short description of the module, similar to\\r\\nwhat \", _jsx(_components.a, {\n          href: \"https://www.codecademy.com/learn/paths/computer-science\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"codecademy\"\n        }), \" has\\r\\nin their syllabus. Markdown/LaTeX does not work in the description field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Prerequisites\"\n        }), \": \", _jsx(_components.em, {\n          children: \"Optional\"\n        }), \". Any prerequisites for this module. If you want\\r\\nto reference a module as a prerequisite, list it as a module ID. A link will\\r\\nbe auto-generated.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Frequency\"\n        }), \": \", _jsx(_components.em, {\n          children: \"Optional\"\n        }), \". Takes a number 0-4 inclusive, where 0 = never shown\\r\\nup before and 4 = shows up ~once a contest. Leave this field out if you don't\\r\\nwant to show the frequency.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Redirects\"\n        }), \": \", _jsx(_components.em, {\n          children: \"Optional\"\n        }), \". Takes a list of URLs that will redirect to the\\r\\ncurrent module. Add a redirect whenever you change the module ID or move the\\r\\nmodule to a different division.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"example-frontmatter\",\n      children: [_jsx(_components.a, {\n        href: \"#example-frontmatter\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example Frontmatter\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"---\\r\\nid: getting-started\\r\\ntitle: Getting Started\\r\\ndescription: Welcome to the guide! We'll introduce what programming competitions are and how this guide is organized.\\r\\nauthor: Nathan Wang\\r\\norder: 1\\r\\nprerequisites:\\r\\n - Dummy prerequisite\\r\\n - running-cpp\\r\\nredirects:\\r\\n  - /silver/bipartite\\r\\n---\\r\\n\\r\\n# Getting Started\\r\\n...\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"module-ordering\",\n      children: [_jsx(_components.a, {\n        href: \"#module-ordering\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Module Ordering\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Located at \", _jsx(_components.code, {\n        children: \"content/ordering.ts\"\n      }), \", this file stores the ordering of the modules.\\r\\nThe format should be self-explanatory (it matches based on the ID).\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"linking-to-modules\",\n      children: [_jsx(_components.a, {\n        href: \"#linking-to-modules\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Linking to Modules\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Linking to another module within the guide looks like this:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"[insert text here](/general/practicing)\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/general/practicing\",\n        children: \"insert text here\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Don't use relative links like \", _jsx(_components.code, {\n        children: \"practicing\"\n      }), \", as that will break our\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/Visual-Computing-1/visual-site/blob/master/docs/Front%20End%20Documentation.md\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"link checker\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"table-of-contents\",\n      children: [_jsx(_components.a, {\n        href: \"#table-of-contents\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Table of Contents\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A table of contents will be auto-generated based off of the headings in the\\r\\nMarkdown. Keep this in mind when formatting your module.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"mdx-and-custom-components\",\n      children: [_jsx(_components.a, {\n        href: \"#mdx-and-custom-components\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"MDX and Custom Components\"]\n    }), \"\\n\", _jsxs(Optional, {\n      title: \"XDM and MDX\",\n      children: [_jsxs(_components.p, {\n        children: [\"We use the \", _jsx(_components.a, {\n          href: \"https://github.com/wooorm/xdm\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"XDM compiler\"\n        }), \", which has a few differences from MDX v1:\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Markdown interleaved in JSX is fully supported; ie. this works as expected:\\r\\n\", _jsx(_components.code, {\n            children: \"<Info>some **markdown**</Info>\"\n          })]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"As an extension of (1), indentation is fully supported. You can indent the\\r\\nmarkdown nested in JSX tags. This also means that indenting text with four\\r\\nspaces doesn't make it a code block; explicitly wrap the code block with three\\r\\nbackticks instead.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"<\"\n          }), \" and \", _jsx(_components.code, {\n            children: \">\"\n          }), \" need to be escaped with backslashes; ie. \", _jsx(_components.code, {\n            children: \"\\\\<\"\n          })]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Note that JSX comments (\", _jsx(_components.code, {\n          children: \"{/* ... */}\"\n        }), \") don't work well with Prettier, so use\\r\\n\", _jsx(_components.a, {\n          href: \"https://www.w3schools.com/html/html_comments.asp\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"HTML comments\"\n        }), \" instead.\\r\\nInternally we map HTML comments to JSX comments before passing the markdown to\\r\\nXDM. Don't worry if you don't understand all of this yet.\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some components are globally available in every module (without having to be\\r\\nimported):\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Spoiler>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Info>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Warning>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Optional>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Problems>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<FocusProblem>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Resources>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Resource>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<TextTooltip>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<LanguageSection>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<CPPSection>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<JavaSection>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<PySection>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<IncompleteSection>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Asterisk>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<Quiz>\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These are all documented below.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"spoilers\",\n      children: [_jsx(_components.a, {\n        href: \"#spoilers\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Spoilers\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Spoilers are collapsible elements that only show themselves when the user clicks\\r\\non it. It's useful when writing solutions to problems.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Spoiler title=\\\"Show Solution\\\">\\r\\n- Insert solution here\\r\\n</Spoiler>\\n\"\n      })\n    }), \"\\n\", _jsx(Spoiler, {\n      title: \"Show Solution\",\n      children: _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Insert solution here\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"info-block\",\n      children: [_jsx(_components.a, {\n        href: \"#info-block\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Info Block\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Info title=\\\"Insert Title Here\\\">\\r\\n**Markdown is Supported!!**\\r\\n</Info>\\n\"\n      })\n    }), \"\\n\", _jsx(Info, {\n      title: \"Insert Title Here\",\n      children: _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Markdown is Supported!!\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"warning-block\",\n      children: [_jsx(_components.a, {\n        href: \"#warning-block\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Warning Block\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Warning title=\\\"Insert Title Here\\\">\\r\\nFun fact: the title attribute is optional.\\r\\n</Warning>\\n\"\n      })\n    }), \"\\n\", _jsx(Warning, {\n      title: \"Insert Title Here\",\n      children: _jsx(_components.p, {\n        children: \"Fun fact: the title attribute is optional.\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"optional-content\",\n      children: [_jsx(_components.a, {\n        href: \"#optional-content\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Optional Content\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Optional title=\\\"Insert Title Here\\\">\\r\\nFun fact: the title attribute is optional.\\r\\n</Optional>\\n\"\n      })\n    }), \"\\n\", _jsx(Optional, {\n      title: \"Insert Title Here\",\n      children: _jsx(_components.p, {\n        children: \"Fun fact: the title attribute is optional.\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"problem-lists\",\n      children: [_jsx(_components.a, {\n        href: \"#problem-lists\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problem Lists\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each module has two corresponding files, a \", _jsx(_components.code, {\n        children: \".mdx\"\n      }), \" file and a \", _jsx(_components.code, {\n        children: \".problems.json\"\n      }), \"\\r\\nfile. The \", _jsx(_components.code, {\n        children: \".problems.json\"\n      }), \" file stores the focus problems and problem lists used\\r\\nin that module; it is also indexed by Algolia for problem search.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \".problems.json\"\n      }), \" file holds an object, where keys are problem list names (or\\r\\nfocus problem names) and values are arrays of \", _jsx(_components.code, {\n        children: \"ProblemMetadata\"\n      }), \" objects. For\\r\\nfocus problems, the array should have length exactly one. Additionally, the\\r\\n\", _jsx(_components.code, {\n        children: \".problems.json\"\n      }), \" file should have a \", _jsx(_components.code, {\n        children: \"MODULE_ID\"\n      }), \" key with value equal to a string\\r\\nthat represents the module ID.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more information on problem definitions, refer to \", _jsx(_components.code, {\n        children: \"src/models/problem.ts\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example usage:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Problems problems=\\\"problems\\\" />\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"[module].problems.json\"\n      }), \" should have a key of \", _jsx(_components.code, {\n        children: \"problems\"\n      }), \" that maps to an array\\r\\nof \", _jsx(_components.code, {\n        children: \"ProblemMetadata\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There is a distinction between \", _jsx(_components.code, {\n        children: \"ProblemInfo\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"ProblemMetadata\"\n      }), \".\\r\\n\", _jsx(_components.code, {\n        children: \"ProblemMetadata\"\n      }), \" is what is stored in \", _jsx(_components.code, {\n        children: \"[module].problems.json\"\n      }), \". Gatsby takes\\r\\n\", _jsx(_components.code, {\n        children: \"ProblemMetadata\"\n      }), \" and converts it into \", _jsx(_components.code, {\n        children: \"ProblemInfo\"\n      }), \" at build time; React\\r\\ncomponents use \", _jsx(_components.code, {\n        children: \"ProblemInfo\"\n      }), \" when interacting with problem information. The\\r\\ndocumentation below is for \", _jsx(_components.code, {\n        children: \"ProblemMetadata\"\n      }), \", which is what content authors will\\r\\nbe writing.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ProblemMetadata\"\n      }), \" fields:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"uniqueId\"\n      }), \" -- The uniqueId of the problem. Problem progress is linked to this,\\r\\nso don't change this (otherwise problem progress will be lost). By convention,\\r\\nit's \", _jsx(_components.code, {\n        children: \"[source]-[SlugifiedProblemNameCamelCased]\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"If the problem name is only one word, the word is lower cased.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If the problem is USACO or CSES, the unique ID is instead\\r\\n\", _jsx(_components.code, {\n          children: \"usaco-[USACO URL Number]\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"cses-[CSES number]\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If the problem is Codeforces, the unique ID is\\r\\n\", _jsx(_components.code, {\n          children: \"cf-[contestNumber][problemLetter]\"\n        }), \". If it's CF Gym, it's\\r\\n\", _jsx(_components.code, {\n          children: \"cfgym-[gymNumber][problemLetter]\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If the problem is an OI with a year, the unique ID is\\r\\n\", _jsx(_components.code, {\n          children: \"[oiName]-[twodigityear]-[slugifiedName]\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some example unique ID's:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"cses-2177\\r\\npoi-08-blockade\\r\\napio-18-duathlon\\r\\ndmoj-investment\\r\\ninfoarena-xortransform\\r\\nusaco-949\\r\\ncses-1691\\r\\nkattis-chineseremainder\\r\\ncfgym-102538F\\r\\ncf-1209H\\r\\nspoj-LexicographicalStringSearch\\r\\nys-AssociativeArray\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Problems with the same unique ID are expected to have identical names, sources,\\r\\nand URL's.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"name\"\n      }), \" -- The name of the problem. Should not include source.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Examples:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"2009 - Beetle\\r\\nGreedy Pie Eaters\\r\\nZuma\\r\\n2014 - The Stables of Genghis Khan\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"source\"\n      }), \" -- The source of the problem. Restricted to: \", _jsxs(_components.em, {\n        children: [\"todo, refer to\\r\\n\", _jsx(_components.code, {\n          children: \"src/models/problem.ts\"\n        }), \" \", _jsx(_components.code, {\n          children: \"contests\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"probSources\"\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"difficulty\"\n      }), \" -- The difficulty of the problem \", _jsx(_components.strong, {\n        children: \"relative to the module it is\\r\\nin\"\n      }), \". Valid options are \", _jsx(_components.code, {\n        children: \"Very Easy\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Easy\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Normal\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Hard\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Very Hard\"\n      }), \",\\r\\n\", _jsx(_components.code, {\n        children: \"Insane\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"isStarred\"\n      }), \" -- Whether this problem should be starred or not.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"tags\"\n      }), \" -- List of tags for this problem.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"solutionMetadata\"\n      }), \" -- Information about the solution.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"export type ProblemMetadata = Omit<ProblemInfo, 'solution'> & {\\r\\n  solutionMetadata:\\r\\n    | {\\r\\n        // auto generate problem solution label based off of the given site\\r\\n        // For sites like CodeForces: \\\"Check contest materials, located to the right of the problem statement.\\\"\\r\\n        kind: 'autogen-label-from-site';\\r\\n        // The site to generate it from. Sometimes this may differ from the source; for example, Codeforces could be the site while Baltic OI could be the source if Codeforces was hosting a Baltic OI problem.\\r\\n        site: string;\\r\\n      }\\r\\n    | {\\r\\n        // internal solution\\r\\n        kind: 'internal';\\r\\n      }\\r\\n    | {\\r\\n        // URL solution\\r\\n        // Use this for links to PDF solutions, etc\\r\\n        kind: 'link';\\r\\n        url: string;\\r\\n      }\\r\\n    | {\\r\\n        // Competitive Programming Handbook\\r\\n        // Ex: 5.3 or something\\r\\n        kind: 'CPH';\\r\\n        section: string;\\r\\n      }\\r\\n    | {\\r\\n        // USACO solution, generates it based off of the USACO problem ID\\r\\n        // ex. 1113 is mapped to sol_prob1_gold_feb21.html\\r\\n        kind: 'USACO';\\r\\n        usacoId: string;\\r\\n      }\\r\\n    | {\\r\\n        // IOI solution, generates it based off of the year\\r\\n        // ex. Maps year = 2001 to https://ioinformatics.org/page/ioi-2001/27\\r\\n        kind: 'IOI';\\r\\n        year: number;\\r\\n      }\\r\\n    | {\\r\\n        // no solution exists\\r\\n        kind: 'none';\\r\\n      }\\r\\n    | {\\r\\n        // for focus problems, when the solution is presented in the module of the problem\\r\\n        kind: 'in-module';\\r\\n        moduleId: string;\\r\\n      }\\r\\n    | {\\r\\n        kind: 'sketch';\\r\\n        sketch: string;\\r\\n      };\\r\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Editorials are also written in MDX. The frontmatter has four fields:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"---\\r\\nid: cses-1621\\r\\nsource: CSES\\r\\ntitle: Distinct Numbers\\r\\nauthor: Nathan Wang\\r\\n---\\r\\n\\r\\n... solution\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The ID of the solution frontmatter must be the same as the unique ID of the\\r\\nproblem. Make sure to also update the \", _jsx(_components.code, {\n        children: \"kind\"\n      }), \" of the \", _jsx(_components.code, {\n        children: \"solutionMetadata\"\n      }), \" to\\r\\n\", _jsx(_components.code, {\n        children: \"'internal'\"\n      }), \" for any associated problems. We assume that if there is an internal\\r\\nsolution, we should use it; therefore, the build will throw an error if there is\\r\\nan internal solution but the \", _jsx(_components.code, {\n        children: \"solutionMetadata\"\n      }), \"'s \", _jsx(_components.code, {\n        children: \"kind\"\n      }), \" isn't set to\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"'internal'\"\n      }), \". The \", _jsx(_components.a, {\n        href: \"/general/adding-solution\",\n        children: \"Adding Solutions module\"\n      }), \" describes\\r\\nhow to add a new solution.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"focus-problem\",\n      children: [_jsx(_components.a, {\n        href: \"#focus-problem\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Focus Problem\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Displays a singular problem as a \\\"focus problem.\\\"\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<FocusProblem problem=\\\"genPermutations\\\" />\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"[module].problems.json\"\n      }), \" should have a key of \", _jsx(_components.code, {\n        children: \"genPermutations\"\n      }), \" that maps to an\\r\\n\", _jsx(_components.strong, {\n        children: \"array\"\n      }), \" of length 1.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"resource-lists\",\n      children: [_jsx(_components.a, {\n        href: \"#resource-lists\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resource Lists\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Resources>\\r\\n  <Resource\\r\\n    source=\\\"Errichto\\\"\\r\\n    title=\\\"Video - How to test your solution\\\"\\r\\n    url=\\\"https://www.youtube.com/watch?v=JXTVOyQpSGM\\\"\\r\\n    starred\\r\\n  >\\r\\n    using a script to stress test\\r\\n  </Resource>\\r\\n  ...\\r\\n</Resources>\\n\"\n      })\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Errichto\",\n        title: \"Video - How to test your solution\",\n        url: \"https://www.youtube.com/watch?v=JXTVOyQpSGM\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"using a script to stress test\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Special functionality based on source:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"If the source is a book, it'll automatically set the URL to point to the book.\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Supported books:\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsxs(_components.li, {\n                children: [_jsx(_components.code, {\n                  children: \"GCP\"\n                }), \" (Guide to Competitive Programming)\"]\n              }), \"\\n\", _jsxs(_components.li, {\n                children: [_jsx(_components.code, {\n                  children: \"CPH\"\n                }), \" (Competitive Programming Handbook)\"]\n              }), \"\\n\", _jsxs(_components.li, {\n                children: [_jsx(_components.code, {\n                  children: \"PAPS\"\n                }), \" (Principles of Algorithmic Problem Solving)\"]\n              }), \"\\n\", _jsxs(_components.li, {\n                children: [_jsx(_components.code, {\n                  children: \"CP2\"\n                }), \" (Competitive Programming 2)\"]\n              }), \"\\n\", _jsxs(_components.li, {\n                children: [_jsx(_components.code, {\n                  children: \"IUSACO\"\n                }), \" (Darren's book; will auto-set URL based on user language; uses\\r\\nC++ for Python users)\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Some sources will automatically have tooltips generated for them (listed\\r\\n\", _jsx(_components.a, {\n          href: \"https://github.com/Visual-Computing-1/visual-site/blob/947a3ac220e330fa03aa5b53a201f80b0f4c208f/src/models/problem.ts#L22\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"here\"\n        }), \").\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tooltips\",\n      children: [_jsx(_components.a, {\n        href: \"#tooltips\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Tooltips\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are two main types of tooltips: text tooltips, which display a dotted\\r\\nunderline under the text, and asterisk tooltips, which render an asterisk that\\r\\ncan be hovered over.\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"texttooltip\",\n      children: [_jsx(_components.a, {\n        href: \"#texttooltip\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), _jsx(_components.code, {\n        children: \"<TextTooltip>\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<TextTooltip content=\\\"Popup text goes here\\\">short text goes here</TextTooltip>\\n\"\n      })\n    }), \"\\n\", _jsx(TextTooltip, {\n      content: \"Popup text goes here\",\n      children: \"short text goes here\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"asterisk\",\n      children: [_jsx(_components.a, {\n        href: \"#asterisk\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), _jsx(_components.code, {\n        children: \"<Asterisk>\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Asterisk>Popup text goes here</Asterisk>\\n\"\n      })\n    }), \"\\n\", _jsx(Asterisk, {\n      children: \"Popup text goes here\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"incomplete-section\",\n      children: [_jsx(_components.a, {\n        href: \"#incomplete-section\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Incomplete Section\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<IncompleteSection>\\r\\n\\r\\n- this list is optional and can be used to specify what is missing\\r\\n- missing 32-bit integer explanation\\r\\n\\r\\n</IncompleteSection>\\n\"\n      })\n    }), \"\\n\", _jsx(IncompleteSection, {\n      children: _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"this list is optional and can be used to specify what is missing\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"missing 32-bit integer explanation\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"code-blocks-and-code-snippets\",\n      children: [_jsx(_components.a, {\n        href: \"#code-blocks-and-code-snippets\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Code Blocks and Code Snippets\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Code blocks are separated by three backticks, just like in normal markdown.\\r\\nAdditionally, we have support for collapsible code snippets. An example for how\\r\\nto use them can be found below:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"With title\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Before\\r\\n//BeginCodeSnip{Optional Code Snippet Title}\\r\\nCode snippet goes here\\r\\nYou can indent the entire BeginCodeSnip block (including the BeginCodeSnip line) and it will function as expected\\r\\n//EndCodeSnip\\r\\nAfter\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"Before\\r\\n//BeginCodeSnip{Optional Code Snippet Title}\\r\\nCode snippet goes here\\r\\nYou can indent the entire BeginCodeSnip block (including the BeginCodeSnip line) and it will function as expected\\r\\n//EndCodeSnip\\r\\nAfter\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Without title:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"//BeginCodeSnip{}\\r\\nCode snippet goes here\\r\\n//EndCodeSnip\\r\\n\\r\\nOther code goes here\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"//BeginCodeSnip{}\\r\\nMy snippet code goes here\\r\\n//EndCodeSnip\\r\\n\\r\\nMy non-snippet code goes here\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some common snippets have shorthand notations, as defined in\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/Visual-Computing-1/visual-site/blob/master/src/mdx-plugins/rehype-snippets.js\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: _jsx(_components.code, {\n          children: \"src/mdx-plugins/rehype-snippets.js\"\n        })\n      }), \".\\r\\nThey can be accessed using \", _jsx(_components.code, {\n        children: \"CodeSnip{Snip ID}\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"kattio\",\n      children: [_jsx(_components.a, {\n        href: \"#kattio\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Kattio\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"CodeSnip{Kattio}\"\n      }), \" gets replaced with an indented version (based off of\\r\\nindentation of \", _jsx(_components.code, {\n        children: \"CodeSnip\"\n      }), \"):\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-java\",\n        children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class myClass {\\r\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n\\tpublic static void main ...\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"c-long-template\",\n      children: [_jsx(_components.a, {\n        href: \"#c-long-template\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"C++ Long Template\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"CodeSnip{Benq Template}\"\n      }), \" gets replaced with\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/contest/TemplateLong.cpp\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Benq's Long Template\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"//BeginCodeSnip{Benq Template}\\n#include <bits/stdc++.h>\\nusing namespace std;\\n \\nusing ll = long long;\\nusing db = long double; // or double, if TL is tight\\nusing str = string; // yay python!\\n\\nusing pi = pair<int,int>;\\nusing pl = pair<ll,ll>;\\nusing pd = pair<db,db>;\\n\\nusing vi = vector<int>;\\nusing vb = vector<bool>;\\nusing vl = vector<ll>;\\nusing vd = vector<db>; \\nusing vs = vector<str>;\\nusing vpi = vector<pi>;\\nusing vpl = vector<pl>; \\nusing vpd = vector<pd>;\\n\\n#define tcT template<class T\\n#define tcTU tcT, class U\\n// ^ lol this makes everything look weird but I'll try it\\ntcT> using V = vector<T>; \\ntcT, size_t SZ> using AR = array<T,SZ>; \\ntcT> using PR = pair<T,T>;\\n\\n// pairs\\n#define mp make_pair\\n#define f first\\n#define s second\\n\\n// vectors\\n// oops size(x), rbegin(x), rend(x) need C++17\\n#define sz(x) int((x).size())\\n#define bg(x) begin(x)\\n#define all(x) bg(x), end(x)\\n#define rall(x) x.rbegin(), x.rend() \\n#define sor(x) sort(all(x)) \\n#define rsz resize\\n#define ins insert \\n#define ft front()\\n#define bk back()\\n#define pb push_back\\n#define eb emplace_back \\n#define pf push_front\\n#define rtn return\\n\\n#define lb lower_bound\\n#define ub upper_bound \\ntcT> int lwb(V<T>& a, const T& b) { return int(lb(all(a),b)-bg(a)); }\\n\\n// loops\\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\\n#define F0R(i,a) FOR(i,0,a)\\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\\n#define R0F(i,a) ROF(i,0,a)\\n#define rep(a) F0R(_,a)\\n#define each(a,x) for (auto& a: x)\\n\\nconst int MOD = 1e9+7; // 998244353;\\nconst int MX = 2e5+5;\\nconst ll INF = 1e18; // not too close to LLONG_MAX\\nconst db PI = acos((db)-1);\\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); \\ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\\n\\n// bitwise ops\\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\\nconstexpr int bits(int x) { // assert(x >= 0); // make C++11 compatible until USACO updates ...\\n\\treturn x == 0 ? 0 : 31-__builtin_clz(x); } // floor(log2(x)) \\nconstexpr int p2(int x) { return 1<<x; }\\nconstexpr int msk2(int x) { return p2(x)-1; }\\n\\nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\\n\\ntcT> bool ckmin(T& a, const T& b) {\\n\\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\\ntcT> bool ckmax(T& a, const T& b) {\\n\\treturn a < b ? a = b, 1 : 0; }\\n\\ntcTU> T fstTrue(T lo, T hi, U f) {\\n\\thi ++; assert(lo <= hi); // assuming f is increasing\\n\\twhile (lo < hi) { // find first index such that f is true \\n\\t\\tT mid = lo+(hi-lo)/2;\\n\\t\\tf(mid) ? hi = mid : lo = mid+1; \\n\\t} \\n\\treturn lo;\\n}\\ntcTU> T lstTrue(T lo, T hi, U f) {\\n\\tlo --; assert(lo <= hi); // assuming f is decreasing\\n\\twhile (lo < hi) { // find first index such that f is true \\n\\t\\tT mid = lo+(hi-lo+1)/2;\\n\\t\\tf(mid) ? lo = mid : hi = mid-1;\\n\\t} \\n\\treturn lo;\\n}\\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\\n\\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\\ntcTU> void erase(T& t, const U& u) { // don't erase\\n\\tauto it = t.find(u); assert(it != end(t));\\n\\tt.erase(it); } // element that doesn't exist from (multi)set\\n\\n#define tcTUU tcT, class ...U\\n\\ninline namespace Helpers {\\n\\t//////////// is_iterable\\n\\t// https://stackoverflow.com/questions/13830158/check-if-a-variable-type-is-iterable\\n\\t// this gets used only when we can call begin() and end() on that type\\n\\ttcT, class = void> struct is_iterable : false_type {};\\n\\ttcT> struct is_iterable<T, void_t<decltype(begin(declval<T>())),\\n\\t                                  decltype(end(declval<T>()))\\n\\t                                 >\\n\\t                       > : true_type {};\\n\\ttcT> constexpr bool is_iterable_v = is_iterable<T>::value;\\n\\n\\t//////////// is_readable\\n\\ttcT, class = void> struct is_readable : false_type {};\\n\\ttcT> struct is_readable<T,\\n\\t        typename std::enable_if_t<\\n\\t            is_same_v<decltype(cin >> declval<T&>()), istream&>\\n\\t        >\\n\\t    > : true_type {};\\n\\ttcT> constexpr bool is_readable_v = is_readable<T>::value;\\n\\n\\t//////////// is_printable\\n\\t// // https://nafe.es/posts/2020-02-29-is-printable/\\n\\ttcT, class = void> struct is_printable : false_type {};\\n\\ttcT> struct is_printable<T,\\n\\t        typename std::enable_if_t<\\n\\t            is_same_v<decltype(cout << declval<T>()), ostream&>\\n\\t        >\\n\\t    > : true_type {};\\n\\ttcT> constexpr bool is_printable_v = is_printable<T>::value;\\n}\\n\\ninline namespace Input {\\n\\ttcT> constexpr bool needs_input_v = !is_readable_v<T> && is_iterable_v<T>;\\n\\ttcTUU> void re(T& t, U&... u);\\n\\ttcTU> void re(pair<T,U>& p); // pairs\\n\\n\\t// re: read\\n\\ttcT> typename enable_if<is_readable_v<T>,void>::type re(T& x) { cin >> x; } // default\\n\\ttcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; } // complex\\n\\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i); // ex. vectors, arrays\\n\\ttcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\\n\\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i) {\\n\\t\\teach(x,i) re(x); }\\n\\ttcTUU> void re(T& t, U&... u) { re(t); re(u...); } // read multiple\\n\\n\\t// rv: resize and read vectors\\n\\tvoid rv(size_t) {}\\n\\ttcTUU> void rv(size_t N, V<T>& t, U&... u);\\n\\ttemplate<class...U> void rv(size_t, size_t N2, U&... u);\\n\\ttcTUU> void rv(size_t N, V<T>& t, U&... u) {\\n\\t\\tt.rsz(N); re(t);\\n\\t\\trv(N,u...); }\\n\\ttemplate<class...U> void rv(size_t, size_t N2, U&... u) {\\n\\t\\trv(N2,u...); }\\n\\n\\t// dumb shortcuts to read in ints\\n\\tvoid decrement() {} // subtract one from each\\n\\ttcTUU> void decrement(T& t, U&... u) { --t; decrement(u...); }\\n\\t#define ints(...) int __VA_ARGS__; re(__VA_ARGS__);\\n\\t#define int1(...) ints(__VA_ARGS__); decrement(__VA_ARGS__);\\n}\\n\\ninline namespace ToString {\\n\\ttcT> constexpr bool needs_output_v = !is_printable_v<T> && is_iterable_v<T>;\\n\\n\\t// ts: string representation to print\\n\\ttcT> typename enable_if<is_printable_v<T>,str>::type ts(T v) {\\n\\t\\tstringstream ss; ss << fixed << setprecision(15) << v;\\n\\t\\treturn ss.str(); } // default\\n\\ttcT> str bit_vec(T t) { // bit vector to string\\n\\t\\tstr res = \\\"{\\\"; F0R(i,sz(t)) res += ts(t[i]);\\n\\t\\tres += \\\"}\\\"; return res; }\\n\\tstr ts(V<bool> v) { return bit_vec(v); }\\n\\ttemplate<size_t SZ> str ts(bitset<SZ> b) { return bit_vec(b); } // bit vector\\n\\ttcTU> str ts(pair<T,U> p); // pairs\\n\\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v); // vectors, arrays\\n\\ttcTU> str ts(pair<T,U> p) { return \\\"(\\\"+ts(p.f)+\\\", \\\"+ts(p.s)+\\\")\\\"; }\\n\\ttcT> typename enable_if<is_iterable_v<T>,str>::type ts_sep(T v, str sep) {\\n\\t\\t// convert container to string w/ separator sep\\n\\t\\tbool fst = 1; str res = \\\"\\\";\\n\\t\\tfor (const auto& x: v) {\\n\\t\\t\\tif (!fst) res += sep;\\n\\t\\t\\tfst = 0; res += ts(x);\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n\\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v) {\\n\\t\\treturn \\\"{\\\"+ts_sep(v,\\\", \\\")+\\\"}\\\"; }\\n\\n\\t// for nested DS\\n\\ttemplate<int, class T> typename enable_if<!needs_output_v<T>,vs>::type \\n\\t  ts_lev(const T& v) { return {ts(v)}; }\\n\\ttemplate<int lev, class T> typename enable_if<needs_output_v<T>,vs>::type \\n\\t  ts_lev(const T& v) {\\n\\t\\tif (lev == 0 || !sz(v)) return {ts(v)};\\n\\t\\tvs res;\\n\\t\\tfor (const auto& t: v) {\\n\\t\\t\\tif (sz(res)) res.bk += \\\",\\\";\\n\\t\\t\\tvs tmp = ts_lev<lev-1>(t);\\n\\t\\t\\tres.ins(end(res),all(tmp));\\n\\t\\t}\\n\\t\\tF0R(i,sz(res)) {\\n\\t\\t\\tstr bef = \\\" \\\"; if (i == 0) bef = \\\"{\\\";\\n\\t\\t\\tres[i] = bef+res[i];\\n\\t\\t}\\n\\t\\tres.bk += \\\"}\\\";\\n\\t\\treturn res;\\n\\t}\\n}\\n\\ninline namespace Output {\\n\\ttemplate<class T> void pr_sep(ostream& os, str, const T& t) { os << ts(t); }\\n\\ttemplate<class T, class... U> void pr_sep(ostream& os, str sep, const T& t, const U&... u) {\\n\\t\\tpr_sep(os,sep,t); os << sep; pr_sep(os,sep,u...); }\\n\\t// print w/ no spaces\\n\\ttemplate<class ...T> void pr(const T&... t) { pr_sep(cout,\\\"\\\",t...); } \\n\\t// print w/ spaces, end with newline\\n\\tvoid ps() { cout << \\\"\\\\n\\\"; }\\n\\ttemplate<class ...T> void ps(const T&... t) { pr_sep(cout,\\\" \\\",t...); ps(); } \\n\\t// debug to cerr\\n\\ttemplate<class ...T> void dbg_out(const T&... t) {\\n\\t\\tpr_sep(cerr,\\\" | \\\",t...); cerr << endl; }\\n\\tvoid loc_info(int line, str names) {\\n\\t\\tcerr << \\\"Line(\\\" << line << \\\") -> [\\\" << names << \\\"]: \\\"; }\\n\\ttemplate<int lev, class T> void dbgl_out(const T& t) {\\n\\t\\tcerr << \\\"\\\\n\\\\n\\\" << ts_sep(ts_lev<lev>(t),\\\"\\\\n\\\") << \\\"\\\\n\\\" << endl; }\\n\\t#ifdef LOCAL\\n\\t\\t#define dbg(...) loc_info(__LINE__,#__VA_ARGS__), dbg_out(__VA_ARGS__)\\n\\t\\t#define dbgl(lev,x) loc_info(__LINE__,#x), dbgl_out<lev>(x)\\n\\t#else // don't actually submit with this\\n\\t\\t#define dbg(...) 0\\n\\t\\t#define dbgl(lev,x) 0\\n\\t#endif\\n}\\n\\ninline namespace FileIO {\\n\\tvoid setIn(str s)  { freopen(s.c_str(), \\\"r\\\", stdin); }\\n\\tvoid setOut(str s) { freopen(s.c_str(), \\\"w\\\", stdout); }\\n\\tvoid setIO(str s = \\\"\\\") {\\n\\t\\tcin.tie(0)->sync_with_stdio(0); // unsync C / C++ I/O streams\\n\\t\\t// cin.exceptions(cin.failbit);\\n\\t\\t// throws exception when do smth illegal\\n\\t\\t// ex. try to read letter into int\\n\\t\\tif (sz(s)) setIn(s+\\\".in\\\"), setOut(s+\\\".out\\\"); // for old USACO\\n\\t}\\n}\\n//EndCodeSnip\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"c-short-template\",\n      children: [_jsx(_components.a, {\n        href: \"#c-short-template\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"C++ Short Template\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"CodeSnip{CPP Short Template}\"\n      }), \" is replaced with\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"language-specific-content\",\n      children: [_jsx(_components.a, {\n        href: \"#language-specific-content\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Language-Specific Content\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<LanguageSection>\\r\\n<CPPSection>\\r\\n#### A heading that only appears in C++\\r\\n\\r\\n```cpp\\r\\nC++ code here\\r\\n```\\r\\n\\r\\n</CPPSection>\\r\\n<JavaSection>\\r\\n#### A heading that only appears in Java\\r\\n\\r\\n```java\\r\\nJava code here\\r\\n```\\r\\n\\r\\n</JavaSection>\\r\\n<PySection />\\r\\n</LanguageSection>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the example above, nothing will be rendered for Python.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h4, {\n          id: \"a-heading-that-only-appears-in-c\",\n          children: [_jsx(_components.a, {\n            href: \"#a-heading-that-only-appears-in-c\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"A heading that only appears in C++\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"C++ code here\\n\"\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h4, {\n          id: \"a-heading-that-only-appears-in-java\",\n          children: [_jsx(_components.a, {\n            href: \"#a-heading-that-only-appears-in-java\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"A heading that only appears in Java\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"Java code here\\n\"\n          })\n        })]\n      }), _jsx(PySection, {})]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"quizzes\",\n      children: [_jsx(_components.a, {\n        href: \"#quizzes\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Quizzes\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Quiz>\\r\\n\\t<Quiz.Question>\\r\\n\\t\\tBinary search\\r\\n\\r\\n\\t\\t<Quiz.Answer>\\r\\n\\t\\t\\t$O(\\\\log n)$\\r\\n\\r\\n\\t\\t\\t<Quiz.Explanation>\\r\\n\\t\\t\\t\\tAlmost. Prefer $\\\\mathcal{O}$ over $O$.\\r\\n\\t\\t\\t</Quiz.Explanation>\\r\\n\\t\\t</Quiz.Answer>\\r\\n\\r\\n\\t\\t<Quiz.Answer correct>\\r\\n\\t\\t\\t$\\\\mathcal{O}(\\\\log n)$\\r\\n\\r\\n\\t\\t\\t<Quiz.Explanation>\\r\\n\\t\\t\\t\\tThat's correct!\\r\\n\\t\\t\\t</Quiz.Explanation>\\r\\n\\t\\t</Quiz.Answer>\\r\\n\\t\\t<Quiz.Answer>\\r\\n\\t\\t\\tO(log n)\\r\\n\\r\\n\\t\\t\\t<Quiz.Explanation>\\r\\n\\t\\t\\t\\tThat's not right. Latex is important...\\r\\n\\t\\t\\t</Quiz.Explanation>\\r\\n\\t\\t</Quiz.Answer>\\r\\n\\t</Quiz.Question>\\r\\n\\t<Quiz.Question>\\r\\n\\t\\t```cpp\\r\\n\\t\\tfor (int i = 0; i < 100; i++) {\\r\\n\\t\\t\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t\\t\\t// constant time code here\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t```\\r\\n\\r\\n\\t\\t<Quiz.Answer>\\r\\n\\t\\t\\t$O(100m)$\\r\\n\\r\\n\\t\\t\\t<Quiz.Explanation>\\r\\n\\t\\t\\t\\tThat's not correct. Constant factors are ignored.\\r\\n\\t\\t\\t</Quiz.Explanation>\\r\\n\\t\\t</Quiz.Answer>\\r\\n\\t\\t<Quiz.Answer correct>\\r\\n\\t\\t\\t$O(m)$\\r\\n\\r\\n\\t\\t\\t<Quiz.Explanation>\\r\\n\\t\\t\\t\\tThat's correct!\\r\\n\\t\\t\\t</Quiz.Explanation>\\r\\n\\t\\t</Quiz.Answer>\\r\\n\\t</Quiz.Question>\\r\\n</Quiz>\\n\"\n      })\n    }), \"\\n\", _jsxs(Quiz, {\n      children: [_jsxs(Quiz.Question, {\n        children: [_jsx(_components.p, {\n          children: \"Binary search\"\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"O(\\\\log n)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            })\n          }), _jsx(Quiz.Explanation, {\n            children: _jsxs(_components.p, {\n              children: [\"Almost. Prefer \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"\\\\mathcal{O}\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span></span></span></span>\"\n              }), \" over \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"O\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\\\"application/x-tex\\\">O</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">O</span></span></span></span>\"\n              }), \".\"]\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\mathcal{O}(\\\\log n)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            })\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"That's correct!\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: \"O(log n)\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"That's not right. Latex is important...\"\n            })\n          })]\n        })]\n      }), _jsxs(Quiz.Question, {\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"for (int i = 0; i < 100; i++) {\\r\\n\\tfor (int j = 0; j < m; j++) {\\r\\n\\t\\t// constant time code here\\r\\n\\t}\\r\\n}\\n\"\n          })\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"O(100m)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>O</mi><mo stretchy=\\\"false\\\">(</mo><mn>100</mn><mi>m</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(100m)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">100</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            })\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"That's not correct. Constant factors are ignored.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"O(m)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>O</mi><mo stretchy=\\\"false\\\">(</mo><mi>m</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(m)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            })\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"That's correct!\"\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"Working With MDX","author":"Nathan Wang","contributors":null,"id":"working-mdx","prerequisites":["modules"],"description":"Explanation of the frontmatter that precedes every module and solution, a list of custom components that may be used within modules or solutions.","frequency":null},"parent":{"name":"Working_MDX","relativePath":"1_General/Working_MDX.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"Frontmatter","slug":"frontmatter"},{"depth":3,"value":"Example Frontmatter","slug":"example-frontmatter"},{"depth":3,"value":"Module Ordering","slug":"module-ordering"},{"depth":2,"value":"Linking to Modules","slug":"linking-to-modules"},{"depth":2,"value":"Table of Contents","slug":"table-of-contents"},{"depth":2,"value":"MDX and Custom Components","slug":"mdx-and-custom-components"},{"depth":3,"value":"Spoilers","slug":"spoilers"},{"depth":3,"value":"Info Block","slug":"info-block"},{"depth":3,"value":"Warning Block","slug":"warning-block"},{"depth":3,"value":"Optional Content","slug":"optional-content"},{"depth":3,"value":"Problem Lists","slug":"problem-lists"},{"depth":3,"value":"Focus Problem","slug":"focus-problem"},{"depth":3,"value":"Resource Lists","slug":"resource-lists"},{"depth":3,"value":"Tooltips","slug":"tooltips"},{"depth":4,"value":"&lt;TextTooltip&gt;","slug":"texttooltip"},{"depth":4,"value":"&lt;Asterisk&gt;","slug":"asterisk"},{"depth":3,"value":"Incomplete Section","slug":"incomplete-section"},{"depth":3,"value":"Code Blocks and Code Snippets","slug":"code-blocks-and-code-snippets"},{"depth":4,"value":"Kattio","slug":"kattio"},{"depth":4,"value":"C++ Long Template","slug":"c-long-template"},{"depth":4,"value":"C++ Short Template","slug":"c-short-template"},{"depth":3,"value":"Language-Specific Content","slug":"language-specific-content"},{"depth":4,"value":"A heading that only appears in C++","slug":"a-heading-that-only-appears-in-c"},{"depth":3,"value":"Quizzes","slug":"quizzes"}],"java":[{"depth":2,"value":"Frontmatter","slug":"frontmatter"},{"depth":3,"value":"Example Frontmatter","slug":"example-frontmatter"},{"depth":3,"value":"Module Ordering","slug":"module-ordering"},{"depth":2,"value":"Linking to Modules","slug":"linking-to-modules"},{"depth":2,"value":"Table of Contents","slug":"table-of-contents"},{"depth":2,"value":"MDX and Custom Components","slug":"mdx-and-custom-components"},{"depth":3,"value":"Spoilers","slug":"spoilers"},{"depth":3,"value":"Info Block","slug":"info-block"},{"depth":3,"value":"Warning Block","slug":"warning-block"},{"depth":3,"value":"Optional Content","slug":"optional-content"},{"depth":3,"value":"Problem Lists","slug":"problem-lists"},{"depth":3,"value":"Focus Problem","slug":"focus-problem"},{"depth":3,"value":"Resource Lists","slug":"resource-lists"},{"depth":3,"value":"Tooltips","slug":"tooltips"},{"depth":4,"value":"&lt;TextTooltip&gt;","slug":"texttooltip"},{"depth":4,"value":"&lt;Asterisk&gt;","slug":"asterisk"},{"depth":3,"value":"Incomplete Section","slug":"incomplete-section"},{"depth":3,"value":"Code Blocks and Code Snippets","slug":"code-blocks-and-code-snippets"},{"depth":4,"value":"Kattio","slug":"kattio"},{"depth":4,"value":"C++ Long Template","slug":"c-long-template"},{"depth":4,"value":"C++ Short Template","slug":"c-short-template"},{"depth":3,"value":"Language-Specific Content","slug":"language-specific-content"},{"depth":4,"value":"A heading that only appears in Java","slug":"a-heading-that-only-appears-in-java"},{"depth":3,"value":"Quizzes","slug":"quizzes"}],"py":[{"depth":2,"value":"Frontmatter","slug":"frontmatter"},{"depth":3,"value":"Example Frontmatter","slug":"example-frontmatter"},{"depth":3,"value":"Module Ordering","slug":"module-ordering"},{"depth":2,"value":"Linking to Modules","slug":"linking-to-modules"},{"depth":2,"value":"Table of Contents","slug":"table-of-contents"},{"depth":2,"value":"MDX and Custom Components","slug":"mdx-and-custom-components"},{"depth":3,"value":"Spoilers","slug":"spoilers"},{"depth":3,"value":"Info Block","slug":"info-block"},{"depth":3,"value":"Warning Block","slug":"warning-block"},{"depth":3,"value":"Optional Content","slug":"optional-content"},{"depth":3,"value":"Problem Lists","slug":"problem-lists"},{"depth":3,"value":"Focus Problem","slug":"focus-problem"},{"depth":3,"value":"Resource Lists","slug":"resource-lists"},{"depth":3,"value":"Tooltips","slug":"tooltips"},{"depth":4,"value":"&lt;TextTooltip&gt;","slug":"texttooltip"},{"depth":4,"value":"&lt;Asterisk&gt;","slug":"asterisk"},{"depth":3,"value":"Incomplete Section","slug":"incomplete-section"},{"depth":3,"value":"Code Blocks and Code Snippets","slug":"code-blocks-and-code-snippets"},{"depth":4,"value":"Kattio","slug":"kattio"},{"depth":4,"value":"C++ Long Template","slug":"c-long-template"},{"depth":4,"value":"C++ Short Template","slug":"c-short-template"},{"depth":3,"value":"Language-Specific Content","slug":"language-specific-content"},{"depth":3,"value":"Quizzes","slug":"quizzes"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"working-mdx"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}