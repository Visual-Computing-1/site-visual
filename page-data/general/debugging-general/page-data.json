{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/debugging-general",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*- Shifting a 32-bit integer by $\\ge 32$ bits*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"debugging-general\", title = \"How To Debug\", author = \"Benjamin Qi\", description = \"General tips for identifying errors within your solution.\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    em: \"em\",\n    blockquote: \"blockquote\",\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\")\n  }, _props.components), {Resources, Resource, HeaderLink, MATHSPAN, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"KACTL\",\n        title: \"Troubleshooting\",\n        url: \"https://github.com/kth-competitive-programming/kactl/blob/master/content/contest/troubleshoot.txt\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"things to try in an ICPC contest\"\n        })\n      }), _jsx(Resource, {\n        source: \"Errichto\",\n        title: \"Asking for help FAQ\",\n        url: \"https://codeforces.com/blog/entry/64993\",\n        starred: true\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This module is based on the resources above. I've included the content that is\\r\\nmost relevant to USACO.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"pre-submit\",\n      children: [_jsx(_components.a, {\n        href: \"#pre-submit\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Pre-Submit\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Your code should be readable (to yourself at the very least).\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Following style tips from the\\r\\n\", _jsx(_components.a, {\n              href: \"/general/adding-solution#code-conventions\",\n              children: \"Adding Solutions\"\n            }), \" module may\\r\\nhelp with this.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"wrong-answer-or-runtime-error\",\n      children: [_jsx(_components.a, {\n        href: \"#wrong-answer-or-runtime-error\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Wrong Answer (or Runtime Error)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Is your output format correct?\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Did you remove debug output before submitting?\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Do you handle all corner cases (such as \", _jsx(MATHSPAN, {\n            className: \"math math-inline\",\n            latex: \"N=1\",\n            children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N=1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n          }), \") / special cases?\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"For problems with multiple independent test cases (such as\\r\\n\", _jsx(_components.a, {\n            href: \"http://www.usaco.org/index.php?page=viewproblem2&cpid=1141\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"this one\"\n          }), \"), are\\r\\nyou clearing all data structures between test cases?\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Keep in mind that your solution might only behave incorrectly when a test\\r\\ncase is followed by a smaller test case.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Have you understood the problem correctly? Read the full problem statement\\r\\nagain.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Read your code again.\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Confusing \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"N\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n            }), \" and \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"M\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n            }), \", \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"i\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\\\"application/x-tex\\\">i</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6595em;\\\"></span><span class=\\\"mord mathnormal\\\">i</span></span></span></span>\"\n            }), \" and \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"j\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\\\"application/x-tex\\\">j</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span>\"\n            }), \", etc.?\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.a, {\n            href: \"https://en.wikipedia.org/wiki/Variable_shadowing#C++\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"Shadowed\"\n          }), \" or unused or\\r\\nuninitialized variables?\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"In C++, compiling with\\r\\n\", _jsx(_components.a, {\n              href: \"/general/debugging-lang#warning-options\",\n              children: \"warning options\"\n            }), \"\\r\\n(\", _jsx(_components.code, {\n              children: \"-Wall -Wshadow\"\n            }), \") should detect these.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Any \", _jsx(_components.em, {\n            children: \"undefined behavior\"\n          }), \"? It can result in different outputs locally vs online\\r\\n(ex. maybe you are passing the sample case locally but not when you submit to\\r\\nthe USACO judge). Try running your code in multiple places (ex.\\r\\n\", _jsx(_components.a, {\n            href: \"https://ide.usaco.guide/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"USACO Guide IDE\"\n          }), \",\\r\\n\", _jsx(_components.a, {\n            href: \"https://codeforces.com/problemset/customtest\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"Codeforces Custom Test\"\n          }), \") and\\r\\nsee if you always get the same result. Common examples of undefined behavior\\r\\ninclude:\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsx(_components.p, {\n              children: \"(C++) Uninitialized variables\"\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsxs(_components.p, {\n              children: [\"(C++) Not returning anything from non-\", _jsx(_components.code, {\n                children: \"void\"\n              }), \" functions\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsx(_components.p, {\n              children: \"(C++) Array out of bounds\"\n            }), \"\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsxs(_components.li, {\n                children: [\"Considering using \", _jsx(_components.code, {\n                  children: \"::at\"\n                }), \" as mentioned\\r\\n\", _jsx(_components.a, {\n                  href: \"/general/debugging-lang/#checking-for-oob\",\n                  children: \"here\"\n                }), \".\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsxs(_components.p, {\n              children: [\"(C++ / Java)\\r\\n\", _jsx(_components.a, {\n                href: \"https://stackoverflow.com/questions/4240748/allowing-signed-integer-overflows-in-c-c\",\n                target: \"_blank\",\n                rel: \"nofollow noopener noreferrer\",\n                children: \"Signed integer overflow\"\n              })]\n            }), \"\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: \"USACO problems usually contain a note of the following form if the output\\r\\nformat requires 64-bit rather than 32-bit integers, but it's easy to miss:\"\n              }), \"\\n\"]\n            }), \"\\n\", _jsxs(_components.blockquote, {\n              children: [\"\\n\", _jsxs(_components.p, {\n                children: [\"Note that the large size of integers involved in this problem may require\\r\\nthe use of 64-bit integer data types (e.g., a \", _jsx(_components.code, {\n                  children: \"long long\"\n                }), \" in C/C++).\\\"\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", \"\\n\", _jsxs(_components.p, {\n          children: [\"In C++, compiling with\\r\\n\", _jsx(_components.a, {\n            href: \"/general/debugging-lang#other-options\",\n            children: \"additional options\"\n          }), \" can help catch\\r\\nthese.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Add \", _jsx(_components.a, {\n            href: \"/general/debugging-lang#assertions--warnings\",\n            children: \"assertions\"\n          }), \" and resubmit.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Floating point numbers\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Any NaNs (ex. taking the square root of a negative number)?\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Try using a type with more precision (ex. \", _jsx(_components.code, {\n              children: \"long double\"\n            }), \" instead of \", _jsx(_components.code, {\n              children: \"double\"\n            }), \"\\r\\nin C++).\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Are you printing the output to the correct amount of precision?\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Are you sure your algorithm works?\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Go through the algorithm for a simple case / write some testcases to run\\r\\nyour algorithm on.\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Write a test case generator and compare the outputs of your solution against\\r\\nthat of a (simpler) slow solution, or a model solution if available.\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsxs(_components.li, {\n                children: [\"See \", _jsx(_components.a, {\n                  href: \"/general/debugging-lang#stress-testing\",\n                  children: \"stress testing\"\n                }), \" for more\\r\\ninformation.\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"runtime-error\",\n      children: [_jsx(_components.a, {\n        href: \"#runtime-error\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Runtime Error\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Any undefined behavior? (see above)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Any assertions that might fail?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Any possible division by 0? (mod 0 for example)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Any possible infinite recursion?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Invalidated pointers or iterators?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Are you using too much memory?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"time-limit-exceeded\",\n      children: [_jsx(_components.a, {\n        href: \"#time-limit-exceeded\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Time Limit Exceeded\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Do you have any possible infinite loops?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"What is the complexity of your algorithm?\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Did you remove debug output before submitting (ex. are you printing a lot of\\r\\ninformation to \", _jsx(_components.code, {\n          children: \"stderr\"\n        }), \")?\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Unnecessary copying of data? C++ - Consider passing variables by reference.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"C++ - Try substituting \", _jsx(_components.code, {\n          children: \"array\"\n        }), \"s in place of \", _jsx(_components.code, {\n          children: \"vector\"\n        }), \"s.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"last-resort\",\n      children: [_jsx(_components.a, {\n        href: \"#last-resort\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Last Resort\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Rewrite your solution from the start.\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Be sure to save your original solution. It's always possible that you might\\r\\nintroduce more bugs.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"before-posting-on-the-usaco-guide-forum\",\n      children: [_jsx(_components.a, {\n        href: \"#before-posting-on-the-usaco-guide-forum\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Before Posting on the \", _jsx(_components.a, {\n        href: \"https://forum.usaco.guide/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"USACO Guide Forum\"\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"If you have found a small test case on which your program fails and you know\\r\\nwhy the expected output is correct, you should be able to figure out why your\\r\\nprogram is incorrect on your own.\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Add print statements to your code and compare their outputs to what you get\\r\\nwhen you simulate your program by hand.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Check for undefined behavior as described above.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you haven't found a small test case on which your solution fails,\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Try downloading the official test data and seeing if your solution fails on\\r\\nany small test cases.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"If that doesn't work, then try generating a small test case on which your\\r\\nsolution fails as described above.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  default: MDXContent\n};\n","frontmatter":{"title":"How To Debug","author":"Benjamin Qi","contributors":null,"id":"debugging-general","prerequisites":null,"description":"General tips for identifying errors within your solution.","frequency":null},"parent":{"name":"Debugging_General","relativePath":"1_General/Debugging_General.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"Pre-Submit","slug":"pre-submit"},{"depth":2,"value":"Wrong Answer (or Runtime Error)","slug":"wrong-answer-or-runtime-error"},{"depth":2,"value":"Runtime Error","slug":"runtime-error"},{"depth":2,"value":"Time Limit Exceeded","slug":"time-limit-exceeded"},{"depth":2,"value":"Last Resort","slug":"last-resort"},{"depth":2,"value":"Before Posting on the USACO Guide Forum","slug":"before-posting-on-the-usaco-guide-forum"}],"java":[{"depth":2,"value":"Pre-Submit","slug":"pre-submit"},{"depth":2,"value":"Wrong Answer (or Runtime Error)","slug":"wrong-answer-or-runtime-error"},{"depth":2,"value":"Runtime Error","slug":"runtime-error"},{"depth":2,"value":"Time Limit Exceeded","slug":"time-limit-exceeded"},{"depth":2,"value":"Last Resort","slug":"last-resort"},{"depth":2,"value":"Before Posting on the USACO Guide Forum","slug":"before-posting-on-the-usaco-guide-forum"}],"py":[{"depth":2,"value":"Pre-Submit","slug":"pre-submit"},{"depth":2,"value":"Wrong Answer (or Runtime Error)","slug":"wrong-answer-or-runtime-error"},{"depth":2,"value":"Runtime Error","slug":"runtime-error"},{"depth":2,"value":"Time Limit Exceeded","slug":"time-limit-exceeded"},{"depth":2,"value":"Last Resort","slug":"last-resort"},{"depth":2,"value":"Before Posting on the USACO Guide Forum","slug":"before-posting-on-the-usaco-guide-forum"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"debugging-general"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}