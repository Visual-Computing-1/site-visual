{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/choosing-lang",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*tl;dr no*/\n/*- **For Bronze, any language will do.** It is possible to receive full credit\nwith C++, Java, and Python in Bronze.\n- **For Silver<Asterisk>However, if Python is the only language you know / you\nreally want to use Python, you can still pass Silver with Python.</Asterisk>,\nGold, and Platinum, Python is not recommended**, because it is a slow language\nand lacks an ordered map.*/\n/*- Java does not support features such as [macros](/general/generic/#macros),\n[type aliases](/general/generic/#type-aliases-with-using), and `auto` that are\npresent in C++ (which some contestants rely on extensively).*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"choosing-lang\", title = \"Choosing a Language\", author = \"Nathan Wang, Benjamin Qi\", description = \"What languages you can use for programming contests.\", prerequisites = [\"intro-cp\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\")\n  }, _props.components), {HeaderLink, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"what-languages-does-the-usaco-support\",\n      children: [_jsx(_components.a, {\n        href: \"#what-languages-does-the-usaco-support\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"What Languages Does The USACO Support?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The most popular languages that USACO supports are\\r\\n\", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/C%2B%2B\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"C++17\"\n      }), \",\\r\\n\", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Java_(programming_language)\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Java\"\n      }), \", and\\r\\n\", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Python_(programming_language)\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Python 3\"\n      }), \". C is\\r\\nalso supported, but it's essentially a strictly inferior version of C++ and\\r\\ndoesn't have the built-in data structures that are often used.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"what-are-the-differences-between-c11-and-c17\",\n      children: [_jsx(_components.a, {\n        href: \"#what-are-the-differences-between-c11-and-c17\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"What Are The Differences Between C++11 and C++17?\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you're just starting out, you probably won't be using any C++17-specific\\r\\nfeatures, so submitting in either C++11 or C++17 should suffice. For information\\r\\nabout the features introduced in C++11, C++14, and C++17, check the links below.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://codeforces.com/blog/entry/10124\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"C++11 for Programming Contests\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://codeforces.com/blog/entry/15643\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"C++ Tricks (C++11 onwards)\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://codeforces.com/blog/entry/16262\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"C++14\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://codeforces.com/blog/entry/57729\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"C++17\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"what-are-the-differences-between-python-2-and-python-3\",\n      children: [_jsx(_components.a, {\n        href: \"#what-are-the-differences-between-python-2-and-python-3\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"What Are The Differences Between Python 2 and Python 3?\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As the link below mentions, there are many differences between Python 2 and 3.\\r\\nPython 3 is newer and an overwhelming majority of USACO contestants use it over\\r\\nPython 2.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.geeksforgeeks.org/important-differences-between-python-2-x-and-python-3-x-with-examples/\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Python 2 vs Python 3\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"what-language-should-i-start-out-with\",\n      children: [_jsx(_components.a, {\n        href: \"#what-language-should-i-start-out-with\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"What Language Should I Start Out With?\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In general, we recommend the following:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"If you already know one or more of these languages, just use the one you are\\r\\nmost comfortable with.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"If you don't know any of these languages, you might as well start with C++, as\\r\\nC++ users generally don't need to worry as much about their solutions being a\\r\\nconstant factor too slow. Furthermore, most modules currently lack Java and\\r\\nPython support.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don't overthink choosing a language -- you can always change languages later!\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"can-i-pass-every-problem-in-every-language\",\n      children: [_jsx(_components.a, {\n        href: \"#can-i-pass-every-problem-in-every-language\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Can I Pass Every Problem in Every Language?\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"C++ is typically faster than Java, which in turn is typically faster than\\r\\nPython. Although both Python and Java receive two times the C++ time limit in\\r\\nUSACO, this is not the case for most other websites (ex. CodeForces, CSES). Even\\r\\nwith the extended time limits, Python and Java sometimes have trouble passing.\"\n    }), \"\\n\", \"\\n\", \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"It is guaranteed to be able to receive full credit on all Bronze contests with\\r\\nPython, C++, and Java.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Python lacks a data structure that keeps its keys in sorted order (the\\r\\nequivalent of \", _jsx(_components.code, {\n          children: \"set\"\n        }), \" in C++), which is required for some Silver problems.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"It is almost always possible to receive full credit on all contests with Java,\\r\\nthough there are exceptions.\"\n      }), \"\\n\"]\n    }), \"\\n\", \"\\n\", _jsxs(_components.h3, {\n      id: \"example---wormhole-sort\",\n      children: [_jsx(_components.a, {\n        href: \"#example---wormhole-sort\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example - \", _jsx(_components.a, {\n        href: \"http://www.usaco.org/index.php?page=viewproblem2&cpid=992\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Wormhole Sort\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Java solution presented in the analysis requires over 3s to run (out of a\\r\\ntime limit of 4s).\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-java\",\n        children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\npublic class wormsort {\\r\\n\\tpublic static void main(String[] args) throws IOException{\\r\\n\\t\\tBufferedReader br = new BufferedReader(new FileReader(\\\"wormsort.in\\\"));\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tint n = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint m = Integer.parseInt(st.nextToken());\\r\\n\\t\\tloc = new int[n];\\r\\n\\t\\tcomponent = new int[n];\\r\\n\\t\\tedges = new LinkedList[n];\\r\\n\\t\\tfor(int i = 0; i < n; i++) edges[i] = new LinkedList<>();\\r\\n\\t\\tlhs = new int[m];\\r\\n\\t\\trhs = new int[m];\\r\\n\\t\\tweight = new int[m];\\r\\n\\t\\tst = new StringTokenizer(br.readLine());\\r\\n\\t\\tfor(int i = 0; i < n; i++) loc[i] = Integer.parseInt(st.nextToken())-1;\\r\\n\\t\\tfor(int i = 0; i < m; i++) {\\r\\n\\t\\t\\tst = new StringTokenizer(br.readLine());\\r\\n\\t\\t\\tlhs[i] = Integer.parseInt(st.nextToken())-1;\\r\\n\\t\\t\\trhs[i] = Integer.parseInt(st.nextToken())-1;\\r\\n\\t\\t\\tweight[i] = Integer.parseInt(st.nextToken());\\r\\n\\t\\t}\\r\\n\\t\\tbr.close();\\r\\n\\t\\tint minW = 0;\\r\\n\\t\\tint maxW = 1000000001;\\r\\n\\t\\twhile(minW != maxW) {\\r\\n\\t\\t\\tint mid = (minW + maxW + 1) / 2;\\r\\n\\t\\t\\tif(valid(mid)) minW = mid;\\r\\n\\t\\t\\telse maxW = mid-1;\\r\\n\\t\\t}\\r\\n\\t\\tif(minW > 1e9) minW = -1;\\r\\n\\t\\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\\\"wormsort.out\\\")));\\r\\n\\t\\tpw.println(minW);\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n\\tstatic int[] loc, lhs, rhs, weight;\\r\\n\\tstatic LinkedList<Integer>[] edges;\\r\\n\\tstatic int[] component;\\r\\n\\tprivate static void dfs(int curr, int label) {\\r\\n\\t\\tif(component[curr] == label) return;\\r\\n\\t\\tcomponent[curr] = label;\\r\\n\\t\\tfor(int child: edges[curr]) dfs(child, label);\\r\\n\\t}\\r\\n\\tprivate static boolean valid(int minW) {\\r\\n\\t\\tArrays.fill(component, -1);\\r\\n\\t\\tfor(int i = 0; i < edges.length; i++) edges[i].clear();\\r\\n\\t\\tfor(int i = 0; i < lhs.length; i++) {\\r\\n\\t\\t\\tif(weight[i] >= minW) {\\r\\n\\t\\t\\t\\tedges[lhs[i]].add(rhs[i]);\\r\\n\\t\\t\\t\\tedges[rhs[i]].add(lhs[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tint numcomps = 0;\\r\\n\\t\\tfor(int i = 0; i < component.length; i++) {\\r\\n\\t\\t\\tif(component[i] < 0) {\\r\\n\\t\\t\\t\\tdfs(i, numcomps++);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tfor(int i = 0; i < loc.length; i++) {\\r\\n\\t\\t\\tif(component[i] != component[loc[i]]) return false;\\r\\n\\t\\t}\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A comparable C++ solution runs in less than 800ms:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include<bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint n,m;\\r\\nvector<int> loc, lhs, rhs, weight;\\r\\nvector<vector<int>> edges;\\r\\nvector<int> component;\\r\\n\\r\\nvoid dfs(int curr, int label) {\\r\\n\\tif(component[curr] == label) return;\\r\\n\\tcomponent[curr] = label;\\r\\n\\tfor(int child: edges[curr]) dfs(child, label);\\r\\n}\\r\\n\\r\\nbool valid(int minW) {\\r\\n\\tcomponent.assign(n,-1);\\r\\n\\tfor(int i = 0; i < edges.size(); i++) edges[i].clear();\\r\\n\\tfor(int i = 0; i < lhs.size(); i++) {\\r\\n\\t\\tif(weight[i] >= minW) {\\r\\n\\t\\t\\tedges[lhs[i]].push_back(rhs[i]);\\r\\n\\t\\t\\tedges[rhs[i]].push_back(lhs[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tint numcomps = 0;\\r\\n\\tfor(int i = 0; i < component.size(); i++) {\\r\\n\\t\\tif(component[i] < 0) {\\r\\n\\t\\t\\tdfs(i, numcomps++);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor(int i = 0; i < loc.size(); i++) {\\r\\n\\t\\tif(component[i] != component[loc[i]]) return false;\\r\\n\\t}\\r\\n\\treturn true;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"wormsort.in\\\",\\\"r\\\",stdin);\\r\\n\\tcin >> n >> m;\\r\\n\\tloc = vector<int>(n);\\r\\n\\tcomponent = vector<int>(n);\\r\\n\\tedges = vector<vector<int>>(n);\\r\\n\\tlhs = vector<int>(m);\\r\\n\\trhs = vector<int>(m);\\r\\n\\tweight = vector<int>(m);\\r\\n\\tfor(int i = 0; i < n; i++) {\\r\\n\\t\\tcin >> loc[i];\\r\\n\\t\\t--loc[i];\\r\\n\\t}\\r\\n\\tfor(int i = 0; i < m; i++) {\\r\\n\\t\\tcin >> lhs[i] >> rhs[i] >> weight[i];\\r\\n\\t\\t--lhs[i], --rhs[i];\\r\\n\\t}\\r\\n\\tint minW = 0;\\r\\n\\tint maxW = 1000000001;\\r\\n\\twhile(minW != maxW) {\\r\\n\\t\\tint mid = (minW + maxW + 1) / 2;\\r\\n\\t\\tif(valid(mid)) minW = mid;\\r\\n\\t\\telse maxW = mid-1;\\r\\n\\t}\\r\\n\\tif(minW > 1e9) minW = -1;\\r\\n\\tfreopen(\\\"wormsort.out\\\",\\\"w\\\",stdout);\\r\\n\\tcout << minW << \\\"\\\\n\\\";\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A comparable Python solution only passes the first five test cases:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-py\",\n        children: \"import sys\\r\\nsys.setrecursionlimit(1000000)\\r\\n\\r\\nsys.stdin = open(\\\"wormsort.in\\\",\\\"r\\\")\\r\\nsys.stdout = open(\\\"wormsort.out\\\",\\\"w\\\")\\r\\n\\r\\nn,m = map(int,input().split())\\r\\nloc = [0]*n\\r\\ncomponent = [0]*n\\r\\nedges = [[] for i in range(n)]\\r\\n\\r\\nlhs = [0]*m\\r\\nrhs = [0]*m\\r\\nweight = [0]*m\\r\\n\\r\\ndef dfs(curr,label):\\r\\n\\tif component[curr] == label: return\\r\\n\\tcomponent[curr] = label\\r\\n\\tfor child in edges[curr]: dfs(child, label)\\r\\n\\r\\ndef valid(minW):\\r\\n\\tglobal component\\r\\n\\tcomponent = [-1]*n\\r\\n\\tfor i in range(n):\\r\\n\\t\\tedges[i].clear()\\r\\n\\tfor i in range(m):\\r\\n\\t\\tif weight[i] >= minW:\\r\\n\\t\\t\\tedges[lhs[i]].append(rhs[i])\\r\\n\\t\\t\\tedges[rhs[i]].append(lhs[i])\\r\\n\\tnumcomps = 0\\r\\n\\tfor i in range(n):\\r\\n\\t\\tif component[i] < 0:\\r\\n\\t\\t\\tdfs(i, numcomps)\\r\\n\\t\\t\\tnumcomps += 1\\r\\n\\tfor i in range(n):\\r\\n\\t\\tif component[i] != component[loc[i]]: return False\\r\\n\\treturn True\\r\\n\\r\\nloc = list(map(lambda x: int(x)-1,input().split()))\\r\\nfor i in range(m):\\r\\n\\tlhs[i],rhs[i],weight[i] = map(int,input().split())\\r\\n\\tlhs[i] -= 1\\r\\n\\trhs[i] -= 1\\r\\n\\r\\nminW = 0\\r\\nmaxW = 1000000001\\r\\nwhile minW != maxW:\\r\\n\\tmid = (minW + maxW + 1) // 2\\r\\n\\tif valid(mid):\\r\\n\\t\\tminW = mid\\r\\n\\telse:\\r\\n\\t\\tmaxW = mid-1\\r\\n\\r\\nif minW > 1e9: minW = -1\\r\\nprint(minW)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After some optimizations, this solution still passes only the first seven test\\r\\ncases:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-py\",\n        children: \"import sys\\r\\n\\r\\nsys.stdin = open(\\\"wormsort.in\\\",\\\"r\\\")\\r\\nsys.stdout = open(\\\"wormsort.out\\\",\\\"w\\\")\\r\\n\\r\\nn,m = map(int,input().split())\\r\\nloc = [0]*n\\r\\nedges = [[] for i in range(n)]\\r\\n\\r\\ndef valid():\\r\\n\\tcomponent = [-1]*n\\r\\n\\tnumcomps = 0\\r\\n\\tfor i in range(n):\\r\\n\\t\\tif component[i] < 0:\\r\\n\\t\\t\\ttodo = [i]\\r\\n\\t\\t\\tcomponent[i] = numcomps\\r\\n\\t\\t\\tnext_index = 0\\r\\n\\t\\t\\twhile next_index < len(todo):\\r\\n\\t\\t\\t\\tcurr = todo[next_index]\\r\\n\\t\\t\\t\\tnext_index += 1\\r\\n\\t\\t\\t\\tfor child,weight in edges[curr]:\\r\\n\\t\\t\\t\\t\\tif weight < mid and component[child] < 0:\\r\\n\\t\\t\\t\\t\\t\\tcomponent[child] = numcomps\\r\\n\\t\\t\\t\\t\\t\\ttodo.append(child)\\r\\n\\t\\t\\tnumcomps += 1\\r\\n\\tfor i in range(n):\\r\\n\\t\\tif component[i] != component[loc[i]]: return False\\r\\n\\treturn True\\r\\n\\r\\nloc = list(map(lambda x: int(x)-1,input().split()))\\r\\nall_edges = []\\r\\nfor i in range(m):\\r\\n\\tlhs,rhs,weight = map(int,input().split())\\r\\n\\tall_edges.append((weight,lhs-1,rhs-1))\\r\\n\\r\\nall_edges.sort(reverse=True)\\r\\nfor i in range(m):\\r\\n\\t_,lhs,rhs = all_edges[i]\\r\\n\\tedges[lhs].append((rhs,i))\\r\\n\\tedges[rhs].append((lhs,i))\\r\\n\\r\\nlo,hi = 0,m\\r\\nwhile lo != hi:\\r\\n\\tmid = (lo + hi) // 2\\r\\n\\tif valid():\\r\\n\\t\\thi = mid\\r\\n\\telse:\\r\\n\\t\\tlo = mid+1\\r\\n\\r\\nprint(-1 if lo == 0 else all_edges[lo-1][0])\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We are not sure whether it is possible to modify the above approach to receive\\r\\nfull credit (please let us know if you manage to succeed)! Of course, it is\\r\\npossible to pass this problem in Python using DSU (a Gold topic):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-py\",\n        children: \"# Author: Nicolas Hsu\\r\\n\\r\\nfile = open('wormsort.in')\\r\\nN, M = map(int, file.readline().split())\\r\\nP = tuple(map(int, ('0 '+file.readline()).split()))\\r\\nW = [ tuple(map(int, file.readline().split())) for i in range(M) ]\\r\\nW.sort(key=lambda w:-w[2])\\r\\n\\r\\npar = list(range(N+1))\\r\\ndef find(u):\\r\\n\\tif par[u]==u:\\r\\n\\t\\treturn u\\r\\n\\telse:\\r\\n\\t\\tpar[u] = find(par[u])\\r\\n\\t\\treturn par[u]\\r\\n\\r\\nw = -1\\r\\nfor n in range(1, N+1):\\r\\n\\twhile find(n)!=find(P[n]):\\r\\n\\t\\tw += 1\\r\\n\\t\\tpar[find(W[w][1])] = find(W[w][0])\\r\\n\\r\\nout = open('wormsort.out', 'w')\\r\\nout.write('-1' if w==-1 else str(W[w][2]))\\r\\nout.close()\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"what-am-i-expected-to-know\",\n      children: [_jsx(_components.a, {\n        href: \"#what-am-i-expected-to-know\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"What Am I Expected to Know?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You should know how to code in at least one of the languages listed above before\\r\\ncontinuing onto the Bronze section of this guide. For a more detailed list on\\r\\nwhat you should know, read the \", _jsx(_components.a, {\n        href: \"/general/expected\",\n        children: \"\\\"Expected Knowledge\\\"\"\n      }), \" module.\"]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"Choosing a Language","author":"Nathan Wang, Benjamin Qi","contributors":null,"id":"choosing-lang","prerequisites":["intro-cp"],"description":"What languages you can use for programming contests.","frequency":null},"parent":{"name":"Choosing_Lang","relativePath":"1_General/Choosing_Lang.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"What Languages Does The USACO Support?","slug":"what-languages-does-the-usaco-support"},{"depth":3,"value":"What Are The Differences Between C++11 and C++17?","slug":"what-are-the-differences-between-c11-and-c17"},{"depth":3,"value":"What Are The Differences Between Python 2 and Python 3?","slug":"what-are-the-differences-between-python-2-and-python-3"},{"depth":2,"value":"What Language Should I Start Out With?","slug":"what-language-should-i-start-out-with"},{"depth":2,"value":"Can I Pass Every Problem in Every Language?","slug":"can-i-pass-every-problem-in-every-language"},{"depth":3,"value":"Example - Wormhole Sort","slug":"example---wormhole-sort"},{"depth":2,"value":"What Am I Expected to Know?","slug":"what-am-i-expected-to-know"}],"java":[{"depth":2,"value":"What Languages Does The USACO Support?","slug":"what-languages-does-the-usaco-support"},{"depth":3,"value":"What Are The Differences Between C++11 and C++17?","slug":"what-are-the-differences-between-c11-and-c17"},{"depth":3,"value":"What Are The Differences Between Python 2 and Python 3?","slug":"what-are-the-differences-between-python-2-and-python-3"},{"depth":2,"value":"What Language Should I Start Out With?","slug":"what-language-should-i-start-out-with"},{"depth":2,"value":"Can I Pass Every Problem in Every Language?","slug":"can-i-pass-every-problem-in-every-language"},{"depth":3,"value":"Example - Wormhole Sort","slug":"example---wormhole-sort"},{"depth":2,"value":"What Am I Expected to Know?","slug":"what-am-i-expected-to-know"}],"py":[{"depth":2,"value":"What Languages Does The USACO Support?","slug":"what-languages-does-the-usaco-support"},{"depth":3,"value":"What Are The Differences Between C++11 and C++17?","slug":"what-are-the-differences-between-c11-and-c17"},{"depth":3,"value":"What Are The Differences Between Python 2 and Python 3?","slug":"what-are-the-differences-between-python-2-and-python-3"},{"depth":2,"value":"What Language Should I Start Out With?","slug":"what-language-should-i-start-out-with"},{"depth":2,"value":"Can I Pass Every Problem in Every Language?","slug":"can-i-pass-every-problem-in-every-language"},{"depth":3,"value":"Example - Wormhole Sort","slug":"example---wormhole-sort"},{"depth":2,"value":"What Am I Expected to Know?","slug":"what-am-i-expected-to-know"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"choosing-lang"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}