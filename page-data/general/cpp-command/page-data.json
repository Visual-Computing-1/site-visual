{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/cpp-command",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"cpp-command\", title = \"C++ With the Command Line\", author = \"Many\", contributors = \"Benjamin Qi, Hankai Zhang, Anthony Wang, Nathan Wang, Nathan Chen, Michael Lan, Arpan Banerjee\", description = \"OS-specific instructions for installing and running C++ via the command line.\", prerequisites = [\"running-code-locally\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    li: \"li\",\n    h4: \"h4\",\n    ul: \"ul\",\n    em: \"em\",\n    blockquote: \"blockquote\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    Info: _missingComponent(\"Info\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Warning: _missingComponent(\"Warning\")\n  }, _props.components), {HeaderLink, Resources, Resource, IncompleteSection, Info, MATHSPAN, Warning, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"command-line-basics\",\n      children: [_jsx(_components.a, {\n        href: \"#command-line-basics\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Command Line Basics\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CPH\",\n        title: \"1.1 - C++ Code Template\",\n        url: \"/CPH.pdf#page=14\",\n        children: _jsx(_components.p, {\n          children: \"what compiling a simple program looks like\"\n        })\n      })\n    }), \"\\n\", _jsx(IncompleteSection, {\n      children: _jsx(_components.p, {\n        children: \"hm, anything simpler / interactive (and free)?\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"general\",\n      children: [_jsx(_components.a, {\n        href: \"#general\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"General\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Learn Enough\",\n        title: \"Command Line\",\n        url: \"https://www.learnenough.com/command-line-tutorial/basics\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"linux\",\n      children: [_jsx(_components.a, {\n        href: \"#linux\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Linux\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"William Shotts\",\n        title: \"The Linux Command Line\",\n        url: \"https://linuxcommand.org/tlcl.php\",\n        starred: true\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"mac\",\n      children: [_jsx(_components.a, {\n        href: \"#mac\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Mac\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Should be mostly the same as Linux ...\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open the \", _jsx(_components.strong, {\n        children: \"Terminal\"\n      }), \" application and familiarize yourself with some basic\\r\\ncommands. Upgrade to \", _jsx(_components.a, {\n        href: \"https://support.apple.com/en-us/HT208050\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: _jsx(_components.code, {\n          children: \"zsh\"\n        })\n      }), \" if you\\r\\nhaven't already.\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Jim Hoskins\",\n        title: \"Intro to OS X Command Line\",\n        url: \"https://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"Rahul Saigal\",\n        title: \"Mac Terminal Cheat Sheet\",\n        url: \"https://www.makeuseof.com/tag/mac-terminal-commands-cheat-sheet/\",\n        children: _jsx(_components.p, {\n          children: \"keyboard shortcuts / terminal commands\"\n        })\n      }), _jsx(Resource, {\n        source: \"Armin Briegel\",\n        title: \"Moving to zsh\",\n        url: \"https://scriptingosx.com/2019/06/moving-to-zsh/\"\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"windows\",\n      children: [_jsx(_components.a, {\n        href: \"#windows\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Windows\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Princeton\",\n        title: \"Windows Command Prompt in 15 Minutes\",\n        url: \"https://www.cs.princeton.edu/courses/archive/spr05/cos126/cmd-prompt.html\",\n        children: _jsx(_components.p, {\n          children: \"Java\"\n        })\n      }), _jsx(Resource, {\n        source: \"ComputerHope\",\n        title: \"Windows Command Line\",\n        url: \"https://www.computerhope.com/issues/chusedos.htm\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"installing-g\",\n      children: [_jsx(_components.a, {\n        href: \"#installing-g\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Installing \", _jsx(_components.code, {\n        children: \"g++\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"http://www.usaco.org/index.php?page=instructions\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"USACO\"\n      }), \" (and most contests)\\r\\nuse \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/GNU_Compiler_Collection\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"GCC\"\n      }), \"'s \", _jsx(_components.code, {\n        children: \"g++\"\n      }), \" to\\r\\ncompile and run your code. You'll need \", _jsx(_components.code, {\n        children: \"g++\"\n      }), \" specifically to use the\\r\\n\", _jsx(_components.code, {\n        children: \"#include <bits/stdc++.h>\"\n      }), \" header file; see\\r\\n\", _jsx(_components.a, {\n        href: \"/general/running-code-locally#including-bitsstdch\",\n        children: \"Running Code Locally\"\n      }), \" for\\r\\ndetails.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"on-linux\",\n      children: [_jsx(_components.a, {\n        href: \"#on-linux\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"On Linux\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"GCC is usually preinstalled on most Linux distros. You can check if it is\\r\\ninstalled with\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"whereis g++\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If it is not preinstalled, you can probably install it using your distro's\\r\\npackage manager.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"on-mac\",\n      children: [_jsx(_components.a, {\n        href: \"#on-mac\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"On Mac\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Install XCode command line tools.\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"xcode-select --install\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"If you previously installed these you may need to update them:\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            children: \"softwareupdate --list # list updates\\r\\nsoftwareupdate -i -a # installs all updates\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"After this step, \", _jsx(_components.code, {\n            children: \"clang\"\n          }), \" should be installed (try running \", _jsx(_components.code, {\n            children: \"clang --version\"\n          }), \"\\r\\nin Terminal).\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Install \", _jsx(_components.a, {\n            href: \"https://brew.sh/\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"Homebrew\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Install \", _jsx(_components.code, {\n            children: \"gcc\"\n          }), \" with Homebrew.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"brew install gcc\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"According to\\r\\n\", _jsx(_components.a, {\n            href: \"https://stackoverflow.com/questions/30998890/installing-opencv-with-brew-never-finishes\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"this\"\n          }), \"\\r\\nif \", _jsx(_components.code, {\n            children: \"brew\"\n          }), \" doesn't seem to finish for a long time then\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"brew install gcc --force-bottle\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"probably suffices.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"You should be able to compile with \", _jsx(_components.code, {\n            children: \"g++-#\"\n          }), \", where # is the version number\\r\\n(e.g., 10). Running the following command\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"g++-10 --version\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"should display something like this:\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"g++-10 (Homebrew GCC 10.2.0_2) 10.2.0\\r\\nCopyright (C) 2020 Free Software Foundation, Inc.\\r\\nThis is free software; see the source for copying conditions.  There is NO\\r\\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"If you want to be able to compile with just \", _jsx(_components.code, {\n            children: \"g++\"\n          }), \", write a shell alias! Put\\r\\nthe following lines into your shell's rc file (\", _jsx(_components.code, {\n            children: \"~/.bashrc\"\n          }), \" if you use\\r\\n\", _jsx(_components.code, {\n            children: \"bash\"\n          }), \", and \", _jsx(_components.code, {\n            children: \"~/.zshrc\"\n          }), \" if you use \", _jsx(_components.code, {\n            children: \"zsh\"\n          }), \").\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            children: \"alias g++=g++-10\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Once you do so, \", _jsx(_components.code, {\n            children: \"g++ --version\"\n          }), \" should now output the same thing as\\r\\n\", _jsx(_components.code, {\n            children: \"g++-10 --version\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Note: avoid overriding the system \", _jsx(_components.code, {\n            children: \"g++\"\n          }), \" with symlinking or hard-linking as\\r\\nthat will almost surely cause problems. Don't worry if you don't know what\\r\\nthose terms mean.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"on-windows\",\n      children: [_jsx(_components.a, {\n        href: \"#on-windows\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"On Windows\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"simpler-mingw-w64-minimalist-gnu-for-windows\",\n      children: [_jsx(_components.a, {\n        href: \"#simpler-mingw-w64-minimalist-gnu-for-windows\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Simpler: \", _jsx(_components.a, {\n        href: \"https://www.mingw-w64.org/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Mingw-w64\"\n      }), \" (Minimalist GNU for Windows)\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Microsoft\",\n        title: \"MinGW with VS Code\",\n        url: \"https://code.visualstudio.com/docs/cpp/config-mingw\",\n        children: _jsx(_components.p, {\n          children: \"Setting Up MinGW with VS Code\"\n        })\n      }), _jsx(Resource, {\n        source: \"Jetbrains\",\n        title: \"Configuring CLion on Windows\",\n        url: \"https://www.jetbrains.com/help/clion/quick-tutorial-on-configuring-clion-on-windows.html#MinGW\",\n        children: _jsx(_components.p, {\n          children: \"Setting up MinGW with CLion\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"harder-windows-subsystem-for-linux-wsl\",\n      children: [_jsx(_components.a, {\n        href: \"#harder-windows-subsystem-for-linux-wsl\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Harder: \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Windows Subsystem for Linux (WSL)\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you're already accustomed to the Linux Command line, this might be the best\\r\\noption for you.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Windows Subsystem for Linux, commonly referred to as WSL, runs the linux kernel\\r\\n(or an emulation layer, depending on which version you use) within your windows\\r\\ninstallation. This allows you to use Linux binaries without needing to use Linux\\r\\nas your main Operating System.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Many people use WSL (such as Anthony), but it can be difficult to properly set\\r\\nup.\"\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Microsoft\",\n        title: \"VSCode - GCC on WSL\",\n        url: \"https://code.visualstudio.com/docs/cpp/config-wsl\",\n        children: _jsx(_components.p, {\n          children: \"difficult for beginners\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you want to code in (neo)vim, you can install WSL and code through WSL bash.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To install the necessary tools after setting up WSL, you can run the following\\r\\ncommands.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"On Debian based distributions like Ubuntu:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"sudo apt-get install build-essential\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"On Arch based distributions like Arch Linux:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"sudo pacman -Sy base-devel\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find many tutorials on how to style up WSL and make it feel more cozy.\\r\\nThe first step is to use a proper terminal and not the default one that Windows\\r\\nprovides. An easy to use option is Windows Terminal, which can be found on the\\r\\n\", _jsx(_components.a, {\n        href: \"https://www.microsoft.com/store/productId/9N0DX20HK701\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Microsoft Store\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        title: \"Set Up and Customize Windows Terminal\",\n        url: \"https://medium.com/@ajitsahoo29/the-ultimate-guide-to-install-and-customize-windows-terminal-2019-6963dfc06587\",\n        children: _jsx(_components.p, {\n          children: \"Setting up your terminal\"\n        })\n      }), _jsx(Resource, {\n        title: \"Make the command line look good\",\n        url: \"https://medium.com/@shivam1/make-your-terminal-beautiful-and-fast-with-zsh-shell-and-powerlevel10k-6484461c6efb\",\n        children: _jsx(_components.p, {\n          children: \"Get a beautiful command line interface\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"c-with-the-command-line\",\n      children: [_jsx(_components.a, {\n        href: \"#c-with-the-command-line\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"C++ with the Command Line\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"basics-of-compiling--running\",\n      children: [_jsx(_components.a, {\n        href: \"#basics-of-compiling--running\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Basics of Compiling & Running\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Consider a simple program such as the following, which we'll save in \", _jsx(_components.code, {\n        children: \"name.cpp\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <iostream>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint x; cin >> x;\\r\\n\\tcout << \\\"FOUND \\\" << x << \\\"\\\\n\\\";\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It's not hard to\\r\\n\", _jsx(_components.a, {\n        href: \"https://www.tutorialspoint.com/How-to-compile-and-run-the-Cplusplus-program\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"compile & run a C++ program\"\n      }), \".\\r\\nFirst, open up Powershell on Windows, Terminal on Mac, or your distro's terminal\\r\\nin Linux. We can compile \", _jsx(_components.code, {\n        children: \"name.cpp\"\n      }), \" into an executable named \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" with the\\r\\nfollowing command:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"g++ name.cpp -o name\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then we can execute the program:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"./name\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you type some integer and then press enter, then the program should produce\\r\\noutput. We can write both of these commands in a single line:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"g++ name.cpp -o name && ./name\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note that \", _jsx(_components.code, {\n        children: \"&&\"\n      }), \" ensures that \", _jsx(_components.code, {\n        children: \"./name\"\n      }), \" only runs if \", _jsx(_components.code, {\n        children: \"g++ name.cpp -o name\"\n      }), \"\\r\\nfinishes successfully.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"redirecting-input--output\",\n      children: [_jsx(_components.a, {\n        href: \"#redirecting-input--output\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Redirecting Input & Output\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to read standard input from \", _jsx(_components.code, {\n        children: \"inp.txt\"\n      }), \", use the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"./name < inp.txt\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to write standard output to \", _jsx(_components.code, {\n        children: \"out.txt\"\n      }), \", then use the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"./name > out.txt\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"They can also be used in conjunction, as shown below:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"./name < inp.txt > out.txt\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/general/input-output\",\n        children: \"Input & Output\"\n      }), \" for how to do file input and output\\r\\nwithin the program.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"compiler-options-aka-flags\",\n      children: [_jsx(_components.a, {\n        href: \"#compiler-options-aka-flags\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), _jsx(_components.a, {\n        href: \"https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Compiler Options (aka Flags)\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use\\r\\n\", _jsx(_components.a, {\n        href: \"https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"compiler flags\"\n      }), \"\\r\\nto change the way GCC compiles your code. Usually, we use something like the\\r\\nfollowing in place of \", _jsx(_components.code, {\n        children: \"g++ name.cpp -o name\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"g++ -std=c++17 -O2 name.cpp -o name -Wall\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"-O2\"\n        }), \" tells \", _jsx(_components.code, {\n          children: \"g++\"\n        }), \" to compile your code to run more quickly while increasing\\r\\ncompilation time (see\\r\\n\", _jsx(_components.a, {\n          href: \"https://www.rapidtables.com/code/linux/gcc/gcc-o.html\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"here\"\n        }), \").\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"-std=c++17\"\n        }), \" allows you to use features that were added to C++ in 2017. USACO\\r\\nrecently upgraded from C++11 to C++17.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"-Wall\"\n        }), \" checks your program for common errors. See\\r\\n\", _jsx(_components.a, {\n          href: \"/general/debugging-lang/#warning-options\",\n          children: \"Debugging\"\n        }), \" for more information.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You should always compile with these flags.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"adding-shortcuts-mac\",\n      children: [_jsx(_components.a, {\n        href: \"#adding-shortcuts-mac\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Adding Shortcuts (Mac)\"]\n    }), \"\\n\", _jsx(Info, {\n      title: \"For Users of Linux & Windows\",\n      children: _jsx(_components.p, {\n        children: \"The process is similar for Linux. If you're on Windows, you can use an IDE to\\r\\nget these shortcuts, or you can install WSL (mentioned above).\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Retyping the compiler flags above can get tedious. You should define shortcuts\\r\\nso you don't need to type them every time!\"\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Jonathan Suh\",\n        url: \"https://jonsuh.com/blog/bash-command-line-shortcuts/\",\n        title: \"Aliases in Terminal\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"SO\",\n        url: \"https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout\",\n        title: \"What should / shouldn't go in .zshenv, .zshrc, ...\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, create your \", _jsx(_components.code, {\n        children: \".zshrc\"\n      }), \" if it doesn't already exist.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"touch ~/.zshrc\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open your \", _jsx(_components.code, {\n        children: \".zshrc\"\n      }), \" with a text editor.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"open ~/.zshrc\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"or some text editor (ex. sublime text with \", _jsx(_components.code, {\n        children: \"subl\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"subl ~/.zshrc\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can add \", _jsx(_components.strong, {\n        children: \"aliases\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"functions\"\n      }), \" here, such as the following to compile\\r\\nand run C++ on Mac.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"co() { g++ -std=c++17 -O2 -o \\\"${1%.*}\\\" $1 -Wall; }\\r\\nrun() { co $1 && ./${1%.*} & fg; }\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now you can easily compile and run \", _jsx(_components.code, {\n        children: \"name.cpp\"\n      }), \" from the command line with\\r\\n\", _jsx(_components.code, {\n        children: \"co name.cpp && ./name\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"run name.cpp\"\n      }), \". Note that all occurrences of \", _jsx(_components.code, {\n        children: \"$1\"\n      }), \" in\\r\\nthe function are replaced with \", _jsx(_components.code, {\n        children: \"name.cpp\"\n      }), \", while \", _jsx(_components.code, {\n        children: \"${1%.*}\"\n      }), \" removes the file\\r\\nextension from \", _jsx(_components.code, {\n        children: \"$1\"\n      }), \" to produce \", _jsx(_components.code, {\n        children: \"name\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"what-is--fg-for\",\n      children: [_jsx(_components.a, {\n        href: \"#what-is--fg-for\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"What is \", _jsx(_components.code, {\n        children: \"& fg\"\n      }), \" for?\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"SO\",\n        url: \"https://stackoverflow.com/questions/45023243/displaying-or-redirecting-a-shells-job-control-messages\",\n        title: \"Displaying or redirecting a shell's job control messages\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let \", _jsx(_components.code, {\n        children: \"prog.cpp\"\n      }), \" denote the following file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <iostream>\\r\\n#include <vector>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tvector<int> v;\\r\\n\\tcout << v[-1];\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"According to the resource above, the \", _jsx(_components.code, {\n        children: \"& fg\"\n      }), \" is necessary for getting \", _jsx(_components.code, {\n        children: \"zsh\"\n      }), \" on\\r\\nMac to display crash messages (such as segmentation fault). For example,\\r\\nconsider the running the first \", _jsx(_components.code, {\n        children: \"prog.cpp\"\n      }), \" above with \", _jsx(_components.code, {\n        children: \"run prog.cpp\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"& fg\"\n      }), \" is removed from the run command above then the terminal displays no\\r\\nmessage at all. Leaving it in produces the following (ignore the first two\\r\\nlines):\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"[2] 30594\\r\\n[2]  - running    ./${1%.*}\\r\\nzsh: segmentation fault  ./${1%.*}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"measuring-time--memory-usage-mac\",\n      children: [_jsx(_components.a, {\n        href: \"#measuring-time--memory-usage-mac\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Measuring Time & Memory Usage (Mac)\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CF\",\n        title: \"How to Find Total Memory Consumption of C++ Program\",\n        url: \"https://codeforces.com/blog/entry/49371?#comment-333749\",\n        children: _jsx(_components.p, {\n          children: \"for Linux\"\n        })\n      }), _jsx(Resource, {\n        source: \"SO\",\n        title: \"time -v on Mac\",\n        url: \"https://stackoverflow.com/questions/32515381/mac-os-x-usr-bin-time-verbose-flag\",\n        children: _jsx(_components.p, {\n          children: \"use gtime\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, suppose that \", _jsx(_components.code, {\n        children: \"prog.cpp\"\n      }), \" consists of the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int BIG = 1e7;\\r\\nint a[BIG];\\r\\n\\r\\nint main() {\\r\\n\\tint sum = 0;\\r\\n\\tfor (int i = 0; i < BIG; ++i) sum += a[i];\\r\\n\\tcout << sum;\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then \", _jsx(_components.code, {\n        children: \"co prog.cpp && gtime -v ./prog\"\n      }), \" gives the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"  Command being timed: \\\"./prog\\\"\\r\\n  User time (seconds): 0.01\\r\\n  System time (seconds): 0.01\\r\\n  Percent of CPU this job got: 11%\\r\\n  Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22\\r\\n  Average shared text size (kbytes): 0\\r\\n  Average unshared data size (kbytes): 0\\r\\n  Average stack size (kbytes): 0\\r\\n  Average total size (kbytes): 0\\r\\n  Maximum resident set size (kbytes): 40216\\r\\n  Average resident set size (kbytes): 0\\r\\n  Major (requiring I/O) page faults: 91\\r\\n  Minor (reclaiming a frame) page faults: 10088\\r\\n  Voluntary context switches: 3\\r\\n  Involuntary context switches: 38\\r\\n  Swaps: 0\\r\\n  File system inputs: 0\\r\\n  File system outputs: 0\\r\\n  Socket messages sent: 0\\r\\n  Socket messages received: 0\\r\\n  Signals delivered: 0\\r\\n  Page size (bytes): 4096\\r\\n  Exit status: 0\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note that \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^7\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^7</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">7</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" integers require \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"4\\\\cdot 10^7\\\\cdot 10^{-3}\\\\approx 40000\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>4</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>≈</mo><mn>40000</mn></mrow><annotation encoding=\\\"application/x-tex\\\">4\\\\cdot 10^7\\\\cdot 10^{-3}\\\\approx 40000</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">7</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">−</span><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">40000</span></span></span></span>\"\n      }), \"\\r\\nkilobytes of memory, which is close to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"40216\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>40216</mn></mrow><annotation encoding=\\\"application/x-tex\\\">40216</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">40216</span></span></span></span>\"\n      }), \" in the above output as expected.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"adjusting-stack-size-mac\",\n      children: [_jsx(_components.a, {\n        href: \"#adjusting-stack-size-mac\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Adjusting Stack Size (Mac)\"]\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsx(_components.p, {\n        children: \"This section might be out of date.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let \", _jsx(_components.code, {\n        children: \"A.cpp\"\n      }), \" denote the following program:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <iostream>\\r\\nusing namespace std;\\r\\n\\r\\nint res(int x) {\\r\\n\\tif (x == 200000) return x;\\r\\n\\treturn res(x+1);\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tcout << res(0) << \\\"\\\\n\\\";\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we compile and run this with \", _jsx(_components.code, {\n        children: \"g++ A.cpp -o A && ./A\"\n      }), \", this outputs \", _jsx(_components.code, {\n        children: \"200000\"\n      }), \".\\r\\nHowever, changing \", _jsx(_components.code, {\n        children: \"200000\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"300000\"\n      }), \" gives a segmentation fault. Similarly,\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"#include <iostream>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint arr[2000000];\\r\\n\\tcout << arr[0] << \\\"\\\\n\\\";\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"runs, but changing \", _jsx(_components.code, {\n        children: \"2000000\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"3000000\"\n      }), \" also gives a segmentation fault. This\\r\\nis because the \", _jsx(_components.strong, {\n        children: \"stack size\"\n      }), \" on Mac appears to be limited to 8 megabytes by\\r\\ndefault.\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"Wikipedia\",\n        url: \"https://en.wikipedia.org/wiki/Stack_overflow\",\n        title: \"Stack overflow\",\n        children: _jsx(_components.p, {\n          children: \"explanation of the issue\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note that USACO does not have a stack size limit, aside from the usual 256 MB\\r\\nmemory limit. Therefore, code that crashes locally due to a stack overflow error\\r\\nmay still pass on the USACO servers. To get your code running locally, use one\\r\\nof the methods below.\"\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsxs(_components.p, {\n        children: [\"This matters particularly for contests such as\\r\\n\", _jsx(_components.a, {\n          href: \"https://www.facebook.com/hackercup\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Facebook Hacker Cup\"\n        }), \" where you submit the\\r\\noutput of a program you run locally.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"method-1\",\n      children: [_jsx(_components.a, {\n        href: \"#method-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Method 1\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"SO\",\n        url: \"https://stackoverflow.com/questions/13245019/how-to-change-the-stack-size-using-ulimit-or-per-process-on-mac-os-x-for-a-c-or\",\n        title: \"Change Stack Size on Mac OS?\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ulimit -s 65532\"\n      }), \" will increase the stack size to about 64 MB. Unfortunately,\\r\\nthis doesn't work for higher numbers.\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"method-2\",\n      children: [_jsx(_components.a, {\n        href: \"#method-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Method 2\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CF\",\n        url: \"https://codeforces.com/blog/entry/60999?#comment-449312\",\n        title: \"Terminal Command on Mac\",\n        children: _jsxs(_components.p, {\n          children: [\"people complain about FHC \", _jsx(_components.em, {\n            children: \"every\"\n          }), \" year\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To get around this, we can pass a\\r\\n\", _jsx(_components.a, {\n        href: \"https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"linker option\"\n      }), \". According\\r\\nto the manual for\\r\\n\", _jsx(_components.a, {\n        href: \"https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_mono/ld.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: _jsx(_components.code, {\n          children: \"ld\"\n        })\n      }), \" (enter\\r\\n\", _jsx(_components.code, {\n        children: \"man ld\"\n      }), \" in Terminal), the option \", _jsx(_components.code, {\n        children: \"-stack_size size\"\n      }), \" does the following:\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Specifies the maximum stack size for the main thread in a program. Without\\r\\nthis option a program has a 8MB stack. The argument size is a hexadecimal\\r\\nnumber with an optional leading 0x. The size should be a multiple of the\\r\\narchitecture's page size (4KB or 16KB).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So including \", _jsx(_components.code, {\n        children: \"-Wl,-stack_size,0x10000000\"\n      }), \" as part of your compilation command\\r\\nwill set the maximum stack size to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"16^7\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>6</mn><mn>7</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">16^7</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">6</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">7</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" bytes \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\approx 256\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>≈</mo><mn>256</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\approx 256</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4831em;\\\"></span><span class=\\\"mrel\\\">≈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">256</span></span></span></span>\"\n      }), \" megabytes, which\\r\\nis usually sufficient. However, running the first program above with \", _jsx(_components.code, {\n        children: \"200000\"\n      }), \"\\r\\nreplaced by \", _jsx(_components.code, {\n        children: \"1e7\"\n      }), \" still gives an error. In this case, you can further increase\\r\\nthe maximum stack size (ex. changing \", _jsx(_components.code, {\n        children: \"0x10000000\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"0xF0000000\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On windows, adding \", _jsx(_components.code, {\n        children: \"-Wl,--stack,268435456\"\n      }), \" as a part of your compilation flags\\r\\nshould do the trick. The \", _jsx(_components.code, {\n        children: \"268435456\"\n      }), \" corresponds to \", _jsx(_components.code, {\n        children: \"268435456\"\n      }), \" bytes, or \", _jsx(_components.code, {\n        children: \"256\"\n      }), \"\\r\\nmegabytes. If you are using Windows PowerShell, make sure to wrap it in\\r\\nquotations (like so: \", _jsx(_components.code, {\n        children: \"\\\"-Wl,--stack,268435456\\\"\"\n      }), \"), since commas are considered to\\r\\nbe special characters.\"]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  description,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"C++ With the Command Line","author":"Many","contributors":"Benjamin Qi, Hankai Zhang, Anthony Wang, Nathan Wang, Nathan Chen, Michael Lan, Arpan Banerjee","id":"cpp-command","prerequisites":["running-code-locally"],"description":"OS-specific instructions for installing and running C++ via the command line.","frequency":null},"parent":{"name":"Cpp_Command","relativePath":"1_General/Cpp_Command.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"Command Line Basics","slug":"command-line-basics"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"Linux","slug":"linux"},{"depth":3,"value":"Mac","slug":"mac"},{"depth":3,"value":"Windows","slug":"windows"},{"depth":2,"value":"Installing g++","slug":"installing-g"},{"depth":3,"value":"On Linux","slug":"on-linux"},{"depth":3,"value":"On Mac","slug":"on-mac"},{"depth":3,"value":"On Windows","slug":"on-windows"},{"depth":4,"value":"Simpler: Mingw-w64 (Minimalist GNU for Windows)","slug":"simpler-mingw-w64-minimalist-gnu-for-windows"},{"depth":4,"value":"Harder: Windows Subsystem for Linux (WSL)","slug":"harder-windows-subsystem-for-linux-wsl"},{"depth":2,"value":"C++ with the Command Line","slug":"c-with-the-command-line"},{"depth":3,"value":"Basics of Compiling &amp; Running","slug":"basics-of-compiling--running"},{"depth":3,"value":"Redirecting Input &amp; Output","slug":"redirecting-input--output"},{"depth":3,"value":"Compiler Options (aka Flags)","slug":"compiler-options-aka-flags"},{"depth":3,"value":"Adding Shortcuts (Mac)","slug":"adding-shortcuts-mac"},{"depth":4,"value":"What is &amp; fg for?","slug":"what-is--fg-for"},{"depth":3,"value":"Measuring Time &amp; Memory Usage (Mac)","slug":"measuring-time--memory-usage-mac"},{"depth":3,"value":"Adjusting Stack Size (Mac)","slug":"adjusting-stack-size-mac"},{"depth":4,"value":"Method 1","slug":"method-1"},{"depth":4,"value":"Method 2","slug":"method-2"}],"java":[{"depth":2,"value":"Command Line Basics","slug":"command-line-basics"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"Linux","slug":"linux"},{"depth":3,"value":"Mac","slug":"mac"},{"depth":3,"value":"Windows","slug":"windows"},{"depth":2,"value":"Installing g++","slug":"installing-g"},{"depth":3,"value":"On Linux","slug":"on-linux"},{"depth":3,"value":"On Mac","slug":"on-mac"},{"depth":3,"value":"On Windows","slug":"on-windows"},{"depth":4,"value":"Simpler: Mingw-w64 (Minimalist GNU for Windows)","slug":"simpler-mingw-w64-minimalist-gnu-for-windows"},{"depth":4,"value":"Harder: Windows Subsystem for Linux (WSL)","slug":"harder-windows-subsystem-for-linux-wsl"},{"depth":2,"value":"C++ with the Command Line","slug":"c-with-the-command-line"},{"depth":3,"value":"Basics of Compiling &amp; Running","slug":"basics-of-compiling--running"},{"depth":3,"value":"Redirecting Input &amp; Output","slug":"redirecting-input--output"},{"depth":3,"value":"Compiler Options (aka Flags)","slug":"compiler-options-aka-flags"},{"depth":3,"value":"Adding Shortcuts (Mac)","slug":"adding-shortcuts-mac"},{"depth":4,"value":"What is &amp; fg for?","slug":"what-is--fg-for"},{"depth":3,"value":"Measuring Time &amp; Memory Usage (Mac)","slug":"measuring-time--memory-usage-mac"},{"depth":3,"value":"Adjusting Stack Size (Mac)","slug":"adjusting-stack-size-mac"},{"depth":4,"value":"Method 1","slug":"method-1"},{"depth":4,"value":"Method 2","slug":"method-2"}],"py":[{"depth":2,"value":"Command Line Basics","slug":"command-line-basics"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"Linux","slug":"linux"},{"depth":3,"value":"Mac","slug":"mac"},{"depth":3,"value":"Windows","slug":"windows"},{"depth":2,"value":"Installing g++","slug":"installing-g"},{"depth":3,"value":"On Linux","slug":"on-linux"},{"depth":3,"value":"On Mac","slug":"on-mac"},{"depth":3,"value":"On Windows","slug":"on-windows"},{"depth":4,"value":"Simpler: Mingw-w64 (Minimalist GNU for Windows)","slug":"simpler-mingw-w64-minimalist-gnu-for-windows"},{"depth":4,"value":"Harder: Windows Subsystem for Linux (WSL)","slug":"harder-windows-subsystem-for-linux-wsl"},{"depth":2,"value":"C++ with the Command Line","slug":"c-with-the-command-line"},{"depth":3,"value":"Basics of Compiling &amp; Running","slug":"basics-of-compiling--running"},{"depth":3,"value":"Redirecting Input &amp; Output","slug":"redirecting-input--output"},{"depth":3,"value":"Compiler Options (aka Flags)","slug":"compiler-options-aka-flags"},{"depth":3,"value":"Adding Shortcuts (Mac)","slug":"adding-shortcuts-mac"},{"depth":4,"value":"What is &amp; fg for?","slug":"what-is--fg-for"},{"depth":3,"value":"Measuring Time &amp; Memory Usage (Mac)","slug":"measuring-time--memory-usage-mac"},{"depth":3,"value":"Adjusting Stack Size (Mac)","slug":"adjusting-stack-size-mac"},{"depth":4,"value":"Method 1","slug":"method-1"},{"depth":4,"value":"Method 2","slug":"method-2"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"cpp-command"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}