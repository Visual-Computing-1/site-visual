{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/data-types",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"data-types\", title = \"Data Types\", author = \"Darren Yao\", description = \"Overview of the basic data types needed for competitive programming.\", prerequisites = [\"running-code-online\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    em: \"em\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    code: \"code\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {LanguageSection, CPPSection, Resources, Resource, MATHSPAN, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"CPPR\",\n            title: \"Fundamental Types\",\n            url: \"https://en.cppreference.com/w/cpp/language/types\",\n            children: _jsx(_components.p, {\n              children: \"sizes + ranges\"\n            })\n          }), _jsx(Resource, {\n            source: \"IUSACO\",\n            title: \"2.2 - Data Types\",\n            children: _jsx(_components.p, {\n              children: \"module is based off this\"\n            })\n          }), _jsx(Resource, {\n            source: \"CPH\",\n            title: \"1.3 - Working with numbers\",\n            children: _jsx(_components.p, {\n              children: \"Integers, Modular arithmetic, Floating point numbers\"\n            })\n          }), _jsx(Resource, {\n            source: \"PAPS\",\n            title: \"2.3 - Variables & Types\",\n            children: _jsx(_components.p, {\n              children: \"plenty of exercises\"\n            })\n          })]\n        }), _jsx(\"br\", {}), _jsx(\"center\", {\n          children: _jsx(_components.p, {\n            children: _jsx(_components.strong, {\n              children: \"C++: Common Fundamental Data Types\"\n            })\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.em, {\n            children: \"Note:\"\n          }), \" These numbers may vary depending on your machine and/or compiler. For more fundamental data types, check the the first resource in the table above.\"]\n        }), \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", _jsxs(_components.table, {\n          children: [_jsx(_components.thead, {\n            children: _jsxs(_components.tr, {\n              children: [_jsx(_components.th, {\n                children: _jsx(_components.em, {\n                  children: \"Types\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"int\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"long long\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"double\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"bool\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"char\"\n                })\n              })]\n            })\n          }), _jsxs(_components.tbody, {\n            children: [_jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Description\"\n              }), _jsx(_components.td, {\n                children: \"32-bit integer\"\n              }), _jsx(_components.td, {\n                children: \"64-bit integer\"\n              }), _jsx(_components.td, {\n                children: \"Double-precision float\"\n              }), _jsx(_components.td, {\n                children: \"True/False value\"\n              }), _jsx(_components.td, {\n                children: \"8-bit character\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Size (bytes)\"\n              }), _jsx(_components.td, {\n                children: \"4\"\n              }), _jsx(_components.td, {\n                children: \"8\"\n              }), _jsx(_components.td, {\n                children: \"8\"\n              }), _jsx(_components.td, {\n                children: \"1\"\n              }), _jsx(_components.td, {\n                children: \"1\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Range\"\n              }), _jsxs(_components.td, {\n                children: [_jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"-2^{31}\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">-2^{31}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">31</span></span></span></span></span></span></span></span></span></span></span></span>\"\n                }), \" to \", _jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"2^{31}-1\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2^{31}-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">31</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n                })]\n              }), _jsxs(_components.td, {\n                children: [_jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"-2^{63}\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">-2^{63}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">63</span></span></span></span></span></span></span></span></span></span></span></span>\"\n                }), \" to \", _jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"2^{63}-1\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2^{63}-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">63</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n                })]\n              }), _jsxs(_components.td, {\n                children: [_jsx(_components.code, {\n                  children: \"-1.7E+308\"\n                }), \" to \", _jsx(_components.code, {\n                  children: \"+1.7E+308\"\n                })]\n              }), _jsxs(_components.td, {\n                children: [_jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"0\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n                }), \" or \", _jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"1\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n                }), \" (\", _jsx(_components.code, {\n                  children: \"true\"\n                }), \" or \", _jsx(_components.code, {\n                  children: \"false\"\n                }), \")\"]\n              }), _jsxs(_components.td, {\n                children: [_jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"-2^7\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">-2^7</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">7</span></span></span></span></span></span></span></span></span></span></span>\"\n                }), \" to \", _jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"2^7-1\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2^7-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">7</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n                })]\n              })]\n            })]\n          })]\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"JavaDocs\",\n            title: \"Primitive Data Types\",\n            url: \"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\"\n          }), _jsx(Resource, {\n            source: \"IUSACO\",\n            title: \"2.2 - Data Types\",\n            children: _jsx(_components.p, {\n              children: \"module is based off this\"\n            })\n          })]\n        }), _jsx(\"center\", {\n          children: _jsx(_components.p, {\n            children: _jsx(_components.strong, {\n              children: \"Java: Common Primitive Data Types\"\n            })\n          })\n        }), _jsx(_components.p, {\n          children: \"For more primitive data types, check the the first resource in the table above.\"\n        }), _jsx(\"br\", {}), \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", _jsxs(_components.table, {\n          children: [_jsx(_components.thead, {\n            children: _jsxs(_components.tr, {\n              children: [_jsx(_components.th, {\n                children: _jsx(_components.em, {\n                  children: \"Types\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"int\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"long\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"double\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"boolean\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"char\"\n                })\n              })]\n            })\n          }), _jsxs(_components.tbody, {\n            children: [_jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Description\"\n              }), _jsx(_components.td, {\n                children: \"32-bit integer\"\n              }), _jsx(_components.td, {\n                children: \"64-bit integer\"\n              }), _jsx(_components.td, {\n                children: \"Double-precision float\"\n              }), _jsx(_components.td, {\n                children: \"True/False value\"\n              }), _jsx(_components.td, {\n                children: \"16-bit Unicode character\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Size (bytes)\"\n              }), _jsx(_components.td, {\n                children: \"4\"\n              }), _jsx(_components.td, {\n                children: \"8\"\n              }), _jsx(_components.td, {\n                children: \"8\"\n              }), _jsx(_components.td, {\n                children: \"1 bit(*)\"\n              }), _jsx(_components.td, {\n                children: \"2\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Range\"\n              }), _jsxs(_components.td, {\n                children: [_jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"-2^{31}\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">-2^{31}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">31</span></span></span></span></span></span></span></span></span></span></span></span>\"\n                }), \" to \", _jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"2^{31}-1\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2^{31}-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">31</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n                })]\n              }), _jsxs(_components.td, {\n                children: [_jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"-2^{63}\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">-2^{63}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">63</span></span></span></span></span></span></span></span></span></span></span></span>\"\n                }), \" to \", _jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"2^{63}-1\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2^{63}-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">63</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n                })]\n              }), _jsxs(_components.td, {\n                children: [_jsx(_components.code, {\n                  children: \"-1.7E+308\"\n                }), \" to \", _jsx(_components.code, {\n                  children: \"+1.7E+308\"\n                })]\n              }), _jsx(_components.td, {\n                children: \"true/false\"\n              }), _jsxs(_components.td, {\n                children: [_jsx(_components.code, {\n                  children: \"\\\\u0000\"\n                }), \" to \", _jsx(_components.code, {\n                  children: \"\\\\uffff\"\n                }), \" (\", _jsx(MATHSPAN, {\n                  className: \"math math-inline\",\n                  latex: \"0-65535\",\n                  children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mo>−</mo><mn>65535</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0-65535</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">65535</span></span></span></span>\"\n                }), \")\"]\n              })]\n            })]\n          })]\n        }), _jsx(_components.p, {\n          children: \"*Note: It's unlikely that booleans will actually use only 1 bit of memory, as\\r\\nin most cases data types must be aligned to bytes. However, only one bit of\\r\\ninformation can be stored in them.\"\n        })]\n      }), _jsxs(PySection, {\n        children: [_jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"IUSACO\",\n            title: \"2.2 - Data Types\",\n            children: _jsx(_components.p, {\n              children: \"module is based off this\"\n            })\n          }), _jsx(Resource, {\n            starred: true,\n            source: \"Python\",\n            title: \"Built-in Types\",\n            url: \"https://docs.python.org/3/library/stdtypes.html\"\n          })]\n        }), _jsx(\"br\", {}), \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", _jsxs(_components.table, {\n          children: [_jsx(_components.thead, {\n            children: _jsxs(_components.tr, {\n              children: [_jsx(_components.th, {\n                children: _jsx(_components.em, {\n                  children: \"Types\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"int\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"float\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"bool\"\n                })\n              }), _jsx(_components.th, {\n                children: _jsx(_components.code, {\n                  children: \"str\"\n                })\n              })]\n            })\n          }), _jsxs(_components.tbody, {\n            children: [_jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Description\"\n              }), _jsx(_components.td, {\n                children: \"Arbitrary-size integer\"\n              }), _jsx(_components.td, {\n                children: \"Double-precision (64 bit) IEEE 754 float\"\n              }), _jsx(_components.td, {\n                children: \"True/False value\"\n              }), _jsx(_components.td, {\n                children: \"String\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Values\"\n              }), _jsx(_components.td, {\n                children: \"Any integer\"\n              }), _jsxs(_components.td, {\n                children: [_jsx(_components.code, {\n                  children: \"-1.7E+308\"\n                }), \" to \", _jsx(_components.code, {\n                  children: \"+1.7E+308\"\n                })]\n              }), _jsx(_components.td, {\n                children: \"true/false\"\n              }), _jsx(_components.td, {\n                children: \"Any length of text\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are several main \", _jsx(_components.strong, {\n        children: \"data types\"\n      }), \" that are used in contests: integers,\\r\\nfloating point numbers, booleans, characters, and strings. Assuming that you are\\r\\nfamiliar with the language you are using, this should be mostly review.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The normal \", _jsx(_components.strong, {\n        children: \"32-bit integer\"\n      }), \" data type (\", _jsx(_components.code, {\n        children: \"int\"\n      }), \" in C++ and Java) supports values\\r\\nbetween \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"-2\\\\,147\\\\,483\\\\,648\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><mn>2</mn><mtext> </mtext><mn>147</mn><mtext> </mtext><mn>483</mn><mtext> </mtext><mn>648</mn></mrow><annotation encoding=\\\"application/x-tex\\\">-2\\\\,147\\\\,483\\\\,648</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\">2</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">147</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">483</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">648</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2\\\\,147\\\\,483\\\\,647\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn><mtext> </mtext><mn>147</mn><mtext> </mtext><mn>483</mn><mtext> </mtext><mn>647</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2\\\\,147\\\\,483\\\\,647</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">147</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">483</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">647</span></span></span></span>\"\n      }), \", which is roughly equal to\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\pm 2 \\\\cdot 10^9\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>±</mo><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pm 2 \\\\cdot 10^9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">±</span><span class=\\\"mord\\\">2</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some problems require you to use \", _jsx(_components.strong, {\n        children: \"64-bit integers\"\n      }), \" (\", _jsx(_components.code, {\n        children: \"long long\"\n      }), \" in C++ and\\r\\n\", _jsx(_components.code, {\n        children: \"long\"\n      }), \" in Java) instead of 32-bit integers (\", _jsx(_components.code, {\n        children: \"int\"\n      }), \"). 64-bit integers are less\\r\\nlikely to have overflow issues, since they can store any number between\\r\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"-9\\\\,223\\\\,372\\\\,036\\\\,854\\\\,775\\\\,808\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>−</mo><mn>9</mn><mtext> </mtext><mn>223</mn><mtext> </mtext><mn>372</mn><mtext> </mtext><mn>036</mn><mtext> </mtext><mn>854</mn><mtext> </mtext><mn>775</mn><mtext> </mtext><mn>808</mn></mrow><annotation encoding=\\\"application/x-tex\\\">-9\\\\,223\\\\,372\\\\,036\\\\,854\\\\,775\\\\,808</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord\\\">9</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">223</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">372</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">036</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">854</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">775</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">808</span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"9\\\\,223\\\\,372\\\\,036\\\\,854\\\\,775\\\\,807\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>9</mn><mtext> </mtext><mn>223</mn><mtext> </mtext><mn>372</mn><mtext> </mtext><mn>036</mn><mtext> </mtext><mn>854</mn><mtext> </mtext><mn>775</mn><mtext> </mtext><mn>807</mn></mrow><annotation encoding=\\\"application/x-tex\\\">9\\\\,223\\\\,372\\\\,036\\\\,854\\\\,775\\\\,807</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">9</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">223</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">372</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">036</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">854</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">775</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">807</span></span></span></span>\"\n      }), \" which\\r\\nis roughly equal to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\pm 9 \\\\times 10^{18}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mo>±</mo><mn>9</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\pm 9 \\\\times 10^{18}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">±</span><span class=\\\"mord\\\">9</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">18</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \". In Python,\\r\\n\", _jsx(_components.a, {\n        href: \"https://docs.python.org/3.4/library/stdtypes.html#numeric-types-int-float-complex\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: _jsx(_components.code, {\n          children: \"int\"\n        })\n      }), \"s\\r\\nhave unlimited size.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Sometimes (but not always) a USACO problem statement (ex.\\r\\n\", _jsx(_components.a, {\n        href: \"http://www.usaco.org/index.php?page=viewproblem2&cpid=1041\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Haircut\"\n      }), \") will\\r\\ncontain a warning such as the following:\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Note that the large size of integers involved in this problem may require the\\r\\nuse of 64-bit integer data types (e.g., a \\\"long long\\\" in C/C++).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Contest problems are usually set such that the 64-bit integer is sufficient, so for lower divisions\\r\\nit might be a good idea to use 64-bit integers in place of 32-bit integers\\r\\neverywhere. Of course, you shouldn't do this when time and/or memory limits are\\r\\ntight, which may be the case in higher divisions of USACO. Also note that in\\r\\nJava, you will need to cast \", _jsx(_components.code, {\n        children: \"long\"\n      }), \" back to \", _jsx(_components.code, {\n        children: \"int\"\n      }), \" when accessing array indices.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Additionally, there exist 16-bit integers (\", _jsx(_components.code, {\n        children: \"short\"\n      }), \" in C++ and Java). However,\\r\\nthese are generally not useful as the extra memory saved by using them is\\r\\nusually negligible. Unsigned integers (\", _jsx(_components.code, {\n        children: \"unsigned int\"\n      }), \", \", _jsx(_components.code, {\n        children: \"unsigned long long\"\n      }), \", etc.)\\r\\nalso exist. They aren't used as frequently, though the 2-fold increase in size is sometimes the difference between overflowing and not overflowing.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Floating point numbers\"\n      }), \" are used to store decimal values. It is important to\\r\\nknow that floating point numbers are not exact, because the binary architecture\\r\\nof computers can only store decimals to a certain precision. Hence, we should\\r\\nalways expect that floating point numbers are slightly off, so it's generally a\\r\\nbad idea to compare two floating-point numbers for exact equality (\", _jsx(_components.code, {\n        children: \"==\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Contest problems will usually accommodate the inaccuracy of floating point\\r\\nnumbers by checking if the \", _jsx(_components.strong, {\n        children: \"absolute\"\n      }), \" or \", _jsx(_components.strong, {\n        children: \"relative\"\n      }), \" difference between your\\r\\noutput and the answer is less than some small constant like \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\epsilon=10^{-9}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>ϵ</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>9</mn></mrow></msup></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\epsilon=10^{-9}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">ϵ</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">−</span><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"If your output is \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \" and the answer is \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"y\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n        }), \", the absolute difference is\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"|x-y|\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"normal\\\">∣</mi><mi>x</mi><mo>−</mo><mi>y</mi><mi mathvariant=\\\"normal\\\">∣</mi></mrow><annotation encoding=\\\"application/x-tex\\\">|x-y|</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mord\\\">∣</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If your output is \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"x\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\\\"application/x-tex\\\">x</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">x</span></span></span></span>\"\n        }), \" and the answer is \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"y\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\\\"application/x-tex\\\">y</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.625em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span></span></span></span>\"\n        }), \", the relative difference is\\r\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\frac{|x-y|}{|y|}\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mfrac><mrow><mi mathvariant=\\\"normal\\\">∣</mi><mi>x</mi><mo>−</mo><mi>y</mi><mi mathvariant=\\\"normal\\\">∣</mi></mrow><mrow><mi mathvariant=\\\"normal\\\">∣</mi><mi>y</mi><mi mathvariant=\\\"normal\\\">∣</mi></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{|x-y|}{|y|}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.53em;vertical-align:-0.52em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.655em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">∣</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mord mtight\\\">∣</span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">∣</span><span class=\\\"mord mathnormal mtight\\\">x</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mord mtight\\\">∣</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.52em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is not the case for USACO, where problems generally have a unique correct\\r\\noutput. So when floating point is necessary, the output format will be something\\r\\nalong the lines of \\\"Print \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^6\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">10^6</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \" times the maximum probability of receiving\\r\\nexactly one accepted invitation, rounded down to the nearest integer.\\\" (ex.\\r\\n\", _jsx(_components.a, {\n        href: \"http://www.usaco.org/index.php?page=viewproblem2&cpid=924\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Cow Dating\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Boolean\"\n      }), \" variables have two possible states: \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"false\"\n      }), \". We'll\\r\\nusually use booleans to mark whether a certain process is done, and arrays of\\r\\nbooleans to mark which components of an algorithm have finished. Booleans\\r\\nrequire 1 byte (8 bits) of storage, not 1 bit, wasting the other 7 bits of\\r\\nstorage. To use less memory, one can use bitsets (\", _jsx(_components.code, {\n        children: \"std::bitset\"\n      }), \" in C++ /\\r\\n\", _jsx(_components.code, {\n        children: \"BitSet\"\n      }), \" in Java). Unfortunately, bitsets are not available in Python.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Character\"\n      }), \" variables represent a single character. They are returned when you\\r\\naccess the character at a certain index within a string. Characters are\\r\\nrepresented using the ASCII standard, which assigns each character to a\\r\\ncorresponding integer. This allows us to do arithmetic with them; for example,\\r\\nboth \", _jsx(_components.code, {\n        children: \"cout << ('f' - 'a');\"\n      }), \" in C++ and \", _jsx(_components.code, {\n        children: \"System.out.print('f' - 'a');\"\n      }), \" in Java\\r\\nwill print \", _jsx(_components.code, {\n        children: \"5\"\n      }), \". In Java, characters are 16 bits, while in C/C++, characters are\\r\\n8 bits.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Strings\"\n      }), \" are effectively arrays of characters. You can easily access the character at a certain\\r\\nindex and take substrings of the string (\", _jsx(_components.code, {\n        children: \"charAt()\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"substring()\"\n      }), \" in Java).\"]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"Data Types","author":"Darren Yao","contributors":null,"id":"data-types","prerequisites":["running-code-online"],"description":"Overview of the basic data types needed for competitive programming.","frequency":null},"parent":{"name":"Data_Types","relativePath":"1_General/Data_Types.mdx"},"fields":{"division":"general"},"toc":{"cpp":[],"java":[],"py":[]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"data-types"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}