{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/debugging-lang",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*See [this](https://codeforces.com/blog/entry/83241) CF blog post and*/\n/*Of course, we can use `-fsanitize=address` together with `-fsanitize=undefined` and `-ggdb`:\n\n```\n-ggdb -fsanitize=address,undefined\n```\n*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"debugging-lang\", title = \"Debugging (Language-Specific)\", author = \"Benjamin Qi, Aaron Chew, Aryansh Shrivastava, Owen Wang\", description = \"Identifying errors within your program and how to avoid them in the first place.\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    em: \"em\",\n    h4: \"h4\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Warning: _missingComponent(\"Warning\"),\n    Spoiler: _missingComponent(\"Spoiler\")\n  }, _props.components), {Resources, Resource, HeaderLink, LanguageSection, CPPSection, JavaSection, PySection, Warning, Spoiler, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"AryanshS\",\n        url: \"https://sendtoaryansh.gitbook.io/informatics-notes/debugging-correctly\",\n        title: \"Debugging Correctly\",\n        children: _jsx(_components.p, {\n          children: \"Some parts were taken from here.\"\n        })\n      }), _jsx(Resource, {\n        source: \"LCPP\",\n        url: \"https://www.learncpp.com/cpp-tutorial/basic-debugging-tactics/\",\n        title: \"3.4 - A Strategy for Debugging\",\n        children: _jsx(_components.p, {\n          children: \"How to add print statements.\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"style\",\n      children: [_jsx(_components.a, {\n        href: \"#style\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Style\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CF\",\n        title: \"Competitive C++ Manifesto: A Style Guide\",\n        url: \"64218\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Contains many important gems.\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"printing-variables\",\n      children: [_jsx(_components.a, {\n        href: \"#printing-variables\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Printing Variables\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"basic-print-statements\",\n      children: [_jsx(_components.a, {\n        href: \"#basic-print-statements\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Basic Print Statements\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The most basic way that you might debug is adding a print statement. This is\\r\\ngreat and serves the purpose for the most part. For instance, we can write the\\r\\nbelow to check the value of \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" at a point in our code.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\nusing namespace std;\\r\\n\\r\\nint x = 10;  // pretend this holds some important variable\\r\\n\\r\\nvoid dbg() {\\r\\n\\tcout << \\\"x is \\\" << x << endl; \\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tdbg();  // outputs 10\\r\\n\\tx = 5000;\\r\\n\\tdbg();  // now outputs 5000\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"public class Main {\\r\\n\\tstatic int x = 10;  // pretend this holds some important variable\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tdbg();  // outputs 10\\r\\n\\t\\tx = 5000;\\r\\n\\t\\tdbg();  // now outputs 5000\\r\\n\\t}\\r\\n\\r\\n\\tstatic void dbg() {\\r\\n\\t\\tSystem.out.println(x);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"x = 10  # pretend this holds some important variable\\r\\n\\r\\ndef dbg():\\r\\n\\tprint(x)\\r\\n\\r\\ndbg()  # outputs 10\\r\\nx = 5000\\r\\ndbg()  # now outputs 5000\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Such print statements are great on a basic level, and we can comment or define\\r\\nthem out of our main code when we need to compile and execute a more final\\r\\nversion of our code.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, as great as print statements are, they are annoying to work with and\\r\\nefficiently separate from the actual parts of our code. This is important for\\r\\nexample when we want an online judge (OJ) to read our output.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"standard-error-stream\",\n      children: [_jsx(_components.a, {\n        href: \"#standard-error-stream\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Standard Error Stream\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The standard error stream is a quick fix to this. Instead of\\r\\nprinting in the standard output stream, we can print in a whole new stream\\r\\ncalled the standard error stream instead.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\nusing namespace std;\\r\\n\\r\\nint x = 10;\\r\\n\\r\\nvoid dbg() {\\r\\n\\tcerr << \\\"x is \\\" << x << endl; \\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tdbg();\\r\\n\\tx = 5000;\\r\\n\\tdbg();\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"public class Main {\\r\\n\\tstatic int x = 10;\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tdbg();\\r\\n\\t\\tx = 5000;\\r\\n\\t\\tdbg();\\r\\n\\t}\\r\\n\\r\\n\\tstatic void dbg() {\\r\\n\\t\\tSystem.err.println(x);\\r\\n\\t}\\r\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"import sys\\r\\n\\r\\nx = 10\\r\\n\\r\\ndef dbg():\\r\\n\\tprint(x, file=sys.stderr)\\r\\n\\r\\ndbg()  # outputs 10\\r\\nx = 5000\\r\\ndbg()  # now outputs 5000\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Try running this program and you might be confused about the difference. The\\r\\ncontent in the error stream appears right alongside that in the standard output\\r\\nstream. But this is the beauty of it! And the best thing about it is, if we\\r\\nsubmit this program to an OJ, it won't notice the output in the error stream\\r\\nat all!\"\n    }), \"\\n\", _jsx(Warning, {\n      children: _jsx(_components.p, {\n        children: \"Printing too much content (even to the error stream) can cause TLE when\\r\\nsubmitting to an OJ.\"\n      })\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h3, {\n          id: \"debug-template\",\n          children: [_jsx(_components.a, {\n            href: \"#debug-template\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Debug Template\"]\n        }), _jsxs(_components.p, {\n          children: [\"As C++ does not contain built-in print functions for many of its built-in\\r\\ndata structures, it would be good to have some prewritten code to print them.\\r\\n\", _jsx(_components.a, {\n            href: \"https://gist.github.com/SansPapyrus683/61b65d4d7ec223b48ebf5c3bb382ba8d\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"This\"\n          }), \"\\r\\ntemplate is rather easy to use. It includes support for basically all of the\\r\\nneeded data structures in competitive programming. Here's how you would use it:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\n#include <vector>\\r\\n\\r\\n#include \\\"debugging.h\\\"\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tvector<int> arr{1, 2, 3, 4};\\r\\n\\tcout << arr << endl;  // just feed it into cout like any other variable\\r\\n}\\n\"\n          })\n        }), _jsx(Warning, {\n          children: _jsx(_components.p, {\n            children: \"You are not allowed to use pre-written code for USACO contests, so this template\\r\\nshould only be used for other online contests.\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"getting-the-line-number\",\n          children: [_jsx(_components.a, {\n            href: \"#getting-the-line-number\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Getting the Line Number\"]\n        }), _jsxs(_components.p, {\n          children: [\"Sometimes, you'd like to know around which line your code is erroring at.\\r\\nTo print the line number, you can use the \", _jsx(_components.code, {\n            children: \"__LINE__\"\n          }), \" macro like so:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <iostream>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tcout << __LINE__ << endl;  // outputs 5, the current line number\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.h3, {\n          id: \"checking-for-oob\",\n          children: [_jsx(_components.a, {\n            href: \"#checking-for-oob\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Checking for OOB\"]\n        }), _jsxs(_components.p, {\n          children: [\"C++ usually silently fails (or segfaults) when you access or write to a\\r\\nvector at an index that's out-of-bounds (writing to an invalid index is called\\r\\n\", _jsx(_components.a, {\n            href: \"https://en.wikipedia.org/wiki/Buffer_overflow\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"buffer overflow\"\n          }), \").\"]\n        }), _jsx(_components.p, {\n          children: \"For example, the following code doesn't behave as expected:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tvector<int> invalid_vec{1};\\r\\n\\tvector<int> valid_vec{1234};\\r\\n\\tcout << valid_vec[0] << \\\"\\\\n\\\";  // outputs 1234\\r\\n\\tfor (int i = 0; i < 10; i++) {\\r\\n\\t\\tinvalid_vec[i] = i;\\r\\n\\t}\\r\\n\\tcout << valid_vec[0] << \\\"\\\\n\\\";  // errors\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"To prevent this, you can use\\r\\n\", _jsx(_components.a, {\n            href: \"https://www.cplusplus.com/reference/vector/vector/at\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"vector::at\"\n          }), \" instead of\\r\\n\", _jsx(_components.a, {\n            href: \"https://www.cplusplus.com/reference/vector/vector/operator%5B%5D\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"vector::operator[]\"\n          }), \".\"]\n        }), _jsx(_components.p, {\n          children: \"If we use this in our following code segment like so:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tvector<int> invalid_vec{1};\\r\\n\\tvector<int> valid_vec{1234};\\r\\n\\tcout << valid_vec.at(0) << \\\"\\\\n\\\";  // outputs 1234\\r\\n\\tfor (int i = 0; i < 10; i++) {\\r\\n\\t\\tinvalid_vec.at(i) = i;\\r\\n\\t}\\r\\n\\tcout << valid_vec.at(0) << \\\"\\\\n\\\";  // errors\\r\\n}\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"C++ will now check the bounds when we access the vectors and will\\r\\nproduce the following output:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"1234\\r\\nterminate called after throwing an instance of 'std::out_of_range'\\r\\n  what():  vector::_M_range_check: __n (which is 1) >= this->size() (which is 1)\\r\\n1 zsh: abort      ./$1 $@[2,-1]\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"If you want to find out the exact line at which this error occurs, you can use\\r\\na debugger such as \", _jsx(_components.code, {\n            children: \"gdb\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"lldb\"\n          }), \".\"]\n        }), _jsxs(_components.h3, {\n          id: \"unspecified-evaluation-order\",\n          children: [_jsx(_components.a, {\n            href: \"#unspecified-evaluation-order\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Unspecified Evaluation Order\"]\n        }), _jsxs(_components.p, {\n          children: [\"Consider the following code stored in \", _jsx(_components.code, {\n            children: \"bad.cpp\"\n          }), \":\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nvector<int> res{-1};\\r\\n\\r\\nint add_element() {\\r\\n\\tres.push_back(-1);\\r\\n\\treturn res.size() - 1;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n\\tfor (int i = 0; i < 5; ++i) {\\r\\n\\t\\tres[i] = add_element();\\r\\n\\t\\tcout << i << \\\" \\\" << res[i] << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"Compiling and running the above code with C++17 as so:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"g++ -std=c++17 bad.cpp -o bad && ./bad\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"gives the intended output:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"0 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"But compiling and running with C++14 like this:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"g++ -std=c++14 bad.cpp -o bad && ./bad\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"gives:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"0 -1\\r\\n1 -1\\r\\n2 3\\r\\n3 -1\\r\\n4 5\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"However, the code works correctly if you save the result of \", _jsx(_components.code, {\n            children: \"add_element()\"\n          }), \" to an\\r\\nintermediate variable.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"int main() {\\r\\n\\tfor (int i = 0; i < 10; ++i) {\\r\\n\\t\\tint tmp = add_element();\\r\\n\\t\\tres[i] = tmp;\\r\\n\\t\\tcout << i << \\\" \\\" << res[i] << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"The problem is that \", _jsx(_components.code, {\n            children: \"res[i] = add_element();\"\n          }), \" only works if \", _jsx(_components.code, {\n            children: \"add_element()\"\n          }), \" is\\r\\nevaluated before \", _jsx(_components.code, {\n            children: \"res[i]\"\n          }), \" is. If \", _jsx(_components.code, {\n            children: \"res[i]\"\n          }), \" is evaluated first, and \", _jsx(_components.em, {\n            children: \"then\"\n          }), \"\\r\\n\", _jsx(_components.code, {\n            children: \"add_element()\"\n          }), \" results in the memory for \", _jsx(_components.code, {\n            children: \"res\"\n          }), \" being reallocated, then \", _jsx(_components.code, {\n            children: \"res[i]\"\n          }), \"\\r\\nis invalidated. The order in which \", _jsx(_components.code, {\n            children: \"res[i]\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"add_element()\"\n          }), \" are evaluated is\\r\\nunspecified (at least before C++17).\"]\n        }), _jsxs(_components.p, {\n          children: [\"See\\r\\n\", _jsx(_components.a, {\n            href: \"https://stackoverflow.com/questions/38501587/what-are-the-evaluation-order-guarantees-introduced-by-c17#:~:text=In%20C%2B%2B17%2C%20it,of%20the%20object%20is%20evaluated\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"this\"\n          }), \"\\r\\nStackOverflow post for some discussion about why this is the case\\r\\n(\", _jsx(_components.a, {\n            href: \"https://stackoverflow.com/questions/18040037\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"here\"\n          }), \"'s a similar issue).\"]\n        }), _jsxs(_components.p, {\n          children: [\"You also may come across this issue when trying to create a\\r\\n\", _jsx(_components.a, {\n            href: \"https://codeforces.com/blog/entry/83241#comment-705458\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"trie\"\n          }), \".\"]\n        })]\n      }), _jsx(JavaSection, {}), _jsx(PySection, {})]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"stress-testing\",\n      children: [_jsx(_components.a, {\n        href: \"#stress-testing\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Stress Testing\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If your code is getting WA, one option is to run your buggy code against another\\r\\nthat you're relatively confident is correct on randomly generated data until you\\r\\nfind a difference. See the video for details.\"\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Errichto\",\n        title: \"Video - How to test your solution\",\n        url: \"https://www.youtube.com/watch?v=JXTVOyQpSGM\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Using a script for stress testing.\"\n        })\n      }), _jsx(Resource, {\n        source: \"Errichto\",\n        title: \"Asking for help FAQ\",\n        url: \"https://codeforces.com/blog/entry/64993\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"Contains some parts from the above videos.\"\n        })\n      }), _jsx(Resource, {\n        source: \"Benq\",\n        url: \"https://github.com/bqi343/USACO/blob/master/Implementations/content/contest/stress.sh\",\n        title: \"Stress Testing\",\n        children: _jsx(_components.p, {\n          children: \"The script from the above video.\"\n        })\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsx(_components.p, {\n          children: \"Here is the script that was mentioned in the video:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"# A and B are executables you want to compare, gen takes int\\r\\n# as command line arg. Usage: 'sh stress.sh'\\r\\nfor ((i = 1; ; ++i)); do  # if they are same then will loop forever\\r\\n    echo $i\\r\\n    ./gen $i > int\\r\\n    ./A < int > out1\\r\\n    ./B < int > out2\\r\\n    diff -w out1 out2 || break\\r\\n    # diff -w <(./A < int) <(./B < int) || break\\r\\ndone\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"We can modify this to work for other situations. For example, if you have\\r\\ninput and output files (ex. \", _jsx(_components.code, {\n            children: \"1.in\"\n          }), \", \", _jsx(_components.code, {\n            children: \"1.out\"\n          }), \", \", _jsx(_components.code, {\n            children: \"2.in\"\n          }), \", \", _jsx(_components.code, {\n            children: \"2.out\"\n          }), \", ..., \", _jsx(_components.code, {\n            children: \"10.out\"\n          }), \" for\\r\\nold USACO problems) then you can use the following:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"# A is the executable you want to test\\r\\nfor ((i = 1; i <= 10; ++i)); do\\r\\n    echo $i\\r\\n    ./A < $i.in > out\\r\\n    diff -w out $i.out || break\\r\\ndone\\r\\necho \\\"ALL TESTS PASSED\\\"\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"The following will break on the first input file such that the produced output\\r\\nfile is empty.\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"for((i = 1; ; ++i)); do\\r\\n\\techo $i\\r\\n\\t./gen $i > int\\r\\n\\t./A < int > out\\r\\n\\tif ! [[ -s \\\"out\\\" ]] ; then\\r\\n\\t\\techo \\\"no output\\\"\\r\\n\\t\\tbreak\\r\\n\\tfi ;\\r\\ndone\\n\"\n          })\n        }), _jsxs(Warning, {\n          children: [_jsxs(_components.p, {\n            children: [\"This won't work if you're using Windows. Instead, you can use what\\r\\n\", _jsx(_components.a, {\n              href: \"https://www.youtube.com/watch?v=JU3HY5GLVnY&t=58m58s\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"tourist\"\n            }), \" does:\"]\n          }), _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \":: save this in test.bat\\r\\n\\r\\n@echo off\\r\\ngen > in\\r\\nyour_sol out\\r\\ncorrect_sol correct_out\\r\\nfc out correct_out\\r\\nif errorlevel 1 exit\\r\\ntest\\n\"\n            })\n          })]\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Here is an script to test a Java program with input and output files. You will\\r\\nneed to put the \", _jsx(_components.code, {\n            children: \".java\"\n          }), \", this script, and the input and output files (\", _jsx(_components.code, {\n            children: \"1.in\"\n          }), \",\\r\\n\", _jsx(_components.code, {\n            children: \"1.out\"\n          }), \", etc.) in the same directory:\"]\n        }), _jsx(Spoiler, {\n          title: \"Java testing script\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"#!/bin/bash\\r\\nRED=\\\"\\\\033[0;31m\\\"\\r\\nGREEN=\\\"\\\\033[0;32m\\\"\\r\\nNC=\\\"\\\\033[0m\\\"\\r\\n\\r\\nwrong=0\\r\\n\\r\\nfileName=$(ls | grep java)\\r\\n\\r\\nIFS=\\\".\\\"\\r\\nread -ra fileArr <<< $fileName\\r\\n\\r\\nclassName=${fileArr[0]}\\r\\n\\r\\nloop=true\\r\\ntestCase=1\\r\\n\\r\\nwhile $loop; do\\r\\n\\t# Does this test case exist?\\r\\n\\tif [[ ! -e \\\"$testCase.in\\\" || ! -e \\\"$testCase.out\\\" ]]; then\\r\\n\\t\\t# If not, then stop.\\r\\n\\t\\tbreak;\\r\\n\\tfi\\r\\n\\r\\n\\t# If so, then test.\\r\\n\\techo \\\"Testing: $testCase\\\"\\r\\n\\tcp $testCase.in $className.in\\r\\n\\tjava $className.java < $className.in > $className.out\\r\\n\\r\\n\\tdiffOut=$(diff -w $testCase.out $className.out 2>&1)\\r\\n\\r\\n\\tif [[ $diffOut == \\\"\\\" ]]; then\\r\\n\\t\\techo -e \\\"$GREEN** PASSED **$NC\\\\n\\\"\\r\\n\\telse\\r\\n\\t\\techo -e \\\"$RED** FAILED **$NC\\\"\\r\\n\\t\\techo -e \\\"$diffOut\\\\n\\\"\\r\\n\\t\\twrong=$((wrong += 1))\\r\\n\\tfi\\r\\n\\r\\n\\ttestCase=$((testCase += 1))\\r\\ndone\\r\\n\\r\\n# Check if any wrong.\\r\\nif [[ wrong -gt 0 ]]; then\\r\\n\\tif [[ $wrong == 1 ]]; then\\r\\n\\t\\techo -e \\\"$RED*** $wrong/$testCase TEST CASE FAILED ***$NC\\\"\\r\\n\\telse\\r\\n\\t\\techo -e \\\"$RED*** $wrong/$((testCase - 1)) TEST CASES FAILED ***$NC\\\"\\r\\n\\tfi\\r\\nelse\\r\\n\\techo -e \\\"$GREEN*** ALL TEST CASES PASSED ***$NC\\\"\\r\\nfi\\n\"\n            })\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to learn how to write these scripts yourself, you can check\\r\\n\", _jsx(_components.a, {\n        href: \"/general/cpp-command#linux\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"assertions--warnings\",\n          children: [_jsx(_components.a, {\n            href: \"#assertions--warnings\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Assertions & Warnings\"]\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            title: \"Asserts\",\n            source: \"LCpp\",\n            url: \"https://www.learncpp.com/cpp-tutorial/7-12a-assert-and-static_assert/\",\n            starred: true,\n            children: _jsxs(_components.p, {\n              children: [\"Includes \", _jsx(_components.code, {\n                children: \"static_assert\"\n              }), \" and \", _jsx(_components.code, {\n                children: \"#define NDEBUG\"\n              }), \".\"]\n            })\n          }), _jsx(Resource, {\n            title: \"5 - Diagnostics\",\n            source: \"GCC\",\n            url: \"https://gcc.gnu.org/onlinedocs/cpp/Diagnostics.html\",\n            starred: true,\n            children: _jsxs(_components.p, {\n              children: [\"Talks about \", _jsx(_components.code, {\n                children: \"#warning\"\n              }), \" and \", _jsx(_components.code, {\n                children: \"#error\"\n              }), \".\"]\n            })\n          })]\n        }), _jsxs(_components.h2, {\n          id: \"gcc-compilation-options\",\n          children: [_jsx(_components.a, {\n            href: \"#gcc-compilation-options\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"GCC Compilation Options\"]\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"CF\",\n            title: \"andreyv - Catching Mistakes with GCC\",\n            url: \"https://codeforces.com/blog/entry/15547\",\n            starred: true,\n            children: _jsx(_components.p, {\n              children: \"Includes all the options mentioned below.\"\n            })\n          })\n        }), _jsxs(_components.p, {\n          children: [\"You can also check what options\\r\\n\", _jsx(_components.a, {\n            href: \"https://codeforces.com/blog/entry/64993\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"Errichto\"\n          }), \" and\\r\\n\", _jsx(_components.a, {\n            href: \"https://gist.github.com/ecnerwala/a3c6332ac626bc448165\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"ecnerwala\"\n          }), \" use.\"]\n        }), _jsxs(_components.h3, {\n          id: \"warning-options\",\n          children: [_jsx(_components.a, {\n            href: \"#warning-options\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Warning Options\"]\n        }), _jsxs(_components.p, {\n          children: [\"In this section we'll go over some extra compilations you can add to your\\r\\n\", _jsx(_components.code, {\n            children: \"g++\"\n          }), \" compiling to aid in debugging. You can find the official documentation\\r\\nfor said options \", _jsx(_components.a, {\n            href: \"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"here\"\n          }), \".\"]\n        }), _jsx(_components.p, {\n          children: \"Some other options that you might find helpful\\r\\n(but we won't go over) are the following:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"-Wall -Wextra -Wshadow -Wconversion -Wfloat-equal -Wduplicated-cond -Wlogical-op\\n\"\n          })\n        }), _jsxs(_components.h4, {\n          id: \"-wshadow\",\n          children: [_jsx(_components.a, {\n            href: \"#-wshadow\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.code, {\n            children: \"-Wshadow\"\n          })]\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"LCPP\",\n            url: \"ttps://www.learncpp.com/cpp-tutorial/variable-shadowing-name-hiding/\",\n            title: \"6.5 - Variable Shadowing (Name Hiding)\",\n            starred: true\n          })\n        }), _jsx(_components.p, {\n          children: \"Avoid variable shadowing!\"\n        }), _jsxs(_components.h3, {\n          id: \"other-options\",\n          children: [_jsx(_components.a, {\n            href: \"#other-options\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Other Options\"]\n        }), _jsx(_components.p, {\n          children: \"Let's give some examples of what each of these do.\"\n        }), _jsx(Warning, {\n          children: _jsx(_components.p, {\n            children: \"These can slow down compilation time even runtime, so don't enable these when\\r\\nspeed is of the essence (ex. for Facebook Hacker Cup).\"\n          })\n        }), _jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [_jsx(_components.code, {\n              children: \"-fsanitize\"\n            }), \" flags\\r\\n\", _jsx(_components.a, {\n              href: \"https://github.com/msys2/MINGW-packages/issues/3163\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"don't work with MinGW\"\n            }), \". If\\r\\nyou're using Windows but still want to use these flags, consider using\\r\\n\", _jsx(_components.a, {\n              href: \"https://repl.it/\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"an online compiler\"\n            }), \" (or installing Linux) instead.\"]\n          })\n        }), _jsxs(_components.h4, {\n          id: \"-fsanitizeundefined\",\n          children: [_jsx(_components.a, {\n            href: \"#-fsanitizeundefined\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.a, {\n            href: \"https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"-fsanitize=undefined\"\n            })\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"The following code stored in \", _jsx(_components.code, {\n            children: \"prog.cpp\"\n          }), \" gives a segmentation fault.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tvector<int> v;\\r\\n\\tcout << v[-1] << endl;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"g++ prog.cpp -o prog -fsanitize=undefined && ./prog\"\n          }), \" produces:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"/usr/local/Cellar/gcc/9.2.0_1/include/c++/9.2.0/bits/stl_vector.h:1043:34: runtime error: pointer index expression with base 0x000000000000 overflowed to 0xfffffffffffffffc\\r\\nzsh: segmentation fault  ./prog\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"Another example with \", _jsx(_components.code, {\n            children: \"prog.cpp\"\n          }), \" is the following:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint v[5];\\r\\n\\tcout << v[5] << endl;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"g++ prog.cpp -o prog -fsanitize=undefined && ./prog\"\n          }), \" produces:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"prog.cpp:6:13: runtime error: index 5 out of bounds for type 'int [5]'\\r\\nprog.cpp:6:13: runtime error: load of address 0x7ffee0a77a94 with insufficient space for an object of type 'int'\\r\\n0x7ffee0a77a94: note: pointer points here\\r\\n  b0 7a a7 e0 fe 7f 00 00  25 b0 a5 0f 01 00 00 00  b0 7a a7 e0 fe 7f 00 00  c9 8c 20 72 ff 7f 00 00\\r\\n              ^\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"-fsanitize=undefined\"\n          }), \" also catches integer overflow. Let \", _jsx(_components.code, {\n            children: \"prog.cpp\"\n          }), \" be the\\r\\nfollowing:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint x = 1 << 30;\\r\\n\\tcout << x + x << endl;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"g++ prog.cpp -o prog -fsanitize=undefined && ./prog\"\n          }), \" produces:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"prog.cpp:6:15: runtime error: signed integer overflow: 1073741824 * 2 cannot be represented in type 'int'\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"We can also use \", _jsx(_components.code, {\n            children: \"-fsanitize=undefined\"\n          }), \" with \", _jsx(_components.code, {\n            children: \"-fsanitize-recover\"\n          }), \". Error recovery\\r\\nfor \", _jsx(_components.code, {\n            children: \"-fsanitize=undefined\"\n          }), \" is turned on by default, but\"]\n        }), _jsxs(_components.blockquote, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"-fno-sanitize-recover=\"\n            }), \" option can be used to alter this behavior: only\\r\\nthe first detected error is reported and program then exits with a non-zero\\r\\nexit code.\"]\n          }), \"\\n\"]\n        }), _jsxs(_components.p, {\n          children: [\"So if \", _jsx(_components.code, {\n            children: \"prog.cpp\"\n          }), \" is as follows:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tcout << (1 << 32) << endl;\\r\\n\\tcout << (1 << 32) << endl;\\r\\n\\tcout << (1 << 32) << endl;\\r\\n}\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"then\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"g++ -fsanitize=undefined prog.cpp -o prog && ./prog\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"produces:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"prog.cpp: In function 'int main()':\\r\\nprog.cpp:5:12: warning: left shift count >= width of type [-Wshift-count-overflow]\\r\\n    5 |  cout << (1 << 32) << endl;\\r\\n      |           ~^~~~\\r\\nprog.cpp:6:12: warning: left shift count >= width of type [-Wshift-count-overflow]\\r\\n    6 |  cout << (1 << 32) << endl;\\r\\n      |           ~^~~~\\r\\nprog.cpp:7:12: warning: left shift count >= width of type [-Wshift-count-overflow]\\r\\n    7 |  cout << (1 << 32) << endl;\\r\\n      |           ~^~~~\\r\\nprog.cpp:5:12: runtime error: shift exponent 32 is too large for 32-bit type 'int'\\r\\n0\\r\\nprog.cpp:6:12: runtime error: shift exponent 32 is too large for 32-bit type 'int'\\r\\n0\\r\\nprog.cpp:7:12: runtime error: shift exponent 32 is too large for 32-bit type 'int'\\r\\n0\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"while\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"g++ -fsanitize=undefined -fno-sanitize-recover prog.cpp -o prog && ./prog\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"produces:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"prog.cpp: In function 'int main()':\\r\\nprog.cpp:5:12: warning: left shift count >= width of type [-Wshift-count-overflow]\\r\\n    5 |  cout << (1 << 32) << endl;\\r\\n      |           ~^~~~\\r\\nprog.cpp:6:12: warning: left shift count >= width of type [-Wshift-count-overflow]\\r\\n    6 |  cout << (1 << 32) << endl;\\r\\n      |           ~^~~~\\r\\nprog.cpp:7:12: warning: left shift count >= width of type [-Wshift-count-overflow]\\r\\n    7 |  cout << (1 << 32) << endl;\\r\\n      |           ~^~~~\\r\\nprog.cpp:5:12: runtime error: shift exponent 32 is too large for 32-bit type 'int'\\r\\nzsh: abort      ./prog\\n\"\n          })\n        }), _jsxs(_components.h4, {\n          id: \"-fsanitizeaddress--g\",\n          children: [_jsx(_components.a, {\n            href: \"#-fsanitizeaddress--g\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.code, {\n            children: \"-fsanitize=address -g\"\n          })]\n        }), _jsx(Warning, {\n          children: _jsxs(_components.p, {\n            children: [\"According to \", _jsx(_components.a, {\n              href: \"https://github.com/msys2/MINGW-packages/issues/3163\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"this issue\"\n            }), \",\\r\\nAddressSanitizer does not appear to be available for MinGW.\"]\n          })\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"GCC\",\n            title: \"3.10 - Options for Debugging Your Program\",\n            url: \"Debugging-Options.html\",\n            children: _jsx(_components.p, {\n              children: \"documentation for -g, -ggdb\"\n            })\n          })\n        }), _jsxs(_components.p, {\n          children: [\"The following code (stored in \", _jsx(_components.code, {\n            children: \"prog.cpp\"\n          }), \") gives a segmentation fault.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tvector<int> v;\\r\\n\\tcout << v[-1] << endl;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"g++ prog.cpp -o prog -fsanitize=address && ./prog\"\n          }), \" produces:\"]\n        }), _jsx(Spoiler, {\n          title: \"AddressSanitizer\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"AddressSanitizer:DEADLYSIGNAL\\r\\n=================================================================\\r\\n==31035==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000106ac6326 bp 0x7ffee913aaa0 sp 0x7ffee913aa20 T0)\\r\\n==31035==The signal is caused by a READ memory access.\\r\\n==31035==Hint: address points to the zero page.\\r\\n    #0 0x106ac6325 in main (prog:x86_64+0x100001325)\\r\\n    #1 0x7fff72208cc8 in start (libdyld.dylib:x86_64+0x1acc8)\\r\\n\\r\\n==31035==Register values:\\r\\nrax = 0xfffffffffffffffc  rbx = 0x00007ffee913aa20  rcx = 0xfffffffffffffffc  rdx = 0x20000fffffffffff\\r\\nrdi = 0x00007ffee913aa40  rsi = 0x1fffffffffffffff  rbp = 0x00007ffee913aaa0  rsp = 0x00007ffee913aa20\\r\\n r8 = 0x0000000000000000   r9 = 0x0000000000000000  r10 = 0x0000000000000000  r11 = 0x0000000000000000\\r\\nr12 = 0x00000fffdd227544  r13 = 0x00007ffee913aa80  r14 = 0x00007ffee913aa20  r15 = 0x0000000000000000\\r\\nAddressSanitizer can not provide additional info.\\r\\nSUMMARY: AddressSanitizer: SEGV (prog:x86_64+0x100001325) in main\\r\\n==31035==ABORTING\\r\\nzsh: abort      ./prog\\n\"\n            })\n          })\n        }), _jsxs(_components.p, {\n          children: [\"For more helpful information we should additionally compile with the \", _jsx(_components.code, {\n            children: \"-g\"\n          }), \" flag,\\r\\nwhich generates a file containing debugging information based on the line\\r\\nnumbering of the program. \", _jsx(_components.code, {\n            children: \"-fsanitize=address\"\n          }), \" can then access the file at\\r\\nruntime and give meaningful errors. This is great because it helps diagnose (or\\r\\n\\\"sanitize\\\" if you will) errors such as out of bounds, exceptions, and\\r\\nsegmentation faults, even indicating precise line numbers. Feel free to delete\\r\\nthe debug file after the run of course.\"]\n        }), _jsx(Spoiler, {\n          title: \"AddressSanitizer with -g\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"AddressSanitizer:DEADLYSIGNAL\\r\\n=================================================================\\r\\n==98773==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x00010a0b5316 bp 0x7ffee5b4ba50 sp 0x7ffee5b4b9d0 T0)\\r\\n==98773==The signal is caused by a READ memory access.\\r\\n==98773==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\r\\n    #0 0x10a0b5316 in main prog.cpp:6\\r\\n    #1 0x7fff6f2c1cc8 in start (libdyld.dylib:x86_64+0x1acc8)\\r\\n\\r\\n==98773==Register values:\\r\\nrax = 0xfffffffffffffffc  rbx = 0x00007ffee5b4b9d0  rcx = 0xfffffffffffffffc  rdx = 0x20000fffffffffff\\r\\nrdi = 0x00007ffee5b4b9f0  rsi = 0x1fffffffffffffff  rbp = 0x00007ffee5b4ba50  rsp = 0x00007ffee5b4b9d0\\r\\n r8 = 0x0000000000000000   r9 = 0x0000000000000000  r10 = 0x0000000000000000  r11 = 0x0000000000000000\\r\\nr12 = 0x00007ffee5b4ba30  r13 = 0x00000fffdcb6973a  r14 = 0x00007ffee5b4b9d0  r15 = 0x0000000000000000\\r\\nAddressSanitizer can not provide additional info.\\r\\nSUMMARY: AddressSanitizer: SEGV prog.cpp:6 in main\\r\\n==98773==ABORTING\\r\\nzsh: abort      ./prog\\n\"\n            })\n          })\n        }), _jsxs(_components.p, {\n          children: [\"Another example is with \", _jsx(_components.code, {\n            children: \"prog.cpp\"\n          }), \" as the following:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tint v[5];\\r\\n\\tcout << v[5] << endl;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"g++ prog.cpp -o prog -fsanitize=address -g && ./prog\"\n          }), \" produces:\"]\n        }), _jsx(Spoiler, {\n          title: \"AddressSanitizer with -g\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"=================================================================\\r\\n==51610==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffee99819a4 at pc 0x00010627ece5 bp 0x7ffee9981960 sp 0x7ffee9981958\\r\\nREAD of size 4 at 0x7ffee99819a4 thread T0\\r\\n    #0 0x10627ece4 in main prog.cpp:6\\r\\n    #1 0x7fff68e63cc8 in start (libdyld.dylib:x86_64+0x1acc8)\\r\\n\\r\\nAddress 0x7ffee99819a4 is located in stack of thread T0 at offset 52 in frame\\r\\n    #0 0x10627ec35 in main prog.cpp:4\\r\\n\\r\\n  This frame has 1 object(s):\\r\\n    [32, 52) 'v' (line 5) <== Memory access at offset 52 overflows this variable\\r\\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\\r\\n      (longjmp and C++ exceptions *are* supported)\\r\\nSUMMARY: AddressSanitizer: stack-buffer-overflow prog.cpp:6 in main\\r\\nShadow bytes around the buggy address:\\r\\n  0x1fffdd3302e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\n  0x1fffdd3302f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\n  0x1fffdd330300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\n  0x1fffdd330310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\n  0x1fffdd330320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1\\r\\n=>0x1fffdd330330: f1 f1 00 00[04]f3 f3 f3 f3 f3 00 00 00 00 00 00\\r\\n  0x1fffdd330340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\n  0x1fffdd330350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\n  0x1fffdd330360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\n  0x1fffdd330370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\n  0x1fffdd330380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\r\\nShadow byte legend (one shadow byte represents 8 application bytes):\\r\\n  Addressable:           00\\r\\n  Partially addressable: 01 02 03 04 05 06 07\\r\\n  Heap left redzone:       fa\\r\\n  Freed heap region:       fd\\r\\n  Stack left redzone:      f1\\r\\n  Stack mid redzone:       f2\\r\\n  Stack right redzone:     f3\\r\\n  Stack after return:      f5\\r\\n  Stack use after scope:   f8\\r\\n  Global redzone:          f9\\r\\n  Global init order:       f6\\r\\n  Poisoned by user:        f7\\r\\n  Container overflow:      fc\\r\\n  Array cookie:            ac\\r\\n  Intra object redzone:    bb\\r\\n  ASan internal:           fe\\r\\n  Left alloca redzone:     ca\\r\\n  Right alloca redzone:    cb\\r\\n  Shadow gap:              cc\\r\\n==51610==ABORTING\\r\\nzsh: abort      ./prog\\n\"\n            })\n          })\n        }), _jsxs(_components.h4, {\n          id: \"-d_glibcxx_debug\",\n          children: [_jsx(_components.a, {\n            href: \"#-d_glibcxx_debug\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.code, {\n            children: \"-D_GLIBCXX_DEBUG\"\n          })]\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"GCC\",\n            title: \"Using Debug Mode\",\n            url: \"https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html#debug_mode.using.mode\",\n            children: _jsx(_components.p, {\n              children: \"documentation for -D_GLIBCXX_DEBUG\"\n            })\n          })\n        }), _jsxs(_components.p, {\n          children: [\"The following \", _jsx(_components.code, {\n            children: \"prog.cpp\"\n          }), \" gives a segmentation fault.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n\\tvector<int> v;\\r\\n\\tcout << v[-1] << endl;\\r\\n}\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"g++ prog.cpp -o prog -D_GLIBCXX_DEBUG && ./prog\"\n          }), \" produces:\"]\n        }), _jsx(Spoiler, {\n          title: \"Debug\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"/usr/local/Cellar/gcc/9.2.0_1/include/c++/9.2.0/debug/vector:427:\\r\\nIn function:\\r\\n    std::__debug::vector<_Tp, _Allocator>::reference\\r\\n    std::__debug::vector<_Tp,\\r\\n    _Allocator>::operator[](std::__debug::vector<_Tp,\\r\\n    _Allocator>::size_type) [with _Tp = int; _Allocator =\\r\\n    std::allocator<int>; std::__debug::vector<_Tp, _Allocator>::reference =\\r\\n    int&; std::__debug::vector<_Tp, _Allocator>::size_type = long unsigned\\r\\n    int]\\r\\n\\r\\nError: attempt to subscript container with out-of-bounds index -1, but\\r\\ncontainer only holds 0 elements.\\r\\n\\r\\nObjects involved in the operation:\\r\\n    sequence \\\"this\\\" @ 0x0x7ffee2503a50 {\\r\\n      type = std::__debug::vector<int, std::allocator<int> >;\\r\\n    }\\r\\nzsh: abort      ./prog\\n\"\n            })\n          })\n        })]\n      }), _jsx(JavaSection, {}), _jsx(PySection, {})]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"debuggers\",\n      children: [_jsx(_components.a, {\n        href: \"#debuggers\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Debuggers\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"LCPP\",\n            title: \"3.6 - Using an integrated debugger\",\n            url: \"https://www.learncpp.com/cpp-tutorial/using-an-integrated-debugger-stepping/\"\n          }), _jsx(Resource, {\n            source: \"Microsoft\",\n            title: \"Debug C++ in Visual Studio Code\",\n            url: \"https://code.visualstudio.com/docs/cpp/cpp-debug\"\n          }), _jsx(Resource, {\n            source: \"Jetbrains\",\n            title: \"Debugging C++ in CLion\",\n            url: \"https://www.jetbrains.com/help/clion/debugging-code.html\"\n          })]\n        })\n      }), _jsx(JavaSection, {\n        children: _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"Microsoft\",\n            title: \"Debugging Java in Visual Studio Code\",\n            url: \"https://code.visualstudio.com/docs/java/java-debugging\"\n          }), _jsx(Resource, {\n            source: \"Jetbrains\",\n            title: \"Debugging Java in IntelliJ\",\n            url: \"https://www.jetbrains.com/help/idea/debugging-your-first-java-application.html\"\n          })]\n        })\n      }), _jsx(PySection, {\n        children: _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"Microsoft\",\n            title: \"Debugging Python in Visual Studio Code\",\n            url: \"https://code.visualstudio.com/docs/python/debugging\"\n          }), _jsx(Resource, {\n            source: \"Jetbrains\",\n            title: \"Debugging Python in PyCharm\",\n            url: \"https://www.jetbrains.com/help/pycharm/part-1-debugging-python-code.html\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using a debugger varies from language to language and even from IDE to different\\r\\nIDE, so we will only go over the basics of a debugger.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A debugger allows you to pause a code in its execution and see the values as a\\r\\ngiven point in the debugger.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To do this, set a \\\"breakpoint\\\" at a certain line of code. When the code runs to\\r\\nthat breakpoint, it will pause and you will be able to inspect all the different\\r\\nvariables at that certain instance.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are two more useful and common operations. Once you are at the breakpoint,\\r\\nyou may want to see what happens after the current line is executed. This would\\r\\nbe the \\\"Step Over\\\" button that will allow you to move to the next line. Say you\\r\\nare at a line with the following code: \", _jsx(_components.code, {\n        children: \"dfs(0, -1)\"\n      }), \", if you click \\\"step over\\\" the\\r\\ndebugger will ignore showing you what happens in this function and go to the\\r\\nnext line. If you click \\\"step in,\\\" however, you will enter the function and be\\r\\nable to step through that function.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In essense, a debugger is a tool to \\\"trace code\\\" for you. It is not much\\r\\ndifferent from just printing the values out at various points in your program.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pros of using a debugger:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"No need to write print statements so you save time\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"You can step through the code in real time\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cons of using a debugger:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"You cannot see the overall \\\"output\\\" of your program at each stage. For\\r\\nexample, if you wanted to see every single value of \", _jsx(_components.code, {\n          children: \"i\"\n        }), \" in the program,\\r\\nyou could not using a debugger.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Most advanced competitive programmers do not use debuggers; it is usually not\\r\\nvery efficient to use one during a contest.\"\n      }), \"\\n\"]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  default: MDXContent\n};\n","frontmatter":{"title":"Debugging (Language-Specific)","author":"Benjamin Qi, Aaron Chew, Aryansh Shrivastava, Owen Wang","contributors":null,"id":"debugging-lang","prerequisites":null,"description":"Identifying errors within your program and how to avoid them in the first place.","frequency":null},"parent":{"name":"Debugging_Lang","relativePath":"1_General/Debugging_Lang.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"Style","slug":"style"},{"depth":2,"value":"Printing Variables","slug":"printing-variables"},{"depth":3,"value":"Basic Print Statements","slug":"basic-print-statements"},{"depth":3,"value":"Standard Error Stream","slug":"standard-error-stream"},{"depth":3,"value":"Debug Template","slug":"debug-template"},{"depth":3,"value":"Getting the Line Number","slug":"getting-the-line-number"},{"depth":3,"value":"Checking for OOB","slug":"checking-for-oob"},{"depth":3,"value":"Unspecified Evaluation Order","slug":"unspecified-evaluation-order"},{"depth":2,"value":"Stress Testing","slug":"stress-testing"},{"depth":2,"value":"Assertions &amp; Warnings","slug":"assertions--warnings"},{"depth":2,"value":"GCC Compilation Options","slug":"gcc-compilation-options"},{"depth":3,"value":"Warning Options","slug":"warning-options"},{"depth":4,"value":"-Wshadow","slug":"-wshadow"},{"depth":3,"value":"Other Options","slug":"other-options"},{"depth":4,"value":"-fsanitize=undefined","slug":"-fsanitizeundefined"},{"depth":4,"value":"-fsanitize=address -g","slug":"-fsanitizeaddress--g"},{"depth":4,"value":"-D_GLIBCXX_DEBUG","slug":"-d_glibcxx_debug"},{"depth":2,"value":"Debuggers","slug":"debuggers"}],"java":[{"depth":2,"value":"Style","slug":"style"},{"depth":2,"value":"Printing Variables","slug":"printing-variables"},{"depth":3,"value":"Basic Print Statements","slug":"basic-print-statements"},{"depth":3,"value":"Standard Error Stream","slug":"standard-error-stream"},{"depth":2,"value":"Stress Testing","slug":"stress-testing"},{"depth":2,"value":"Debuggers","slug":"debuggers"}],"py":[{"depth":2,"value":"Style","slug":"style"},{"depth":2,"value":"Printing Variables","slug":"printing-variables"},{"depth":3,"value":"Basic Print Statements","slug":"basic-print-statements"},{"depth":3,"value":"Standard Error Stream","slug":"standard-error-stream"},{"depth":2,"value":"Stress Testing","slug":"stress-testing"},{"depth":2,"value":"Debuggers","slug":"debuggers"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"debugging-lang"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}