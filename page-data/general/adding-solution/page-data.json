{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/adding-solution",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"adding-solution\", title = \"Adding Solutions\", author = \"Nathan Wang, Benjamin Qi, Qi Wang\", contributors = \"Maggie Liu, Sathvik Chundru\", description = \"How you can add your own solutions to the guide.\", prerequisites = [\"contributing\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ul: \"ul\",\n    em: \"em\",\n    blockquote: \"blockquote\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Info: _missingComponent(\"Info\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {HeaderLink, Info, LanguageSection, CPPSection, Resources, Resource, JavaSection, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/general/working-mdx\",\n        children: \"Working With MDX\"\n      }), \" for additional information.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"steps\",\n      children: [_jsx(_components.a, {\n        href: \"#steps\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Steps\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.a, {\n            href: \"https://docs.github.com/en/free-pro-team@latest/desktop/contributing-and-collaborating-using-github-desktop/cloning-and-forking-repositories-from-github-desktop\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"Fork\"\n          }), \"\\r\\nthe GitHub repository.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"If it doesn't already exist, create a new \", _jsx(_components.code, {\n            children: \"mdx\"\n          }), \" file in \", _jsx(_components.code, {\n            children: \"solutions/\"\n          }), \"\\r\\nincluding frontmatter, e.g. the following in\\r\\n\", _jsx(_components.a, {\n            href: \"https://github.com/Visual-Computing-1/visual-site/blob/master/solutions/usaco-690.mdx\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"usaco-690.mdx\"\n            })\n          }), \":\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"---\\r\\nid: usaco-690\\r\\nsource: USACO Silver 2017 January\\r\\ntitle: Cow Dance Show\\r\\nauthor: Ã“scar Garries\\r\\n---\\r\\n\\r\\n[Official Analysis](http://www.usaco.org/current/data/sol_cowdance_silver_jan17.html)\\r\\n\\r\\n## Explanation\\r\\n\\r\\n(add explanation here ...)\\r\\n\\r\\nUse `\\\\texttt{}` around variable names with length *greater than one*, like so. Place long equations on separate lines with display math, and use `\\\\cdot` instead of `*` to denote multiplication.\\r\\n\\r\\n$$\\r\\n\\\\texttt{arr}[i]=2\\\\cdot (a+b+c+d+e)+\\\\sum_{j=0}^{i-1}\\\\texttt{arr}[j]\\r\\n$$\\r\\n\\r\\nSome additional text styles which you might consider using:\\r\\n\\r\\nhttp://latexref.xyz/Font-styles.html\\r\\n\\r\\nhttp://applied-r.com/latex-font-styles/\\r\\n\\r\\n$func(var)$\\r\\n\\r\\n$\\\\textit{func(var)}$\\r\\n\\r\\n$\\\\textrm{func(var)}$\\r\\n\\r\\n$\\\\text{func(var)}$\\r\\n\\r\\n$\\\\textsf{func(var)}$\\r\\n\\r\\n$\\\\textbf{func(var)}$\\r\\n\\r\\n$\\\\texttt{func(var)}$\\r\\n\\r\\n## Implementation\\r\\n\\r\\n**Time Complexity:** $\\\\mathcal{O}(N\\\\log^2N)$\\r\\n\\r\\n^ Format time complexity like this. Should appear outside of `<LanguageSection>` if it's the same for all implementations.\\r\\n\\r\\nIf you need to link to a module, format your link like [this](/silver/binary-search) instead of [this](https://usaco.guide/silver/binary-search).\\r\\n\\r\\n<LanguageSection>\\r\\n\\r\\n<CPPSection>\\r\\n\\r\\n(add cpp code)\\r\\n\\r\\n</CPPSection>\\r\\n\\r\\n<PySection>\\r\\n\\r\\n(if you have Python code)\\r\\n\\r\\n</PySection>\\r\\n\\r\\n<JavaSection>\\r\\n\\r\\n(if you have Java code)\\r\\n\\r\\n</JavaSection>\\r\\n\\r\\n</LanguageSection>\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Keep file names and solution IDs consistent. In particular, the ID for a\\r\\nUSACO problem (such as the one above) is the number at the very end of the\\r\\nURL on\\r\\n\", _jsx(_components.a, {\n            href: \"http://www.usaco.org/index.php?page=viewproblem2&cpid=690\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"usaco.org\"\n          }), \". The\\r\\nname of a solution file should match the ID of the solution it contains. See\\r\\n\", _jsx(_components.a, {\n            href: \"/general/working-mdx#problem-lists\",\n            children: \"Working With MDX\"\n          }), \" for more examples of\\r\\nIDs.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Add your implementation, following these conventions\\r\\n\", _jsx(_components.a, {\n            href: \"#code-conventions\",\n            children: \"below\"\n          }), \". It is \", _jsx(_components.strong, {\n            children: \"not\"\n          }), \" necessary to add an alternative\\r\\nimplementation in the same language as the official implementation unless\\r\\nthe alternative implementation takes a different approach or is better than\\r\\nthe official one.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"In the module's \", _jsx(_components.code, {\n            children: \".problems.json\"\n          }), \" file (in this case,\\r\\n\", _jsx(_components.a, {\n            href: \"https://github.com/Visual-Computing-1/visual-site/blob/master/content/3_Silver/Binary_Search.problems.json\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"Binary_Search.problems.json\"\n            })\n          }), \"),\\r\\nchange the \", _jsx(_components.code, {\n            children: \"kind\"\n          }), \" of the \", _jsx(_components.code, {\n            children: \"solutionMetadata\"\n          }), \" field to \", _jsx(_components.code, {\n            children: \"internal\"\n          }), \" and remove\\r\\nall other fields. Also add tags (if you want). If the problem is not in a\\r\\nmodule, you can add the problem to\\r\\n\", _jsx(_components.a, {\n            href: \"https://github.com/Visual-Computing-1/visual-site/blob/master/content/extraProblems.json\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"extraProblems.json\"\n            })\n          }), \".\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"{\\r\\n  \\\"uniqueId\\\": \\\"usaco-690\\\",\\r\\n  \\\"name\\\": \\\"Cow Dance Show\\\",\\r\\n  \\\"url\\\": \\\"http://www.usaco.org/index.php?page=viewproblem2&cpid=690\\\",\\r\\n  \\\"source\\\": \\\"Silver\\\",\\r\\n  \\\"difficulty\\\": \\\"Easy\\\",\\r\\n  \\\"isStarred\\\": false,\\r\\n  \\\"tags\\\": [\\\"Binary Search\\\", \\\"Sorted Set\\\"],\\r\\n  \\\"solutionMetadata\\\": {\\r\\n    \\\"kind\\\": \\\"internal\\\"\\r\\n  }\\r\\n},\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Check that both the module and the solution render properly using the\\r\\n\", _jsx(_components.a, {\n            href: \"/editor/\",\n            children: \"live editor\"\n          }), \" before submitting a\\r\\n\", _jsx(_components.a, {\n            href: \"https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/about-pull-requests\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"pull request\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"code-conventions\",\n      children: [_jsx(_components.a, {\n        href: \"#code-conventions\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Code Conventions\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since code for the USACO Guide is contributed from several authors, code style\\r\\nwill \", _jsx(_components.strong, {\n        children: \"not\"\n      }), \" be uniform. Of course, we still strive for code that is readable\\r\\nand understandable. If any code does not compile or is hard to read, contact us.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Read our guidelines below before contributing code.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"general\",\n      children: [_jsx(_components.a, {\n        href: \"#general\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"General\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Use \", _jsx(_components.em, {\n            children: \"tabs\"\n          }), \" rather than spaces to indent.\"]\n        }), \"\\n\", _jsx(Info, {\n          title: \"Pro Tip\",\n          children: _jsxs(_components.p, {\n            children: [\"If your code is indented with spaces, paste your code into the \", _jsx(_components.a, {\n              href: \"/editor\",\n              children: \"Guide\\r\\nEditor\"\n            }), \", right-click, click \\\"Command Palette\\\" from the menu that\\r\\npops up, and then search for \\\"Convert Indentation to Tabs.\\\"\"]\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"In general, do not include unused code (e.g. \\\"templates\\\").\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"There are some exceptions to this guideline (e.g. when using the \", _jsx(_components.code, {\n              children: \"Kattio\"\n            }), \"\\r\\nclass for Java I/O). In this case, collapse it with a\\r\\n\", _jsx(_components.a, {\n              href: \"/general/working-mdx#code-blocks-and-code-snippets\",\n              children: _jsx(_components.code, {\n                children: \"CodeSnip\"\n              })\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Lines should not exceed 80 characters. If you need to, split comments across\\r\\nmultiple lines to follow this rule.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Use universally understandable variable names, especially for Bronze and\\r\\nSilver. Should be more descriptive than what you would normally use\\r\\nin-contest.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Add comments throughout your code to explain your logic. Feel free to\\r\\ncopy-paste the official USACO solution and improve it by adding more\\r\\ndescriptive variable names and helpful comments. Though keep in mind the\\r\\nfollowing guidelines from Google's\\r\\n\", _jsx(_components.a, {\n            href: \"https://google.github.io/styleguide/cppguide.html#Comments\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"C++ Style Guide\"\n          }), \":\"]\n        }), \"\\n\", _jsxs(_components.blockquote, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"But remember: while comments are very important, the best code is\\r\\nself-documenting. Giving sensible names to types and variables is much\\r\\nbetter than using obscure names that you must then explain through comments.\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.blockquote, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"In general the actual name of the variable should be descriptive enough to\\r\\ngive a good idea of what the variable is used for.\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.blockquote, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Self-describing code doesn't need a comment.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Be \", _jsx(_components.em, {\n            children: \"consistent\"\n          }), \" about formatting your code, unlike the following snippet. We\\r\\ndon't care about which one you use (\", _jsx(_components.code, {\n            children: \"a+b\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"a + b\"\n          }), \"), but pick one and stick\\r\\nwith it throughout your entire code.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"a,b = (0,1)\\r\\nprint(a+b)\\r\\nprint(a + b)\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Don't repeat yourself.\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"Rule Of Three\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Once you've finished making the changes requested by a review, make sure to re-request the review.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h3, {\n          id: \"c\",\n          children: [_jsx(_components.a, {\n            href: \"#c\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"C++\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsxs(_components.p, {\n              children: [\"Do not use variable names that could conflict with \", _jsx(_components.code, {\n                children: \"using namespace std\"\n              }), \". For\\r\\nexample, don't name a \", _jsx(_components.code, {\n                children: \"std::set\"\n              }), \" \\\"set.\\\"\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsxs(_components.p, {\n              children: [\"Do not use variable-length arrays as discussed\\r\\n\", _jsx(_components.a, {\n                href: \"/bronze/intro-ds?lang=cpp#dynamic-arrays\",\n                children: \"here\"\n              }), \"; they are not part of the C++\\r\\nstandard.\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsx(_components.p, {\n              children: \"Do not include code that doesn't do anything. In particular,\"\n            }), \"\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsxs(_components.li, {\n                children: [\"Do not include \", _jsx(_components.code, {\n                  children: \"cout.tie(nullptr)\"\n                }), \" as discussed\\r\\n\", _jsx(_components.a, {\n                  href: \"/general/fast-io?lang=cpp#cintienullptr\",\n                  children: \"here\"\n                }), \".\"]\n              }), \"\\n\", _jsxs(_components.li, {\n                children: [\"Do not include \", _jsx(_components.a, {\n                  href: \"/adv/vectorization\",\n                  children: \"optimization pragmas\"\n                }), \" unless you show\\r\\nthat they improve performance.\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"\\n\", _jsxs(_components.p, {\n              children: [\"For Bronze through Gold in particular, do not use additional macros\\r\\n(especially loop macros) beyond the ones listed below (see\\r\\n\", _jsx(_components.a, {\n                href: \"https://github.com/Visual-Computing-1/visual-site/issues/806\",\n                target: \"_blank\",\n                rel: \"nofollow noopener noreferrer\",\n                children: \"Github #806\"\n              }), \"):\"]\n            }), \"\\n\", _jsx(_components.pre, {\n              children: _jsx(_components.code, {\n                className: \"language-cpp\",\n                children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\r\\nint main() {\\r\\n  setIO();\\r\\n\\r\\n}\\n\"\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), _jsx(_components.p, {\n          children: \"Optional reading:\"\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"LLVM\",\n            title: \"Clang-Format Style Options\",\n            url: \"https://clang.llvm.org/docs/ClangFormatStyleOptions.html#configurable-format-style-options\",\n            starred: true,\n            children: _jsx(_components.p, {\n              children: \"How to automatically format C++ code with links to style guides\"\n            })\n          }), _jsx(Resource, {\n            source: \"CF\",\n            title: \"Swift - Competitive C++ Manifesto\",\n            url: \"64218\",\n            starred: true,\n            children: _jsx(_components.p, {\n              children: \"C++ style guide\"\n            })\n          }), _jsx(Resource, {\n            source: \"Google\",\n            title: \"C++ Style Guide\",\n            url: \"https://google.github.io/styleguide/cppguide.html\",\n            children: _jsx(_components.p, {\n              children: \"useful reference, but mostly not relevant to competitive programming\"\n            })\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"The C/C++ extension for\\r\\n\", _jsx(_components.a, {\n            href: \"/general/running-code-locally?lang=cpp#resource-https%3A%2F%2Fcode.visualstudio.com%2F\",\n            children: \"Visual Studio Code\"\n          }), \"\\r\\nsupports code formatting using \", _jsx(_components.code, {\n            children: \"clang-format\"\n          }), \" (details\\r\\n\", _jsx(_components.a, {\n            href: \"https://code.visualstudio.com/docs/cpp/cpp-ide#_code-formatting\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: \"here\"\n          }), \"). To\\r\\nindent using tabs, include the following in your\\r\\n\", _jsx(_components.code, {\n            children: \"C_Cpp.clang_format_fallbackStyle\"\n          }), \" setting.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            children: \"{ UseTab: AlignWithSpaces, TabWidth: 4, IndentWidth: 4 }\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"You don't have to use a formatter, but doing so will ensure consistency across\\r\\nthe guide.\"\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h3, {\n          id: \"java\",\n          children: [_jsx(_components.a, {\n            href: \"#java\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Java\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Regarding I/O, \", _jsx(_components.code, {\n              children: \"Scanner\"\n            }), \" is\\r\\n\", _jsx(_components.a, {\n              href: \"/general/fast-io?lang=java#standard-io\",\n              children: \"significantly slower\"\n            }), \" than\\r\\n\", _jsx(_components.code, {\n              children: \"BufferedReader\"\n            }), \" and should be avoided. You may use your own I/O template, but\\r\\ncollapse it as described above.\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"It is good practice to not use constant size arrays in Java.\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Use polymorphism when possible.\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsxs(_components.li, {\n                children: [\"For example, \", _jsx(_components.code, {\n                  children: \"List<Integer> list = new ArrayList<>()\"\n                }), \" instead of\\r\\n\", _jsx(_components.code, {\n                  children: \"ArrayList<Integer> list = new ArrayList<>()\"\n                }), \".\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        })]\n      }), _jsxs(PySection, {\n        children: [_jsxs(_components.h3, {\n          id: \"python\",\n          children: [_jsx(_components.a, {\n            href: \"#python\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Python\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Use \", _jsx(_components.code, {\n              children: \"snake_case\"\n            }), \" to name variables in your code.\"]\n          }), \"\\n\"]\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"Google\",\n            title: \"Python Style Guide\",\n            url: \"https://google.github.io/styleguide/pyguide.html\"\n          })\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  description,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"Adding Solutions","author":"Nathan Wang, Benjamin Qi, Qi Wang","contributors":"Maggie Liu, Sathvik Chundru","id":"adding-solution","prerequisites":["contributing"],"description":"How you can add your own solutions to the guide.","frequency":null},"parent":{"name":"Adding_Solution","relativePath":"1_General/Adding_Solution.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"Steps","slug":"steps"},{"depth":2,"value":"Code Conventions","slug":"code-conventions"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"C++","slug":"c"}],"java":[{"depth":2,"value":"Steps","slug":"steps"},{"depth":2,"value":"Code Conventions","slug":"code-conventions"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"Java","slug":"java"}],"py":[{"depth":2,"value":"Steps","slug":"steps"},{"depth":2,"value":"Code Conventions","slug":"code-conventions"},{"depth":3,"value":"General","slug":"general"},{"depth":3,"value":"Python","slug":"python"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"adding-solution"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}