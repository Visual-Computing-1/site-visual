{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/practicing",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"practicing\", title = \"How to Practice\", author = \"Many\", description = \"How to practice and when to read editorials (analyses) according to various USACO competitors.\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    h4: \"h4\",\n    ol: \"ol\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\")\n  }, _props.components), {HeaderLink, Resources, Resource, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"practicing\",\n      children: [_jsx(_components.a, {\n        href: \"#practicing\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Practicing\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"darren-yao\",\n      children: [_jsx(_components.a, {\n        href: \"#darren-yao\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Darren Yao\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Reaching a high level in competitive programming requires dedication and\\r\\nmotivation. For many people, their practice is inefficient because they do\\r\\nproblems that are too easy, too hard, or simply of the wrong type.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the lower divisions, most problems use relatively elementary algorithms; the\\r\\nmain challenge is deciding which algorithm to use, and implementing it\\r\\ncorrectly. In a contest, you should spend the bulk of your time thinking about\\r\\nthe problem and coming up with the algorithm, rather than typing code. Thus, you\\r\\nshould practice your implementation skills, so that during the contest, you can\\r\\nimplement the algorithm quickly and correctly, without resorting to debugging.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Problems that you practice with should be of the appropriate difficulty. You\\r\\ndon't necessarily need to complete all the exercises at the end of each module,\\r\\njust do what you think is right for you. A problem at the right level of\\r\\ndifficulty should be one of two types: either you struggle with the problem for\\r\\na while before coming up with a working solution, or you miss it slightly and\\r\\nneed to consult the solution for some small part. If you instantly come up with\\r\\nthe solution, a problem is likely too easy, and if you're missing multiple\\r\\nsteps, it might be too hard.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://web.evanchen.cc/FAQs/raqs.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"This\"\n      }), \" and\\r\\n\", _jsx(_components.a, {\n        href: \"https://usamo.wordpress.com/2019/01/31/math-contest-platitudes-v3/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"this\"\n      }), \" are\\r\\ntwo blog posts by Evan Chen that I find quite insightful. They discuss such\\r\\nthings as time management, the problem-solving process, and other tips that you\\r\\nmay find useful. See \", _jsx(_components.a, {\n        href: \"https://darrenyao.com/usacofaq/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"my FAQ\"\n      }), \" for more\\r\\ninformation.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"additional\",\n      children: [_jsx(_components.a, {\n        href: \"#additional\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Additional\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"Aryansh\",\n        title: \"Preparing for Contests\",\n        url: \"https://sendtoaryansh.gitbook.io/informatics-notes/preparing-for-contests\"\n      }), _jsx(Resource, {\n        source: \"CF\",\n        title: \"E869120 - A Way to Practice CP\",\n        url: \"53341\",\n        children: _jsx(_components.p, {\n          children: \"going from CF rating 1000 to 2000\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"reading-solutions\",\n      children: [_jsx(_components.a, {\n        href: \"#reading-solutions\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Reading Solutions\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Knowing when to \\\"give up\\\" on a problem and start reading its solution (editorial\\r\\nor analysis) is challenging. Note that \\\"give up\\\" is in quotes, because one still\\r\\nlearns when they \\\"give up\\\" and read the solution! Below are the opinions of\\r\\nvarious individuals.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"darren-yao-1\",\n      children: [_jsx(_components.a, {\n        href: \"#darren-yao-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Darren Yao\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In general, I think it’s fine to read the solution relatively early on, as long\\r\\nas you’re made several different attempts at it and you can learn effectively\\r\\nfrom the solution.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"On a bronze problem, read the solution after 15-20 minutes of no meaningful\\r\\nprogress, after you’ve exhausted every idea you can think of.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"On a silver problem, read the solution after 30-40 minutes of no meaningful\\r\\nprogress.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"I think that when you get stuck and consult the solution, you should not read\\r\\nthe entire solution at once, and you certainly shouldn’t look at the solution\\r\\ncode right away. Instead, it’s better to read the solution step by step until\\r\\nyou get unstuck, at which point you should go back and finish the problem, and\\r\\nimplement it yourself. Reading the full solution or its code should be seen as\\r\\na last resort.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"nathan-wang\",\n      children: [_jsx(_components.a, {\n        href: \"#nathan-wang\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Nathan Wang\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"My personal opinion is that it is okay to give up early when solving CP\\r\\nproblems. Sometimes I spend as little as 15-20 minutes on a problem before\\r\\nreading the editorial or at least glancing at solution code. Other times I may\\r\\nspend significantly longer.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CP editorials generally aren't the best (with the exception of USACO editorials,\\r\\nwhich are pretty good) so I often spend a lot of time trying to understand the\\r\\nsolution even after \\\"giving up\\\" and reading the editorial. I think it's good\\r\\nenough to implement the code without having the editorial open.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"My justification for why I think it's okay to give up so early is as follows:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Getting frustrated and quitting CP for a week is worse than giving up\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Whenever I feel like I'm really frustrated with a problem, I read the\\r\\neditorial\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"CP editorials are usually difficult to understand, so you will still have to\\r\\nspend a lot of time reading and understanding them\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"You learn a \", _jsx(_components.em, {\n          children: \"lot\"\n        }), \" by reading editorials\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you can solve a problem without reading the editorial, that means you\\r\\nprobably could have solved the problem in-contest too, so you didn't actually\\r\\nlearn that much. However, if you didn't know how to solve a problem and you\\r\\nread the editorial so now you do, then you've learned a lot more.\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"In other words, reading editorials is a \", _jsx(_components.em, {\n              children: \"good\"\n            }), \" thing, not a bad thing!\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Overall, I would just say to \\\"give up\\\" when you feel like giving up, whether\\r\\nthat's in five hours or in 15 minutes :)\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"benjamin-qi\",\n      children: [_jsx(_components.a, {\n        href: \"#benjamin-qi\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Benjamin Qi\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you're still coming up with new ideas, keep thinking. Otherwise, you have\\r\\nseveral options:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Look at [part of] the solution. (If CodeForces, look at the tags.)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Leave it for a while and do something else if you actually want to solve it on\\r\\nyour own.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Get a hint from someone else.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I'm impatient, so usually I go with the first option.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In any case, if you thought about a problem a lot during a contest but didn't\\r\\nend up solving it, then I don't see any reason not to read the editorial when it\\r\\ncomes out (vs. continuing to think about it on your own). Also, you should\\r\\nalways implement the solution afterwards!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also check my\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/bqi343/USACO/blob/master/Resources/Solving%20Problems.md\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Github\"\n      }), \"\\r\\nand my\\r\\n\", _jsx(_components.a, {\n        href: \"https://ioinformatics.org/interview/interview-benjamin-qi/27?event=july-2020\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"IOI interview\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"siyong-huang\",\n      children: [_jsx(_components.a, {\n        href: \"#siyong-huang\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Siyong Huang\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are two ways to grow from solving a problem:\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"1---you-learn-a-new-ideaalgorithm-from-it\",\n      children: [_jsx(_components.a, {\n        href: \"#1---you-learn-a-new-ideaalgorithm-from-it\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"1 - You learn a new idea/algorithm from it.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You learn ideas from problems you cannot solve. This means that you \", _jsx(_components.em, {\n        children: \"need\"\n      }), \" to\\r\\nread an editorial or someone else's accepted solution. Always start by trying to\\r\\nunderstand the editorial; it's an important skill to have. A sufficiently\\r\\ndifficult concept/idea requires multiple re-readings and drawing various\\r\\nexamples. If this doesn't work, then you will need to either read solutions or\\r\\nreach out.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Although reading others' solutions is difficult, I find it to be an incredibly\\r\\nuseful skill. If your code is barely timing out, maybe try looking to a faster\\r\\naccepted solution for optimizations. Additionally, there have been rare cases\\r\\nwhere the editorial solution outclassed by another faster, shorter solution. The\\r\\nprimary way I have identified this is by reading accepted submissions.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When asking for help, be sure to point out the specific idea that is confusing.\\r\\nGeneral questions end up being answered by summarizing the editorial - not\\r\\nparticularly useful.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, hints are overrated in my opinion. Just read the whole solution. You\\r\\ndon't gain anything from reading part of a solution then finishing it out\\r\\nyourself. As long as you implement it in the end, you are still learning the\\r\\nsame thing.\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"2---your-implementation-speed-and-consistency-improves\",\n      children: [_jsx(_components.a, {\n        href: \"#2---your-implementation-speed-and-consistency-improves\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"2 - Your implementation speed and consistency improves.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The best way to do this is to solve a bunch of easy or moderate difficulty\\r\\nproblems. Try to solve them as fast as possible, as if you were in a contest.\\r\\nPerhaps take virtuals or time yourself when solving problems. Whichever you\\r\\nchoose, the more problems you solve, the better you will become.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"nathan-chen\",\n      children: [_jsx(_components.a, {\n        href: \"#nathan-chen\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Nathan Chen\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Read the editorial when you feel like you've stopped making progress; that could\\r\\nbe from 1 to 5 hours. However, the most important part about reading the\\r\\neditorial is that you understand the topic and try to think about what similar\\r\\nproblems look like. Being generally curious is a good way to practice\\r\\nalgorithmic thinking.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"william-lin\",\n      children: [_jsx(_components.a, {\n        href: \"#william-lin\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"William Lin\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I follow three guidelines (from most important to least important)\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Having fun, just doing whatever you feel like doing.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Spend about the same amount of time that you would be able to during a real\\r\\ncontest.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Whether you are making progress or not.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"eric-wei\",\n      children: [_jsx(_components.a, {\n        href: \"#eric-wei\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Eric Wei\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I think the most important thing regarding practicing is to try to get something\\r\\nout of every problem, whether it's a new algorithm or idea, an implementation\\r\\ntrick that can help in the future, or just a bug you hopefully won't mess up in\\r\\nthe future. That being said, editorials are more useful once you've been stuck\\r\\nfor a while; I think the exploration that happens from being a little stuck is\\r\\noften instructive (and good practice for contests, when it's your only option).\\r\\nBut at some point the problem's more frustrating than helpful, and sometime\\r\\nbefore this is probably the right time to take a hint or read the editorial.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"michael-cao\",\n      children: [_jsx(_components.a, {\n        href: \"#michael-cao\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Michael Cao\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Do hard problems, and try to learn something from them. If you read the\\r\\neditorial, think about how you would arrive at the solution if you were to solve\\r\\nit again. Also, it's important to implement every problem you read the editorial\\r\\nof. Most importantly, don't burn yourself out, or you'll just be worse off in\\r\\nthe end because your practice isn't efficent.\"\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  default: MDXContent\n};\n","frontmatter":{"title":"How to Practice","author":"Many","contributors":null,"id":"practicing","prerequisites":null,"description":"How to practice and when to read editorials (analyses) according to various USACO competitors.","frequency":null},"parent":{"name":"Practicing","relativePath":"1_General/Practicing.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"Practicing","slug":"practicing"},{"depth":3,"value":"Darren Yao","slug":"darren-yao"},{"depth":3,"value":"Additional","slug":"additional"},{"depth":2,"value":"Reading Solutions","slug":"reading-solutions"},{"depth":3,"value":"Darren Yao","slug":"darren-yao-1"},{"depth":3,"value":"Nathan Wang","slug":"nathan-wang"},{"depth":3,"value":"Benjamin Qi","slug":"benjamin-qi"},{"depth":3,"value":"Siyong Huang","slug":"siyong-huang"},{"depth":4,"value":"1 - You learn a new idea/algorithm from it.","slug":"1---you-learn-a-new-ideaalgorithm-from-it"},{"depth":4,"value":"2 - Your implementation speed and consistency improves.","slug":"2---your-implementation-speed-and-consistency-improves"},{"depth":3,"value":"Nathan Chen","slug":"nathan-chen"},{"depth":3,"value":"William Lin","slug":"william-lin"},{"depth":3,"value":"Eric Wei","slug":"eric-wei"},{"depth":3,"value":"Michael Cao","slug":"michael-cao"}],"java":[{"depth":2,"value":"Practicing","slug":"practicing"},{"depth":3,"value":"Darren Yao","slug":"darren-yao"},{"depth":3,"value":"Additional","slug":"additional"},{"depth":2,"value":"Reading Solutions","slug":"reading-solutions"},{"depth":3,"value":"Darren Yao","slug":"darren-yao-1"},{"depth":3,"value":"Nathan Wang","slug":"nathan-wang"},{"depth":3,"value":"Benjamin Qi","slug":"benjamin-qi"},{"depth":3,"value":"Siyong Huang","slug":"siyong-huang"},{"depth":4,"value":"1 - You learn a new idea/algorithm from it.","slug":"1---you-learn-a-new-ideaalgorithm-from-it"},{"depth":4,"value":"2 - Your implementation speed and consistency improves.","slug":"2---your-implementation-speed-and-consistency-improves"},{"depth":3,"value":"Nathan Chen","slug":"nathan-chen"},{"depth":3,"value":"William Lin","slug":"william-lin"},{"depth":3,"value":"Eric Wei","slug":"eric-wei"},{"depth":3,"value":"Michael Cao","slug":"michael-cao"}],"py":[{"depth":2,"value":"Practicing","slug":"practicing"},{"depth":3,"value":"Darren Yao","slug":"darren-yao"},{"depth":3,"value":"Additional","slug":"additional"},{"depth":2,"value":"Reading Solutions","slug":"reading-solutions"},{"depth":3,"value":"Darren Yao","slug":"darren-yao-1"},{"depth":3,"value":"Nathan Wang","slug":"nathan-wang"},{"depth":3,"value":"Benjamin Qi","slug":"benjamin-qi"},{"depth":3,"value":"Siyong Huang","slug":"siyong-huang"},{"depth":4,"value":"1 - You learn a new idea/algorithm from it.","slug":"1---you-learn-a-new-ideaalgorithm-from-it"},{"depth":4,"value":"2 - Your implementation speed and consistency improves.","slug":"2---your-implementation-speed-and-consistency-improves"},{"depth":3,"value":"Nathan Chen","slug":"nathan-chen"},{"depth":3,"value":"William Lin","slug":"william-lin"},{"depth":3,"value":"Eric Wei","slug":"eric-wei"},{"depth":3,"value":"Michael Cao","slug":"michael-cao"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"practicing"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}