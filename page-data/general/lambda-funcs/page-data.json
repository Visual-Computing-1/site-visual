{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/lambda-funcs",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"lambda-funcs\", redirects = [\"/general/lambda\"], title = \"(Optional) C++ - Lambda Expressions\", author = \"Benjamin Qi, Dong Liu\", description = \"Defining anonymous function objects.\";\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\")\n  }, _props.components), {HeaderLink, Resources, Resource, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"introduction\",\n      children: [_jsx(_components.a, {\n        href: \"#introduction\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Introduction\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPP\",\n        url: \"https://en.cppreference.com/w/cpp/language/lambda\",\n        title: \"Lambda expressions\",\n        children: _jsx(_components.p, {\n          children: \"reference\"\n        })\n      }), _jsx(Resource, {\n        source: \"UMich\",\n        url: \"http://www.umich.edu/~eecs381/handouts/Lambda.pdf\",\n        title: \"Using C++ Lambdas\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"SO\",\n        url: \"https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11\",\n        title: \"What is a lambda expression in C++11?\"\n      }), _jsx(Resource, {\n        source: \"Microsoft\",\n        url: \"https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=vs-2019\",\n        title: \"Lambda Expressions in C++\"\n      })]\n    }), \"\\n\", _jsxs(Resources, {\n      title: \"FAQ\",\n      children: [_jsx(Resource, {\n        source: \"SO\",\n        url: \"https://stackoverflow.com/questions/41121441/type-of-a-lambda-function-using-auto\",\n        title: \"Type of a lambda function using auto?\"\n      }), _jsx(Resource, {\n        source: \"SO\",\n        url: \"https://stackoverflow.com/questions/11323811/what-is-meant-by-retain-state-in-c\",\n        title: \"What is meant by 'retain state' in c++?\"\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"recursive-lambdas\",\n      children: [_jsx(_components.a, {\n        href: \"#recursive-lambdas\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Recursive Lambdas\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"with-y_combinator\",\n      children: [_jsx(_components.a, {\n        href: \"#with-y_combinator\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"With \", _jsx(_components.code, {\n        children: \"y_combinator\"\n      })]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"open-std\",\n        url: \"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html\",\n        title: \"Y Combinator Proposal\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"RIP Tutorial\",\n        url: \"https://riptutorial.com/cplusplus/example/8508/recursive-lambdas\",\n        title: \"Recursive Lambdas\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If we add the following from the link above in C++14:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"namespace std {\\r\\n\\r\\ntemplate<class Fun>\\r\\nclass y_combinator_result {\\r\\n\\tFun fun_;\\r\\npublic:\\r\\n\\ttemplate<class T>\\r\\n\\texplicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}\\r\\n\\r\\n\\ttemplate<class ...Args>\\r\\n\\tdecltype(auto) operator()(Args &&...args) {\\r\\n\\t\\treturn fun_(std::ref(*this), std::forward<Args>(args)...);\\r\\n\\t}\\r\\n};\\r\\n\\r\\ntemplate<class Fun>\\r\\ndecltype(auto) y_combinator(Fun &&fun) {\\r\\n\\treturn y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));\\r\\n}\\r\\n\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then we can have code like the following:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"int main() {\\r\\n\\tcout << y_combinator([](auto gcd, int a, int b) -> int {\\r\\n\\t\\treturn b == 0 ? a : gcd(b, a % b);\\r\\n\\t})(20,30) << \\\"\\\\n\\\";  // outputs 10\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"with-function\",\n      children: [_jsx(_components.a, {\n        href: \"#with-function\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"With \", _jsx(_components.a, {\n        href: \"https://en.cppreference.com/w/cpp/utility/functional/function\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: _jsx(_components.code, {\n          children: \"function\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instead of \", _jsx(_components.code, {\n        children: \"auto\"\n      }), \", use \", _jsx(_components.code, {\n        children: \"function<return_type(param)>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"int main() {\\r\\n\\tfunction<int(int, int)> gcd = [&](int a, int b) {\\r\\n\\t\\treturn b == 0 ? a : gcd(b, a % b);\\r\\n\\t};\\r\\n\\tcout << gcd(20, 30) << '\\\\n';  // outputs 10\\r\\n}\\n\"\n      })\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  redirects,\n  title,\n  author,\n  description,\n  default: MDXContent\n};\n","frontmatter":{"title":"(Optional) C++ - Lambda Expressions","author":"Benjamin Qi, Dong Liu","contributors":null,"id":"lambda-funcs","prerequisites":null,"description":"Defining anonymous function objects.","frequency":null},"parent":{"name":"Lambda_Funcs","relativePath":"1_General/Lambda_Funcs.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Recursive Lambdas","slug":"recursive-lambdas"},{"depth":3,"value":"With y_combinator","slug":"with-y_combinator"},{"depth":3,"value":"With function","slug":"with-function"}],"java":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Recursive Lambdas","slug":"recursive-lambdas"},{"depth":3,"value":"With y_combinator","slug":"with-y_combinator"},{"depth":3,"value":"With function","slug":"with-function"}],"py":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Recursive Lambdas","slug":"recursive-lambdas"},{"depth":3,"value":"With y_combinator","slug":"with-y_combinator"},{"depth":3,"value":"With function","slug":"with-function"}]}},"moduleProblemLists":{"problemLists":[]}},"pageContext":{"id":"lambda-funcs"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}