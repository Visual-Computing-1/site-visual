{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/general/fast-io",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"fast-io\", title = \"Fast Input & Output\", author = \"Benjamin Qi, Nathan Chen\", description = \"Speeding up I/O can make a substantial difference.\", prerequisites = [\"input-output\"];\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    h4: \"h4\",\n    em: \"em\",\n    ol: \"ol\",\n    blockquote: \"blockquote\",\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Warning: _missingComponent(\"Warning\"),\n    IncompleteSection: _missingComponent(\"IncompleteSection\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\")\n  }, _props.components), {HeaderLink, MATHSPAN, LanguageSection, CPPSection, Spoiler, JavaSection, PySection, Warning, IncompleteSection, Resources, Resource, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"http://www.usaco.org/index.php?page=instructions\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"USACO Instructions Page\"\n      }), \"\\r\\nbriefly mentions some ways of speeding up I/O, but how much of a difference do\\r\\nthese actually make? We'll use the following task to benchmark I/O speed:\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"example-task\",\n      children: [_jsx(_components.a, {\n        href: \"#example-task\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example Task\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The input consists of two integers \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"M\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\\\"application/x-tex\\\">M</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span></span></span></span>\"\n      }), \" (\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"0\\\\le M\\\\le 1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>M</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0\\\\le M\\\\le 1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7804em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8193em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \") and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \"\\r\\n(\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\\\\le N\\\\le 10^6\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\\\"application/x-tex\\\">1\\\\le N\\\\le 10^6</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7804em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8193em;vertical-align:-0.136em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span>\"\n      }), \"), followed by a sequence of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"N\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n      }), \" non-negative integers each\\r\\nless than \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"10^9+7\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10^9+7</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">7</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"M=0\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">M=0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n        }), \", output the sum of the input sequence modulo \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"10^9+7\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10^9+7</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">7</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"M=1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>M</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">M=1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \", output the sum of each prefix of the input sequence modulo \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"10^9+7\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\\\"application/x-tex\\\">10^9+7</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8974em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">7</span></span></span></span>\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Sample Input 1:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"1 6\\r\\n1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n1000000000\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Sample Output 1:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"1\\r\\n3\\r\\n6\\r\\n10\\r\\n15\\r\\n8\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Sample Input 2:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"0 6\\r\\n1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n1000000000\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Sample Output 2:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"8\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Randomly generating test data results in input and output files each ~10MB\\r\\nlarge. It is possible to see input files this large (the 11th input file for\\r\\n\", _jsx(_components.a, {\n        href: \"http://www.usaco.org/index.php?page=viewproblem2&cpid=674\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Robotic Cow Herd\"\n      }), \" is\\r\\n~10.3MB large), though not output files (the largest we know of is due to\\r\\n\", _jsx(_components.a, {\n        href: \"http://usaco.org/index.php?page=viewproblem2&cpid=1093\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Minimum Cost Paths\"\n      }), \",\\r\\nwhich has an output file ~2.8MB large).\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"standard-io\",\n      children: [_jsx(_components.a, {\n        href: \"#standard-io\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Standard I/O\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"slow\",\n      children: [_jsx(_components.a, {\n        href: \"#slow\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Slow\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some simple methods of I/O don't come close to running under the time limit:\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(Spoiler, {\n          title: \"cin/cout + endl (5.8s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9 + 7;\\r\\n\\r\\nint main() {\\r\\n\\tint M, N;\\r\\n\\tcin >> M >> N;\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint x;\\r\\n\\t\\tcin >> x;\\r\\n\\t\\tans = (ans + x) % MOD;\\r\\n\\t\\tif (M == 1) {\\r\\n\\t\\t\\tcout << ans << endl;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (M == 0) {\\r\\n\\t\\tcout << ans << endl;\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(Spoiler, {\n          title: \"Scanner + System.out.println (16.7s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Solution {\\r\\n\\tstatic final int MOD = (int) 1e9 + 7;\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tScanner sc = new Scanner(System.in);\\r\\n\\t\\tint M = sc.nextInt();\\r\\n\\t\\tint N = sc.nextInt();\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tans = (ans + sc.nextInt()) % MOD;\\r\\n\\t\\t\\tif (M == 1) {\\r\\n\\t\\t\\t\\tSystem.out.println(ans);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (M == 0) {\\r\\n\\t\\t\\tSystem.out.println(ans);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(Spoiler, {\n          title: \"input + print (18.9s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-py\",\n              children: \"MOD = 10 ** 9 + 7\\r\\n\\r\\nM, N = map(int, input().split())\\r\\n\\r\\nans = 0\\r\\nfor _ in range(N):\\r\\n\\tx = int(input())\\r\\n\\tans = (ans + x) % MOD\\r\\n\\tif M == 1:\\r\\n\\t\\tprint(ans)\\r\\n\\r\\nif M == 0:\\r\\n\\tprint(ans)\\n\"\n            })\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"fast\",\n      children: [_jsx(_components.a, {\n        href: \"#fast\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Fast\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h4, {\n          id: \"cincout\",\n          children: [_jsx(_components.a, {\n            href: \"#cincout\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.code, {\n            children: \"cin\"\n          }), \"/\", _jsx(_components.code, {\n            children: \"cout\"\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"If using \", _jsx(_components.code, {\n            children: \"cin\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"cout\"\n          }), \", include the following two lines.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"ios::sync_with_stdio(false);\\r\\ncin.tie(nullptr);\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"Brief explanation:\"\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"If you include \", _jsx(_components.code, {\n              children: \"ios::sync_with_stdio(false)\"\n            }), \", then mixing C (\", _jsx(_components.code, {\n              children: \"scanf\"\n            }), \",\\r\\n\", _jsx(_components.code, {\n              children: \"printf\"\n            }), \") and C++ (\", _jsx(_components.code, {\n              children: \"cin\"\n            }), \", \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \") style I/O may produce unexpected results.\\r\\nThe upside is that both \", _jsx(_components.code, {\n              children: \"cin\"\n            }), \" / \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \" become faster.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Including \", _jsx(_components.code, {\n              children: \"cin.tie(nullptr)\"\n            }), \" will reduce the runtime if you are interleaving\\r\\n\", _jsx(_components.code, {\n              children: \"cin\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \" (as is the case in the task at hand).\"]\n          }), \"\\n\"]\n        }), _jsx(_components.p, {\n          children: \"You can find more information about these lines at the end of this module.\"\n        }), _jsx(Spoiler, {\n          title: \"cin/cout + unsync + \\\\n (0.41s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9 + 7;\\r\\n\\r\\nint main() {\\r\\n\\tios::sync_with_stdio(false);\\r\\n\\tcin.tie(nullptr);\\r\\n\\r\\n\\tint M, N;\\r\\n\\tcin >> M >> N;\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint x;\\r\\n\\t\\tcin >> x;\\r\\n\\t\\tans = (ans + x) % MOD;\\r\\n\\t\\tif (M == 1) {\\r\\n\\t\\t\\tcout << ans << \\\"\\\\n\\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (M == 0) {\\r\\n\\t\\tcout << ans << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        }), _jsxs(Warning, {\n          children: [_jsxs(_components.p, {\n            children: [\"Using \", _jsx(_components.code, {\n              children: \"endl\"\n            }), \" instead of \", _jsx(_components.code, {\n              children: \"\\\"\\\\n\\\"\"\n            }), \" will flush the output buffer and cause the above\\r\\nmethod to be quite slow:\"]\n          }), _jsx(Spoiler, {\n            title: \"cin/cout + unsync + endl (5.0s)\",\n            children: _jsx(_components.pre, {\n              children: _jsx(_components.code, {\n                className: \"language-cpp\",\n                children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9 + 7;\\r\\n\\r\\nint main() {\\r\\n\\tios::sync_with_stdio(false);\\r\\n\\tcin.tie(nullptr);\\r\\n\\r\\n\\tint M, N;\\r\\n\\tcin >> M >> N;\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint x;\\r\\n\\t\\tcin >> x;\\r\\n\\t\\tans = (ans + x) % MOD;\\r\\n\\t\\tif (M == 1) {\\r\\n\\t\\t\\tcout << ans << endl;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (M == 0) {\\r\\n\\t\\tcout << ans << endl;\\r\\n\\t}\\r\\n}\\n\"\n              })\n            })\n          }), _jsxs(_components.p, {\n            children: [\"Though for \", _jsx(_components.a, {\n              href: \"https://codeforces.com/blog/entry/45307\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"interactive problems\"\n            }), \", you\\r\\n\", _jsx(_components.em, {\n              children: \"need\"\n            }), \" to flush the output buffer every time you use \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \". Any one of the\\r\\nfollowing will have the same effect:\"]\n          }), _jsxs(_components.ol, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"Not including \", _jsx(_components.code, {\n                children: \"cin.tie(nullptr)\"\n              })]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"Writing \", _jsx(_components.code, {\n                children: \"cout << endl\"\n              }), \" instead of \", _jsx(_components.code, {\n                children: \"cout << \\\"\\\\n\\\"\"\n              })]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"Writing \", _jsx(_components.code, {\n                children: \"cout << \\\"\\\\n\\\" << flush\"\n              }), \" instead of \", _jsx(_components.code, {\n                children: \"cout << \\\"\\\\n\\\"\"\n              })]\n            }), \"\\n\"]\n          })]\n        }), _jsxs(_components.h4, {\n          id: \"scanfprintf\",\n          children: [_jsx(_components.a, {\n            href: \"#scanfprintf\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.code, {\n            children: \"scanf\"\n          }), \"/\", _jsx(_components.code, {\n            children: \"printf\"\n          })]\n        }), _jsx(Spoiler, {\n          title: \"scanf/printf (0.52s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9 + 7;\\r\\n\\r\\nint main() {\\r\\n\\tint M, N;\\r\\n\\tscanf(\\\"%d%d\\\", &M, &N);\\r\\n\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint x;\\r\\n\\t\\tscanf(\\\"%d\\\", &x);\\r\\n\\t\\tans = (ans + x) % MOD;\\r\\n\\t\\tif (M == 1) {\\r\\n\\t\\t\\tprintf(\\\"%d\\\\n\\\", ans);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (M == 0) {\\r\\n\\t\\tprintf(\\\"%d\\\\n\\\", ans);\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Use \", _jsx(_components.code, {\n            children: \"BufferedReader\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"PrintWriter\"\n          }), \" instead.\"]\n        }), _jsx(Spoiler, {\n          title: \"BufferedReader + PrintWriter (1.2s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Solution {\\r\\n\\tstatic final int MOD = (int) 1e9 + 7;\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(System.out);\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tint M = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint N = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tans = (ans + Integer.parseInt(br.readLine())) % MOD;\\r\\n\\t\\t\\tif (M == 1) {\\r\\n\\t\\t\\t\\tpw.println(ans);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (M == 0) {\\r\\n\\t\\t\\tpw.println(ans);\\r\\n\\t\\t}\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        })]\n      }), _jsxs(PySection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Use \", _jsx(_components.code, {\n            children: \"sys.stdin.readline\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"sys.stdout.write\"\n          }), \" instead.\"]\n        }), _jsx(Spoiler, {\n          title: \"sys (2.4s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-py\",\n              children: \"import sys\\r\\n\\r\\nread = sys.stdin.readline\\r\\nwrite = sys.stdout.write\\r\\n\\r\\nMOD = 10**9+7\\r\\n\\r\\nM, N = map(int, read().split())\\r\\n\\r\\nans = 0\\r\\nfor _ in range(N):\\r\\n\\tx = int(read())\\r\\n\\tans = (ans + x) % MOD\\r\\n\\tif M == 1:\\r\\n\\t\\twrite(str(ans) + \\\"\\\\n\\\")\\r\\nif M == 0:\\r\\n\\twrite(str(ans) + \\\"\\\\n\\\")\\n\"\n            })\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"file-io\",\n      children: [_jsx(_components.a, {\n        href: \"#file-io\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"File I/O\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pretty similar to standard I/O.\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h3, {\n          id: \"slow-1\",\n          children: [_jsx(_components.a, {\n            href: \"#slow-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Slow\"]\n        }), _jsx(Spoiler, {\n          title: \"freopen + cin/cout (5.7s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9 + 7;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"speed.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"speed.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tint M, N;\\r\\n\\tcin >> M >> N;\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint x;\\r\\n\\t\\tcin >> x;\\r\\n\\t\\tans = (ans + x) % MOD;\\r\\n\\t\\tif (M == 1) {\\r\\n\\t\\t\\tcout << ans << \\\"\\\\n\\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (M == 0) {\\r\\n\\t\\tcout << ans << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        }), _jsxs(_components.h3, {\n          id: \"fast-1\",\n          children: [_jsx(_components.a, {\n            href: \"#fast-1\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Fast\"]\n        }), _jsx(Spoiler, {\n          title: \"freopen + cin/cout + unsync + \\\\n (0.42s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9 + 7;\\r\\n\\r\\nint main() {\\r\\n\\tios::sync_with_stdio(false);\\r\\n\\tcin.tie(nullptr);\\r\\n\\r\\n\\tfreopen(\\\"speed.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"speed.out\\\", \\\"w\\\", stdout);\\r\\n\\r\\n\\tint M, N;\\r\\n\\tcin >> M >> N;\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint x;\\r\\n\\t\\tcin >> x;\\r\\n\\t\\tans = (ans + x) % MOD;\\r\\n\\t\\tif (M == 1) {\\r\\n\\t\\t\\tcout << ans << \\\"\\\\n\\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (M == 0) {\\r\\n\\t\\tcout << ans << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        }), _jsx(Spoiler, {\n          title: \"freopen + scanf/printf (0.52s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9+7;\\r\\n\\r\\nint main() {\\r\\n\\tfreopen(\\\"speed.in\\\", \\\"r\\\", stdin);\\r\\n\\tfreopen(\\\"speed.out\\\", \\\"w\\\", stdout);\\r\\n\\tint M, N;\\r\\n\\tscanf(\\\"%d%d\\\", &M, &N);\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tint x;\\r\\n\\t\\tscanf(\\\"%d\\\", &x);\\r\\n\\t\\tans = (ans + x) % MOD;\\r\\n\\t\\tif (M == 1) {\\r\\n\\t\\t\\tprintf(\\\"%d\\\\n\\\", ans);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (M == 0) {\\r\\n\\t\\tprintf(\\\"%d\\\\n\\\", ans);\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        }), _jsx(Spoiler, {\n          title: \"ifstream/ofstream (0.43s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9+7;\\r\\n\\r\\nint main() {\\r\\n\\tifstream fin(\\\"speed.in\\\");\\r\\n\\tofstream fout(\\\"speed.out\\\");\\r\\n\\tint M, N; fin >> M >> N;\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; ++i) {\\r\\n\\t\\tint x; fin >> x;\\r\\n\\t\\tans = (ans + x) % MOD;\\r\\n\\t\\tif (M) fout << ans << \\\"\\\\n\\\";\\r\\n\\t}\\r\\n\\tif (!M) fout << ans << \\\"\\\\n\\\";\\r\\n}\\n\"\n            })\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.h3, {\n          id: \"slow-2\",\n          children: [_jsx(_components.a, {\n            href: \"#slow-2\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Slow\"]\n        }), _jsx(Spoiler, {\n          title: \"Scanner + PrintWriter (3.4s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Solution {\\r\\n\\tstatic final int MOD = (int) 1e9 + 7;\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tScanner sc = new Scanner(new File(\\\"speed.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(\\\"speed.out\\\");\\r\\n\\r\\n\\t\\tint M = sc.nextInt();\\r\\n\\t\\tint N = sc.nextInt();\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tans = (ans + sc.nextInt()) % MOD;\\r\\n\\t\\t\\tif (M == 1) {\\r\\n\\t\\t\\t\\tpw.println(ans);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (M == 0) {\\r\\n\\t\\t\\tpw.println(ans);\\r\\n\\t\\t}\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        }), _jsxs(_components.h3, {\n          id: \"fast-2\",\n          children: [_jsx(_components.a, {\n            href: \"#fast-2\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Fast\"]\n        }), _jsx(Spoiler, {\n          title: \"BufferedReader + PrintWriter (1.2s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Solution {\\r\\n\\tstatic final int MOD = (int) 1e9 + 7;\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tBufferedReader br = new BufferedReader(new FileReader(\\\"speed.in\\\"));\\r\\n\\t\\tPrintWriter pw = new PrintWriter(\\\"speed.out\\\");\\r\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\r\\n\\t\\tint M = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint N = Integer.parseInt(st.nextToken());\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tans = (ans + Integer.parseInt(br.readLine())) % MOD;\\r\\n\\t\\t\\tif (M == 1) {\\r\\n\\t\\t\\t\\tpw.println(ans);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (M == 0) {\\r\\n\\t\\t\\tpw.println(ans);\\r\\n\\t\\t}\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        }), _jsxs(_components.p, {\n          children: [\"A variant of the above method involves wrapping the \", _jsx(_components.code, {\n            children: \"BufferedReader\"\n          }), \" with a\\r\\n\", _jsx(_components.a, {\n            href: \"https://docs.oracle.com/javase/8/docs/api/java/io/StreamTokenizer.html\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"StreamTokenizer\"\n            })\n          }), \":\"]\n        }), _jsx(Spoiler, {\n          title: \"StreamTokenizer (1.2s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.io.*;\\r\\n\\r\\npublic class Solution {\\r\\n\\tstatic final int MOD = (int) 1e9 + 7;\\r\\n\\r\\n\\tstatic StreamTokenizer st;\\r\\n\\tstatic int nextInt() throws IOException {\\r\\n\\t\\tst.nextToken();\\r\\n\\t\\treturn (int) st.nval;\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tst = new StreamTokenizer(\\r\\n\\t\\t\\tnew BufferedReader(new InputStreamReader(System.in))\\r\\n\\t\\t);\\r\\n\\t\\tPrintWriter pw = new PrintWriter(System.out);\\r\\n\\t\\tint M = nextInt();\\r\\n\\t\\tint N = nextInt();\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tans = (ans + nextInt()) % MOD;\\r\\n\\t\\t\\tif (M == 1) {\\r\\n\\t\\t\\t\\tpw.println(ans);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (M == 0) {\\r\\n\\t\\t\\tpw.println(ans);\\r\\n\\t\\t}\\r\\n\\t\\tpw.close();\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        })]\n      }), _jsx(PySection, {\n        children: _jsx(Spoiler, {\n          title: \"readline + write (2.4s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-py\",\n              children: \"read = open(\\\"speed.in\\\", \\\"r\\\").readline\\r\\nwrite = open(\\\"speed.out\\\", \\\"w\\\").write\\r\\n\\r\\nMOD = 10**9 + 7\\r\\n\\r\\nM, N = map(int, read().split())\\r\\nans = 0\\r\\nfor _ in range(N):\\r\\n\\tx = int(read())\\r\\n\\tans = (ans + x) % MOD\\r\\n\\tif M == 1:\\r\\n\\t\\twrite(str(ans) + \\\"\\\\n\\\")\\r\\nif M == 0:\\r\\n\\twrite(str(ans) + \\\"\\\\n\\\")\\n\"\n            })\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"even-faster-methods\",\n      children: [_jsx(_components.a, {\n        href: \"#even-faster-methods\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Even Faster Methods\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The input methods described above are easy to type up from scratch and are\\r\\nusually fast enough for USACO contests. But if you're looking for something even\\r\\nfaster ...\"\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Using \", _jsx(_components.code, {\n            children: \"fread\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"fwrite\"\n          }), \" reduces the runtime even further.\"]\n        }), _jsx(Spoiler, {\n          title: \"fread/fwrite (0.17s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <bits/stdc++.h>\\r\\nusing namespace std;\\r\\n\\r\\nconst int MOD = 1e9 + 7;\\r\\nconst int BUF_SZ = 1 << 15;\\r\\n\\r\\n//BeginCodeSnip{Input}\\r\\ninline namespace Input {\\r\\nchar buf[BUF_SZ];\\r\\nint pos;\\r\\nint len;\\r\\nchar next_char() {\\r\\n\\tif (pos == len) {\\r\\n\\t\\tpos = 0;\\r\\n\\t\\tlen = (int)fread(buf, 1, BUF_SZ, stdin);\\r\\n\\t\\tif (!len) {\\r\\n\\t\\t\\treturn EOF;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn buf[pos++];\\r\\n}\\r\\n\\r\\nint read_int() {\\r\\n\\tint x;\\r\\n\\tchar ch;\\r\\n\\tint sgn = 1;\\r\\n\\twhile (!isdigit(ch = next_char())) {\\r\\n\\t\\tif (ch == '-') {\\r\\n\\t\\t\\tsgn *= -1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tx = ch - '0';\\r\\n\\twhile (isdigit(ch = next_char())) {\\r\\n\\t\\tx = x * 10 + (ch - '0');\\r\\n\\t}\\r\\n\\treturn x * sgn;\\r\\n}\\r\\n} // namespace Input\\r\\n//EndCodeSnip\\r\\n//BeginCodeSnip{Output}\\r\\ninline namespace Output {\\r\\nchar buf[BUF_SZ];\\r\\nint pos;\\r\\n\\r\\nvoid flush_out() {\\r\\n\\tfwrite(buf, 1, pos, stdout);\\r\\n\\tpos = 0;\\r\\n}\\r\\n\\r\\nvoid write_char(char c) {\\r\\n\\tif (pos == BUF_SZ) {\\r\\n\\t\\tflush_out();\\r\\n\\t}\\r\\n\\tbuf[pos++] = c;\\r\\n}\\r\\n\\r\\nvoid write_int(int x) {\\r\\n\\tstatic char num_buf[100];\\r\\n\\tif (x < 0) {\\r\\n\\t\\twrite_char('-');\\r\\n\\t\\tx *= -1;\\r\\n\\t}\\r\\n\\tint len = 0;\\r\\n\\tfor (; x >= 10; x /= 10) {\\r\\n\\t\\tnum_buf[len++] = (char)('0' + (x % 10));\\r\\n\\t}\\r\\n\\twrite_char((char)('0' + x));\\r\\n\\twhile (len) {\\r\\n\\t\\twrite_char(num_buf[--len]);\\r\\n\\t}\\r\\n\\twrite_char('\\\\n');\\r\\n}\\r\\n\\r\\n// auto-flush output when program exits\\r\\nvoid init_output() { assert(atexit(flush_out) == 0); }\\r\\n} // namespace Output\\r\\n//EndCodeSnip\\r\\n\\r\\nint main() {\\r\\n\\tinit_output();\\r\\n\\tint M = read_int();\\r\\n\\tint N = read_int();\\r\\n\\tint ans = 0;\\r\\n\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\tans = (ans + read_int()) % MOD;\\r\\n\\t\\tif (M == 1) {\\r\\n\\t\\t\\twrite_int(ans);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (M == 0) {\\r\\n\\t\\twrite_int(ans);\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        })]\n      }), _jsxs(JavaSection, {\n        children: [_jsxs(_components.p, {\n          children: [\"Even faster than \", _jsx(_components.code, {\n            children: \"BufferedReader\"\n          }), \" is a custom-written Fast I/O class that reads\\r\\nbytes directly from an\\r\\n\", _jsx(_components.a, {\n            href: \"https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html\",\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            children: _jsx(_components.code, {\n              children: \"InputStream\"\n            })\n          }), \".\"]\n        }), _jsx(Spoiler, {\n          title: \"InputStream + PrintWriter (0.84s)\",\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\n//BeginCodeSnip{FastIO}\\r\\nclass FastIO extends PrintWriter {\\r\\n\\tprivate InputStream stream;\\r\\n\\tprivate byte[] buf = new byte[1 << 16];\\r\\n\\tprivate int curChar;\\r\\n\\tprivate int numChars;\\r\\n\\r\\n\\t// standard input\\r\\n\\tpublic FastIO() { this(System.in, System.out); }\\r\\n\\r\\n\\tpublic FastIO(InputStream i, OutputStream o) {\\r\\n\\t\\tsuper(o);\\r\\n\\t\\tstream = i;\\r\\n\\t}\\r\\n\\r\\n\\t// file input\\r\\n\\tpublic FastIO(String i, String o) throws IOException {\\r\\n\\t\\tsuper(new FileWriter(o));\\r\\n\\t\\tstream = new FileInputStream(i);\\r\\n\\t}\\r\\n\\r\\n\\t// throws InputMismatchException() if previously detected end of file\\r\\n\\tprivate int nextByte() {\\r\\n\\t\\tif (numChars == -1) {\\r\\n\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t}\\r\\n\\t\\tif (curChar >= numChars) {\\r\\n\\t\\t\\tcurChar = 0;\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tnumChars = stream.read(buf);\\r\\n\\t\\t\\t} catch (IOException e) {\\r\\n\\t\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (numChars == -1) {\\r\\n\\t\\t\\t\\treturn -1;  // end of file\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn buf[curChar++];\\r\\n\\t}\\r\\n\\r\\n\\t// to read in entire lines, replace c <= ' '\\r\\n\\t// with a function that checks whether c is a line break\\r\\n\\tpublic String next() {\\r\\n\\t\\tint c;\\r\\n\\t\\tdo {\\r\\n\\t\\t\\tc = nextByte();\\r\\n\\t\\t} while (c <= ' ');\\r\\n\\r\\n\\t\\tStringBuilder res = new StringBuilder();\\r\\n\\t\\tdo {\\r\\n\\t\\t\\tres.appendCodePoint(c);\\r\\n\\t\\t\\tc = nextByte();\\r\\n\\t\\t} while (c > ' ');\\r\\n\\t\\treturn res.toString();\\r\\n\\t}\\r\\n\\r\\n\\tpublic int nextInt() {  // nextLong() would be implemented similarly\\r\\n\\t\\tint c;\\r\\n\\t\\tdo {\\r\\n\\t\\t\\tc = nextByte();\\r\\n\\t\\t} while (c <= ' ');\\r\\n\\r\\n\\t\\tint sgn = 1;\\r\\n\\t\\tif (c == '-') {\\r\\n\\t\\t\\tsgn = -1;\\r\\n\\t\\t\\tc = nextByte();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint res = 0;\\r\\n\\t\\tdo {\\r\\n\\t\\t\\tif (c < '0' || c > '9') {\\r\\n\\t\\t\\t\\tthrow new InputMismatchException();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tres = 10 * res + c - '0';\\r\\n\\t\\t\\tc = nextByte();\\r\\n\\t\\t} while (c > ' ');\\r\\n\\t\\treturn res * sgn;\\r\\n\\t}\\r\\n\\r\\n\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\r\\n}\\r\\n//EndCodeSnip\\r\\n\\r\\npublic class Solution {\\r\\n\\tstatic final int MOD = (int) 1e9 + 7;\\r\\n\\tpublic static void main(String[] args) throws Exception {\\r\\n\\t\\tFastIO io = new FastIO();\\r\\n\\t\\tint M = io.nextInt();\\r\\n\\t\\tint N = io.nextInt();\\r\\n\\t\\tint ans = 0;\\r\\n\\t\\tfor (int i = 0; i < N; i++) {\\r\\n\\t\\t\\tans = (ans + io.nextInt()) % MOD;\\r\\n\\t\\t\\tif (M == 1) {\\r\\n\\t\\t\\t\\tio.println(ans);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (M == 0) {\\r\\n\\t\\t\\tio.println(ans);\\r\\n\\t\\t}\\r\\n\\t\\tio.close();\\r\\n\\t}\\r\\n}\\n\"\n            })\n          })\n        })]\n      }), _jsx(PySection, {\n        children: _jsx(IncompleteSection, {})\n      })]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsxs(CPPSection, {\n        children: [_jsxs(_components.h2, {\n          id: \"additional-notes\",\n          children: [_jsx(_components.a, {\n            href: \"#additional-notes\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), \"Additional Notes\"]\n        }), _jsx(Resources, {\n          children: _jsx(Resource, {\n            source: \"CF\",\n            url: \"5217\",\n            title: \"Yet again on C++ I/O\",\n            starred: true,\n            children: _jsx(_components.p, {\n              children: \"timing various I/O methods\"\n            })\n          })\n        }), _jsxs(_components.h3, {\n          id: \"iossync_with_stdiofalse\",\n          children: [_jsx(_components.a, {\n            href: \"#iossync_with_stdiofalse\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.code, {\n            children: \"ios::sync_with_stdio(false)\"\n          })]\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"CPP\",\n            url: \"http://www.cplusplus.com/reference/ios/ios_base/sync_with_stdio/\",\n            title: \"ios_base::sync_with_stdio\",\n            children: _jsx(_components.p, {\n              children: \"documentation\"\n            })\n          }), _jsx(Resource, {\n            source: \"SO\",\n            url: \"https://stackoverflow.com/questions/31162367/significance-of-ios-basesync-with-stdiofalse-cin-tienull\",\n            title: \"Significance of ios_base::sync_with_stdio(false);\",\n            starred: true\n          })]\n        }), _jsx(_components.p, {\n          children: \"From the second resource:\"\n        }), _jsxs(_components.blockquote, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"This disables the synchronization between the C and C++ standard streams. By\\r\\ndefault, all standard streams are synchronized, which in practice allows you\\r\\nto mix C- and C++-style I/O and get sensible and expected results. If you\\r\\ndisable the synchronization, then C++ streams are allowed to have their own\\r\\nindependent buffers, which makes mixing C- and C++-style I/O an adventure.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.h3, {\n          id: \"cintienullptr\",\n          children: [_jsx(_components.a, {\n            href: \"#cintienullptr\",\n            \"aria-hidden\": \"true\",\n            tabIndex: \"-1\",\n            className: \"anchor before\",\n            children: _jsx(HeaderLink, {})\n          }), _jsx(_components.code, {\n            children: \"cin.tie(nullptr)\"\n          })]\n        }), _jsxs(Resources, {\n          children: [_jsx(Resource, {\n            source: \"CPP\",\n            url: \"http://www.cplusplus.com/reference/ios/ios/tie/\",\n            title: \"ios::tie\",\n            children: _jsx(_components.p, {\n              children: \"documentation\"\n            })\n          }), _jsx(Resource, {\n            source: \"SO\",\n            url: \"https://stackoverflow.com/questions/31162367/significance-of-ios-basesync-with-stdiofalse-cin-tienull\",\n            title: \"Significance of cin.tie(NULL);\",\n            starred: true\n          })]\n        }), _jsx(_components.p, {\n          children: \"From the second resource:\"\n        }), _jsxs(_components.blockquote, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"This unties \", _jsx(_components.code, {\n              children: \"cin\"\n            }), \" from \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \". Tied streams ensure that one stream is flushed\\r\\nautomatically before each I/O operation on the other stream.\"]\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"By default \", _jsx(_components.code, {\n              children: \"cin\"\n            }), \" is tied to \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \" to ensure a sensible user interaction. For\\r\\nexample:\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"std::cout << \\\"Enter name:\\\";\\r\\nstd::cin >> name;\\n\"\n            })\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"If \", _jsx(_components.code, {\n              children: \"cin\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \" are tied, you can expect the output to be flushed (i.e.,\\r\\nvisible on the console) before the program prompts input from the user. If you\\r\\nuntie the streams, the program might block waiting for the user to enter their\\r\\nname but the \\\"Enter name\\\" message is not yet visible (because \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \" is\\r\\nbuffered by default, output is flushed/displayed on the console only on demand\\r\\nor when the buffer is full).\"]\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"So if you untie \", _jsx(_components.code, {\n              children: \"cin\"\n            }), \" from \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \", you must make sure to flush \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \" manually\\r\\nevery time you want to display something before expecting input on \", _jsx(_components.code, {\n              children: \"cin\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), _jsx(Warning, {\n          title: \"cout.tie(nullptr)\",\n          children: _jsxs(_components.p, {\n            children: [\"You may see some competitive programmers including this line. This doesn't\\r\\nactually do anything since \", _jsx(_components.code, {\n              children: \"cout\"\n            }), \" isn't tied to anything. See\\r\\n\", _jsx(_components.a, {\n              href: \"https://codeforces.com/blog/entry/90775?#comment-791764\",\n              target: \"_blank\",\n              rel: \"nofollow noopener noreferrer\",\n              children: \"this post\"\n            }), \" for\\r\\ndetails.\"]\n          })\n        })]\n      }), _jsx(JavaSection, {}), _jsx(PySection, {})]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  description,\n  prerequisites,\n  default: MDXContent\n};\n","frontmatter":{"title":"Fast Input & Output","author":"Benjamin Qi, Nathan Chen","contributors":null,"id":"fast-io","prerequisites":["input-output"],"description":"Speeding up I/O can make a substantial difference.","frequency":null},"parent":{"name":"Fast_IO","relativePath":"1_General/Fast_IO.mdx"},"fields":{"division":"general"},"toc":{"cpp":[{"depth":2,"value":"Example Task","slug":"example-task"},{"depth":2,"value":"Standard I/O","slug":"standard-io"},{"depth":3,"value":"Slow","slug":"slow"},{"depth":3,"value":"Fast","slug":"fast"},{"depth":4,"value":"cin/cout","slug":"cincout"},{"depth":4,"value":"scanf/printf","slug":"scanfprintf"},{"depth":2,"value":"File I/O","slug":"file-io"},{"depth":3,"value":"Slow","slug":"slow-1"},{"depth":3,"value":"Fast","slug":"fast-1"},{"depth":2,"value":"Even Faster Methods","slug":"even-faster-methods"},{"depth":2,"value":"Additional Notes","slug":"additional-notes"},{"depth":3,"value":"ios::sync_with_stdio(false)","slug":"iossync_with_stdiofalse"},{"depth":3,"value":"cin.tie(nullptr)","slug":"cintienullptr"}],"java":[{"depth":2,"value":"Example Task","slug":"example-task"},{"depth":2,"value":"Standard I/O","slug":"standard-io"},{"depth":3,"value":"Slow","slug":"slow"},{"depth":3,"value":"Fast","slug":"fast"},{"depth":2,"value":"File I/O","slug":"file-io"},{"depth":3,"value":"Slow","slug":"slow-2"},{"depth":3,"value":"Fast","slug":"fast-2"},{"depth":2,"value":"Even Faster Methods","slug":"even-faster-methods"}],"py":[{"depth":2,"value":"Example Task","slug":"example-task"},{"depth":2,"value":"Standard I/O","slug":"standard-io"},{"depth":3,"value":"Slow","slug":"slow"},{"depth":3,"value":"Fast","slug":"fast"},{"depth":2,"value":"File I/O","slug":"file-io"},{"depth":2,"value":"Even Faster Methods","slug":"even-faster-methods"}]}},"moduleProblemLists":{"problemLists":[{"listId":"roboherd","problems":[{"uniqueId":"usaco-674","name":"Robotic Cow Herd","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=674","source":"Plat","difficulty":"Insane","isStarred":false,"tags":[],"solution":{"kind":"link","label":"External Sol","labelTooltip":null,"url":"http://www.usaco.org/current/data/sol_roboherd_platinum_dec16.html","sketch":null}}]},{"listId":"soldier","problems":[{"uniqueId":"cf-546D","name":"Soldier and Number Game","url":"https://codeforces.com/contest/546/problem/D","source":"CF","difficulty":"Normal","isStarred":false,"tags":[],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]}]}},"pageContext":{"id":"fast-io"}},
    "staticQueryHashes": ["2753100047","3245546052","745520438"]}