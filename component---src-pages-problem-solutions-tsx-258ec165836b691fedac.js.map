{"version":3,"file":"component---src-pages-problem-solutions-tsx-258ec165836b691fedac.js","mappings":"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","sources":["webpack://usaco-guide/./src/components/ButtonGroup.tsx","webpack://usaco-guide/./src/components/elements/TabIndentableTextarea.tsx","webpack://usaco-guide/./src/hooks/useUserSolutionsForProblem.tsx","webpack://usaco-guide/./src/hooks/useUserProblemSolutionActions.ts","webpack://usaco-guide/./src/components/ProblemSolutions.tsx","webpack://usaco-guide/./src/components/SubmitProblemSolutionModal.tsx","webpack://usaco-guide/./src/pages/problem-solutions.tsx"],"sourcesContent":["import classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport default function ButtonGroup({\r\n  options,\r\n  value,\r\n  onChange,\r\n  labelMap,\r\n  disabled,\r\n}: {\r\n  options: string[];\r\n  value: string;\r\n  onChange: (string) => void;\r\n  labelMap?: { [key: string]: string };\r\n  disabled?: boolean;\r\n}): JSX.Element {\r\n  const leftButtonClasses = 'rounded-l-md';\r\n  const middleButtonClasses = '-ml-px';\r\n  const rightButtonClasses = '-ml-px rounded-r-md';\r\n  const baseClasses =\r\n    'relative inline-flex items-center px-4 py-2 border text-sm leading-5 font-medium focus:z-10 focus:outline-none focus:border-blue-300 dark:focus:border-blue-600 focus:shadow-outline-blue transition ease-in-out duration-150';\r\n  const activeClasses = 'border-blue-600 bg-blue-600 text-white';\r\n  const inactiveClasses =\r\n    'border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-900 text-gray-700 dark:text-gray-200 hover:text-gray-500 dark:hover:text-gray-100 active:bg-gray-100 active:text-gray-700';\r\n\r\n  return (\r\n    <span className=\"relative z-0 inline-flex shadow-sm rounded-md\">\r\n      {options.map((option, index) => (\r\n        <button\r\n          type=\"button\"\r\n          className={classNames(baseClasses, {\r\n            [leftButtonClasses]: index === 0,\r\n            [middleButtonClasses]: index !== 0 && index !== options.length - 1,\r\n            [rightButtonClasses]: index === options.length - 1,\r\n            [activeClasses]: option === value,\r\n            [inactiveClasses]: option !== value,\r\n          })}\r\n          disabled={disabled}\r\n          onClick={() => onChange(option)}\r\n          key={option}\r\n        >\r\n          {labelMap ? labelMap[option] : option}\r\n        </button>\r\n      ))}\r\n    </span>\r\n  );\r\n}\r\n","import * as React from 'react';\r\n\r\n/**\r\n * A textarea that allow tabbing for indentation\r\n */\r\nexport default function TabIndentableTextarea(props) {\r\n  const ref = React.useRef<HTMLTextAreaElement>();\r\n\r\n  React.useEffect(() => {\r\n    if (ref.current) {\r\n      // https://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\r\n      const handleKeydown = function (e) {\r\n        if (e.key == 'Tab') {\r\n          e.preventDefault();\r\n          const start = this.selectionStart;\r\n          const end = this.selectionEnd;\r\n\r\n          // set textarea value to: text before caret + tab + text after caret\r\n          this.value =\r\n            this.value.substring(0, start) + '\\t' + this.value.substring(end);\r\n\r\n          // put caret at right position again\r\n          this.selectionStart = this.selectionEnd = start + 1;\r\n        }\r\n      };\r\n      ref.current.addEventListener('keydown', handleKeydown);\r\n      return () =>\r\n        ref.current &&\r\n        ref.current.removeEventListener('keydown', handleKeydown);\r\n    }\r\n  }, [ref.current]);\r\n\r\n  return <textarea {...props} ref={ref} />;\r\n}\r\n","import type { CollectionReference } from 'firebase/firestore';\r\nimport {\r\n  collection,\r\n  getFirestore,\r\n  onSnapshot,\r\n  query,\r\n  where,\r\n} from 'firebase/firestore';\r\nimport * as React from 'react';\r\nimport { useContext } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport UserDataContext from '../context/UserDataContext/UserDataContext';\r\nimport { ProblemInfo } from '../models/problem';\r\nimport { UserSolutionForProblem } from '../models/userSolutionForProblem';\r\nimport { useFirebaseApp } from './useFirebase';\r\n\r\nexport default function useUserSolutionsForProblem(problem: ProblemInfo) {\r\n  const [solutions, setSolutions] = React.useState<UserSolutionForProblem[]>(\r\n    null\r\n  );\r\n  const [currentUserSolutions, setCurrentUserSolutions] = React.useState<\r\n    UserSolutionForProblem[]\r\n  >(null);\r\n  const { firebaseUser } = useContext(UserDataContext);\r\n\r\n  useFirebaseApp(\r\n    firebaseApp => {\r\n      const id = problem?.uniqueId;\r\n      if (id) {\r\n        setSolutions(null);\r\n        setCurrentUserSolutions(null);\r\n        const firestore = getFirestore(firebaseApp);\r\n        const unsubscribe1 = onSnapshot(\r\n          query(\r\n            collection(\r\n              firestore,\r\n              'userProblemSolutions'\r\n            ) as CollectionReference<UserSolutionForProblem>,\r\n            where('isPublic', '==', true),\r\n            where('problemID', '==', id)\r\n          ),\r\n          {\r\n            next: snap => {\r\n              setSolutions(\r\n                snap.docs.map(doc => ({ id: doc.id, ...doc.data() }))\r\n              );\r\n            },\r\n            error: error => {\r\n              toast.error(error.message);\r\n            },\r\n          }\r\n        );\r\n        const unsubscribe2 = firebaseUser\r\n          ? onSnapshot(\r\n              query(\r\n                collection(\r\n                  firestore,\r\n                  'userProblemSolutions'\r\n                ) as CollectionReference<UserSolutionForProblem>,\r\n                where('problemID', '==', id),\r\n                where('userID', '==', firebaseUser.uid)\r\n              ),\r\n              {\r\n                next: snap => {\r\n                  setCurrentUserSolutions(\r\n                    snap.docs.map(doc => ({ id: doc.id, ...doc.data() }))\r\n                  );\r\n                },\r\n                error: error => {\r\n                  toast.error(error.message);\r\n                },\r\n              }\r\n            )\r\n          : () => {};\r\n        return () => {\r\n          unsubscribe1();\r\n          unsubscribe2();\r\n        };\r\n      }\r\n    },\r\n    [problem?.uniqueId, firebaseUser?.uid]\r\n  );\r\n\r\n  return {\r\n    solutions,\r\n    currentUserSolutions,\r\n  };\r\n}\r\n","import {\r\n  addDoc,\r\n  arrayRemove,\r\n  arrayUnion,\r\n  collection,\r\n  deleteDoc,\r\n  doc,\r\n  getFirestore,\r\n  Timestamp,\r\n  updateDoc,\r\n} from 'firebase/firestore';\r\nimport { useContext } from 'react';\r\nimport UserDataContext from '../context/UserDataContext/UserDataContext';\r\nimport { UserSolutionForProblem } from '../models/userSolutionForProblem';\r\nimport { useFirebaseApp } from './useFirebase';\r\n\r\nexport default function useUserProblemSolutionActions() {\r\n  const firebaseApp = useFirebaseApp();\r\n  const { firebaseUser } = useContext(UserDataContext);\r\n\r\n  return {\r\n    submitSolution: async (\r\n      solution: Omit<\r\n        UserSolutionForProblem,\r\n        'userID' | 'userName' | 'id' | 'upvotes' | 'timestamp'\r\n      >\r\n    ) => {\r\n      await addDoc(\r\n        collection(getFirestore(firebaseApp), 'userProblemSolutions'),\r\n        {\r\n          ...solution,\r\n          userID: firebaseUser.uid,\r\n          userName: firebaseUser.displayName,\r\n          upvotes: [],\r\n          timestamp: Timestamp.now(),\r\n        }\r\n      );\r\n    },\r\n    deleteSolution: async (solutionID: string) => {\r\n      await deleteDoc(\r\n        doc(getFirestore(firebaseApp), 'userProblemSolutions', solutionID)\r\n      );\r\n    },\r\n    mutateSolution: async (\r\n      solutionID: string,\r\n      updates: Partial<UserSolutionForProblem>\r\n    ) => {\r\n      await updateDoc(\r\n        doc(getFirestore(firebaseApp), 'userProblemSolutions', solutionID),\r\n        updates\r\n      );\r\n    },\r\n    upvoteSolution: async (solutionID: string) => {\r\n      await updateDoc(\r\n        doc(getFirestore(firebaseApp), 'userProblemSolutions', solutionID),\r\n        {\r\n          upvotes: arrayUnion(firebaseUser.uid),\r\n        }\r\n      );\r\n    },\r\n    undoUpvoteSolution: async (solutionID: string) => {\r\n      await updateDoc(\r\n        doc(getFirestore(firebaseApp), 'userProblemSolutions', solutionID),\r\n        {\r\n          upvotes: arrayRemove(firebaseUser.uid),\r\n        }\r\n      );\r\n    },\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport { useContext } from 'react';\r\nimport { SignInContext } from '../context/SignInContext';\r\nimport { LANGUAGE_LABELS } from '../context/UserDataContext/properties/userLang';\r\nimport UserDataContext from '../context/UserDataContext/UserDataContext';\r\nimport { useUserPermissions } from '../context/UserDataContext/UserPermissionsContext';\r\nimport useUserProblemSolutionActions from '../hooks/useUserProblemSolutionActions';\r\nimport useUserSolutionsForProblem from '../hooks/useUserSolutionsForProblem';\r\nimport { ProblemInfo } from '../models/problem';\r\nimport CodeBlock from './markdown/CodeBlock/CodeBlock';\r\n\r\nexport default function ProblemSolutions({\r\n  onClose,\r\n  showSubmitSolutionModal,\r\n  problem,\r\n}: {\r\n  onClose: () => void;\r\n  showSubmitSolutionModal: () => void;\r\n  problem: ProblemInfo;\r\n}): JSX.Element {\r\n  const { solutions, currentUserSolutions } =\r\n    useUserSolutionsForProblem(problem);\r\n  const { deleteSolution, upvoteSolution, undoUpvoteSolution, mutateSolution } =\r\n    useUserProblemSolutionActions();\r\n  const { firebaseUser } = useContext(UserDataContext);\r\n  const { signIn } = React.useContext(SignInContext);\r\n  const canModerate = useUserPermissions().canModerate;\r\n\r\n  const publicSolutions = solutions?.filter(\r\n    submission => submission.userID !== firebaseUser?.uid\r\n  );\r\n\r\n  publicSolutions?.sort((a, b) => b.upvotes.length - a.upvotes.length);\r\n\r\n  return (\r\n    <div className=\"w-full rounded-lg overflow-hidden max-w-5xl mx-auto\">\r\n      <div className=\"bg-white dark:bg-dark-surface px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n        <button className=\"mb-8 btn\" onClick={() => onClose()}>\r\n          <svg\r\n            className=\"-ml-1 mr-2 h-4 w-4\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 20 20\"\r\n            fill=\"currentColor\"\r\n          >\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\"\r\n              clipRule=\"evenodd\"\r\n            />\r\n          </svg>\r\n          Back\r\n        </button>\r\n\r\n        <h3\r\n          className=\"text-xl leading-6 font-medium text-gray-900 dark:text-gray-100\"\r\n          id=\"modal-headline\"\r\n        >\r\n          User Solutions for {problem?.name}\r\n        </h3>\r\n        <p className=\"mt-1 text-gray-500 dark:text-gray-400\">\r\n          Below are user-submitted solutions for {problem?.name}. If you notice\r\n          any of them are incorrect, email us at{' '}\r\n          <a\r\n            className=\"underline text-blue-600 dark:text-blue-400\"\r\n            href=\"mailto:usacoguide@gmail.com\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            usacoguide@gmail.com\r\n          </a>\r\n          .\r\n        </p>\r\n        <button\r\n          className=\"my-4 btn-primary\"\r\n          onClick={() => (firebaseUser ? showSubmitSolutionModal() : signIn())}\r\n        >\r\n          {firebaseUser ? 'Submit a Solution' : 'Sign in to submit a solution'}\r\n        </button>\r\n        <div className=\"h-8\" />\r\n        <h3 className=\"text-lg font-semibold pb-2 mb-4 border-b border-gray-200 dark:border-gray-800\">\r\n          My Solutions\r\n        </h3>\r\n        <div className=\"space-y-6\">\r\n          {currentUserSolutions?.map(submission => (\r\n            <div key={submission.id}>\r\n              <h4 className=\"mb-2 text-gray-700 dark:text-gray-100\">\r\n                {submission.language\r\n                  ? LANGUAGE_LABELS[submission.language]\r\n                  : 'Unknown Language'}{' '}\r\n                | Votes: {submission.upvotes.length}. (\r\n                {submission.isPublic ? 'Public' : 'Private'}){' '}\r\n                <button\r\n                  className=\"hover:underline text-blue-600 dark:text-blue-300\"\r\n                  onClick={() => {\r\n                    if (\r\n                      confirm(\r\n                        'Are you sure you want to delete this submission?'\r\n                      )\r\n                    ) {\r\n                      deleteSolution(submission.id);\r\n                    }\r\n                  }}\r\n                >\r\n                  (Delete)\r\n                </button>\r\n              </h4>\r\n              <div className=\"text-sm leading-normal\">\r\n                <CodeBlock\r\n                  className={\r\n                    submission.language !== 'unknown'\r\n                      ? `language-${submission.language}`\r\n                      : undefined\r\n                  }\r\n                >\r\n                  {submission.solutionCode}\r\n                </CodeBlock>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {currentUserSolutions?.length === 0 && <span>No solutions yet!</span>}\r\n        </div>\r\n        {['cpp', 'java', 'py'].map(lang => (\r\n          <React.Fragment key={lang}>\r\n            <div className=\"h-8\" />\r\n            <h4 className=\"text-lg font-semibold pb-2 mb-4 border-b border-gray-200 dark:border-gray-800\">\r\n              Public {LANGUAGE_LABELS[lang]} Solutions\r\n            </h4>\r\n            <div className=\"space-y-6\">\r\n              {publicSolutions\r\n                ?.filter(submission => submission.language == lang)\r\n                .map(submission => (\r\n                  <div key={submission.id}>\r\n                    <h4 className=\"mb-2 text-gray-700 dark:text-gray-100\">\r\n                      {submission.userName ?? 'Unknown User'} | Votes:{' '}\r\n                      {submission.upvotes.length}.{' '}\r\n                      {firebaseUser?.uid && (\r\n                        <button\r\n                          className=\"hover:underline text-blue-600 dark:text-blue-300 focus:outline-none\"\r\n                          onClick={() => {\r\n                            if (\r\n                              submission.upvotes.includes(firebaseUser?.uid)\r\n                            ) {\r\n                              undoUpvoteSolution(submission.id);\r\n                            } else {\r\n                              upvoteSolution(submission.id);\r\n                            }\r\n                          }}\r\n                        >\r\n                          {submission.upvotes.includes(firebaseUser?.uid)\r\n                            ? '(Undo Upvote)'\r\n                            : '(Upvote)'}\r\n                        </button>\r\n                      )}\r\n                      {canModerate && (\r\n                        <button\r\n                          className=\"hover:underline text-blue-600 dark:text-blue-300 mx-2\"\r\n                          onClick={() => {\r\n                            if (\r\n                              confirm(\r\n                                \"Are you sure you want to make this solution private? (Currently it's nontrivial to undo this...)\"\r\n                              )\r\n                            ) {\r\n                              mutateSolution(submission.id, {\r\n                                isPublic: false,\r\n                              });\r\n                            }\r\n                          }}\r\n                        >\r\n                          (Mark Private as Moderator)\r\n                        </button>\r\n                      )}\r\n                      {canModerate && (\r\n                        <button\r\n                          className=\"hover:underline text-blue-600 dark:text-blue-300 mx-2\"\r\n                          onClick={() => {\r\n                            if (\r\n                              confirm(\r\n                                'Are you sure you want to delete this solution?'\r\n                              )\r\n                            ) {\r\n                              deleteSolution(submission.id);\r\n                            }\r\n                          }}\r\n                        >\r\n                          (Delete as Moderator)\r\n                        </button>\r\n                      )}\r\n                    </h4>\r\n                    <div className=\"text-sm leading-normal\">\r\n                      <CodeBlock\r\n                        className={\r\n                          submission.language !== 'unknown'\r\n                            ? `language-${submission.language}`\r\n                            : undefined\r\n                        }\r\n                      >\r\n                        {submission.solutionCode}\r\n                      </CodeBlock>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              {publicSolutions?.filter(\r\n                submission => submission.language == lang\r\n              ).length === 0 && <span>No solutions yet!</span>}\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Transition } from '@headlessui/react';\r\nimport className from 'classnames';\r\nimport * as React from 'react';\r\nimport { LANGUAGE_LABELS } from '../context/UserDataContext/properties/userLang';\r\nimport useUserProblemSolutionActions from '../hooks/useUserProblemSolutionActions';\r\nimport { ProblemInfo } from '../models/problem';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport TabIndentableTextarea from './elements/TabIndentableTextarea';\r\n\r\nexport default function SubmitProblemSolutionModal({\r\n  isOpen,\r\n  onClose,\r\n  problem,\r\n}: {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  problem: ProblemInfo;\r\n}) {\r\n  const [solutionCode, setSolutionCode] = React.useState('');\r\n  const [codeLang, setCodeLang] = React.useState('');\r\n  const [isCodePublic, setIsCodePublic] = React.useState(true);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [showSuccess, setShowSuccess] = React.useState(false);\r\n  const { submitSolution: submitAction } = useUserProblemSolutionActions();\r\n\r\n  React.useEffect(() => {\r\n    if (isOpen) {\r\n      setSolutionCode('');\r\n      setIsCodePublic(true);\r\n      setCodeLang(null);\r\n      setLoading(false);\r\n      setShowSuccess(false);\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (solutionCode.length < 10) {\r\n      alert('Your solution seems too short!');\r\n      return;\r\n    }\r\n    if (!codeLang) {\r\n      alert('Please select a language.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    submitAction({\r\n      isPublic: isCodePublic,\r\n      solutionCode,\r\n      problemID: problem.uniqueId,\r\n      language: codeLang as any,\r\n    })\r\n      .then(() => setShowSuccess(true))\r\n      .catch(e => alert('Error: ' + e.message))\r\n      .finally(() => setLoading(false));\r\n  };\r\n\r\n  const solutionForm = (\r\n    <>\r\n      <div>\r\n        <label className=\"block font-medium text-gray-700 dark:text-gray-200\">\r\n          Solution Code\r\n        </label>\r\n        <div>\r\n          <p className=\"mb-3 text-sm text-gray-500 dark:text-gray-400\">\r\n            Please keep these in mind when submitting a solution.\r\n            <ol className=\"list-decimal ml-5\">\r\n              <li>\r\n                Especially if sharing your code, consider cleaning it up and{' '}\r\n                <b> adding solution notes</b> as a comment at the top.\r\n              </li>\r\n              <li>\r\n                Make sure not to leave out any headers/templates, and that your\r\n                code passes all test cases!\r\n              </li>\r\n            </ol>\r\n          </p>\r\n          <ButtonGroup\r\n            options={['cpp', 'java', 'py']}\r\n            labelMap={LANGUAGE_LABELS}\r\n            value={codeLang}\r\n            onChange={x => setCodeLang(x)}\r\n          />\r\n\r\n          <div className=\"rounded-md shadow-sm mt-3\">\r\n            <TabIndentableTextarea\r\n              rows={10}\r\n              className=\"textarea font-mono\"\r\n              value={solutionCode}\r\n              onChange={e => setSolutionCode(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex items-center justify-between\">\r\n        <span className=\"flex-grow flex flex-col\" id=\"toggleLabel\">\r\n          <span className=\"leading-5 font-medium text-gray-900 dark:text-gray-100\">\r\n            Share Solution Code\r\n          </span>\r\n          <span className=\"text-sm leading-normal text-gray-500 dark:text-gray-400\">\r\n            This will allow other users to view your solution code if they are\r\n            stuck.\r\n          </span>\r\n        </span>\r\n        <span\r\n          role=\"checkbox\"\r\n          tabIndex={0}\r\n          onClick={() => setIsCodePublic(!isCodePublic)}\r\n          className={className(\r\n            'relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:shadow-outline',\r\n            isCodePublic ? 'bg-blue-600' : 'bg-gray-200'\r\n          )}\r\n        >\r\n          <span\r\n            aria-hidden=\"true\"\r\n            className={className(\r\n              isCodePublic ? 'translate-x-5' : 'translate-x-0',\r\n              'relative inline-block h-5 w-5 rounded-full bg-white shadow transform transition ease-in-out duration-200'\r\n            )}\r\n          >\r\n            <span\r\n              className={className(\r\n                isCodePublic\r\n                  ? 'opacity-0 ease-out duration-100'\r\n                  : 'opacity-100 ease-in duration-200',\r\n                'absolute inset-0 h-full w-full flex items-center justify-center transition-opacity'\r\n              )}\r\n            >\r\n              <svg\r\n                className=\"h-3 w-3 text-gray-400\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 12 12\"\r\n              >\r\n                <path\r\n                  d=\"M4 8l2-2m0 0l2-2M6 6L4 4m2 2l2 2\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"2\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                />\r\n              </svg>\r\n            </span>\r\n            <span\r\n              className={className(\r\n                isCodePublic\r\n                  ? 'opacity-100 ease-in duration-200'\r\n                  : 'opacity-0 ease-out duration-100',\r\n                'absolute inset-0 h-full w-full flex items-center justify-center transition-opacity'\r\n              )}\r\n            >\r\n              <svg\r\n                className=\"h-3 w-3 text-indigo-600\"\r\n                fill=\"currentColor\"\r\n                viewBox=\"0 0 12 12\"\r\n              >\r\n                <path d=\"M3.707 5.293a1 1 0 00-1.414 1.414l1.414-1.414zM5 8l-.707.707a1 1 0 001.414 0L5 8zm4.707-3.293a1 1 0 00-1.414-1.414l1.414 1.414zm-7.414 2l2 2 1.414-1.414-2-2-1.414 1.414zm3.414 2l4-4-1.414-1.414-4 4 1.414 1.414z\" />\r\n              </svg>\r\n            </span>\r\n          </span>\r\n        </span>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const successMessage = (\r\n    <div className=\"rounded-md bg-green-50 dark:bg-green-800 p-4\">\r\n      <div className=\"flex\">\r\n        <div className=\"flex-shrink-0\">\r\n          <svg\r\n            className=\"h-5 w-5 text-green-400\"\r\n            viewBox=\"0 0 20 20\"\r\n            fill=\"currentColor\"\r\n          >\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\r\n              clipRule=\"evenodd\"\r\n            />\r\n          </svg>\r\n        </div>\r\n        <div className=\"ml-3\">\r\n          <h3 className=\"text-sm leading-5 font-medium text-green-800 dark:text-dark-high-emphasis\">\r\n            Solution Submitted!\r\n          </h3>\r\n          <div className=\"mt-2 text-sm leading-5 text-green-700 dark:text-dark-high-emphasis\">\r\n            <p>Thanks for helping to improve the USACO Guide.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Transition\r\n      show={isOpen}\r\n      className=\"fixed z-30 inset-0 h-full overflow-y-auto\"\r\n    >\r\n      <form\r\n        className=\"flex items-end justify-center min-h-full pt-4 px-4 pb-12 text-center sm:block\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Transition.Child\r\n          className=\"fixed inset-0 transition-opacity\"\r\n          enter=\"ease-out duration-300\"\r\n          enterFrom=\"opacity-0\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"ease-in duration-200\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <div className=\"absolute inset-0 bg-gray-500 dark:bg-gray-900 opacity-75\" />\r\n        </Transition.Child>\r\n        <span\r\n          className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          &#8203;\r\n        </span>\r\n\r\n        <Transition.Child\r\n          className=\"w-full inline-block align-bottom rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full\"\r\n          enter=\"ease-out duration-300\"\r\n          enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n          enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\r\n          leave=\"ease-in duration-200\"\r\n          leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\r\n          leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n          role=\"dialog\"\r\n          aria-modal=\"true\"\r\n          aria-labelledby=\"modal-headline\"\r\n        >\r\n          <div className=\"bg-white dark:bg-dark-surface px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n            <div className=\"hidden sm:block absolute top-0 right-0 pt-4 pr-4\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => onClose()}\r\n                className=\"bg-white dark:bg-dark-surface rounded-md text-gray-400 dark:text-gray-500 hover:text-gray-500 dark:hover:text-gray-400 focus:outline-none\"\r\n              >\r\n                <span className=\"sr-only\">Close</span>\r\n                {/* Heroicon name: x */}\r\n                <svg\r\n                  className=\"h-6 w-6\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\"\r\n                    d=\"M6 18L18 6M6 6l12 12\"\r\n                  />\r\n                </svg>\r\n              </button>\r\n            </div>\r\n\r\n            <h3\r\n              className=\"text-lg leading-6 font-medium text-gray-900 dark:text-gray-100\"\r\n              id=\"modal-headline\"\r\n            >\r\n              Submit Solution for {problem?.name}\r\n            </h3>\r\n            <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n              Help others out by submitting a solution for {problem?.name}!\r\n            </p>\r\n            <div className=\"mt-6 space-y-6\">\r\n              {showSuccess ? successMessage : solutionForm}\r\n            </div>\r\n          </div>\r\n          <div className=\"bg-gray-50 dark:bg-gray-900 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n            {showSuccess ? (\r\n              <span className=\"flex w-full rounded-md shadow-sm sm:ml-3 sm:w-auto\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => onClose()}\r\n                  className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-blue-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-blue-500 focus:outline-none focus:border-blue-700 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                >\r\n                  Done\r\n                </button>\r\n              </span>\r\n            ) : (\r\n              <>\r\n                <span className=\"flex w-full rounded-md shadow-sm sm:ml-3 sm:w-auto\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-blue-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-blue-500 focus:outline-none focus:border-blue-700 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                    disabled={loading}\r\n                  >\r\n                    {loading ? 'Submitting...' : 'Submit Solution'}\r\n                  </button>\r\n                </span>\r\n                <span className=\"mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:w-auto\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"inline-flex justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 px-4 py-2 bg-white dark:bg-gray-800 text-base leading-6 font-medium text-gray-700 dark:text-gray-200 shadow-sm hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                    onClick={() => onClose()}\r\n                    disabled={loading}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Transition.Child>\r\n      </form>\r\n    </Transition>\r\n  );\r\n}\r\n","import { navigate, PageProps } from 'gatsby';\r\nimport * as React from 'react';\r\nimport ProblemSolutions from '../components/ProblemSolutions';\r\nimport SubmitProblemSolutionModal from '../components/SubmitProblemSolutionModal';\r\nimport { ProblemInfo } from '../models/problem';\r\n\r\nexport default function ProblemSolutionsPage(\r\n  props: PageProps<null, null, { problem: ProblemInfo | null }>\r\n) {\r\n  const [isSubmitModalOpen, setIsSubmitModalOpen] = React.useState(false);\r\n\r\n  // Note: In the future, maybe this page should be generated by gatsby\r\n  // or we can import all the problems as a big JSON file or something.\r\n  const problem: ProblemInfo = props.location.state?.problem;\r\n\r\n  React.useEffect(() => {\r\n    if (!problem) navigate('/', { replace: true });\r\n  }, []);\r\n\r\n  if (!problem) {\r\n    return null;\r\n  }\r\n\r\n  const handleGoBack = () => {\r\n    navigate(-1);\r\n  };\r\n  const handleShowSubmitSolutionModal = () => {\r\n    setIsSubmitModalOpen(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ProblemSolutions\r\n        onClose={handleGoBack}\r\n        showSubmitSolutionModal={handleShowSubmitSolutionModal}\r\n        problem={problem}\r\n      />\r\n      <SubmitProblemSolutionModal\r\n        problem={problem}\r\n        isOpen={isSubmitModalOpen}\r\n        onClose={() => setIsSubmitModalOpen(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"names":["ButtonGroup","options","value","onChange","labelMap","disabled","className","map","option","index","type","classNames","length","onClick","key","TabIndentableTextarea","props","ref","React","current","handleKeydown","e","preventDefault","start","this","selectionStart","end","selectionEnd","substring","addEventListener","removeEventListener","useUserSolutionsForProblem","problem","solutions","setSolutions","currentUserSolutions","setCurrentUserSolutions","firebaseUser","useContext","UserDataContext","useFirebaseApp","firebaseApp","id","uniqueId","firestore","getFirestore","unsubscribe1","onSnapshot","query","collection","where","next","snap","docs","doc","data","error","toast","message","unsubscribe2","uid","useUserProblemSolutionActions","submitSolution","solution","addDoc","userID","userName","displayName","upvotes","timestamp","Timestamp","deleteSolution","solutionID","deleteDoc","mutateSolution","updates","updateDoc","upvoteSolution","arrayUnion","undoUpvoteSolution","arrayRemove","ProblemSolutions","onClose","showSubmitSolutionModal","signIn","SignInContext","canModerate","useUserPermissions","publicSolutions","filter","submission","sort","a","b","xmlns","viewBox","fill","fillRule","d","clipRule","name","href","target","rel","language","LANGUAGE_LABELS","isPublic","confirm","CodeBlock","undefined","solutionCode","lang","includes","SubmitProblemSolutionModal","isOpen","setSolutionCode","codeLang","setCodeLang","isCodePublic","setIsCodePublic","loading","setLoading","showSuccess","setShowSuccess","submitAction","solutionForm","x","rows","role","tabIndex","stroke","strokeWidth","strokeLinecap","strokeLinejoin","successMessage","show","onSubmit","event","alert","problemID","then","catch","finally","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","ProblemSolutionsPage","isSubmitModalOpen","setIsSubmitModalOpen","location","state","navigate","replace"],"sourceRoot":""}