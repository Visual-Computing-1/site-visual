{"version":3,"file":"239-2a6ff54ed55a6ec05637.js","mappings":"6MAAe,SAASA,IACtB,OAAO,IAAIC,OAAO,IAA0B,+C,yBCWxCC,EAAAA,SAAAA,GAKJ,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CAAEC,MAAO,MAFL,GALfH,EAAAA,EAAAA,GAAAA,EAAAA,GAQH,kBA0BA,OA1BA,EAEDI,kBAAA,SAAkBD,EAAOE,GAEvBC,KAAKC,SAAS,CAAEJ,MAAAA,KACjB,EAEDK,mBAAA,SAAmBC,GACbH,KAAKL,MAAMS,WAAaD,EAAUC,UACpCJ,KAAKC,SAAS,CAAEJ,MAAO,QAE1B,EAEDQ,OAAA,WACE,OAAIL,KAAKJ,MAAMC,MAGX,gDAEE,qBAAGS,UAAU,uCACVN,KAAKJ,MAAMC,MAAMU,aAKnBP,KAAKL,MAAMS,UACnB,EAlCGV,CAAsBc,EAAAA,WAqCb,SAASC,EAAT,GAME,IALfC,EAKc,EALdA,SACAC,EAIc,EAJdA,SAKA,GAAoCC,EAAAA,EAAAA,UAAS,MAAtCC,EAAP,KAAmBC,EAAnB,KACA,GAGIF,EAAAA,EAAAA,UAAS,IAFXG,EADF,KAEEC,EAFF,KAIA,GAA0BJ,EAAAA,EAAAA,UAAS,MAA5Bf,EAAP,KAAcoB,EAAd,KACMC,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GACJD,EAAAA,EAAAA,QAGG,MACCE,GACJF,EAAAA,EAAAA,QAGG,MAECG,EAA6B,WACjC,GAA0B,OAAtBJ,EAAUK,SACwB,OAAlCH,EAAsBG,QAA1B,CACA,IAAMC,EAAOH,EAAuBE,QACvB,OAATC,IACJJ,EAAsBG,QAAUC,EAChCH,EAAuBE,QAAU,KACjCL,EAAUK,QAAQE,YAAYD,MAsChC,OAnCAhB,EAAAA,WAAgB,WACd,IAAMkB,EAAS,IAAIjC,EAuBnB,OAtBAiC,EAAOC,UAAY,YAAe,IAAZH,EAAW,EAAXA,KACpBJ,EAAsBG,QAAU,KAChCK,EAAAA,yBAAiC,WAC3BJ,EAAKK,gBACPf,EACE,IAAIgB,SAASN,EAAKK,eAAlB,CAAkC,CAChCE,SAAAA,EAAAA,SACAC,IAAAA,EAAAA,IACAC,KAAAA,EAAAA,OACCC,QAAQ,CAAEC,WAAAA,EAAAA,KAEfnB,EAAqCQ,EAAKY,cAC1CnB,EAAS,QAETA,EAASO,EAAK3B,OACdiB,EAAc,UAGlBQ,KAEFJ,EAAUK,QAAUG,EACpBJ,IACO,kBAAMI,EAAOW,eACnB,KAEHC,EAAAA,EAAAA,YAAU,WACRjB,EAAuBE,QAAU,CAC/Bb,SAAUA,MAAAA,EAAAA,EAAY,GACtBC,SAAAA,GAEFW,MACC,CAACZ,EAAUC,IAEVd,GACF0C,QAAQ1C,MAAMA,GAEZ,gDAEE,qBAAGS,UAAU,yDACVT,EAAM2C,SAAW3C,EAAMU,YAE1B,qBAAGD,UAAU,yDAAb,qDAQJ,gBAACZ,EAAD,KACE,gBAAC,KAAD,CAA8B+C,MAAO1B,GAClCF","sources":["webpack://usaco-guide/./src/components/DynamicMarkdownRenderer/mdx-renderer.js","webpack://usaco-guide/./src/components/DynamicMarkdownRenderer/DynamicMarkdownRenderer.tsx"],"sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"mdx-renderer-5735dffeefc852ba0772.worker.js\");\n}\n","import * as React from 'react';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// eslint-disable-next-line\r\n// @ts-ignore\r\nimport { Fragment, jsx, jsxs } from 'react/jsx-runtime';\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nimport Worker from 'worker-loader!./mdx-renderer.js';\r\nimport { MarkdownProblemListsProvider } from '../../context/MarkdownProblemListsContext';\r\nimport { components } from '../markdown/MDXComponents';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  state: {\r\n    error: null | any;\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // Display fallback UI\r\n    this.setState({ error });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.children !== prevProps.children) {\r\n      this.setState({ error: null });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      // You can render any custom fallback UI\r\n      return (\r\n        <div>\r\n          An error occurred:\r\n          <p className=\"mt-2 text-red-700 font-mono text-sm\">\r\n            {this.state.error.toString()}\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default function DynamicMarkdownRenderer({\r\n  markdown,\r\n  problems,\r\n}: {\r\n  markdown: string;\r\n  problems: string;\r\n}): JSX.Element {\r\n  const [mdxContent, setMdxContent] = useState(null);\r\n  const [\r\n    markdownProblemListsProviderValue,\r\n    setMarkdownProblemListsProviderValue,\r\n  ] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const workerRef = useRef(null);\r\n  const currentlyCompilingRef =\r\n    useRef<{\r\n      markdown: string;\r\n      problems: string;\r\n    }>(null);\r\n  const waitingToBeCompiledRef =\r\n    useRef<{\r\n      markdown: string;\r\n      problems: string;\r\n    }>(null);\r\n\r\n  const requestMarkdownCompilation = () => {\r\n    if (workerRef.current === null) return;\r\n    if (currentlyCompilingRef.current !== null) return;\r\n    const data = waitingToBeCompiledRef.current;\r\n    if (data === null) return;\r\n    currentlyCompilingRef.current = data;\r\n    waitingToBeCompiledRef.current = null;\r\n    workerRef.current.postMessage(data);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const worker = new Worker();\r\n    worker.onmessage = ({ data }) => {\r\n      currentlyCompilingRef.current = null;\r\n      ReactDOM.unstable_batchedUpdates(() => {\r\n        if (data.compiledResult) {\r\n          setMdxContent(\r\n            new Function(data.compiledResult)({\r\n              Fragment,\r\n              jsx,\r\n              jsxs,\r\n            }).default({ components })\r\n          );\r\n          setMarkdownProblemListsProviderValue(data.problemsList);\r\n          setError(null);\r\n        } else {\r\n          setError(data.error);\r\n          setMdxContent(null);\r\n        }\r\n      });\r\n      requestMarkdownCompilation();\r\n    };\r\n    workerRef.current = worker;\r\n    requestMarkdownCompilation();\r\n    return () => worker.terminate();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    waitingToBeCompiledRef.current = {\r\n      markdown: markdown ?? '',\r\n      problems,\r\n    };\r\n    requestMarkdownCompilation();\r\n  }, [markdown, problems]);\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    return (\r\n      <div>\r\n        An error occurred:\r\n        <p className=\"mt-2 text-red-700 dark:text-red-400 font-mono text-sm\">\r\n          {error.message || error.toString()}\r\n        </p>\r\n        <p className=\"mt-2 text-red-700 dark:text-red-400 font-mono text-sm\">\r\n          This error has also been logged to the console.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <MarkdownProblemListsProvider value={markdownProblemListsProviderValue}>\r\n        {mdxContent}\r\n      </MarkdownProblemListsProvider>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n"],"names":["Worker_fn","Worker","ErrorBoundary","props","state","error","componentDidCatch","info","this","setState","componentDidUpdate","prevProps","children","render","className","toString","React","DynamicMarkdownRenderer","markdown","problems","useState","mdxContent","setMdxContent","markdownProblemListsProviderValue","setMarkdownProblemListsProviderValue","setError","workerRef","useRef","currentlyCompilingRef","waitingToBeCompiledRef","requestMarkdownCompilation","current","data","postMessage","worker","onmessage","ReactDOM","compiledResult","Function","Fragment","jsx","jsxs","default","components","problemsList","terminate","useEffect","console","message","value"],"sourceRoot":""}