{"version":3,"file":"99-b8747f0b9ad17ac14182.js","mappings":"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","sources":["webpack://usaco-guide/./node_modules/react-instantsearch-core/dist/es/connectors/connectAutoComplete.js","webpack://usaco-guide/./node_modules/react-instantsearch-dom/dist/es/components/Snippet.js","webpack://usaco-guide/./node_modules/react-instantsearch-dom/dist/es/widgets/Snippet.js","webpack://usaco-guide/./node_modules/react-instantsearch-core/dist/es/connectors/connectConfigure.js","webpack://usaco-guide/./node_modules/react-instantsearch-core/dist/es/widgets/Configure.js","webpack://usaco-guide/./src/components/TopNavigationBar/SearchModalInterface.tsx"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from '../core/indexUtils';\nimport { addQueryID, addAbsolutePositions } from '../core/utils';\n\nvar getId = function getId() {\n  return 'query';\n};\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId();\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, '');\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return '';\n}\n\nfunction getHits(searchResults) {\n  if (searchResults.results) {\n    if (searchResults.results.hits && Array.isArray(searchResults.results.hits)) {\n      return addAbsolutePositions(addQueryID(searchResults.results.hits, searchResults.results.queryID), searchResults.results.hitsPerPage, searchResults.results.page);\n    } else {\n      return Object.keys(searchResults.results).reduce(function (hits, index) {\n        return [].concat(_toConsumableArray(hits), [{\n          index: index,\n          hits: addAbsolutePositions(addQueryID(searchResults.results[index].hits, searchResults.results[index].queryID), searchResults.results[index].hitsPerPage, searchResults.results[index].page)\n        }]);\n      }, []);\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n\n  var nextValue = _defineProperty({}, id, nextRefinement);\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n/**\n * connectAutoComplete connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n * @name connectAutoComplete\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {function} refine - a function to change the query\n * @providedPropType {string} currentRefinement - the query to search for\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaAutoComplete',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      hits: getHits(searchResults),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      })\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n\n  /**\n   * AutoComplete needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  }\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { createClassNames } from '../core/utils';\nimport Highlighter from './Highlighter';\nvar cx = createClassNames('Snippet');\n\nvar Snippet = function Snippet(props) {\n  return /*#__PURE__*/React.createElement(Highlighter, _extends({}, props, {\n    highlightProperty: \"_snippetResult\",\n    cx: cx\n  }));\n};\n\nexport default Snippet;","import { connectHighlight } from 'react-instantsearch-core';\nimport Snippet from '../components/Snippet';\n/**\n * Renders any attribute from an hit into its highlighted snippet form when relevant.\n *\n * Read more about it in the [Highlighting results](guide/Highlighting_results.html) guide.\n * @name Snippet\n * @kind widget\n * @requirements To use this widget, the attribute name passed to the `attribute` prop must be\n * present in \"Attributes to snippet\" on the Algolia dashboard or configured as `attributesToSnippet`\n * via a set settings call to the Algolia API.\n * @propType {string} attribute - location of the highlighted snippet attribute in the hit (the corresponding element can be either a string or an array of strings)\n * @propType {object} hit - hit object containing the highlighted snippet attribute\n * @propType {string} [tagName='em'] - tag to be used for highlighted parts of the attribute\n * @propType {string} [nonHighlightedTagName='span'] - tag to be used for the parts of the hit that are not highlighted\n * @propType {node} [separator=',<space>'] - symbol used to separate the elements of the array in case the attribute points to an array of strings.\n * @themeKey ais-Snippet - the root span of the widget\n * @themeKey ais-Snippet-highlighted - the highlighted text\n * @themeKey ais-Snippet-nonHighlighted - the normal text\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits, Snippet } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const Hit = ({ hit }) => (\n *   <div>\n *     <Snippet attribute=\"description\" hit={hit} />\n *   </div>\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <SearchBox defaultRefinement=\"adjustable\" />\n *     <Hits hitComponent={Hit} />\n *   </InstantSearch>\n * );\n */\n\nexport default connectHighlight(Snippet);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"contextValue\", \"indexContextValue\"],\n    _excluded2 = [\"children\", \"contextValue\", \"indexContextValue\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { omit } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport { refineValue, getIndexId, hasMultipleIndices } from '../core/indexUtils';\n\nfunction getId() {\n  return 'configure';\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigure',\n  getProvidedProps: function getProvidedProps() {\n    return {};\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props) {\n    var children = props.children,\n        contextValue = props.contextValue,\n        indexContextValue = props.indexContextValue,\n        items = _objectWithoutProperties(props, _excluded);\n\n    return searchParameters.setQueryParameters(items);\n  },\n  transitionState: function transitionState(props, prevSearchState, nextSearchState) {\n    var id = getId();\n\n    var children = props.children,\n        contextValue = props.contextValue,\n        indexContextValue = props.indexContextValue,\n        items = _objectWithoutProperties(props, _excluded2);\n\n    var propKeys = Object.keys(props);\n    var nonPresentKeys = this._props ? Object.keys(this._props).filter(function (prop) {\n      return propKeys.indexOf(prop) === -1;\n    }) : [];\n    this._props = props;\n\n    var nextValue = _defineProperty({}, id, _objectSpread(_objectSpread({}, omit(nextSearchState[id], nonPresentKeys)), items));\n\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    var id = getId();\n    var indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var subState = hasMultipleIndices({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }) && searchState.indices ? searchState.indices[indexId] : searchState;\n    var configureKeys = subState && subState[id] ? Object.keys(subState[id]) : [];\n    var configureState = configureKeys.reduce(function (acc, item) {\n      if (!props[item]) {\n        acc[item] = subState[id][item];\n      }\n\n      return acc;\n    }, {});\n\n    var nextValue = _defineProperty({}, id, configureState);\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  }\n});","import connectConfigure from '../connectors/connectConfigure';\n/**\n * Configure is a widget that lets you provide raw search parameters\n * to the Algolia API.\n *\n * Any of the props added to this widget will be forwarded to Algolia. For more information\n * on the different parameters that can be set, have a look at the\n * [reference](https://www.algolia.com/doc/api-client/javascript/search#search-parameters).\n *\n * This widget can be used either with react-dom and react-native. It will not render anything\n * on screen, only configure some parameters.\n *\n * Read more in the [Search parameters](guide/Search_parameters.html) guide.\n * @name Configure\n * @kind widget\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Configure, Hits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <Hits />\n *   </InstantSearch>\n * );\n */\n\nexport default connectConfigure(function Configure() {\n  return null;\n});","import { SearchIcon } from '@heroicons/react/solid';\r\nimport { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport {\r\n  Configure,\r\n  connectAutoComplete,\r\n  Highlight,\r\n  InstantSearch,\r\n  PoweredBy,\r\n  Snippet,\r\n} from 'react-instantsearch-dom';\r\nimport styled from 'styled-components';\r\nimport tw from 'twin.macro';\r\nimport { moduleIDToURLMap, SECTION_LABELS } from '../../../content/ordering';\r\nimport { searchClient } from '../../utils/algoliaSearchClient';\r\n\r\nconst SearchResultDescription = styled.p`\r\n  ${tw`leading-4`}\r\n\r\n  > p > .ais-Highlight > * {\r\n    ${tw`text-gray-700`}\r\n    ${tw`text-sm!`}\r\n  }\r\n\r\n  .dark & > p > .ais-Highlight > * {\r\n    ${tw`text-gray-300`}\r\n  }\r\n\r\n  > .ais-Snippet > * {\r\n    ${tw`text-gray-400`}\r\n    ${tw`text-sm!`}\r\n  }\r\n`;\r\n\r\nconst SearchResultsContainer = styled.div`\r\n  .dark & .ais-PoweredBy {\r\n    ${tw`text-dark-high-emphasis!`}\r\n  }\r\n`;\r\n\r\nconst indexName =\r\n  process.env.NODE_ENV === 'production' ? 'prod_modules' : 'dev_modules';\r\n\r\nconst ModuleSearch = ({ hits, currentRefinement, refine }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"flex items-center p-2\">\r\n        <input\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          className=\"focus:outline-none focus:ring-0 text-gray-700 dark:bg-dark-surface dark:text-gray-200 dark:placeholder-gray-400 border-0 flex-1\"\r\n          value={currentRefinement}\r\n          onChange={e => refine(e.target.value)}\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n        />\r\n        <span className=\"p-2\">\r\n          <SearchIcon className=\"h-5 w-5 text-gray-400 dark:text-gray-500\" />\r\n        </span>\r\n      </div>\r\n      {currentRefinement !== '' && (\r\n        <div>\r\n          <SearchResultsContainer>\r\n            <div className=\"max-h-[20rem] sm:max-h-[40rem] overflow-y-auto border-t divide-y divide-gray-200 border-gray-200 dark:divide-gray-700 dark:border-gray-700\">\r\n              {hits.map(hit => (\r\n                <Link\r\n                  to={moduleIDToURLMap[hit.id]}\r\n                  className=\"block hover:bg-blue-100 dark:hover:bg-gray-700 py-3 px-5 transition\"\r\n                  key={hit.id}\r\n                >\r\n                  <h3 className=\"text-gray-600 dark:text-gray-200 font-medium\">\r\n                    <Highlight hit={hit} attribute=\"title\" /> -{' '}\r\n                    {SECTION_LABELS[hit.division]}\r\n                  </h3>\r\n                  <SearchResultDescription>\r\n                    <p className=\"mb-1\">\r\n                      <Highlight hit={hit} attribute=\"description\" />\r\n                    </p>\r\n                    <Snippet hit={hit} attribute=\"content\" />\r\n                  </SearchResultDescription>\r\n                </Link>\r\n              ))}\r\n            </div>\r\n            <div className=\"px-5 py-3 border-t border-gray-200 dark:border-gray-700\">\r\n              <PoweredBy theme=\"dark\" />\r\n            </div>\r\n          </SearchResultsContainer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ConnectedModuleSearch = connectAutoComplete(ModuleSearch);\r\n\r\nconst SearchModalInterface: React.FC = () => {\r\n  return (\r\n    <InstantSearch indexName={indexName} searchClient={searchClient}>\r\n      <Configure hitsPerPage={10} attributesToSnippet={['content:30']} />\r\n      <ConnectedModuleSearch />\r\n    </InstantSearch>\r\n  );\r\n};\r\n\r\nexport default SearchModalInterface;\r\n"],"names":["getCurrentRefinement","props","searchState","context","currentRefinement","getHits","searchResults","results","hits","Array","isArray","queryID","hitsPerPage","page","Object","keys","reduce","index","concat","displayName","getProvidedProps","ais","contextValue","multiIndexContext","indexContextValue","refine","nextRefinement","nextValue","_refine","cleanUp","_cleanUp","getSearchParameters","searchParameters","setQuery","cx","Highlighter","highlightProperty","connectHighlight","_excluded","_excluded2","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","createConnector","children","items","setQueryParameters","transitionState","prevSearchState","nextSearchState","id","propKeys","nonPresentKeys","this","_props","prop","indexOf","indexId","subState","indices","configureState","acc","item","SearchResultDescription","styled","SearchResultsContainer","ConnectedModuleSearch","connectAutoComplete","className","type","placeholder","value","onChange","e","autoComplete","autoFocus","map","hit","Link","to","moduleIDToURLMap","Highlight","attribute","SECTION_LABELS","division","PoweredBy","theme","InstantSearch","indexName","searchClient","Configure","attributesToSnippet"],"sourceRoot":""}