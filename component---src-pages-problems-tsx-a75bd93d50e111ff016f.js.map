{"version":3,"file":"component---src-pages-problems-tsx-a75bd93d50e111ff016f.js","mappings":"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","sources":["webpack://usaco-guide/./node_modules/react-instantsearch-core/dist/es/connectors/connectRefinementList.js","webpack://usaco-guide/./node_modules/react-instantsearch-core/dist/es/connectors/connectSearchBox.js","webpack://usaco-guide/./node_modules/react-instantsearch-core/dist/es/connectors/connectHits.js","webpack://usaco-guide/./src/components/ProblemsPage/ProblemHits.tsx","webpack://usaco-guide/./src/components/ProblemsPage/Starred.tsx","webpack://usaco-guide/./src/components/ProblemsPage/Section.tsx","webpack://usaco-guide/./src/components/ProblemsPage/Status.tsx","webpack://usaco-guide/./src/pages/problems.tsx","webpack://usaco-guide/./src/components/ProblemsPage/Module.tsx","webpack://usaco-guide/./src/components/ProblemsPage/Difficulty.tsx","webpack://usaco-guide/./src/components/ProblemsPage/SearchBox.tsx","webpack://usaco-guide/./src/components/ProblemsPage/RefinementList.tsx"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, getIndexId, refineValue, getCurrentRefinementValue, getResults } from '../core/indexUtils';\nvar namespace = 'refinementList';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, \"\".concat(namespace, \".\").concat(getId(props)), []);\n\n  if (typeof currentRefinement !== 'string') {\n    return currentRefinement;\n  }\n\n  if (currentRefinement) {\n    return [currentRefinement];\n  }\n\n  return [];\n}\n\nfunction getValue(name, props, searchState, context) {\n  var currentRefinement = getCurrentRefinement(props, searchState, context);\n  var isAnewValue = currentRefinement.indexOf(name) === -1;\n  var nextRefinement = isAnewValue ? currentRefinement.concat([name]) // cannot use .push(), it mutates\n  : currentRefinement.filter(function (selectedValue) {\n    return selectedValue !== name;\n  }); // cannot use .splice(), it mutates\n\n  return nextRefinement;\n}\n\nfunction getLimit(_ref) {\n  var showMore = _ref.showMore,\n      limit = _ref.limit,\n      showMoreLimit = _ref.showMoreLimit;\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId(props); // Setting the value to an empty string ensures that it is persisted in\n  // the URL as an empty value.\n  // This is necessary in the case where `defaultRefinement` contains one\n  // item and we try to deselect it. `nextSelected` would be an empty array,\n  // which would not be persisted to the URL.\n  // {foo: ['bar']} => \"foo[0]=bar\"\n  // {foo: []} => \"\"\n\n  var nextValue = _defineProperty({}, id, nextRefinement.length > 0 ? nextRefinement : '');\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, \"\".concat(namespace, \".\").concat(getId(props)));\n}\n/**\n * connectRefinementList connector provides the logic to build a widget that will\n * give the user the ability to choose multiple values for a specific facet.\n * @name connectRefinementList\n * @kind connector\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [searchable=false] - allow search inside values\n * @propType {string} [operator=or] - How to apply the refinements. Possible values: 'or' or 'and'.\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of displayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string[]} defaultRefinement - the values of the items selected by default. The searchState of this widget takes the form of a list of `string`s, which correspond to the values of all selected refinements. However, when there are no refinements selected, the value of the searchState is an empty string.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the RefinementList can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n * @providedPropType {boolean} canRefine - a boolean that says whether you can refine\n */\n\n\nvar sortBy = ['isRefined', 'count:desc', 'name:asc'];\nexport default createConnector({\n  displayName: 'AlgoliaRefinementList',\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    operator: PropTypes.oneOf(['and', 'or']),\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    searchable: PropTypes.bool,\n    transformItems: PropTypes.func,\n    facetOrdering: PropTypes.bool\n  },\n  defaultProps: {\n    operator: 'or',\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, metadata, searchForFacetValuesResults) {\n    var attribute = props.attribute,\n        searchable = props.searchable,\n        indexContextValue = props.indexContextValue,\n        facetOrdering = props.facetOrdering;\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var canRefine = Boolean(results) && Boolean(results.getFacetByName(attribute));\n    var isFromSearch = Boolean(searchForFacetValuesResults && searchForFacetValuesResults[attribute] && searchForFacetValuesResults.query !== ''); // Search For Facet Values is not available with derived helper (used for multi index search)\n\n    if (searchable && indexContextValue) {\n      throw new Error('react-instantsearch: searching in *List is not available when used inside a' + ' multi index context');\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue\n        }),\n        canRefine: canRefine,\n        isFromSearch: isFromSearch,\n        searchable: searchable\n      };\n    }\n\n    var items = isFromSearch ? searchForFacetValuesResults[attribute].map(function (v) {\n      return {\n        label: v.value,\n        value: getValue(v.value, props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue\n        }),\n        _highlightResult: {\n          label: {\n            value: v.highlighted\n          }\n        },\n        count: v.count,\n        isRefined: v.isRefined\n      };\n    }) : results.getFacetValues(attribute, {\n      sortBy: sortBy,\n      facetOrdering: facetOrdering\n    }).map(function (v) {\n      return {\n        label: v.name,\n        value: getValue(v.name, props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue\n        }),\n        count: v.count,\n        isRefined: v.isRefined\n      };\n    });\n    var transformedItems = props.transformItems ? props.transformItems(items) : items;\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      isFromSearch: isFromSearch,\n      searchable: searchable,\n      canRefine: transformedItems.length > 0\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  searchForFacetValues: function searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props)\n    };\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var attribute = props.attribute,\n        operator = props.operator;\n    var addKey = operator === 'and' ? 'addFacet' : 'addDisjunctiveFacet';\n    var addRefinementKey = \"\".concat(addKey, \"Refinement\");\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(searchParameters.maxValuesPerFacet || 0, getLimit(props))\n    });\n    searchParameters = searchParameters[addKey](attribute);\n    return getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }).reduce(function (res, val) {\n      return res[addRefinementKey](attribute, val);\n    }, searchParameters);\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var id = getId(props);\n    var context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    };\n    return {\n      id: id,\n      index: getIndexId(context),\n      items: getCurrentRefinement(props, searchState, context).length > 0 ? [{\n        attribute: props.attribute,\n        label: \"\".concat(props.attribute, \": \"),\n        currentRefinement: getCurrentRefinement(props, searchState, context),\n        value: function value(nextState) {\n          return _refine(props, nextState, [], context);\n        },\n        items: getCurrentRefinement(props, searchState, context).map(function (item) {\n          return {\n            label: \"\".concat(item),\n            value: function value(nextState) {\n              var nextSelectedItems = getCurrentRefinement(props, nextState, context).filter(function (other) {\n                return other !== item;\n              });\n              return _refine(props, searchState, nextSelectedItems, context);\n            }\n          };\n        })\n      }] : []\n    };\n  }\n});","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndexId } from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, '');\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return '';\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n\n  var nextValue = _defineProperty({}, id, nextRefinement);\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return {\n      id: id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(id, \": \").concat(currentRefinement),\n        value: function value(nextState) {\n          return _refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          });\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\nimport { addAbsolutePositions, addQueryID } from '../core/utils';\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (!results) {\n      return {\n        hits: []\n      };\n    }\n\n    var hitsWithPositions = addAbsolutePositions(results.hits, results.hitsPerPage, results.page);\n    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);\n    return {\n      hits: hitsWithPositionsAndQueryID\n    };\n  },\n\n  /**\n   * Hits needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters: function getSearchParameters(searchParameters) {\n    return searchParameters;\n  }\n});","import { Link } from 'gatsby';\r\nimport * as React from 'react';\r\nimport { Highlight } from 'react-instantsearch-dom';\r\nimport { moduleIDToSectionMap } from '../../../content/ordering';\r\nimport { AlgoliaProblemInfo, getProblemURL } from '../../models/problem';\r\n\r\nfunction ProblemHit({ hit }: { hit: AlgoliaProblemInfo }) {\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-900 shadow p-4 sm:p-6 rounded-lg\">\r\n      <span className=\"text-blue-700 dark:text-blue-400 font-medium text-sm\">\r\n        {hit.source}\r\n      </span>\r\n      <p className=\"text-xl leading-6 mt-1 mb-2\">\r\n        <a\r\n          href={hit.url}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          className=\"hover:underline\"\r\n        >\r\n          <Highlight hit={hit} attribute=\"name\" />\r\n        </a>\r\n        {hit.isStarred && (\r\n          <svg\r\n            className=\"h-6 w-4 text-blue-400 ml-2 pb-1 inline-block\"\r\n            fill=\"currentColor\"\r\n            viewBox=\"0 0 20 20\"\r\n          >\r\n            <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n          </svg>\r\n        )}\r\n      </p>\r\n      <div>\r\n        <a\r\n          href={hit.url}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          className=\"text-gray-500 dark:text-dark-med-emphasis text-sm\"\r\n        >\r\n          View Problem Statement\r\n          <svg\r\n            viewBox=\"0 0 20 20\"\r\n            fill=\"currentColor\"\r\n            className=\"h-4 w-4 inline ml-0.5 mb-1\"\r\n          >\r\n            <path d=\"M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z\" />\r\n            <path d=\"M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z\" />\r\n          </svg>\r\n        </a>\r\n      </div>\r\n\r\n      {hit.solution &&\r\n        (hit.solution.kind === 'internal' || hit.solution.kind === 'link') && (\r\n          <a\r\n            href={\r\n              hit.solution.kind === 'internal'\r\n                ? `${getProblemURL({\r\n                    ...hit,\r\n                    uniqueId: hit.objectID,\r\n                  })}/solution`\r\n                : hit.solution.url\r\n            }\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            className=\"text-gray-500 dark:text-dark-med-emphasis text-sm\"\r\n          >\r\n            View Solution\r\n            <svg\r\n              viewBox=\"0 0 20 20\"\r\n              fill=\"currentColor\"\r\n              className=\"h-4 w-4 inline ml-0.5 mb-1\"\r\n            >\r\n              <path d=\"M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z\" />\r\n              <path d=\"M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z\" />\r\n            </svg>\r\n          </a>\r\n        )}\r\n\r\n      <p className=\"text-sm text-gray-500 dark:text-dark-med-emphasis  mt-2\">\r\n        Appears In:\r\n      </p>\r\n      <ul className=\"list-disc ml-6\">\r\n        {hit.problemModules.map(({ id: moduleID, title: moduleLabel }) => (\r\n          <li key={moduleID}>\r\n            <Link\r\n              to={`/${moduleIDToSectionMap[moduleID]}/${moduleID}/#problem-${hit.objectID}`}\r\n              className=\"text-sm text-blue-600 dark:text-blue-400\"\r\n            >\r\n              {moduleLabel}\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div className=\"pt-4\">\r\n        {hit.tags?.map(tag => (\r\n          <span\r\n            className=\"mr-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium leading-4 bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-dark-high-emphasis\"\r\n            key={tag}\r\n          >\r\n            {tag}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function ProblemHits({ hits }) {\r\n  return (\r\n    <div className=\"grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\r\n      {hits.map(hit => (\r\n        <ProblemHit hit={hit} key={hit.objectID} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Select from 'react-select';\r\nimport { useDarkMode } from '../../context/DarkModeContext';\r\n\r\nconst labelToDisplay = {\r\n  true: 'Yes',\r\n  false: 'No',\r\n};\r\n\r\nexport default function Starred({ items, refine }) {\r\n  const darkMode = useDarkMode();\r\n\r\n  items.forEach(item => (item.refinement = item.label));\r\n  items.forEach(item => (item.label = labelToDisplay[item.label]));\r\n\r\n  const handleChange = e => {\r\n    e == null ? refine([]) : refine(e.refinement);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      onChange={handleChange}\r\n      isClearable\r\n      placeholder=\"Starred\"\r\n      isSearchable={false}\r\n      options={items.filter(item => item.isRefined == false)}\r\n      className={!darkMode ? 'text-black' : 'text-white'}\r\n      styles={\r\n        !darkMode\r\n          ? undefined\r\n          : {\r\n              control: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n                borderColor: '#374151',\r\n              }),\r\n              menuList: provided => ({\r\n                ...provided,\r\n                borderColor: '#374151',\r\n                borderWidth: '1px',\r\n                borderRadius: '6px',\r\n              }),\r\n              menu: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n              }),\r\n              multiValue: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#2563EB',\r\n              }),\r\n              indicatorSeparator: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#374151',\r\n              }),\r\n              indicatorsContainer: provided => ({\r\n                ...provided,\r\n                color: '#374151',\r\n              }),\r\n              singleValue: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              input: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              option: (provided, { isFocused, isSelected }) => ({\r\n                ...provided,\r\n                ...(isFocused\r\n                  ? {\r\n                      backgroundColor: '#4d94ff',\r\n                    }\r\n                  : isSelected\r\n                  ? { backgroundColor: '#0063e6' }\r\n                  : {}),\r\n              }),\r\n            }\r\n      }\r\n    />\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Select from 'react-select';\r\nimport SECTIONS from '../../../content/ordering';\r\nimport { useDarkMode } from '../../context/DarkModeContext';\r\n\r\nconst items = [\r\n  { label: 'Report', value: SECTIONS.report },\r\n  { label: 'General', value: SECTIONS.general },\r\n  { label: 'Bronze', value: SECTIONS.bronze },\r\n  { label: 'Silver', value: SECTIONS.silver },\r\n  { label: 'Gold', value: SECTIONS.gold },\r\n  { label: 'Platinum', value: SECTIONS.plat },\r\n  { label: 'Advanced', value: SECTIONS.adv },\r\n];\r\n\r\nexport default function Section({ refine }) {\r\n  const darkMode = useDarkMode();\r\n\r\n  const handleChange = e => {\r\n    const refinements = [];\r\n    for (const section of e) {\r\n      for (const chapter of section.value) {\r\n        for (const module of chapter.items) {\r\n          refinements.push(module);\r\n        }\r\n      }\r\n    }\r\n    refine(refinements);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      onChange={handleChange}\r\n      isClearable\r\n      placeholder=\"Section\"\r\n      isMulti\r\n      isSearchable={false}\r\n      options={items}\r\n      className={!darkMode ? 'text-black' : 'text-white'}\r\n      classNamePrefix=\"select\"\r\n      styles={\r\n        !darkMode\r\n          ? undefined\r\n          : {\r\n              control: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n                borderColor: '#374151',\r\n              }),\r\n              menuList: provided => ({\r\n                ...provided,\r\n                borderColor: '#374151',\r\n                borderWidth: '1px',\r\n                borderRadius: '6px',\r\n              }),\r\n              menu: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n              }),\r\n              multiValue: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#2563EB',\r\n              }),\r\n              indicatorSeparator: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#374151',\r\n              }),\r\n              indicatorsContainer: provided => ({\r\n                ...provided,\r\n                color: '#374151',\r\n              }),\r\n              singleValue: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              input: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              option: (provided, { isFocused, isSelected }) => ({\r\n                ...provided,\r\n                ...(isFocused\r\n                  ? {\r\n                      backgroundColor: '#4d94ff',\r\n                    }\r\n                  : isSelected\r\n                  ? { backgroundColor: '#0063e6' }\r\n                  : {}),\r\n              }),\r\n            }\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport Select from 'react-select';\r\nimport { useDarkMode } from '../../context/DarkModeContext';\r\nimport UserDataContext from '../../context/UserDataContext/UserDataContext';\r\n\r\nconst options = [\r\n  { label: 'Not Attempted', value: 'Not Attempted' },\r\n  { label: 'Solving', value: 'Solving' },\r\n  { label: 'Solved', value: 'Solved' },\r\n  { label: 'Reviewing', value: 'Reviewing' },\r\n  { label: 'Skipped', value: 'Skipped' },\r\n  { label: 'Ignored', value: 'Ignored' },\r\n];\r\n\r\nexport default function Difficulty({ refine }): JSX.Element {\r\n  const darkMode = useDarkMode();\r\n  const data = useContext(UserDataContext).userProgressOnProblems;\r\n\r\n  const handleChange = e => {\r\n    const refinements = [];\r\n    for (const status of e) {\r\n      for (const key of Object.keys(data)) {\r\n        if (data[key] == status.label) {\r\n          refinements.push(key);\r\n        }\r\n      }\r\n    }\r\n    refine(refinements);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      onChange={handleChange}\r\n      isClearable\r\n      placeholder=\"Status\"\r\n      isMulti\r\n      isSearchable={false}\r\n      options={options}\r\n      className={!darkMode ? 'text-black' : 'text-white'}\r\n      classNamePrefix=\"select\"\r\n      styles={\r\n        !darkMode\r\n          ? undefined\r\n          : {\r\n              control: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n                borderColor: '#374151',\r\n              }),\r\n              menuList: provided => ({\r\n                ...provided,\r\n                borderColor: '#374151',\r\n                borderWidth: '1px',\r\n                borderRadius: '6px',\r\n              }),\r\n              menu: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n              }),\r\n              multiValue: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#2563EB',\r\n              }),\r\n              indicatorSeparator: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#374151',\r\n              }),\r\n              indicatorsContainer: provided => ({\r\n                ...provided,\r\n                color: '#374151',\r\n              }),\r\n              singleValue: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              input: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              option: (provided, { isFocused, isSelected }) => ({\r\n                ...provided,\r\n                ...(isFocused\r\n                  ? {\r\n                      backgroundColor: '#4d94ff',\r\n                    }\r\n                  : isSelected\r\n                  ? { backgroundColor: '#0063e6' }\r\n                  : {}),\r\n              }),\r\n            }\r\n      }\r\n    />\r\n  );\r\n}\r\n","import { PageProps } from 'gatsby';\r\nimport * as React from 'react';\r\nimport {\r\n  connectHits,\r\n  connectRefinementList,\r\n  connectSearchBox,\r\n  InstantSearch,\r\n  PoweredBy,\r\n} from 'react-instantsearch-dom';\r\nimport Layout from '../components/layout';\r\nimport ProblemHits from '../components/ProblemsPage/ProblemHits';\r\nimport RefinementList from '../components/ProblemsPage/RefinementList';\r\nimport SearchBox from '../components/ProblemsPage/SearchBox';\r\nimport Difficulty from '../components/ProblemsPage/Difficulty';\r\nimport Starred from '../components/ProblemsPage/Starred';\r\nimport SEO from '../components/seo';\r\nimport TopNavigationBar from '../components/TopNavigationBar/TopNavigationBar';\r\nimport { searchClient } from '../utils/algoliaSearchClient';\r\nimport Section from '../components/ProblemsPage/Section';\r\nimport Status from '../components/ProblemsPage/Status';\r\nimport Modules from '../components/ProblemsPage/Module';\r\n\r\nconst indexName =\r\n  process.env.NODE_ENV === 'production' ? 'prod_problems' : 'dev_problems';\r\n\r\nconst CustomModuleSelection = connectRefinementList(Modules);\r\nconst CustomDifficultySelection = connectRefinementList(Difficulty);\r\nconst CustomStarredSelection = connectRefinementList(Starred);\r\nconst CustomSectionSelection = connectRefinementList(Section);\r\nconst CustomStatusSelection = connectRefinementList(Status);\r\nconst CustomSearchBox = connectSearchBox(SearchBox);\r\nconst CustomHits = connectHits(ProblemHits);\r\nconst CustomRefinementList = connectRefinementList(RefinementList);\r\n\r\nexport default function ProblemsPage(props: PageProps) {\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"All Problems\" />\r\n\r\n      <div className=\"min-h-screen bg-gray-100 dark:bg-dark-surface\">\r\n        <TopNavigationBar />\r\n\r\n        <InstantSearch searchClient={searchClient} indexName={indexName}>\r\n          <div className=\"py-16 bg-blue-600 dark:bg-blue-900 px-5\">\r\n            <div className=\"max-w-3xl mx-auto mb-6\">\r\n              <h1 className=\"text-center text-3xl sm:text-5xl font-bold text-white dark:text-dark-high-emphasis mb-6\">\r\n                Problems (Beta)\r\n              </h1>\r\n              <CustomSearchBox />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex mt-4 mb-1 mx-9 justify-center\">\r\n            <PoweredBy />\r\n          </div>\r\n          <div className=\"pt-3 px-9 pb-4 grid grid-cols-10\">\r\n            <div className=\"sm:col-span-4 md:col-span-3 lg:col-span-2 xl:col-span-2 col-span-5 overflow-y-auto\">\r\n              <CustomRefinementList attribute=\"tags\" limit={500} searchable />\r\n            </div>\r\n            <div className=\"py-0.5 px-1 sm:col-span-6 md:col-span-7 lg:col-span-8 xl:col-span-8 col-span-5 overflow-y-auto\">\r\n              <div className=\"flex mb-4 items-center grid grid-cols-2 lg:grid-cols-6 md:gird-cols-3 sm:gird-cols-3 gap-x-5 gap-y-3\">\r\n                <div className=\"col-span-2\">\r\n                  <CustomDifficultySelection\r\n                    attribute=\"difficulty\"\r\n                    limit={500}\r\n                    searchable\r\n                  />\r\n                </div>\r\n                <div className=\"col-span-2 md:col-span-3 lg:col-span-4 tw-forms-disable-all-descendants\">\r\n                  <CustomModuleSelection\r\n                    attribute=\"problemModules.title\"\r\n                    limit={500}\r\n                    searchable\r\n                  />\r\n                </div>\r\n                <div className=\"col-span-2 md:col-span-1 lg:col-span-2\">\r\n                  <CustomStarredSelection\r\n                    attribute=\"isStarred\"\r\n                    limit={500}\r\n                    searchable\r\n                  />\r\n                </div>\r\n                <div className=\"col-span-2\">\r\n                  <CustomSectionSelection\r\n                    attribute=\"problemModules.id\"\r\n                    limit={500}\r\n                    searchable\r\n                  />\r\n                </div>\r\n                <div className=\"col-span-2 md:col-span-2\">\r\n                  <CustomStatusSelection\r\n                    attribute=\"objectID\"\r\n                    limit={500}\r\n                    searchable\r\n                  />\r\n                </div>\r\n              </div>\r\n              <CustomHits />\r\n            </div>\r\n          </div>\r\n        </InstantSearch>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Select from 'react-select';\r\nimport { useDarkMode } from '../../context/DarkModeContext';\r\n\r\nexport default function Module({ items, refine }) {\r\n  const darkMode = useDarkMode();\r\n\r\n  const handleChange = e => {\r\n    let refinements = [];\r\n    for (const module of e) {\r\n      refinements.push(module.label);\r\n    }\r\n    refine(refinements);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      onChange={handleChange}\r\n      isClearable\r\n      placeholder=\"Modules\"\r\n      isMulti\r\n      isSearchable={true}\r\n      options={items.filter(item => item.isRefined == false)}\r\n      className={!darkMode ? 'text-black' : 'text-white'}\r\n      classNamePrefix=\"select\"\r\n      styles={\r\n        !darkMode\r\n          ? undefined\r\n          : {\r\n              control: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n                borderColor: '#374151',\r\n              }),\r\n              menuList: provided => ({\r\n                ...provided,\r\n                borderColor: '#374151',\r\n                borderWidth: '1px',\r\n                borderRadius: '6px',\r\n              }),\r\n              menu: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n              }),\r\n              multiValue: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#2563EB',\r\n              }),\r\n              indicatorSeparator: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#374151',\r\n              }),\r\n              indicatorsContainer: provided => ({\r\n                ...provided,\r\n                color: '#374151',\r\n              }),\r\n              singleValue: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              input: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              option: (provided, { isFocused, isSelected }) => ({\r\n                ...provided,\r\n                ...(isFocused\r\n                  ? {\r\n                      backgroundColor: '#4d94ff',\r\n                    }\r\n                  : isSelected\r\n                  ? { backgroundColor: '#0063e6' }\r\n                  : {}),\r\n              }),\r\n            }\r\n      }\r\n    />\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Select from 'react-select';\r\nimport { useDarkMode } from '../../context/DarkModeContext';\r\n\r\nexport default function Difficulty({ items, refine }) {\r\n  const darkMode = useDarkMode();\r\n\r\n  const handleChange = e => {\r\n    let refinements = [];\r\n    for (const difficulty of e) {\r\n      refinements.push(difficulty.label);\r\n    }\r\n    refine(refinements);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      onChange={handleChange}\r\n      isClearable\r\n      placeholder=\"Difficulty\"\r\n      isMulti\r\n      isSearchable={false}\r\n      options={items.filter(item => item.isRefined == false)}\r\n      className={!darkMode ? 'text-black' : 'text-white'}\r\n      classNamePrefix=\"select\"\r\n      styles={\r\n        !darkMode\r\n          ? undefined\r\n          : {\r\n              control: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n                borderColor: '#374151',\r\n              }),\r\n              menuList: provided => ({\r\n                ...provided,\r\n                borderColor: '#374151',\r\n                borderWidth: '1px',\r\n                borderRadius: '6px',\r\n              }),\r\n              menu: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#111827',\r\n              }),\r\n              multiValue: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#2563EB',\r\n              }),\r\n              indicatorSeparator: provided => ({\r\n                ...provided,\r\n                backgroundColor: '#374151',\r\n              }),\r\n              indicatorsContainer: provided => ({\r\n                ...provided,\r\n                color: '#374151',\r\n              }),\r\n              singleValue: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              input: provided => ({\r\n                ...provided,\r\n                color: 'rgba(255, 255, 255, 0.87)',\r\n              }),\r\n              option: (provided, { isFocused, isSelected }) => ({\r\n                ...provided,\r\n                ...(isFocused\r\n                  ? {\r\n                      backgroundColor: '#4d94ff',\r\n                    }\r\n                  : isSelected\r\n                  ? { backgroundColor: '#0063e6' }\r\n                  : {}),\r\n              }),\r\n            }\r\n      }\r\n    />\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport default function SearchBox({ currentRefinement, refine }): JSX.Element {\r\n  // https://stackoverflow.com/questions/53314857/how-to-focus-something-on-next-render-with-react-hooks\r\n  const inputRef = useRef(null);\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  }, []);\r\n  return (\r\n    <div className=\"relative\">\r\n      <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\r\n        <svg\r\n          className=\"h-5 w-5 text-gray-700 dark:text-blue-300\"\r\n          fill=\"currentColor\"\r\n          viewBox=\"0 0 20 20\"\r\n        >\r\n          <path\r\n            fillRule=\"evenodd\"\r\n            d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\r\n            clipRule=\"evenodd\"\r\n          />\r\n        </svg>\r\n      </div>\r\n      <input\r\n        id=\"search\"\r\n        className=\"block w-full pl-12 pr-3 py-3 rounded-md bg-blue-100 dark:bg-blue-800 placeholder-gray-900 dark:placeholder-blue-300 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue transition text-black dark:text-white\"\r\n        placeholder=\"Search\"\r\n        type=\"search\"\r\n        autoComplete=\"off\"\r\n        value={currentRefinement}\r\n        onChange={e => refine(e.target.value)}\r\n        ref={inputRef}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\n\r\nexport default function RefinementList({ items, refine, createURL }) {\r\n  return (\r\n    <div className=\"text-left ml-1\">\r\n      {items.map(item => (\r\n        <div key={item.label}>\r\n          <a\r\n            href={createURL(item.value)}\r\n            className={`${\r\n              item.isRefined\r\n                ? 'text-gray-700 dark:text-blue-500 font-medium'\r\n                : 'text-gray-500 dark:text-dark-high-emphasis'\r\n            }`}\r\n            onClick={e => {\r\n              e.preventDefault();\r\n              refine(item.value);\r\n            }}\r\n          >\r\n            {item.label} ({item.count})\r\n          </a>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["namespace","getId","props","attribute","getCurrentRefinement","searchState","context","currentRefinement","concat","getValue","name","indexOf","filter","selectedValue","getLimit","_ref","showMore","limit","showMoreLimit","_refine","nextRefinement","id","nextValue","length","sortBy","createConnector","displayName","propTypes","operator","defaultRefinement","searchable","transformItems","facetOrdering","defaultProps","getProvidedProps","searchResults","metadata","searchForFacetValuesResults","indexContextValue","results","ais","contextValue","multiIndexContext","canRefine","Boolean","getFacetByName","isFromSearch","query","Error","items","map","v","label","value","_highlightResult","highlighted","count","isRefined","getFacetValues","transformedItems","slice","refine","searchForFacetValues","facetName","maxFacetHits","cleanUp","_cleanUp","getSearchParameters","searchParameters","addKey","addRefinementKey","setQueryParameters","maxValuesPerFacet","Math","max","reduce","res","val","getMetadata","index","nextState","item","nextSelectedItems","other","isSearchStalled","setQuery","hits","hitsWithPositions","hitsPerPage","page","queryID","ProblemHit","hit","className","source","href","url","target","rel","Highlight","isStarred","fill","viewBox","d","solution","kind","getProblemURL","uniqueId","objectID","problemModules","moduleID","moduleLabel","title","key","Link","to","moduleIDToSectionMap","tags","tag","labelToDisplay","true","false","SECTIONS","options","CustomModuleSelection","connectRefinementList","darkMode","useDarkMode","onChange","e","refinements","module","push","isClearable","placeholder","isMulti","isSearchable","classNamePrefix","styles","control","provided","backgroundColor","borderColor","menuList","borderWidth","borderRadius","menu","multiValue","indicatorSeparator","indicatorsContainer","color","singleValue","input","option","isFocused","isSelected","undefined","CustomDifficultySelection","difficulty","CustomStarredSelection","forEach","refinement","CustomSectionSelection","CustomStatusSelection","data","useContext","UserDataContext","userProgressOnProblems","status","Object","keys","CustomSearchBox","connectSearchBox","inputRef","useRef","useEffect","current","focus","fillRule","clipRule","type","autoComplete","ref","CustomHits","connectHits","CustomRefinementList","createURL","onClick","preventDefault","ProblemsPage","TopNavigationBar","InstantSearch","searchClient","indexName","PoweredBy"],"sourceRoot":""}